/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, visit the pluginsâ€™ github repository.
*/

var d=Object.create;var o=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var p=s=>o(s,"__esModule",{value:!0});var P=(s,t)=>{p(s);for(var e in t)o(s,e,{get:t[e],enumerable:!0})},U=(s,t,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of f(t))!y.call(s,i)&&i!=="default"&&o(s,i,{get:()=>t[i],enumerable:!(e=g(t,i))||e.enumerable});return s},c=s=>U(p(o(s!=null?d(C(s)):{},"default",s&&s.__esModule&&"default"in s?{get:()=>s.default,enumerable:!0}:{value:s,enumerable:!0})),s);P(exports,{default:()=>u});var l=c(require("obsidian"));var a=c(require("obsidian")),r=class extends a.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this,{settings:e}=this.plugin;t.empty(),t.createEl("h2",{text:"Publish and GitHub URL plugin settings"}),new a.Setting(t).setName("Index note of your published vault").setDesc("Please use the relative path from the vault root. You do not need to include the .md extension.").addText(i=>{i.setPlaceholder("Index").setValue(e.homeNote).onChange(async n=>{n.trim().slice(-3)===".md"?e.homeNote=n.trim().slice(0,-3):e.homeNote=n.trim(),await this.plugin.saveSettings()})}),new a.Setting(t).setName("Publish base path").setDesc("Please enter the base path of your publish site.").addText(i=>{i.setPlaceholder("https://publish.obsidian.md/help/").setValue(e.publishPath).onChange(async n=>{n.trim().slice(-1)==="/"?e.publishPath=n.trim():e.publishPath=n.trim()+"/",await this.plugin.saveSettings()})}),new a.Setting(t).setName("Show in file menu").setDesc("Enable it to show the Copy Publish URL action in the file menu.").addToggle(i=>{i.setValue(e.enableContext),i.onChange(async n=>{e.enableContext=n,await this.plugin.saveSettings(),n?this.plugin.fileMenuEvent(!0):this.plugin.fileMenuEvent(!1)})}),new a.Setting(t).setName("Open current note in browser").setDesc("Enable it to get a command to open the current note on the Obsidian Publish site.").addToggle(i=>{i.setValue(this.plugin.settings.enableOpenUrl),i.onChange(async n=>{this.plugin.settings.enableOpenUrl=n,await this.plugin.saveSettings(),n?this.plugin.addCommand(this.plugin.returnOpenCommand()):this.app.commands.removeCommand(`${this.plugin.manifest.id}:open-publish-url`)})}),new a.Setting(t).setName("GitHub Commit History Command").setDesc("Enable it to add a command for opening the commit history of the current note on GitHub.").addToggle(i=>{i.setValue(e.enableGithub),i.onChange(async n=>{e.enableGithub=n,await this.plugin.saveSettings(),n?this.plugin.addCommand(this.plugin.returnGithubOpenCommand()):this.app.commands.removeCommand(`${this.plugin.manifest.id}:open-git-history`),this.display()})}),this.plugin.settings.enableGithub&&(new a.Setting(t).setName("GitHub repository URL").setDesc("Please enter the URL of your GitHub repository.").addText(i=>{i.setPlaceholder("https://github.com/obsidian-community/obsidian-hub").setValue(e.remoteUrl).onChange(async n=>{n.trim().slice(-1)==="/"?e.remoteUrl=n.trim():e.remoteUrl=n.trim()+"/",await this.plugin.saveSettings()})}),new a.Setting(t).setName("Branch name").setDesc("Please enter the branch name.").addText(i=>{i.setPlaceholder("main").setValue(e.branch).onChange(async n=>{e.branch=n.trim(),await this.plugin.saveSettings()})}))}};var w={homeNote:"",publishPath:"",enableContext:!1,enableOpenUrl:!0,enableGithub:!1,remoteUrl:"",branch:"main"};function m(s,t){let e=s.metadataCache.getFileCache(t),i=e==null?void 0:e.frontmatter;if(i!==void 0)try{return i.publish!==!1}catch(n){return!0}else return!0}var u=class extends l.Plugin{constructor(){super(...arguments);this.returnOpenCommand=()=>({id:"open-publish-url",name:"Open Publish URL in browser",checkCallback:this.giveCallback(this.openPublishUrl.bind(this))});this.returnCopyCommand=()=>({id:"copy-publish-url",name:"Copy Publish URL",checkCallback:this.giveCallback(this.copyPublishUrl.bind(this))});this.returnGithubOpenCommand=()=>({id:"open-git-history",name:"Open Commit History on GitHub",checkCallback:this.giveGithubCallback(this.openGithubHistory.bind(this))});this.fileMenuCallbackFunc=(t,e,i)=>{if(e instanceof l.TFile){if(m(this.app,e)){t.addSeparator();let h=e.path;t.addItem(b=>{b.setTitle("Copy Publish URL").setIcon("link").onClick(async()=>{await this.copyPublishUrl(h)})})}else return!1;t.addSeparator()}}}getPublishUrl(t){let e=this.settings.publishPath,i=t.slice(0,-3);return i===this.settings.homeNote&&i.includes("/")&&(i=i.split("/").last()),e=encodeURI(e+i),e=e.replace(/%20/g,"+"),e}async copyPublishUrl(t){let e=this.getPublishUrl(t);await navigator.clipboard.writeText(e),new l.Notice("Publish Url copied to your clipboard")}openPublishUrl(t){let e=this.getPublishUrl(t);window.open(e)}openGithubHistory(t){let i=this.settings.remoteUrl+`commits/${this.settings.branch}/${t}`,n=encodeURI(i);window.open(n)}giveCallback(t){return e=>{let i=this.app.workspace.getActiveFile();return i?(e||(async()=>{if(!m(this.app,i)){new l.Notice("This note contains the publish: false flag.");return}let h=i.path;await t(h)})(),!0):!1}}giveGithubCallback(t){return e=>{let i=this.app.workspace.getActiveFile();return i?(e||(async()=>{let n=i.path;await t(n)})(),!0):!1}}fileMenuEvent(t){t?this.registerEvent(this.app.workspace.on("file-menu",this.fileMenuCallbackFunc)):this.app.workspace.off("file-menu",this.fileMenuCallbackFunc)}async onload(){console.log("loading Copy Publish URL plugin"),await this.loadSettings(),this.addCommand(this.returnCopyCommand()),this.settings.enableOpenUrl&&this.addCommand(this.returnOpenCommand()),this.settings.enableContext&&this.fileMenuEvent(!0),this.settings.enableGithub&&this.addCommand(this.returnGithubOpenCommand()),this.addSettingTab(new r(this.app,this))}onunload(){console.log("unloading Copy Publish URL plugin")}async loadSettings(){this.settings=Object.assign({},w,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};
