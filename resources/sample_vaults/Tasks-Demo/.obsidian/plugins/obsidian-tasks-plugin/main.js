/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source visit the plugins github repository
*/

/*
License obsidian-tasks:
MIT License

Copyright (c) 2021 Martin Schenck

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/*
License rrule (included library):
rrule.js: Library for working with recurrence rules for calendar dates.
=======================================================================

Copyright 2010, Jakub Roztocil <jakub@roztocil.name> and Lars Schöning

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.

    3. Neither the name of The author nor the names of its contributors may
       be used to endorse or promote products derived from this software
       without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR AND CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



./rrule.js and ./test/tests.js is based on python-dateutil. LICENCE:

python-dateutil - Extensions to the standard Python datetime module.
====================================================================

Copyright (c) 2003-2011 - Gustavo Niemeyer <gustavo@niemeyer.net>
Copyright (c) 2012 - Tomi Pieviläinen <tomi.pievilainen@iki.fi>

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.
    * Neither the name of the copyright holder nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
License chrono-node (included library):
The MIT License

Copyright (c) 2014, Wanasit Tanakitrungruang

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module2) {
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter2;
    var __generator2;
    var __exportStar2;
    var __values2;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __spreadArray2;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __classPrivateFieldIn2;
    var __createBinding2;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends2 = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest2 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate2 = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar2 = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding2(o, m, p);
      };
      __createBinding2 = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values2 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread2 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read2(arguments[i]));
        return ar;
      };
      __spreadArrays2 = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray2 = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await2 = function(v) {
        return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator2 = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet2 = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn2 = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__spreadArray", __spreadArray2);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
    });
  }
});

// node_modules/chrono-node/dist/utils/pattern.js
var require_pattern = __commonJS({
  "node_modules/chrono-node/dist/utils/pattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.matchAnyPattern = exports.extractTerms = exports.repeatedTimeunitPattern = void 0;
    function repeatedTimeunitPattern(prefix, singleTimeunitPattern) {
      const singleTimeunitPatternNoCapture = singleTimeunitPattern.replace(/\((?!\?)/g, "(?:");
      return `${prefix}${singleTimeunitPatternNoCapture}\\s{0,5}(?:,?\\s{0,5}${singleTimeunitPatternNoCapture}){0,10}`;
    }
    exports.repeatedTimeunitPattern = repeatedTimeunitPattern;
    function extractTerms(dictionary) {
      let keys;
      if (dictionary instanceof Array) {
        keys = [...dictionary];
      } else if (dictionary instanceof Map) {
        keys = Array.from(dictionary.keys());
      } else {
        keys = Object.keys(dictionary);
      }
      return keys;
    }
    exports.extractTerms = extractTerms;
    function matchAnyPattern(dictionary) {
      const joinedTerms = extractTerms(dictionary).sort((a, b) => b.length - a.length).join("|").replace(/\./g, "\\.");
      return `(?:${joinedTerms})`;
    }
    exports.matchAnyPattern = matchAnyPattern;
  }
});

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "node_modules/dayjs/dayjs.min.js"(exports, module2) {
    !function(t, e) {
      "object" == typeof exports && "undefined" != typeof module2 ? module2.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).dayjs = e();
    }(exports, function() {
      "use strict";
      var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", f = "month", h = "quarter", c = "year", d = "date", $ = "Invalid Date", l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_") }, m = function(t2, e2, n2) {
        var r2 = String(t2);
        return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
      }, g = { s: m, z: function(t2) {
        var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
        return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
      }, m: function t2(e2, n2) {
        if (e2.date() < n2.date())
          return -t2(n2, e2);
        var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, f), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), f);
        return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
      }, a: function(t2) {
        return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
      }, p: function(t2) {
        return { M: f, y: c, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: h }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t2) {
        return void 0 === t2;
      } }, D = "en", v = {};
      v[D] = M;
      var p = function(t2) {
        return t2 instanceof _;
      }, S = function(t2, e2, n2) {
        var r2;
        if (!t2)
          return D;
        if ("string" == typeof t2)
          v[t2] && (r2 = t2), e2 && (v[t2] = e2, r2 = t2);
        else {
          var i2 = t2.name;
          v[i2] = t2, r2 = i2;
        }
        return !n2 && r2 && (D = r2), r2 || !n2 && D;
      }, w = function(t2, e2) {
        if (p(t2))
          return t2.clone();
        var n2 = "object" == typeof e2 ? e2 : {};
        return n2.date = t2, n2.args = arguments, new _(n2);
      }, O = g;
      O.l = S, O.i = p, O.w = function(t2, e2) {
        return w(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
      };
      var _ = function() {
        function M2(t2) {
          this.$L = S(t2.locale, null, true), this.parse(t2);
        }
        var m2 = M2.prototype;
        return m2.parse = function(t2) {
          this.$d = function(t3) {
            var e2 = t3.date, n2 = t3.utc;
            if (null === e2)
              return new Date(NaN);
            if (O.u(e2))
              return new Date();
            if (e2 instanceof Date)
              return new Date(e2);
            if ("string" == typeof e2 && !/Z$/i.test(e2)) {
              var r2 = e2.match(l);
              if (r2) {
                var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
                return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
              }
            }
            return new Date(e2);
          }(t2), this.$x = t2.x || {}, this.init();
        }, m2.init = function() {
          var t2 = this.$d;
          this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
        }, m2.$utils = function() {
          return O;
        }, m2.isValid = function() {
          return !(this.$d.toString() === $);
        }, m2.isSame = function(t2, e2) {
          var n2 = w(t2);
          return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
        }, m2.isAfter = function(t2, e2) {
          return w(t2) < this.startOf(e2);
        }, m2.isBefore = function(t2, e2) {
          return this.endOf(e2) < w(t2);
        }, m2.$g = function(t2, e2, n2) {
          return O.u(t2) ? this[e2] : this.set(n2, t2);
        }, m2.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m2.valueOf = function() {
          return this.$d.getTime();
        }, m2.startOf = function(t2, e2) {
          var n2 = this, r2 = !!O.u(e2) || e2, h2 = O.p(t2), $2 = function(t3, e3) {
            var i2 = O.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
            return r2 ? i2 : i2.endOf(a);
          }, l2 = function(t3, e3) {
            return O.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
          }, y2 = this.$W, M3 = this.$M, m3 = this.$D, g2 = "set" + (this.$u ? "UTC" : "");
          switch (h2) {
            case c:
              return r2 ? $2(1, 0) : $2(31, 11);
            case f:
              return r2 ? $2(1, M3) : $2(0, M3 + 1);
            case o:
              var D2 = this.$locale().weekStart || 0, v2 = (y2 < D2 ? y2 + 7 : y2) - D2;
              return $2(r2 ? m3 - v2 : m3 + (6 - v2), M3);
            case a:
            case d:
              return l2(g2 + "Hours", 0);
            case u:
              return l2(g2 + "Minutes", 1);
            case s:
              return l2(g2 + "Seconds", 2);
            case i:
              return l2(g2 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m2.endOf = function(t2) {
          return this.startOf(t2, false);
        }, m2.$set = function(t2, e2) {
          var n2, o2 = O.p(t2), h2 = "set" + (this.$u ? "UTC" : ""), $2 = (n2 = {}, n2[a] = h2 + "Date", n2[d] = h2 + "Date", n2[f] = h2 + "Month", n2[c] = h2 + "FullYear", n2[u] = h2 + "Hours", n2[s] = h2 + "Minutes", n2[i] = h2 + "Seconds", n2[r] = h2 + "Milliseconds", n2)[o2], l2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
          if (o2 === f || o2 === c) {
            var y2 = this.clone().set(d, 1);
            y2.$d[$2](l2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
          } else
            $2 && this.$d[$2](l2);
          return this.init(), this;
        }, m2.set = function(t2, e2) {
          return this.clone().$set(t2, e2);
        }, m2.get = function(t2) {
          return this[O.p(t2)]();
        }, m2.add = function(r2, h2) {
          var d2, $2 = this;
          r2 = Number(r2);
          var l2 = O.p(h2), y2 = function(t2) {
            var e2 = w($2);
            return O.w(e2.date(e2.date() + Math.round(t2 * r2)), $2);
          };
          if (l2 === f)
            return this.set(f, this.$M + r2);
          if (l2 === c)
            return this.set(c, this.$y + r2);
          if (l2 === a)
            return y2(1);
          if (l2 === o)
            return y2(7);
          var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[l2] || 1, m3 = this.$d.getTime() + r2 * M3;
          return O.w(m3, this);
        }, m2.subtract = function(t2, e2) {
          return this.add(-1 * t2, e2);
        }, m2.format = function(t2) {
          var e2 = this, n2 = this.$locale();
          if (!this.isValid())
            return n2.invalidDate || $;
          var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = O.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, f2 = n2.months, h2 = function(t3, n3, i3, s3) {
            return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].substr(0, s3);
          }, c2 = function(t3) {
            return O.s(s2 % 12 || 12, t3, "0");
          }, d2 = n2.meridiem || function(t3, e3, n3) {
            var r3 = t3 < 12 ? "AM" : "PM";
            return n3 ? r3.toLowerCase() : r3;
          }, l2 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a2 + 1, MM: O.s(a2 + 1, 2, "0"), MMM: h2(n2.monthsShort, a2, f2, 3), MMMM: h2(f2, a2), D: this.$D, DD: O.s(this.$D, 2, "0"), d: String(this.$W), dd: h2(n2.weekdaysMin, this.$W, o2, 2), ddd: h2(n2.weekdaysShort, this.$W, o2, 3), dddd: o2[this.$W], H: String(s2), HH: O.s(s2, 2, "0"), h: c2(1), hh: c2(2), a: d2(s2, u2, true), A: d2(s2, u2, false), m: String(u2), mm: O.s(u2, 2, "0"), s: String(this.$s), ss: O.s(this.$s, 2, "0"), SSS: O.s(this.$ms, 3, "0"), Z: i2 };
          return r2.replace(y, function(t3, e3) {
            return e3 || l2[t3] || i2.replace(":", "");
          });
        }, m2.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m2.diff = function(r2, d2, $2) {
          var l2, y2 = O.p(d2), M3 = w(r2), m3 = (M3.utcOffset() - this.utcOffset()) * e, g2 = this - M3, D2 = O.m(this, M3);
          return D2 = (l2 = {}, l2[c] = D2 / 12, l2[f] = D2, l2[h] = D2 / 3, l2[o] = (g2 - m3) / 6048e5, l2[a] = (g2 - m3) / 864e5, l2[u] = g2 / n, l2[s] = g2 / e, l2[i] = g2 / t, l2)[y2] || g2, $2 ? D2 : O.a(D2);
        }, m2.daysInMonth = function() {
          return this.endOf(f).$D;
        }, m2.$locale = function() {
          return v[this.$L];
        }, m2.locale = function(t2, e2) {
          if (!t2)
            return this.$L;
          var n2 = this.clone(), r2 = S(t2, e2, true);
          return r2 && (n2.$L = r2), n2;
        }, m2.clone = function() {
          return O.w(this.$d, this);
        }, m2.toDate = function() {
          return new Date(this.valueOf());
        }, m2.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m2.toISOString = function() {
          return this.$d.toISOString();
        }, m2.toString = function() {
          return this.$d.toUTCString();
        }, M2;
      }(), b = _.prototype;
      return w.prototype = b, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function(t2) {
        b[t2[1]] = function(e2) {
          return this.$g(e2, t2[0], t2[1]);
        };
      }), w.extend = function(t2, e2) {
        return t2.$i || (t2(e2, _, w), t2.$i = true), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function(t2) {
        return w(1e3 * t2);
      }, w.en = v[D], w.Ls = v, w.p = {}, w;
    });
  }
});

// node_modules/chrono-node/dist/calculation/years.js
var require_years = __commonJS({
  "node_modules/chrono-node/dist/calculation/years.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findYearClosestToRef = exports.findMostLikelyADYear = void 0;
    var dayjs_1 = __importDefault2(require_dayjs_min());
    function findMostLikelyADYear(yearNumber) {
      if (yearNumber < 100) {
        if (yearNumber > 50) {
          yearNumber = yearNumber + 1900;
        } else {
          yearNumber = yearNumber + 2e3;
        }
      }
      return yearNumber;
    }
    exports.findMostLikelyADYear = findMostLikelyADYear;
    function findYearClosestToRef(refDate, day, month) {
      const refMoment = dayjs_1.default(refDate);
      let dateMoment = refMoment;
      dateMoment = dateMoment.month(month - 1);
      dateMoment = dateMoment.date(day);
      dateMoment = dateMoment.year(refMoment.year());
      const nextYear = dateMoment.add(1, "y");
      const lastYear = dateMoment.add(-1, "y");
      if (Math.abs(nextYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {
        dateMoment = nextYear;
      } else if (Math.abs(lastYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {
        dateMoment = lastYear;
      }
      return dateMoment.year();
    }
    exports.findYearClosestToRef = findYearClosestToRef;
  }
});

// node_modules/chrono-node/dist/locales/en/constants.js
var require_constants = __commonJS({
  "node_modules/chrono-node/dist/locales/en/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseTimeUnits = exports.TIME_UNITS_PATTERN = exports.parseYear = exports.YEAR_PATTERN = exports.parseOrdinalNumberPattern = exports.ORDINAL_NUMBER_PATTERN = exports.parseNumberPattern = exports.NUMBER_PATTERN = exports.TIME_UNIT_DICTIONARY = exports.ORDINAL_WORD_DICTIONARY = exports.INTEGER_WORD_DICTIONARY = exports.MONTH_DICTIONARY = exports.FULL_MONTH_NAME_DICTIONARY = exports.WEEKDAY_DICTIONARY = void 0;
    var pattern_1 = require_pattern();
    var years_1 = require_years();
    exports.WEEKDAY_DICTIONARY = {
      sunday: 0,
      sun: 0,
      "sun.": 0,
      monday: 1,
      mon: 1,
      "mon.": 1,
      tuesday: 2,
      tue: 2,
      "tue.": 2,
      wednesday: 3,
      wed: 3,
      "wed.": 3,
      thursday: 4,
      thurs: 4,
      "thurs.": 4,
      thur: 4,
      "thur.": 4,
      thu: 4,
      "thu.": 4,
      friday: 5,
      fri: 5,
      "fri.": 5,
      saturday: 6,
      sat: 6,
      "sat.": 6
    };
    exports.FULL_MONTH_NAME_DICTIONARY = {
      january: 1,
      february: 2,
      march: 3,
      april: 4,
      may: 5,
      june: 6,
      july: 7,
      august: 8,
      september: 9,
      october: 10,
      november: 11,
      december: 12
    };
    exports.MONTH_DICTIONARY = Object.assign(Object.assign({}, exports.FULL_MONTH_NAME_DICTIONARY), { jan: 1, "jan.": 1, feb: 2, "feb.": 2, mar: 3, "mar.": 3, apr: 4, "apr.": 4, jun: 6, "jun.": 6, jul: 7, "jul.": 7, aug: 8, "aug.": 8, sep: 9, "sep.": 9, sept: 9, "sept.": 9, oct: 10, "oct.": 10, nov: 11, "nov.": 11, dec: 12, "dec.": 12 });
    exports.INTEGER_WORD_DICTIONARY = {
      one: 1,
      two: 2,
      three: 3,
      four: 4,
      five: 5,
      six: 6,
      seven: 7,
      eight: 8,
      nine: 9,
      ten: 10,
      eleven: 11,
      twelve: 12
    };
    exports.ORDINAL_WORD_DICTIONARY = {
      first: 1,
      second: 2,
      third: 3,
      fourth: 4,
      fifth: 5,
      sixth: 6,
      seventh: 7,
      eighth: 8,
      ninth: 9,
      tenth: 10,
      eleventh: 11,
      twelfth: 12,
      thirteenth: 13,
      fourteenth: 14,
      fifteenth: 15,
      sixteenth: 16,
      seventeenth: 17,
      eighteenth: 18,
      nineteenth: 19,
      twentieth: 20,
      "twenty first": 21,
      "twenty-first": 21,
      "twenty second": 22,
      "twenty-second": 22,
      "twenty third": 23,
      "twenty-third": 23,
      "twenty fourth": 24,
      "twenty-fourth": 24,
      "twenty fifth": 25,
      "twenty-fifth": 25,
      "twenty sixth": 26,
      "twenty-sixth": 26,
      "twenty seventh": 27,
      "twenty-seventh": 27,
      "twenty eighth": 28,
      "twenty-eighth": 28,
      "twenty ninth": 29,
      "twenty-ninth": 29,
      "thirtieth": 30,
      "thirty first": 31,
      "thirty-first": 31
    };
    exports.TIME_UNIT_DICTIONARY = {
      sec: "second",
      second: "second",
      seconds: "second",
      min: "minute",
      mins: "minute",
      minute: "minute",
      minutes: "minute",
      h: "hour",
      hr: "hour",
      hrs: "hour",
      hour: "hour",
      hours: "hour",
      day: "d",
      days: "d",
      week: "week",
      weeks: "week",
      month: "month",
      months: "month",
      qtr: "quarter",
      quarter: "quarter",
      quarters: "quarter",
      y: "year",
      yr: "year",
      year: "year",
      years: "year"
    };
    exports.NUMBER_PATTERN = `(?:${pattern_1.matchAnyPattern(exports.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|half(?:\\s{0,2}an?)?|an?\\b(?:\\s{0,2}few)?|few|several|a?\\s{0,2}couple\\s{0,2}(?:of)?)`;
    function parseNumberPattern(match) {
      const num = match.toLowerCase();
      if (exports.INTEGER_WORD_DICTIONARY[num] !== void 0) {
        return exports.INTEGER_WORD_DICTIONARY[num];
      } else if (num === "a" || num === "an") {
        return 1;
      } else if (num.match(/few/)) {
        return 3;
      } else if (num.match(/half/)) {
        return 0.5;
      } else if (num.match(/couple/)) {
        return 2;
      } else if (num.match(/several/)) {
        return 7;
      }
      return parseFloat(num);
    }
    exports.parseNumberPattern = parseNumberPattern;
    exports.ORDINAL_NUMBER_PATTERN = `(?:${pattern_1.matchAnyPattern(exports.ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:st|nd|rd|th)?)`;
    function parseOrdinalNumberPattern(match) {
      let num = match.toLowerCase();
      if (exports.ORDINAL_WORD_DICTIONARY[num] !== void 0) {
        return exports.ORDINAL_WORD_DICTIONARY[num];
      }
      num = num.replace(/(?:st|nd|rd|th)$/i, "");
      return parseInt(num);
    }
    exports.parseOrdinalNumberPattern = parseOrdinalNumberPattern;
    exports.YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\s{0,2}(?:BE|AD|BC|BCE|CE)|[1-2][0-9]{3}|[5-9][0-9])`;
    function parseYear(match) {
      if (/BE/i.test(match)) {
        match = match.replace(/BE/i, "");
        return parseInt(match) - 543;
      }
      if (/BCE?/i.test(match)) {
        match = match.replace(/BCE?/i, "");
        return -parseInt(match);
      }
      if (/(AD|CE)/i.test(match)) {
        match = match.replace(/(AD|CE)/i, "");
        return parseInt(match);
      }
      const rawYearNumber = parseInt(match);
      return years_1.findMostLikelyADYear(rawYearNumber);
    }
    exports.parseYear = parseYear;
    var SINGLE_TIME_UNIT_PATTERN = `(${exports.NUMBER_PATTERN})\\s{0,3}(${pattern_1.matchAnyPattern(exports.TIME_UNIT_DICTIONARY)})`;
    var SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
    exports.TIME_UNITS_PATTERN = pattern_1.repeatedTimeunitPattern(`(?:(?:about|around)\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN);
    function parseTimeUnits(timeunitText) {
      const fragments = {};
      let remainingText = timeunitText;
      let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
      while (match) {
        collectDateTimeFragment(fragments, match);
        remainingText = remainingText.substring(match[0].length).trim();
        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
      }
      return fragments;
    }
    exports.parseTimeUnits = parseTimeUnits;
    function collectDateTimeFragment(fragments, match) {
      const num = parseNumberPattern(match[1]);
      const unit = exports.TIME_UNIT_DICTIONARY[match[2].toLowerCase()];
      fragments[unit] = num;
    }
  }
});

// node_modules/dayjs/plugin/quarterOfYear.js
var require_quarterOfYear = __commonJS({
  "node_modules/dayjs/plugin/quarterOfYear.js"(exports, module2) {
    !function(t, n) {
      "object" == typeof exports && "undefined" != typeof module2 ? module2.exports = n() : "function" == typeof define && define.amd ? define(n) : (t = "undefined" != typeof globalThis ? globalThis : t || self).dayjs_plugin_quarterOfYear = n();
    }(exports, function() {
      "use strict";
      var t = "month", n = "quarter";
      return function(e, i) {
        var r = i.prototype;
        r.quarter = function(t2) {
          return this.$utils().u(t2) ? Math.ceil((this.month() + 1) / 3) : this.month(this.month() % 3 + 3 * (t2 - 1));
        };
        var s = r.add;
        r.add = function(e2, i2) {
          return e2 = Number(e2), this.$utils().p(i2) === n ? this.add(3 * e2, t) : s.bind(this)(e2, i2);
        };
        var u = r.startOf;
        r.startOf = function(e2, i2) {
          var r2 = this.$utils(), s2 = !!r2.u(i2) || i2;
          if (r2.p(e2) === n) {
            var o = this.quarter() - 1;
            return s2 ? this.month(3 * o).startOf(t).startOf("day") : this.month(3 * o + 2).endOf(t).endOf("day");
          }
          return u.bind(this)(e2, i2);
        };
      };
    });
  }
});

// node_modules/chrono-node/dist/utils/dayjs.js
var require_dayjs = __commonJS({
  "node_modules/chrono-node/dist/utils/dayjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.implySimilarTime = exports.assignSimilarTime = exports.assignSimilarDate = exports.assignTheNextDay = void 0;
    var index_1 = require_dist();
    function assignTheNextDay(component, targetDayJs) {
      targetDayJs = targetDayJs.add(1, "day");
      assignSimilarDate(component, targetDayJs);
      implySimilarTime(component, targetDayJs);
    }
    exports.assignTheNextDay = assignTheNextDay;
    function assignSimilarDate(component, targetDayJs) {
      component.assign("day", targetDayJs.date());
      component.assign("month", targetDayJs.month() + 1);
      component.assign("year", targetDayJs.year());
    }
    exports.assignSimilarDate = assignSimilarDate;
    function assignSimilarTime(component, targetDayJs) {
      component.assign("hour", targetDayJs.hour());
      component.assign("minute", targetDayJs.minute());
      component.assign("second", targetDayJs.second());
      component.assign("millisecond", targetDayJs.millisecond());
      if (component.get("hour") < 12) {
        component.assign("meridiem", index_1.Meridiem.AM);
      } else {
        component.assign("meridiem", index_1.Meridiem.PM);
      }
    }
    exports.assignSimilarTime = assignSimilarTime;
    function implySimilarTime(component, targetDayJs) {
      component.imply("hour", targetDayJs.hour());
      component.imply("minute", targetDayJs.minute());
      component.imply("second", targetDayJs.second());
      component.imply("millisecond", targetDayJs.millisecond());
    }
    exports.implySimilarTime = implySimilarTime;
  }
});

// node_modules/chrono-node/dist/timezone.js
var require_timezone = __commonJS({
  "node_modules/chrono-node/dist/timezone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toTimezoneOffset = exports.TIMEZONE_ABBR_MAP = void 0;
    exports.TIMEZONE_ABBR_MAP = {
      ACDT: 630,
      ACST: 570,
      ADT: -180,
      AEDT: 660,
      AEST: 600,
      AFT: 270,
      AKDT: -480,
      AKST: -540,
      ALMT: 360,
      AMST: -180,
      AMT: -240,
      ANAST: 720,
      ANAT: 720,
      AQTT: 300,
      ART: -180,
      AST: -240,
      AWDT: 540,
      AWST: 480,
      AZOST: 0,
      AZOT: -60,
      AZST: 300,
      AZT: 240,
      BNT: 480,
      BOT: -240,
      BRST: -120,
      BRT: -180,
      BST: 60,
      BTT: 360,
      CAST: 480,
      CAT: 120,
      CCT: 390,
      CDT: -300,
      CEST: 120,
      CET: 60,
      CHADT: 825,
      CHAST: 765,
      CKT: -600,
      CLST: -180,
      CLT: -240,
      COT: -300,
      CST: -360,
      CVT: -60,
      CXT: 420,
      ChST: 600,
      DAVT: 420,
      EASST: -300,
      EAST: -360,
      EAT: 180,
      ECT: -300,
      EDT: -240,
      EEST: 180,
      EET: 120,
      EGST: 0,
      EGT: -60,
      EST: -300,
      ET: -300,
      FJST: 780,
      FJT: 720,
      FKST: -180,
      FKT: -240,
      FNT: -120,
      GALT: -360,
      GAMT: -540,
      GET: 240,
      GFT: -180,
      GILT: 720,
      GMT: 0,
      GST: 240,
      GYT: -240,
      HAA: -180,
      HAC: -300,
      HADT: -540,
      HAE: -240,
      HAP: -420,
      HAR: -360,
      HAST: -600,
      HAT: -90,
      HAY: -480,
      HKT: 480,
      HLV: -210,
      HNA: -240,
      HNC: -360,
      HNE: -300,
      HNP: -480,
      HNR: -420,
      HNT: -150,
      HNY: -540,
      HOVT: 420,
      ICT: 420,
      IDT: 180,
      IOT: 360,
      IRDT: 270,
      IRKST: 540,
      IRKT: 540,
      IRST: 210,
      IST: 330,
      JST: 540,
      KGT: 360,
      KRAST: 480,
      KRAT: 480,
      KST: 540,
      KUYT: 240,
      LHDT: 660,
      LHST: 630,
      LINT: 840,
      MAGST: 720,
      MAGT: 720,
      MART: -510,
      MAWT: 300,
      MDT: -360,
      MESZ: 120,
      MEZ: 60,
      MHT: 720,
      MMT: 390,
      MSD: 240,
      MSK: 180,
      MST: -420,
      MUT: 240,
      MVT: 300,
      MYT: 480,
      NCT: 660,
      NDT: -90,
      NFT: 690,
      NOVST: 420,
      NOVT: 360,
      NPT: 345,
      NST: -150,
      NUT: -660,
      NZDT: 780,
      NZST: 720,
      OMSST: 420,
      OMST: 420,
      PDT: -420,
      PET: -300,
      PETST: 720,
      PETT: 720,
      PGT: 600,
      PHOT: 780,
      PHT: 480,
      PKT: 300,
      PMDT: -120,
      PMST: -180,
      PONT: 660,
      PST: -480,
      PT: -480,
      PWT: 540,
      PYST: -180,
      PYT: -240,
      RET: 240,
      SAMT: 240,
      SAST: 120,
      SBT: 660,
      SCT: 240,
      SGT: 480,
      SRT: -180,
      SST: -660,
      TAHT: -600,
      TFT: 300,
      TJT: 300,
      TKT: 780,
      TLT: 540,
      TMT: 300,
      TVT: 720,
      ULAT: 480,
      UTC: 0,
      UYST: -120,
      UYT: -180,
      UZT: 300,
      VET: -210,
      VLAST: 660,
      VLAT: 660,
      VUT: 660,
      WAST: 120,
      WAT: 60,
      WEST: 60,
      WESZ: 60,
      WET: 0,
      WEZ: 0,
      WFT: 720,
      WGST: -120,
      WGT: -180,
      WIB: 420,
      WIT: 540,
      WITA: 480,
      WST: 780,
      WT: 0,
      YAKST: 600,
      YAKT: 600,
      YAPT: 600,
      YEKST: 360,
      YEKT: 360
    };
    function toTimezoneOffset(timezoneInput) {
      var _a;
      if (timezoneInput === null || timezoneInput === void 0) {
        return null;
      }
      if (typeof timezoneInput === "number") {
        return timezoneInput;
      }
      return (_a = exports.TIMEZONE_ABBR_MAP[timezoneInput]) !== null && _a !== void 0 ? _a : null;
    }
    exports.toTimezoneOffset = toTimezoneOffset;
  }
});

// node_modules/chrono-node/dist/results.js
var require_results = __commonJS({
  "node_modules/chrono-node/dist/results.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParsingResult = exports.ParsingComponents = exports.ReferenceWithTimezone = void 0;
    var quarterOfYear_1 = __importDefault2(require_quarterOfYear());
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var dayjs_2 = require_dayjs();
    var timezone_1 = require_timezone();
    dayjs_1.default.extend(quarterOfYear_1.default);
    var ReferenceWithTimezone = class {
      constructor(input) {
        var _a;
        input = input !== null && input !== void 0 ? input : new Date();
        if (input instanceof Date) {
          this.instant = input;
        } else {
          this.instant = (_a = input.instant) !== null && _a !== void 0 ? _a : new Date();
          this.timezoneOffset = timezone_1.toTimezoneOffset(input.timezone);
        }
      }
    };
    exports.ReferenceWithTimezone = ReferenceWithTimezone;
    var ParsingComponents = class {
      constructor(reference, knownComponents) {
        this.reference = reference;
        this.knownValues = {};
        this.impliedValues = {};
        if (knownComponents) {
          for (const key in knownComponents) {
            this.knownValues[key] = knownComponents[key];
          }
        }
        const refDayJs = dayjs_1.default(reference.instant);
        this.imply("day", refDayJs.date());
        this.imply("month", refDayJs.month() + 1);
        this.imply("year", refDayJs.year());
        this.imply("hour", 12);
        this.imply("minute", 0);
        this.imply("second", 0);
        this.imply("millisecond", 0);
      }
      get(component) {
        if (component in this.knownValues) {
          return this.knownValues[component];
        }
        if (component in this.impliedValues) {
          return this.impliedValues[component];
        }
        return null;
      }
      isCertain(component) {
        return component in this.knownValues;
      }
      getCertainComponents() {
        return Object.keys(this.knownValues);
      }
      imply(component, value) {
        if (component in this.knownValues) {
          return this;
        }
        this.impliedValues[component] = value;
        return this;
      }
      assign(component, value) {
        this.knownValues[component] = value;
        delete this.impliedValues[component];
        return this;
      }
      delete(component) {
        delete this.knownValues[component];
        delete this.impliedValues[component];
      }
      clone() {
        const component = new ParsingComponents(this.reference);
        component.knownValues = {};
        component.impliedValues = {};
        for (const key in this.knownValues) {
          component.knownValues[key] = this.knownValues[key];
        }
        for (const key in this.impliedValues) {
          component.impliedValues[key] = this.impliedValues[key];
        }
        return component;
      }
      isOnlyDate() {
        return !this.isCertain("hour") && !this.isCertain("minute") && !this.isCertain("second");
      }
      isOnlyTime() {
        return !this.isCertain("weekday") && !this.isCertain("day") && !this.isCertain("month");
      }
      isOnlyWeekdayComponent() {
        return this.isCertain("weekday") && !this.isCertain("day") && !this.isCertain("month");
      }
      isOnlyDayMonthComponent() {
        return this.isCertain("day") && this.isCertain("month") && !this.isCertain("year");
      }
      isValidDate() {
        const date = this.dateWithoutTimezoneAdjustment();
        if (date.getFullYear() !== this.get("year"))
          return false;
        if (date.getMonth() !== this.get("month") - 1)
          return false;
        if (date.getDate() !== this.get("day"))
          return false;
        if (this.get("hour") != null && date.getHours() != this.get("hour"))
          return false;
        if (this.get("minute") != null && date.getMinutes() != this.get("minute"))
          return false;
        return true;
      }
      toString() {
        return `[ParsingComponents {knownValues: ${JSON.stringify(this.knownValues)}, impliedValues: ${JSON.stringify(this.impliedValues)}}, reference: ${JSON.stringify(this.reference)}]`;
      }
      dayjs() {
        return dayjs_1.default(this.date());
      }
      date() {
        const date = this.dateWithoutTimezoneAdjustment();
        return new Date(date.getTime() + this.getSystemTimezoneAdjustmentMinute(date) * 6e4);
      }
      dateWithoutTimezoneAdjustment() {
        const date = new Date(this.get("year"), this.get("month") - 1, this.get("day"), this.get("hour"), this.get("minute"), this.get("second"), this.get("millisecond"));
        date.setFullYear(this.get("year"));
        return date;
      }
      getSystemTimezoneAdjustmentMinute(date) {
        var _a, _b;
        if (!date || date.getTime() < 0) {
          date = new Date();
        }
        const currentTimezoneOffset = -date.getTimezoneOffset();
        const targetTimezoneOffset = (_b = (_a = this.get("timezoneOffset")) !== null && _a !== void 0 ? _a : this.reference.timezoneOffset) !== null && _b !== void 0 ? _b : currentTimezoneOffset;
        return currentTimezoneOffset - targetTimezoneOffset;
      }
      static createRelativeFromReference(reference, fragments) {
        let date = dayjs_1.default(reference.instant);
        for (const key in fragments) {
          date = date.add(fragments[key], key);
        }
        const components = new ParsingComponents(reference);
        if (fragments["hour"] || fragments["minute"] || fragments["second"]) {
          dayjs_2.assignSimilarTime(components, date);
          dayjs_2.assignSimilarDate(components, date);
          if (reference.timezoneOffset !== null) {
            components.assign("timezoneOffset", -reference.instant.getTimezoneOffset());
          }
        } else {
          dayjs_2.implySimilarTime(components, date);
          if (reference.timezoneOffset !== null) {
            components.imply("timezoneOffset", -reference.instant.getTimezoneOffset());
          }
          if (fragments["d"]) {
            components.assign("day", date.date());
            components.assign("month", date.month() + 1);
            components.assign("year", date.year());
          } else {
            if (fragments["week"]) {
              components.imply("weekday", date.day());
            }
            components.imply("day", date.date());
            if (fragments["month"]) {
              components.assign("month", date.month() + 1);
              components.assign("year", date.year());
            } else {
              components.imply("month", date.month() + 1);
              if (fragments["year"]) {
                components.assign("year", date.year());
              } else {
                components.imply("year", date.year());
              }
            }
          }
        }
        return components;
      }
    };
    exports.ParsingComponents = ParsingComponents;
    var ParsingResult = class {
      constructor(reference, index, text2, start, end) {
        this.reference = reference;
        this.refDate = reference.instant;
        this.index = index;
        this.text = text2;
        this.start = start || new ParsingComponents(reference);
        this.end = end;
      }
      clone() {
        const result = new ParsingResult(this.reference, this.index, this.text);
        result.start = this.start ? this.start.clone() : null;
        result.end = this.end ? this.end.clone() : null;
        return result;
      }
      date() {
        return this.start.date();
      }
      toString() {
        return `[ParsingResult {index: ${this.index}, text: '${this.text}', ...}]`;
      }
    };
    exports.ParsingResult = ParsingResult;
  }
});

// node_modules/chrono-node/dist/common/parsers/AbstractParserWithWordBoundary.js
var require_AbstractParserWithWordBoundary = __commonJS({
  "node_modules/chrono-node/dist/common/parsers/AbstractParserWithWordBoundary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbstractParserWithWordBoundaryChecking = void 0;
    var AbstractParserWithWordBoundaryChecking = class {
      constructor() {
        this.cachedInnerPattern = null;
        this.cachedPattern = null;
      }
      patternLeftBoundary() {
        return `(\\W|^)`;
      }
      pattern(context) {
        const innerPattern = this.innerPattern(context);
        if (innerPattern == this.cachedInnerPattern) {
          return this.cachedPattern;
        }
        this.cachedPattern = new RegExp(`${this.patternLeftBoundary()}${innerPattern.source}`, innerPattern.flags);
        this.cachedInnerPattern = innerPattern;
        return this.cachedPattern;
      }
      extract(context, match) {
        var _a;
        const header = (_a = match[1]) !== null && _a !== void 0 ? _a : "";
        match.index = match.index + header.length;
        match[0] = match[0].substring(header.length);
        for (let i = 2; i < match.length; i++) {
          match[i - 1] = match[i];
        }
        return this.innerExtract(context, match);
      }
    };
    exports.AbstractParserWithWordBoundaryChecking = AbstractParserWithWordBoundaryChecking;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENTimeUnitWithinFormatParser.js
var require_ENTimeUnitWithinFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENTimeUnitWithinFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN_WITH_PREFIX = new RegExp(`(?:within|in|for)\\s*(?:(?:about|around|roughly|approximately|just)\\s*(?:~\\s*)?)?(${constants_1.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
    var PATTERN_WITHOUT_PREFIX = new RegExp(`(?:(?:about|around|roughly|approximately|just)\\s*(?:~\\s*)?)?(${constants_1.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
    var ENTimeUnitWithinFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern(context) {
        return context.option.forwardDate ? PATTERN_WITHOUT_PREFIX : PATTERN_WITH_PREFIX;
      }
      innerExtract(context, match) {
        const timeUnits = constants_1.parseTimeUnits(match[1]);
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
    };
    exports.default = ENTimeUnitWithinFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENMonthNameLittleEndianParser.js
var require_ENMonthNameLittleEndianParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENMonthNameLittleEndianParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var years_1 = require_years();
    var constants_1 = require_constants();
    var constants_2 = require_constants();
    var constants_3 = require_constants();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp(`(?:on\\s{0,3})?(${constants_3.ORDINAL_NUMBER_PATTERN})(?:\\s{0,3}(?:to|\\-|\\\u2013|until|through|till)?\\s{0,3}(${constants_3.ORDINAL_NUMBER_PATTERN}))?(?:-|/|\\s{0,3}(?:of)?\\s{0,3})(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})(?:(?:-|/|,?\\s{0,3})(${constants_2.YEAR_PATTERN}(?![^\\s]\\d)))?(?=\\W|$)`, "i");
    var DATE_GROUP = 1;
    var DATE_TO_GROUP = 2;
    var MONTH_NAME_GROUP = 3;
    var YEAR_GROUP = 4;
    var ENMonthNameLittleEndianParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const month = constants_1.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = constants_3.parseOrdinalNumberPattern(match[DATE_GROUP]);
        if (day > 31) {
          match.index = match.index + match[DATE_GROUP].length;
          return null;
        }
        result.start.assign("month", month);
        result.start.assign("day", day);
        if (match[YEAR_GROUP]) {
          const yearNumber = constants_2.parseYear(match[YEAR_GROUP]);
          result.start.assign("year", yearNumber);
        } else {
          const year = years_1.findYearClosestToRef(context.refDate, day, month);
          result.start.imply("year", year);
        }
        if (match[DATE_TO_GROUP]) {
          const endDate = constants_3.parseOrdinalNumberPattern(match[DATE_TO_GROUP]);
          result.end = result.start.clone();
          result.end.assign("day", endDate);
        }
        return result;
      }
    };
    exports.default = ENMonthNameLittleEndianParser;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENMonthNameMiddleEndianParser.js
var require_ENMonthNameMiddleEndianParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENMonthNameMiddleEndianParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var years_1 = require_years();
    var constants_1 = require_constants();
    var constants_2 = require_constants();
    var constants_3 = require_constants();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp(`(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})(?:-|/|\\s*,?\\s*)(${constants_2.ORDINAL_NUMBER_PATTERN})(?!\\s*(?:am|pm))\\s*(?:(?:to|\\-)\\s*(${constants_2.ORDINAL_NUMBER_PATTERN})\\s*)?(?:(?:-|/|\\s*,?\\s*)(${constants_3.YEAR_PATTERN}))?(?=\\W|$)(?!\\:\\d)`, "i");
    var MONTH_NAME_GROUP = 1;
    var DATE_GROUP = 2;
    var DATE_TO_GROUP = 3;
    var YEAR_GROUP = 4;
    var ENMonthNameMiddleEndianParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const month = constants_1.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = constants_2.parseOrdinalNumberPattern(match[DATE_GROUP]);
        if (day > 31) {
          return null;
        }
        const components = context.createParsingComponents({
          day,
          month
        });
        if (match[YEAR_GROUP]) {
          const year = constants_3.parseYear(match[YEAR_GROUP]);
          components.assign("year", year);
        } else {
          const year = years_1.findYearClosestToRef(context.refDate, day, month);
          components.imply("year", year);
        }
        if (!match[DATE_TO_GROUP]) {
          return components;
        }
        const endDate = constants_2.parseOrdinalNumberPattern(match[DATE_TO_GROUP]);
        const result = context.createParsingResult(match.index, match[0]);
        result.start = components;
        result.end = components.clone();
        result.end.assign("day", endDate);
        return result;
      }
    };
    exports.default = ENMonthNameMiddleEndianParser;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENMonthNameParser.js
var require_ENMonthNameParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENMonthNameParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants();
    var years_1 = require_years();
    var pattern_1 = require_pattern();
    var constants_2 = require_constants();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp(`((?:in)\\s*)?(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})\\s*(?:[,-]?\\s*(${constants_2.YEAR_PATTERN})?)?(?=[^\\s\\w]|\\s+[^0-9]|\\s+$|$)`, "i");
    var PREFIX_GROUP = 1;
    var MONTH_NAME_GROUP = 2;
    var YEAR_GROUP = 3;
    var ENMonthNameParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const monthName = match[MONTH_NAME_GROUP].toLowerCase();
        if (match[0].length <= 3 && !constants_1.FULL_MONTH_NAME_DICTIONARY[monthName]) {
          return null;
        }
        const result = context.createParsingResult(match.index + (match[PREFIX_GROUP] || "").length, match.index + match[0].length);
        result.start.imply("day", 1);
        const month = constants_1.MONTH_DICTIONARY[monthName];
        result.start.assign("month", month);
        if (match[YEAR_GROUP]) {
          const year = constants_2.parseYear(match[YEAR_GROUP]);
          result.start.assign("year", year);
        } else {
          const year = years_1.findYearClosestToRef(context.refDate, 1, month);
          result.start.imply("year", year);
        }
        return result;
      }
    };
    exports.default = ENMonthNameParser;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENCasualYearMonthDayParser.js
var require_ENCasualYearMonthDayParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENCasualYearMonthDayParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp(`([0-9]{4})[\\.\\/\\s](?:(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})|([0-9]{1,2}))[\\.\\/\\s]([0-9]{1,2})(?=\\W|$)`, "i");
    var YEAR_NUMBER_GROUP = 1;
    var MONTH_NAME_GROUP = 2;
    var MONTH_NUMBER_GROUP = 3;
    var DATE_NUMBER_GROUP = 4;
    var ENCasualYearMonthDayParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const month = match[MONTH_NUMBER_GROUP] ? parseInt(match[MONTH_NUMBER_GROUP]) : constants_1.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        if (month < 1 || month > 12) {
          return null;
        }
        const year = parseInt(match[YEAR_NUMBER_GROUP]);
        const day = parseInt(match[DATE_NUMBER_GROUP]);
        return {
          day,
          month,
          year
        };
      }
    };
    exports.default = ENCasualYearMonthDayParser;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENSlashMonthFormatParser.js
var require_ENSlashMonthFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENSlashMonthFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp("([0-9]|0[1-9]|1[012])/([0-9]{4})", "i");
    var MONTH_GROUP = 1;
    var YEAR_GROUP = 2;
    var ENSlashMonthFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const year = parseInt(match[YEAR_GROUP]);
        const month = parseInt(match[MONTH_GROUP]);
        return context.createParsingComponents().imply("day", 1).assign("month", month).assign("year", year);
      }
    };
    exports.default = ENSlashMonthFormatParser;
  }
});

// node_modules/chrono-node/dist/common/parsers/AbstractTimeExpressionParser.js
var require_AbstractTimeExpressionParser = __commonJS({
  "node_modules/chrono-node/dist/common/parsers/AbstractTimeExpressionParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbstractTimeExpressionParser = void 0;
    var index_1 = require_dist();
    function primaryTimePattern(leftBoundary, primaryPrefix, primarySuffix, flags) {
      return new RegExp(`${leftBoundary}${primaryPrefix}(\\d{1,4})(?:(?:\\.|:|\uFF1A)(\\d{1,2})(?:(?::|\uFF1A)(\\d{2})(?:\\.(\\d{1,6}))?)?)?(?:\\s*(a\\.m\\.|p\\.m\\.|am?|pm?))?${primarySuffix}`, flags);
    }
    function followingTimePatten(followingPhase, followingSuffix) {
      return new RegExp(`^(${followingPhase})(\\d{1,4})(?:(?:\\.|\\:|\\\uFF1A)(\\d{1,2})(?:(?:\\.|\\:|\\\uFF1A)(\\d{1,2})(?:\\.(\\d{1,6}))?)?)?(?:\\s*(a\\.m\\.|p\\.m\\.|am?|pm?))?${followingSuffix}`, "i");
    }
    var HOUR_GROUP = 2;
    var MINUTE_GROUP = 3;
    var SECOND_GROUP = 4;
    var MILLI_SECOND_GROUP = 5;
    var AM_PM_HOUR_GROUP = 6;
    var AbstractTimeExpressionParser = class {
      constructor(strictMode = false) {
        this.cachedPrimaryPrefix = null;
        this.cachedPrimarySuffix = null;
        this.cachedPrimaryTimePattern = null;
        this.cachedFollowingPhase = null;
        this.cachedFollowingSuffix = null;
        this.cachedFollowingTimePatten = null;
        this.strictMode = strictMode;
      }
      patternFlags() {
        return "i";
      }
      primaryPatternLeftBoundary() {
        return `(^|\\s|T|\\b)`;
      }
      primarySuffix() {
        return `(?=\\W|$)`;
      }
      followingSuffix() {
        return `(?=\\W|$)`;
      }
      pattern(context) {
        return this.getPrimaryTimePatternThroughCache();
      }
      extract(context, match) {
        const startComponents = this.extractPrimaryTimeComponents(context, match);
        if (!startComponents) {
          match.index += match[0].length;
          return null;
        }
        const index = match.index + match[1].length;
        const text2 = match[0].substring(match[1].length);
        const result = context.createParsingResult(index, text2, startComponents);
        match.index += match[0].length;
        const remainingText = context.text.substring(match.index);
        const followingPattern = this.getFollowingTimePatternThroughCache();
        const followingMatch = followingPattern.exec(remainingText);
        if (text2.match(/^\d{3,4}/) && followingMatch && followingMatch[0].match(/^\s*([+-])\s*\d{2,4}$/)) {
          return null;
        }
        if (!followingMatch || followingMatch[0].match(/^\s*([+-])\s*\d{3,4}$/)) {
          return this.checkAndReturnWithoutFollowingPattern(result);
        }
        result.end = this.extractFollowingTimeComponents(context, followingMatch, result);
        if (result.end) {
          result.text += followingMatch[0];
        }
        return this.checkAndReturnWithFollowingPattern(result);
      }
      extractPrimaryTimeComponents(context, match, strict = false) {
        const components = context.createParsingComponents();
        let minute = 0;
        let meridiem = null;
        let hour = parseInt(match[HOUR_GROUP]);
        if (hour > 100) {
          if (this.strictMode || match[MINUTE_GROUP] != null) {
            return null;
          }
          minute = hour % 100;
          hour = Math.floor(hour / 100);
        }
        if (hour > 24) {
          return null;
        }
        if (match[MINUTE_GROUP] != null) {
          if (match[MINUTE_GROUP].length == 1 && !match[AM_PM_HOUR_GROUP]) {
            return null;
          }
          minute = parseInt(match[MINUTE_GROUP]);
        }
        if (minute >= 60) {
          return null;
        }
        if (hour > 12) {
          meridiem = index_1.Meridiem.PM;
        }
        if (match[AM_PM_HOUR_GROUP] != null) {
          if (hour > 12)
            return null;
          const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
          if (ampm == "a") {
            meridiem = index_1.Meridiem.AM;
            if (hour == 12) {
              hour = 0;
            }
          }
          if (ampm == "p") {
            meridiem = index_1.Meridiem.PM;
            if (hour != 12) {
              hour += 12;
            }
          }
        }
        components.assign("hour", hour);
        components.assign("minute", minute);
        if (meridiem !== null) {
          components.assign("meridiem", meridiem);
        } else {
          if (hour < 12) {
            components.imply("meridiem", index_1.Meridiem.AM);
          } else {
            components.imply("meridiem", index_1.Meridiem.PM);
          }
        }
        if (match[MILLI_SECOND_GROUP] != null) {
          const millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));
          if (millisecond >= 1e3)
            return null;
          components.assign("millisecond", millisecond);
        }
        if (match[SECOND_GROUP] != null) {
          const second = parseInt(match[SECOND_GROUP]);
          if (second >= 60)
            return null;
          components.assign("second", second);
        }
        return components;
      }
      extractFollowingTimeComponents(context, match, result) {
        const components = context.createParsingComponents();
        if (match[MILLI_SECOND_GROUP] != null) {
          const millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));
          if (millisecond >= 1e3)
            return null;
          components.assign("millisecond", millisecond);
        }
        if (match[SECOND_GROUP] != null) {
          const second = parseInt(match[SECOND_GROUP]);
          if (second >= 60)
            return null;
          components.assign("second", second);
        }
        let hour = parseInt(match[HOUR_GROUP]);
        let minute = 0;
        let meridiem = -1;
        if (match[MINUTE_GROUP] != null) {
          minute = parseInt(match[MINUTE_GROUP]);
        } else if (hour > 100) {
          minute = hour % 100;
          hour = Math.floor(hour / 100);
        }
        if (minute >= 60 || hour > 24) {
          return null;
        }
        if (hour >= 12) {
          meridiem = index_1.Meridiem.PM;
        }
        if (match[AM_PM_HOUR_GROUP] != null) {
          if (hour > 12) {
            return null;
          }
          const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
          if (ampm == "a") {
            meridiem = index_1.Meridiem.AM;
            if (hour == 12) {
              hour = 0;
              if (!components.isCertain("day")) {
                components.imply("day", components.get("day") + 1);
              }
            }
          }
          if (ampm == "p") {
            meridiem = index_1.Meridiem.PM;
            if (hour != 12)
              hour += 12;
          }
          if (!result.start.isCertain("meridiem")) {
            if (meridiem == index_1.Meridiem.AM) {
              result.start.imply("meridiem", index_1.Meridiem.AM);
              if (result.start.get("hour") == 12) {
                result.start.assign("hour", 0);
              }
            } else {
              result.start.imply("meridiem", index_1.Meridiem.PM);
              if (result.start.get("hour") != 12) {
                result.start.assign("hour", result.start.get("hour") + 12);
              }
            }
          }
        }
        components.assign("hour", hour);
        components.assign("minute", minute);
        if (meridiem >= 0) {
          components.assign("meridiem", meridiem);
        } else {
          const startAtPM = result.start.isCertain("meridiem") && result.start.get("hour") > 12;
          if (startAtPM) {
            if (result.start.get("hour") - 12 > hour) {
              components.imply("meridiem", index_1.Meridiem.AM);
            } else if (hour <= 12) {
              components.assign("hour", hour + 12);
              components.assign("meridiem", index_1.Meridiem.PM);
            }
          } else if (hour > 12) {
            components.imply("meridiem", index_1.Meridiem.PM);
          } else if (hour <= 12) {
            components.imply("meridiem", index_1.Meridiem.AM);
          }
        }
        if (components.date().getTime() < result.start.date().getTime()) {
          components.imply("day", components.get("day") + 1);
        }
        return components;
      }
      checkAndReturnWithoutFollowingPattern(result) {
        if (result.text.match(/^\d$/)) {
          return null;
        }
        if (result.text.match(/^\d\d\d+$/)) {
          return null;
        }
        if (result.text.match(/\d[apAP]$/)) {
          return null;
        }
        const endingWithNumbers = result.text.match(/[^\d:.](\d[\d.]+)$/);
        if (endingWithNumbers) {
          const endingNumbers = endingWithNumbers[1];
          if (this.strictMode) {
            return null;
          }
          if (endingNumbers.includes(".") && !endingNumbers.match(/\d(\.\d{2})+$/)) {
            return null;
          }
          const endingNumberVal = parseInt(endingNumbers);
          if (endingNumberVal > 24) {
            return null;
          }
        }
        return result;
      }
      checkAndReturnWithFollowingPattern(result) {
        if (result.text.match(/^\d+-\d+$/)) {
          return null;
        }
        const endingWithNumbers = result.text.match(/[^\d:.](\d[\d.]+)\s*-\s*(\d[\d.]+)$/);
        if (endingWithNumbers) {
          if (this.strictMode) {
            return null;
          }
          const startingNumbers = endingWithNumbers[1];
          const endingNumbers = endingWithNumbers[2];
          if (endingNumbers.includes(".") && !endingNumbers.match(/\d(\.\d{2})+$/)) {
            return null;
          }
          const endingNumberVal = parseInt(endingNumbers);
          const startingNumberVal = parseInt(startingNumbers);
          if (endingNumberVal > 24 || startingNumberVal > 24) {
            return null;
          }
        }
        return result;
      }
      getPrimaryTimePatternThroughCache() {
        const primaryPrefix = this.primaryPrefix();
        const primarySuffix = this.primarySuffix();
        if (this.cachedPrimaryPrefix === primaryPrefix && this.cachedPrimarySuffix === primarySuffix) {
          return this.cachedPrimaryTimePattern;
        }
        this.cachedPrimaryTimePattern = primaryTimePattern(this.primaryPatternLeftBoundary(), primaryPrefix, primarySuffix, this.patternFlags());
        this.cachedPrimaryPrefix = primaryPrefix;
        this.cachedPrimarySuffix = primarySuffix;
        return this.cachedPrimaryTimePattern;
      }
      getFollowingTimePatternThroughCache() {
        const followingPhase = this.followingPhase();
        const followingSuffix = this.followingSuffix();
        if (this.cachedFollowingPhase === followingPhase && this.cachedFollowingSuffix === followingSuffix) {
          return this.cachedFollowingTimePatten;
        }
        this.cachedFollowingTimePatten = followingTimePatten(followingPhase, followingSuffix);
        this.cachedFollowingPhase = followingPhase;
        this.cachedFollowingSuffix = followingSuffix;
        return this.cachedFollowingTimePatten;
      }
    };
    exports.AbstractTimeExpressionParser = AbstractTimeExpressionParser;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENTimeExpressionParser.js
var require_ENTimeExpressionParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENTimeExpressionParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var index_1 = require_dist();
    var AbstractTimeExpressionParser_1 = require_AbstractTimeExpressionParser();
    var ENTimeExpressionParser = class extends AbstractTimeExpressionParser_1.AbstractTimeExpressionParser {
      constructor(strictMode) {
        super(strictMode);
      }
      followingPhase() {
        return "\\s*(?:\\-|\\\u2013|\\~|\\\u301C|to|\\?)\\s*";
      }
      primaryPrefix() {
        return "(?:(?:at|from)\\s*)??";
      }
      primarySuffix() {
        return "(?:\\s*(?:o\\W*clock|at\\s*night|in\\s*the\\s*(?:morning|afternoon)))?(?!/)(?=\\W|$)";
      }
      extractPrimaryTimeComponents(context, match) {
        const components = super.extractPrimaryTimeComponents(context, match);
        if (components) {
          if (match[0].endsWith("night")) {
            const hour = components.get("hour");
            if (hour >= 6 && hour < 12) {
              components.assign("hour", components.get("hour") + 12);
              components.assign("meridiem", index_1.Meridiem.PM);
            } else if (hour < 6) {
              components.assign("meridiem", index_1.Meridiem.AM);
            }
          }
          if (match[0].endsWith("afternoon")) {
            components.assign("meridiem", index_1.Meridiem.PM);
            const hour = components.get("hour");
            if (hour >= 0 && hour <= 6) {
              components.assign("hour", components.get("hour") + 12);
            }
          }
          if (match[0].endsWith("morning")) {
            components.assign("meridiem", index_1.Meridiem.AM);
            const hour = components.get("hour");
            if (hour < 12) {
              components.assign("hour", components.get("hour"));
            }
          }
        }
        return components;
      }
    };
    exports.default = ENTimeExpressionParser;
  }
});

// node_modules/chrono-node/dist/utils/timeunits.js
var require_timeunits = __commonJS({
  "node_modules/chrono-node/dist/utils/timeunits.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addImpliedTimeUnits = exports.reverseTimeUnits = void 0;
    function reverseTimeUnits(timeUnits) {
      const reversed = {};
      for (const key in timeUnits) {
        reversed[key] = -timeUnits[key];
      }
      return reversed;
    }
    exports.reverseTimeUnits = reverseTimeUnits;
    function addImpliedTimeUnits(components, timeUnits) {
      const output = components.clone();
      let date = components.dayjs();
      for (const key in timeUnits) {
        date = date.add(timeUnits[key], key);
      }
      if ("day" in timeUnits || "d" in timeUnits || "week" in timeUnits || "month" in timeUnits || "year" in timeUnits) {
        output.imply("day", date.date());
        output.imply("month", date.month() + 1);
        output.imply("year", date.year());
      }
      if ("second" in timeUnits || "minute" in timeUnits || "hour" in timeUnits) {
        output.imply("second", date.second());
        output.imply("minute", date.minute());
        output.imply("hour", date.hour());
      }
      return output;
    }
    exports.addImpliedTimeUnits = addImpliedTimeUnits;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENTimeUnitAgoFormatParser.js
var require_ENTimeUnitAgoFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENTimeUnitAgoFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var timeunits_1 = require_timeunits();
    var PATTERN = new RegExp(`(${constants_1.TIME_UNITS_PATTERN})\\s{0,5}(?:ago|before|earlier)(?=(?:\\W|$))`, "i");
    var STRICT_PATTERN = new RegExp(`(${constants_1.TIME_UNITS_PATTERN})\\s{0,5}ago(?=(?:\\W|$))`, "i");
    var ENTimeUnitAgoFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      constructor(strictMode) {
        super();
        this.strictMode = strictMode;
      }
      innerPattern() {
        return this.strictMode ? STRICT_PATTERN : PATTERN;
      }
      innerExtract(context, match) {
        const timeUnits = constants_1.parseTimeUnits(match[1]);
        const outputTimeUnits = timeunits_1.reverseTimeUnits(timeUnits);
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);
      }
    };
    exports.default = ENTimeUnitAgoFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENTimeUnitLaterFormatParser.js
var require_ENTimeUnitLaterFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENTimeUnitLaterFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp(`(${constants_1.TIME_UNITS_PATTERN})\\s{0,5}(?:later|after|from now|henceforth|forward|out)(?=(?:\\W|$))`, "i");
    var STRICT_PATTERN = new RegExp("(" + constants_1.TIME_UNITS_PATTERN + ")(later|from now)(?=(?:\\W|$))", "i");
    var GROUP_NUM_TIMEUNITS = 1;
    var ENTimeUnitLaterFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      constructor(strictMode) {
        super();
        this.strictMode = strictMode;
      }
      innerPattern() {
        return this.strictMode ? STRICT_PATTERN : PATTERN;
      }
      innerExtract(context, match) {
        const fragments = constants_1.parseTimeUnits(match[GROUP_NUM_TIMEUNITS]);
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, fragments);
      }
    };
    exports.default = ENTimeUnitLaterFormatParser;
  }
});

// node_modules/chrono-node/dist/common/abstractRefiners.js
var require_abstractRefiners = __commonJS({
  "node_modules/chrono-node/dist/common/abstractRefiners.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MergingRefiner = exports.Filter = void 0;
    var Filter2 = class {
      refine(context, results) {
        return results.filter((r) => this.isValid(context, r));
      }
    };
    exports.Filter = Filter2;
    var MergingRefiner = class {
      refine(context, results) {
        if (results.length < 2) {
          return results;
        }
        const mergedResults = [];
        let curResult = results[0];
        let nextResult = null;
        for (let i = 1; i < results.length; i++) {
          nextResult = results[i];
          const textBetween = context.text.substring(curResult.index + curResult.text.length, nextResult.index);
          if (!this.shouldMergeResults(textBetween, curResult, nextResult, context)) {
            mergedResults.push(curResult);
            curResult = nextResult;
          } else {
            const left = curResult;
            const right = nextResult;
            const mergedResult = this.mergeResults(textBetween, left, right, context);
            context.debug(() => {
              console.log(`${this.constructor.name} merged ${left} and ${right} into ${mergedResult}`);
            });
            curResult = mergedResult;
          }
        }
        if (curResult != null) {
          mergedResults.push(curResult);
        }
        return mergedResults;
      }
    };
    exports.MergingRefiner = MergingRefiner;
  }
});

// node_modules/chrono-node/dist/common/refiners/AbstractMergeDateRangeRefiner.js
var require_AbstractMergeDateRangeRefiner = __commonJS({
  "node_modules/chrono-node/dist/common/refiners/AbstractMergeDateRangeRefiner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var abstractRefiners_1 = require_abstractRefiners();
    var AbstractMergeDateRangeRefiner = class extends abstractRefiners_1.MergingRefiner {
      shouldMergeResults(textBetween, currentResult, nextResult) {
        return !currentResult.end && !nextResult.end && textBetween.match(this.patternBetween()) != null;
      }
      mergeResults(textBetween, fromResult, toResult) {
        if (!fromResult.start.isOnlyWeekdayComponent() && !toResult.start.isOnlyWeekdayComponent()) {
          toResult.start.getCertainComponents().forEach((key) => {
            if (!fromResult.start.isCertain(key)) {
              fromResult.start.assign(key, toResult.start.get(key));
            }
          });
          fromResult.start.getCertainComponents().forEach((key) => {
            if (!toResult.start.isCertain(key)) {
              toResult.start.assign(key, fromResult.start.get(key));
            }
          });
        }
        if (fromResult.start.date().getTime() > toResult.start.date().getTime()) {
          let fromMoment = fromResult.start.dayjs();
          let toMoment = toResult.start.dayjs();
          if (fromResult.start.isOnlyWeekdayComponent() && fromMoment.add(-7, "days").isBefore(toMoment)) {
            fromMoment = fromMoment.add(-7, "days");
            fromResult.start.imply("day", fromMoment.date());
            fromResult.start.imply("month", fromMoment.month() + 1);
            fromResult.start.imply("year", fromMoment.year());
          } else if (toResult.start.isOnlyWeekdayComponent() && toMoment.add(7, "days").isAfter(fromMoment)) {
            toMoment = toMoment.add(7, "days");
            toResult.start.imply("day", toMoment.date());
            toResult.start.imply("month", toMoment.month() + 1);
            toResult.start.imply("year", toMoment.year());
          } else {
            [toResult, fromResult] = [fromResult, toResult];
          }
        }
        const result = fromResult.clone();
        result.start = fromResult.start;
        result.end = toResult.start;
        result.index = Math.min(fromResult.index, toResult.index);
        if (fromResult.index < toResult.index) {
          result.text = fromResult.text + textBetween + toResult.text;
        } else {
          result.text = toResult.text + textBetween + fromResult.text;
        }
        return result;
      }
    };
    exports.default = AbstractMergeDateRangeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/en/refiners/ENMergeDateRangeRefiner.js
var require_ENMergeDateRangeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/en/refiners/ENMergeDateRangeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateRangeRefiner_1 = __importDefault2(require_AbstractMergeDateRangeRefiner());
    var ENMergeDateRangeRefiner = class extends AbstractMergeDateRangeRefiner_1.default {
      patternBetween() {
        return /^\s*(to|-)\s*$/i;
      }
    };
    exports.default = ENMergeDateRangeRefiner;
  }
});

// node_modules/chrono-node/dist/calculation/mergingCalculation.js
var require_mergingCalculation = __commonJS({
  "node_modules/chrono-node/dist/calculation/mergingCalculation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeDateTimeComponent = exports.mergeDateTimeResult = void 0;
    var index_1 = require_dist();
    function mergeDateTimeResult(dateResult, timeResult) {
      const result = dateResult.clone();
      const beginDate = dateResult.start;
      const beginTime = timeResult.start;
      result.start = mergeDateTimeComponent(beginDate, beginTime);
      if (dateResult.end != null || timeResult.end != null) {
        const endDate = dateResult.end == null ? dateResult.start : dateResult.end;
        const endTime = timeResult.end == null ? timeResult.start : timeResult.end;
        const endDateTime = mergeDateTimeComponent(endDate, endTime);
        if (dateResult.end == null && endDateTime.date().getTime() < result.start.date().getTime()) {
          if (endDateTime.isCertain("day")) {
            endDateTime.assign("day", endDateTime.get("day") + 1);
          } else {
            endDateTime.imply("day", endDateTime.get("day") + 1);
          }
        }
        result.end = endDateTime;
      }
      return result;
    }
    exports.mergeDateTimeResult = mergeDateTimeResult;
    function mergeDateTimeComponent(dateComponent, timeComponent) {
      const dateTimeComponent = dateComponent.clone();
      if (timeComponent.isCertain("hour")) {
        dateTimeComponent.assign("hour", timeComponent.get("hour"));
        dateTimeComponent.assign("minute", timeComponent.get("minute"));
        if (timeComponent.isCertain("second")) {
          dateTimeComponent.assign("second", timeComponent.get("second"));
          if (timeComponent.isCertain("millisecond")) {
            dateTimeComponent.assign("millisecond", timeComponent.get("millisecond"));
          } else {
            dateTimeComponent.imply("millisecond", timeComponent.get("millisecond"));
          }
        } else {
          dateTimeComponent.imply("second", timeComponent.get("second"));
          dateTimeComponent.imply("millisecond", timeComponent.get("millisecond"));
        }
      } else {
        dateTimeComponent.imply("hour", timeComponent.get("hour"));
        dateTimeComponent.imply("minute", timeComponent.get("minute"));
        dateTimeComponent.imply("second", timeComponent.get("second"));
        dateTimeComponent.imply("millisecond", timeComponent.get("millisecond"));
      }
      if (timeComponent.isCertain("timezoneOffset")) {
        dateTimeComponent.assign("timezoneOffset", timeComponent.get("timezoneOffset"));
      }
      if (timeComponent.isCertain("meridiem")) {
        dateTimeComponent.assign("meridiem", timeComponent.get("meridiem"));
      } else if (timeComponent.get("meridiem") != null && dateTimeComponent.get("meridiem") == null) {
        dateTimeComponent.imply("meridiem", timeComponent.get("meridiem"));
      }
      if (dateTimeComponent.get("meridiem") == index_1.Meridiem.PM && dateTimeComponent.get("hour") < 12) {
        if (timeComponent.isCertain("hour")) {
          dateTimeComponent.assign("hour", dateTimeComponent.get("hour") + 12);
        } else {
          dateTimeComponent.imply("hour", dateTimeComponent.get("hour") + 12);
        }
      }
      return dateTimeComponent;
    }
    exports.mergeDateTimeComponent = mergeDateTimeComponent;
  }
});

// node_modules/chrono-node/dist/common/refiners/AbstractMergeDateTimeRefiner.js
var require_AbstractMergeDateTimeRefiner = __commonJS({
  "node_modules/chrono-node/dist/common/refiners/AbstractMergeDateTimeRefiner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var abstractRefiners_1 = require_abstractRefiners();
    var mergingCalculation_1 = require_mergingCalculation();
    var ENMergeDateTimeRefiner = class extends abstractRefiners_1.MergingRefiner {
      shouldMergeResults(textBetween, currentResult, nextResult) {
        return (currentResult.start.isOnlyDate() && nextResult.start.isOnlyTime() || nextResult.start.isOnlyDate() && currentResult.start.isOnlyTime()) && textBetween.match(this.patternBetween()) != null;
      }
      mergeResults(textBetween, currentResult, nextResult) {
        const result = currentResult.start.isOnlyDate() ? mergingCalculation_1.mergeDateTimeResult(currentResult, nextResult) : mergingCalculation_1.mergeDateTimeResult(nextResult, currentResult);
        result.index = currentResult.index;
        result.text = currentResult.text + textBetween + nextResult.text;
        return result;
      }
    };
    exports.default = ENMergeDateTimeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/en/refiners/ENMergeDateTimeRefiner.js
var require_ENMergeDateTimeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/en/refiners/ENMergeDateTimeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateTimeRefiner_1 = __importDefault2(require_AbstractMergeDateTimeRefiner());
    var ENMergeDateTimeRefiner = class extends AbstractMergeDateTimeRefiner_1.default {
      patternBetween() {
        return new RegExp("^\\s*(T|at|after|before|on|of|,|-)?\\s*$");
      }
    };
    exports.default = ENMergeDateTimeRefiner;
  }
});

// node_modules/chrono-node/dist/common/refiners/ExtractTimezoneAbbrRefiner.js
var require_ExtractTimezoneAbbrRefiner = __commonJS({
  "node_modules/chrono-node/dist/common/refiners/ExtractTimezoneAbbrRefiner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TIMEZONE_NAME_PATTERN = new RegExp("^\\s*,?\\s*\\(?([A-Z]{2,4})\\)?(?=\\W|$)", "i");
    var DEFAULT_TIMEZONE_ABBR_MAP = {
      ACDT: 630,
      ACST: 570,
      ADT: -180,
      AEDT: 660,
      AEST: 600,
      AFT: 270,
      AKDT: -480,
      AKST: -540,
      ALMT: 360,
      AMST: -180,
      AMT: -240,
      ANAST: 720,
      ANAT: 720,
      AQTT: 300,
      ART: -180,
      AST: -240,
      AWDT: 540,
      AWST: 480,
      AZOST: 0,
      AZOT: -60,
      AZST: 300,
      AZT: 240,
      BNT: 480,
      BOT: -240,
      BRST: -120,
      BRT: -180,
      BST: 60,
      BTT: 360,
      CAST: 480,
      CAT: 120,
      CCT: 390,
      CDT: -300,
      CEST: 120,
      CET: 60,
      CHADT: 825,
      CHAST: 765,
      CKT: -600,
      CLST: -180,
      CLT: -240,
      COT: -300,
      CST: -360,
      CVT: -60,
      CXT: 420,
      ChST: 600,
      DAVT: 420,
      EASST: -300,
      EAST: -360,
      EAT: 180,
      ECT: -300,
      EDT: -240,
      EEST: 180,
      EET: 120,
      EGST: 0,
      EGT: -60,
      EST: -300,
      ET: -300,
      FJST: 780,
      FJT: 720,
      FKST: -180,
      FKT: -240,
      FNT: -120,
      GALT: -360,
      GAMT: -540,
      GET: 240,
      GFT: -180,
      GILT: 720,
      GMT: 0,
      GST: 240,
      GYT: -240,
      HAA: -180,
      HAC: -300,
      HADT: -540,
      HAE: -240,
      HAP: -420,
      HAR: -360,
      HAST: -600,
      HAT: -90,
      HAY: -480,
      HKT: 480,
      HLV: -210,
      HNA: -240,
      HNC: -360,
      HNE: -300,
      HNP: -480,
      HNR: -420,
      HNT: -150,
      HNY: -540,
      HOVT: 420,
      ICT: 420,
      IDT: 180,
      IOT: 360,
      IRDT: 270,
      IRKST: 540,
      IRKT: 540,
      IRST: 210,
      IST: 330,
      JST: 540,
      KGT: 360,
      KRAST: 480,
      KRAT: 480,
      KST: 540,
      KUYT: 240,
      LHDT: 660,
      LHST: 630,
      LINT: 840,
      MAGST: 720,
      MAGT: 720,
      MART: -510,
      MAWT: 300,
      MDT: -360,
      MESZ: 120,
      MEZ: 60,
      MHT: 720,
      MMT: 390,
      MSD: 240,
      MSK: 240,
      MST: -420,
      MUT: 240,
      MVT: 300,
      MYT: 480,
      NCT: 660,
      NDT: -90,
      NFT: 690,
      NOVST: 420,
      NOVT: 360,
      NPT: 345,
      NST: -150,
      NUT: -660,
      NZDT: 780,
      NZST: 720,
      OMSST: 420,
      OMST: 420,
      PDT: -420,
      PET: -300,
      PETST: 720,
      PETT: 720,
      PGT: 600,
      PHOT: 780,
      PHT: 480,
      PKT: 300,
      PMDT: -120,
      PMST: -180,
      PONT: 660,
      PST: -480,
      PT: -480,
      PWT: 540,
      PYST: -180,
      PYT: -240,
      RET: 240,
      SAMT: 240,
      SAST: 120,
      SBT: 660,
      SCT: 240,
      SGT: 480,
      SRT: -180,
      SST: -660,
      TAHT: -600,
      TFT: 300,
      TJT: 300,
      TKT: 780,
      TLT: 540,
      TMT: 300,
      TVT: 720,
      ULAT: 480,
      UTC: 0,
      UYST: -120,
      UYT: -180,
      UZT: 300,
      VET: -210,
      VLAST: 660,
      VLAT: 660,
      VUT: 660,
      WAST: 120,
      WAT: 60,
      WEST: 60,
      WESZ: 60,
      WET: 0,
      WEZ: 0,
      WFT: 720,
      WGST: -120,
      WGT: -180,
      WIB: 420,
      WIT: 540,
      WITA: 480,
      WST: 780,
      WT: 0,
      YAKST: 600,
      YAKT: 600,
      YAPT: 600,
      YEKST: 360,
      YEKT: 360
    };
    var ExtractTimezoneAbbrRefiner = class {
      constructor(timezoneOverrides) {
        this.timezone = Object.assign(Object.assign({}, DEFAULT_TIMEZONE_ABBR_MAP), timezoneOverrides);
      }
      refine(context, results) {
        var _a;
        const timezoneOverrides = (_a = context.option.timezones) !== null && _a !== void 0 ? _a : {};
        results.forEach((result) => {
          var _a2, _b;
          const suffix = context.text.substring(result.index + result.text.length);
          const match = TIMEZONE_NAME_PATTERN.exec(suffix);
          if (!match) {
            return;
          }
          const timezoneAbbr = match[1].toUpperCase();
          const extractedTimezoneOffset = (_b = (_a2 = timezoneOverrides[timezoneAbbr]) !== null && _a2 !== void 0 ? _a2 : this.timezone[timezoneAbbr]) !== null && _b !== void 0 ? _b : null;
          if (extractedTimezoneOffset === null) {
            return;
          }
          context.debug(() => {
            console.log(`Extracting timezone: '${timezoneAbbr}' into: ${extractedTimezoneOffset} for: ${result.start}`);
          });
          const currentTimezoneOffset = result.start.get("timezoneOffset");
          if (currentTimezoneOffset !== null && extractedTimezoneOffset != currentTimezoneOffset) {
            if (result.start.isCertain("timezoneOffset")) {
              return;
            }
            if (timezoneAbbr != match[1]) {
              return;
            }
          }
          if (result.start.isOnlyDate()) {
            if (timezoneAbbr != match[1]) {
              return;
            }
          }
          result.text += match[0];
          if (!result.start.isCertain("timezoneOffset")) {
            result.start.assign("timezoneOffset", extractedTimezoneOffset);
          }
          if (result.end != null && !result.end.isCertain("timezoneOffset")) {
            result.end.assign("timezoneOffset", extractedTimezoneOffset);
          }
        });
        return results;
      }
    };
    exports.default = ExtractTimezoneAbbrRefiner;
  }
});

// node_modules/chrono-node/dist/common/refiners/ExtractTimezoneOffsetRefiner.js
var require_ExtractTimezoneOffsetRefiner = __commonJS({
  "node_modules/chrono-node/dist/common/refiners/ExtractTimezoneOffsetRefiner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TIMEZONE_OFFSET_PATTERN = new RegExp("^\\s*(?:\\(?(?:GMT|UTC)\\s?)?([+-])(\\d{1,2})(?::?(\\d{2}))?\\)?", "i");
    var TIMEZONE_OFFSET_SIGN_GROUP = 1;
    var TIMEZONE_OFFSET_HOUR_OFFSET_GROUP = 2;
    var TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP = 3;
    var ExtractTimezoneOffsetRefiner = class {
      refine(context, results) {
        results.forEach(function(result) {
          if (result.start.isCertain("timezoneOffset")) {
            return;
          }
          const suffix = context.text.substring(result.index + result.text.length);
          const match = TIMEZONE_OFFSET_PATTERN.exec(suffix);
          if (!match) {
            return;
          }
          context.debug(() => {
            console.log(`Extracting timezone: '${match[0]}' into : ${result}`);
          });
          const hourOffset = parseInt(match[TIMEZONE_OFFSET_HOUR_OFFSET_GROUP]);
          const minuteOffset = parseInt(match[TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP] || "0");
          let timezoneOffset = hourOffset * 60 + minuteOffset;
          if (timezoneOffset > 14 * 60) {
            return;
          }
          if (match[TIMEZONE_OFFSET_SIGN_GROUP] === "-") {
            timezoneOffset = -timezoneOffset;
          }
          if (result.end != null) {
            result.end.assign("timezoneOffset", timezoneOffset);
          }
          result.start.assign("timezoneOffset", timezoneOffset);
          result.text += match[0];
        });
        return results;
      }
    };
    exports.default = ExtractTimezoneOffsetRefiner;
  }
});

// node_modules/chrono-node/dist/common/refiners/OverlapRemovalRefiner.js
var require_OverlapRemovalRefiner = __commonJS({
  "node_modules/chrono-node/dist/common/refiners/OverlapRemovalRefiner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var OverlapRemovalRefiner = class {
      refine(context, results) {
        if (results.length < 2) {
          return results;
        }
        const filteredResults = [];
        let prevResult = results[0];
        for (let i = 1; i < results.length; i++) {
          const result = results[i];
          if (result.index < prevResult.index + prevResult.text.length) {
            if (result.text.length > prevResult.text.length) {
              prevResult = result;
            }
          } else {
            filteredResults.push(prevResult);
            prevResult = result;
          }
        }
        if (prevResult != null) {
          filteredResults.push(prevResult);
        }
        return filteredResults;
      }
    };
    exports.default = OverlapRemovalRefiner;
  }
});

// node_modules/chrono-node/dist/common/refiners/ForwardDateRefiner.js
var require_ForwardDateRefiner = __commonJS({
  "node_modules/chrono-node/dist/common/refiners/ForwardDateRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var ForwardDateRefiner = class {
      refine(context, results) {
        if (!context.option.forwardDate) {
          return results;
        }
        results.forEach(function(result) {
          let refMoment = dayjs_1.default(context.refDate);
          if (result.start.isOnlyDayMonthComponent() && refMoment.isAfter(result.start.dayjs())) {
            for (let i = 0; i < 3 && refMoment.isAfter(result.start.dayjs()); i++) {
              result.start.imply("year", result.start.get("year") + 1);
              context.debug(() => {
                console.log(`Forward yearly adjusted for ${result} (${result.start})`);
              });
              if (result.end && !result.end.isCertain("year")) {
                result.end.imply("year", result.end.get("year") + 1);
                context.debug(() => {
                  console.log(`Forward yearly adjusted for ${result} (${result.end})`);
                });
              }
            }
          }
          if (result.start.isOnlyWeekdayComponent() && refMoment.isAfter(result.start.dayjs())) {
            if (refMoment.day() >= result.start.get("weekday")) {
              refMoment = refMoment.day(result.start.get("weekday") + 7);
            } else {
              refMoment = refMoment.day(result.start.get("weekday"));
            }
            result.start.imply("day", refMoment.date());
            result.start.imply("month", refMoment.month() + 1);
            result.start.imply("year", refMoment.year());
            context.debug(() => {
              console.log(`Forward weekly adjusted for ${result} (${result.start})`);
            });
            if (result.end && result.end.isOnlyWeekdayComponent()) {
              if (refMoment.day() > result.end.get("weekday")) {
                refMoment = refMoment.day(result.end.get("weekday") + 7);
              } else {
                refMoment = refMoment.day(result.end.get("weekday"));
              }
              result.end.imply("day", refMoment.date());
              result.end.imply("month", refMoment.month() + 1);
              result.end.imply("year", refMoment.year());
              context.debug(() => {
                console.log(`Forward weekly adjusted for ${result} (${result.end})`);
              });
            }
          }
        });
        return results;
      }
    };
    exports.default = ForwardDateRefiner;
  }
});

// node_modules/chrono-node/dist/common/refiners/UnlikelyFormatFilter.js
var require_UnlikelyFormatFilter = __commonJS({
  "node_modules/chrono-node/dist/common/refiners/UnlikelyFormatFilter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var abstractRefiners_1 = require_abstractRefiners();
    var UnlikelyFormatFilter = class extends abstractRefiners_1.Filter {
      constructor(strictMode) {
        super();
        this.strictMode = strictMode;
      }
      isValid(context, result) {
        if (result.text.replace(" ", "").match(/^\d*(\.\d*)?$/)) {
          context.debug(() => {
            console.log(`Removing unlikely result '${result.text}'`);
          });
          return false;
        }
        if (!result.start.isValidDate()) {
          context.debug(() => {
            console.log(`Removing invalid result: ${result} (${result.start})`);
          });
          return false;
        }
        if (result.end && !result.end.isValidDate()) {
          context.debug(() => {
            console.log(`Removing invalid result: ${result} (${result.end})`);
          });
          return false;
        }
        if (this.strictMode) {
          return this.isStrictModeValid(context, result);
        }
        return true;
      }
      isStrictModeValid(context, result) {
        if (result.start.isOnlyWeekdayComponent()) {
          context.debug(() => {
            console.log(`(Strict) Removing weekday only component: ${result} (${result.end})`);
          });
          return false;
        }
        if (result.start.isOnlyTime() && (!result.start.isCertain("hour") || !result.start.isCertain("minute"))) {
          context.debug(() => {
            console.log(`(Strict) Removing uncertain time component: ${result} (${result.end})`);
          });
          return false;
        }
        return true;
      }
    };
    exports.default = UnlikelyFormatFilter;
  }
});

// node_modules/chrono-node/dist/common/parsers/ISOFormatParser.js
var require_ISOFormatParser = __commonJS({
  "node_modules/chrono-node/dist/common/parsers/ISOFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp("([0-9]{4})\\-([0-9]{1,2})\\-([0-9]{1,2})(?:T([0-9]{1,2}):([0-9]{1,2})(?::([0-9]{1,2})(?:\\.(\\d{1,4}))?)?(?:Z|([+-]\\d{2}):?(\\d{2})?)?)?(?=\\W|$)", "i");
    var YEAR_NUMBER_GROUP = 1;
    var MONTH_NUMBER_GROUP = 2;
    var DATE_NUMBER_GROUP = 3;
    var HOUR_NUMBER_GROUP = 4;
    var MINUTE_NUMBER_GROUP = 5;
    var SECOND_NUMBER_GROUP = 6;
    var MILLISECOND_NUMBER_GROUP = 7;
    var TZD_HOUR_OFFSET_GROUP = 8;
    var TZD_MINUTE_OFFSET_GROUP = 9;
    var ISOFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const components = {};
        components["year"] = parseInt(match[YEAR_NUMBER_GROUP]);
        components["month"] = parseInt(match[MONTH_NUMBER_GROUP]);
        components["day"] = parseInt(match[DATE_NUMBER_GROUP]);
        if (match[HOUR_NUMBER_GROUP] != null) {
          components["hour"] = parseInt(match[HOUR_NUMBER_GROUP]);
          components["minute"] = parseInt(match[MINUTE_NUMBER_GROUP]);
          if (match[SECOND_NUMBER_GROUP] != null) {
            components["second"] = parseInt(match[SECOND_NUMBER_GROUP]);
          }
          if (match[MILLISECOND_NUMBER_GROUP] != null) {
            components["millisecond"] = parseInt(match[MILLISECOND_NUMBER_GROUP]);
          }
          if (match[TZD_HOUR_OFFSET_GROUP] == null) {
            components["timezoneOffset"] = 0;
          } else {
            const hourOffset = parseInt(match[TZD_HOUR_OFFSET_GROUP]);
            let minuteOffset = 0;
            if (match[TZD_MINUTE_OFFSET_GROUP] != null) {
              minuteOffset = parseInt(match[TZD_MINUTE_OFFSET_GROUP]);
            }
            let offset = hourOffset * 60;
            if (offset < 0) {
              offset -= minuteOffset;
            } else {
              offset += minuteOffset;
            }
            components["timezoneOffset"] = offset;
          }
        }
        return components;
      }
    };
    exports.default = ISOFormatParser;
  }
});

// node_modules/chrono-node/dist/common/refiners/MergeWeekdayComponentRefiner.js
var require_MergeWeekdayComponentRefiner = __commonJS({
  "node_modules/chrono-node/dist/common/refiners/MergeWeekdayComponentRefiner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var abstractRefiners_1 = require_abstractRefiners();
    var MergeWeekdayComponentRefiner = class extends abstractRefiners_1.MergingRefiner {
      mergeResults(textBetween, currentResult, nextResult) {
        const newResult = nextResult.clone();
        newResult.index = currentResult.index;
        newResult.text = currentResult.text + textBetween + newResult.text;
        newResult.start.assign("weekday", currentResult.start.get("weekday"));
        if (newResult.end) {
          newResult.end.assign("weekday", currentResult.start.get("weekday"));
        }
        return newResult;
      }
      shouldMergeResults(textBetween, currentResult, nextResult) {
        const weekdayThenNormalDate = currentResult.start.isOnlyWeekdayComponent() && !currentResult.start.isCertain("hour") && nextResult.start.isCertain("day");
        return weekdayThenNormalDate && textBetween.match(/^,?\s*$/) != null;
      }
    };
    exports.default = MergeWeekdayComponentRefiner;
  }
});

// node_modules/chrono-node/dist/configurations.js
var require_configurations = __commonJS({
  "node_modules/chrono-node/dist/configurations.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.includeCommonConfiguration = void 0;
    var ExtractTimezoneAbbrRefiner_1 = __importDefault2(require_ExtractTimezoneAbbrRefiner());
    var ExtractTimezoneOffsetRefiner_1 = __importDefault2(require_ExtractTimezoneOffsetRefiner());
    var OverlapRemovalRefiner_1 = __importDefault2(require_OverlapRemovalRefiner());
    var ForwardDateRefiner_1 = __importDefault2(require_ForwardDateRefiner());
    var UnlikelyFormatFilter_1 = __importDefault2(require_UnlikelyFormatFilter());
    var ISOFormatParser_1 = __importDefault2(require_ISOFormatParser());
    var MergeWeekdayComponentRefiner_1 = __importDefault2(require_MergeWeekdayComponentRefiner());
    function includeCommonConfiguration(configuration, strictMode = false) {
      configuration.parsers.unshift(new ISOFormatParser_1.default());
      configuration.refiners.unshift(new MergeWeekdayComponentRefiner_1.default());
      configuration.refiners.unshift(new ExtractTimezoneAbbrRefiner_1.default());
      configuration.refiners.unshift(new ExtractTimezoneOffsetRefiner_1.default());
      configuration.refiners.unshift(new OverlapRemovalRefiner_1.default());
      configuration.refiners.push(new OverlapRemovalRefiner_1.default());
      configuration.refiners.push(new ForwardDateRefiner_1.default());
      configuration.refiners.push(new UnlikelyFormatFilter_1.default(strictMode));
      return configuration;
    }
    exports.includeCommonConfiguration = includeCommonConfiguration;
  }
});

// node_modules/chrono-node/dist/common/casualReferences.js
var require_casualReferences = __commonJS({
  "node_modules/chrono-node/dist/common/casualReferences.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.noon = exports.morning = exports.midnight = exports.yesterdayEvening = exports.evening = exports.lastNight = exports.tonight = exports.theDayAfter = exports.tomorrow = exports.theDayBefore = exports.yesterday = exports.today = exports.now = void 0;
    var results_1 = require_results();
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var dayjs_2 = require_dayjs();
    var index_1 = require_dist();
    function now(reference) {
      const targetDate = dayjs_1.default(reference.instant);
      const component = new results_1.ParsingComponents(reference, {});
      dayjs_2.assignSimilarDate(component, targetDate);
      dayjs_2.assignSimilarTime(component, targetDate);
      if (reference.timezoneOffset !== null) {
        component.assign("timezoneOffset", targetDate.utcOffset());
      }
      return component;
    }
    exports.now = now;
    function today(reference) {
      const targetDate = dayjs_1.default(reference.instant);
      const component = new results_1.ParsingComponents(reference, {});
      dayjs_2.assignSimilarDate(component, targetDate);
      dayjs_2.implySimilarTime(component, targetDate);
      return component;
    }
    exports.today = today;
    function yesterday(reference) {
      return theDayBefore(reference, 1);
    }
    exports.yesterday = yesterday;
    function theDayBefore(reference, numDay) {
      return theDayAfter(reference, -numDay);
    }
    exports.theDayBefore = theDayBefore;
    function tomorrow(reference) {
      return theDayAfter(reference, 1);
    }
    exports.tomorrow = tomorrow;
    function theDayAfter(reference, nDays) {
      let targetDate = dayjs_1.default(reference.instant);
      const component = new results_1.ParsingComponents(reference, {});
      targetDate = targetDate.add(nDays, "day");
      dayjs_2.assignSimilarDate(component, targetDate);
      dayjs_2.implySimilarTime(component, targetDate);
      return component;
    }
    exports.theDayAfter = theDayAfter;
    function tonight(reference, implyHour = 22) {
      const targetDate = dayjs_1.default(reference.instant);
      const component = new results_1.ParsingComponents(reference, {});
      component.imply("hour", implyHour);
      component.imply("meridiem", index_1.Meridiem.PM);
      dayjs_2.assignSimilarDate(component, targetDate);
      return component;
    }
    exports.tonight = tonight;
    function lastNight(reference, implyHour = 0) {
      let targetDate = dayjs_1.default(reference.instant);
      const component = new results_1.ParsingComponents(reference, {});
      if (targetDate.hour() < 6) {
        targetDate = targetDate.add(-1, "day");
      }
      dayjs_2.assignSimilarDate(component, targetDate);
      component.imply("hour", implyHour);
      return component;
    }
    exports.lastNight = lastNight;
    function evening(reference, implyHour = 20) {
      const component = new results_1.ParsingComponents(reference, {});
      component.imply("meridiem", index_1.Meridiem.PM);
      component.imply("hour", implyHour);
      return component;
    }
    exports.evening = evening;
    function yesterdayEvening(reference, implyHour = 20) {
      let targetDate = dayjs_1.default(reference.instant);
      const component = new results_1.ParsingComponents(reference, {});
      targetDate = targetDate.add(-1, "day");
      dayjs_2.assignSimilarDate(component, targetDate);
      component.imply("hour", implyHour);
      component.imply("meridiem", index_1.Meridiem.PM);
      return component;
    }
    exports.yesterdayEvening = yesterdayEvening;
    function midnight(reference) {
      const component = new results_1.ParsingComponents(reference, {});
      component.imply("hour", 0);
      component.imply("minute", 0);
      component.imply("second", 0);
      return component;
    }
    exports.midnight = midnight;
    function morning(reference, implyHour = 6) {
      const component = new results_1.ParsingComponents(reference, {});
      component.imply("meridiem", index_1.Meridiem.AM);
      component.imply("hour", implyHour);
      return component;
    }
    exports.morning = morning;
    function noon(reference) {
      const component = new results_1.ParsingComponents(reference, {});
      component.imply("meridiem", index_1.Meridiem.AM);
      component.imply("hour", 12);
      return component;
    }
    exports.noon = noon;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENCasualDateParser.js
var require_ENCasualDateParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENCasualDateParser.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var dayjs_2 = require_dayjs();
    var references = __importStar2(require_casualReferences());
    var PATTERN = /(now|today|tonight|tomorrow|tmr|tmrw|yesterday|last\s*night)(?=\W|$)/i;
    var ENCasualDateParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern(context) {
        return PATTERN;
      }
      innerExtract(context, match) {
        let targetDate = dayjs_1.default(context.refDate);
        const lowerText = match[0].toLowerCase();
        const component = context.createParsingComponents();
        switch (lowerText) {
          case "now":
            return references.now(context.reference);
          case "today":
            return references.today(context.reference);
          case "yesterday":
            return references.yesterday(context.reference);
          case "tomorrow":
          case "tmr":
          case "tmrw":
            return references.tomorrow(context.reference);
          case "tonight":
            return references.tonight(context.reference);
          default:
            if (lowerText.match(/last\s*night/)) {
              if (targetDate.hour() > 6) {
                targetDate = targetDate.add(-1, "day");
              }
              dayjs_2.assignSimilarDate(component, targetDate);
              component.imply("hour", 0);
            }
            break;
        }
        return component;
      }
    };
    exports.default = ENCasualDateParser;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENCasualTimeParser.js
var require_ENCasualTimeParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENCasualTimeParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var index_1 = require_dist();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var dayjs_2 = require_dayjs();
    var PATTERN = /(?:this)?\s{0,3}(morning|afternoon|evening|night|midnight|noon)(?=\W|$)/i;
    var ENCasualTimeParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const targetDate = dayjs_1.default(context.refDate);
        const component = context.createParsingComponents();
        switch (match[1].toLowerCase()) {
          case "afternoon":
            component.imply("meridiem", index_1.Meridiem.PM);
            component.imply("hour", 15);
            break;
          case "evening":
          case "night":
            component.imply("meridiem", index_1.Meridiem.PM);
            component.imply("hour", 20);
            break;
          case "midnight":
            dayjs_2.assignTheNextDay(component, targetDate);
            component.imply("hour", 0);
            component.imply("minute", 0);
            component.imply("second", 0);
            break;
          case "morning":
            component.imply("meridiem", index_1.Meridiem.AM);
            component.imply("hour", 6);
            break;
          case "noon":
            component.imply("meridiem", index_1.Meridiem.AM);
            component.imply("hour", 12);
            break;
        }
        return component;
      }
    };
    exports.default = ENCasualTimeParser;
  }
});

// node_modules/chrono-node/dist/calculation/weeks.js
var require_weeks = __commonJS({
  "node_modules/chrono-node/dist/calculation/weeks.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDayJSClosestWeekday = exports.toDayJSWeekday = void 0;
    var dayjs_1 = __importDefault2(require_dayjs_min());
    function toDayJSWeekday(refDate, offset, modifier) {
      if (!modifier) {
        return toDayJSClosestWeekday(refDate, offset);
      }
      let date = dayjs_1.default(refDate);
      switch (modifier) {
        case "this":
          date = date.day(offset);
          break;
        case "next":
          date = date.day(offset + 7);
          break;
        case "last":
          date = date.day(offset - 7);
          break;
      }
      return date;
    }
    exports.toDayJSWeekday = toDayJSWeekday;
    function toDayJSClosestWeekday(refDate, offset) {
      let date = dayjs_1.default(refDate);
      const refOffset = date.day();
      if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {
        date = date.day(offset - 7);
      } else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {
        date = date.day(offset + 7);
      } else {
        date = date.day(offset);
      }
      return date;
    }
    exports.toDayJSClosestWeekday = toDayJSClosestWeekday;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENWeekdayParser.js
var require_ENWeekdayParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENWeekdayParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var weeks_1 = require_weeks();
    var PATTERN = new RegExp(`(?:(?:\\,|\\(|\\\uFF08)\\s*)?(?:on\\s*?)?(?:(this|last|past|next)\\s*)?(${pattern_1.matchAnyPattern(constants_1.WEEKDAY_DICTIONARY)})(?:\\s*(?:\\,|\\)|\\\uFF09))?(?:\\s*(this|last|past|next)\\s*week)?(?=\\W|$)`, "i");
    var PREFIX_GROUP = 1;
    var WEEKDAY_GROUP = 2;
    var POSTFIX_GROUP = 3;
    var ENWeekdayParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        const offset = constants_1.WEEKDAY_DICTIONARY[dayOfWeek];
        const prefix = match[PREFIX_GROUP];
        const postfix = match[POSTFIX_GROUP];
        let modifierWord = prefix || postfix;
        modifierWord = modifierWord || "";
        modifierWord = modifierWord.toLowerCase();
        let modifier = null;
        if (modifierWord == "last" || modifierWord == "past") {
          modifier = "last";
        } else if (modifierWord == "next") {
          modifier = "next";
        } else if (modifierWord == "this") {
          modifier = "this";
        }
        const date = weeks_1.toDayJSWeekday(context.refDate, offset, modifier);
        return context.createParsingComponents().assign("weekday", offset).imply("day", date.date()).imply("month", date.month() + 1).imply("year", date.year());
      }
    };
    exports.default = ENWeekdayParser;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENRelativeDateFormatParser.js
var require_ENRelativeDateFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENRelativeDateFormatParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants();
    var results_1 = require_results();
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var pattern_1 = require_pattern();
    var PATTERN = new RegExp(`(this|last|past|next|after\\s*this)\\s*(${pattern_1.matchAnyPattern(constants_1.TIME_UNIT_DICTIONARY)})(?=\\s*)(?=\\W|$)`, "i");
    var MODIFIER_WORD_GROUP = 1;
    var RELATIVE_WORD_GROUP = 2;
    var ENRelativeDateFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();
        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();
        const timeunit = constants_1.TIME_UNIT_DICTIONARY[unitWord];
        if (modifier == "next" || modifier.startsWith("after")) {
          const timeUnits = {};
          timeUnits[timeunit] = 1;
          return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        if (modifier == "last" || modifier == "past") {
          const timeUnits = {};
          timeUnits[timeunit] = -1;
          return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        const components = context.createParsingComponents();
        let date = dayjs_1.default(context.reference.instant);
        if (unitWord.match(/week/i)) {
          date = date.add(-date.get("d"), "d");
          components.imply("day", date.date());
          components.imply("month", date.month() + 1);
          components.imply("year", date.year());
        } else if (unitWord.match(/month/i)) {
          date = date.add(-date.date() + 1, "d");
          components.imply("day", date.date());
          components.assign("year", date.year());
          components.assign("month", date.month() + 1);
        } else if (unitWord.match(/year/i)) {
          date = date.add(-date.date() + 1, "d");
          date = date.add(-date.month(), "month");
          components.imply("day", date.date());
          components.imply("month", date.month() + 1);
          components.assign("year", date.year());
        }
        return components;
      }
    };
    exports.default = ENRelativeDateFormatParser;
  }
});

// node_modules/chrono-node/dist/chrono.js
var require_chrono = __commonJS({
  "node_modules/chrono-node/dist/chrono.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParsingContext = exports.Chrono = void 0;
    var results_1 = require_results();
    var en_1 = require_en();
    var Chrono = class {
      constructor(configuration) {
        configuration = configuration || en_1.createCasualConfiguration();
        this.parsers = [...configuration.parsers];
        this.refiners = [...configuration.refiners];
      }
      clone() {
        return new Chrono({
          parsers: [...this.parsers],
          refiners: [...this.refiners]
        });
      }
      parseDate(text2, referenceDate, option) {
        const results = this.parse(text2, referenceDate, option);
        return results.length > 0 ? results[0].start.date() : null;
      }
      parse(text2, referenceDate, option) {
        const context = new ParsingContext(text2, referenceDate, option);
        let results = [];
        this.parsers.forEach((parser) => {
          const parsedResults = Chrono.executeParser(context, parser);
          results = results.concat(parsedResults);
        });
        results.sort((a, b) => {
          return a.index - b.index;
        });
        this.refiners.forEach(function(refiner) {
          results = refiner.refine(context, results);
        });
        return results;
      }
      static executeParser(context, parser) {
        const results = [];
        const pattern = parser.pattern(context);
        const originalText = context.text;
        let remainingText = context.text;
        let match = pattern.exec(remainingText);
        while (match) {
          const index = match.index + originalText.length - remainingText.length;
          match.index = index;
          const result = parser.extract(context, match);
          if (!result) {
            remainingText = originalText.substring(match.index + 1);
            match = pattern.exec(remainingText);
            continue;
          }
          let parsedResult = null;
          if (result instanceof results_1.ParsingResult) {
            parsedResult = result;
          } else if (result instanceof results_1.ParsingComponents) {
            parsedResult = context.createParsingResult(match.index, match[0]);
            parsedResult.start = result;
          } else {
            parsedResult = context.createParsingResult(match.index, match[0], result);
          }
          context.debug(() => console.log(`${parser.constructor.name} extracted result ${parsedResult}`));
          results.push(parsedResult);
          remainingText = originalText.substring(index + parsedResult.text.length);
          match = pattern.exec(remainingText);
        }
        return results;
      }
    };
    exports.Chrono = Chrono;
    var ParsingContext = class {
      constructor(text2, refDate, option) {
        this.text = text2;
        this.reference = new results_1.ReferenceWithTimezone(refDate);
        this.option = option !== null && option !== void 0 ? option : {};
        this.refDate = this.reference.instant;
      }
      createParsingComponents(components) {
        if (components instanceof results_1.ParsingComponents) {
          return components;
        }
        return new results_1.ParsingComponents(this.reference, components);
      }
      createParsingResult(index, textOrEndIndex, startComponents, endComponents) {
        const text2 = typeof textOrEndIndex === "string" ? textOrEndIndex : this.text.substring(index, textOrEndIndex);
        const start = startComponents ? this.createParsingComponents(startComponents) : null;
        const end = endComponents ? this.createParsingComponents(endComponents) : null;
        return new results_1.ParsingResult(this.reference, index, text2, start, end);
      }
      debug(block) {
        if (this.option.debug) {
          if (this.option.debug instanceof Function) {
            this.option.debug(block);
          } else {
            const handler = this.option.debug;
            handler.debug(block);
          }
        }
      }
    };
    exports.ParsingContext = ParsingContext;
  }
});

// node_modules/chrono-node/dist/common/parsers/SlashDateFormatParser.js
var require_SlashDateFormatParser = __commonJS({
  "node_modules/chrono-node/dist/common/parsers/SlashDateFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var years_1 = require_years();
    var PATTERN = new RegExp("([^\\d]|^)([0-3]{0,1}[0-9]{1})[\\/\\.\\-]([0-3]{0,1}[0-9]{1})(?:[\\/\\.\\-]([0-9]{4}|[0-9]{2}))?(\\W|$)", "i");
    var OPENING_GROUP = 1;
    var ENDING_GROUP = 5;
    var FIRST_NUMBERS_GROUP = 2;
    var SECOND_NUMBERS_GROUP = 3;
    var YEAR_GROUP = 4;
    var SlashDateFormatParser = class {
      constructor(littleEndian) {
        this.groupNumberMonth = littleEndian ? SECOND_NUMBERS_GROUP : FIRST_NUMBERS_GROUP;
        this.groupNumberDay = littleEndian ? FIRST_NUMBERS_GROUP : SECOND_NUMBERS_GROUP;
      }
      pattern() {
        return PATTERN;
      }
      extract(context, match) {
        if (match[OPENING_GROUP] == "/" || match[ENDING_GROUP] == "/") {
          match.index += match[0].length;
          return;
        }
        const index = match.index + match[OPENING_GROUP].length;
        const text2 = match[0].substr(match[OPENING_GROUP].length, match[0].length - match[OPENING_GROUP].length - match[ENDING_GROUP].length);
        if (text2.match(/^\d\.\d$/) || text2.match(/^\d\.\d{1,2}\.\d{1,2}\s*$/)) {
          return;
        }
        if (!match[YEAR_GROUP] && match[0].indexOf("/") < 0) {
          return;
        }
        const result = context.createParsingResult(index, text2);
        let month = parseInt(match[this.groupNumberMonth]);
        let day = parseInt(match[this.groupNumberDay]);
        if (month < 1 || month > 12) {
          if (month > 12) {
            if (day >= 1 && day <= 12 && month <= 31) {
              [day, month] = [month, day];
            } else {
              return null;
            }
          }
        }
        if (day < 1 || day > 31) {
          return null;
        }
        result.start.assign("day", day);
        result.start.assign("month", month);
        if (match[YEAR_GROUP]) {
          const rawYearNumber = parseInt(match[YEAR_GROUP]);
          const year = years_1.findMostLikelyADYear(rawYearNumber);
          result.start.assign("year", year);
        } else {
          const year = years_1.findYearClosestToRef(context.refDate, day, month);
          result.start.imply("year", year);
        }
        return result;
      }
    };
    exports.default = SlashDateFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/en/parsers/ENTimeUnitCasualRelativeFormatParser.js
var require_ENTimeUnitCasualRelativeFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/en/parsers/ENTimeUnitCasualRelativeFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var timeunits_1 = require_timeunits();
    var PATTERN = new RegExp(`(this|last|past|next|after|\\+|-)\\s*(${constants_1.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
    var ENTimeUnitCasualRelativeFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const prefix = match[1].toLowerCase();
        let timeUnits = constants_1.parseTimeUnits(match[2]);
        switch (prefix) {
          case "last":
          case "past":
          case "-":
            timeUnits = timeunits_1.reverseTimeUnits(timeUnits);
            break;
        }
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
    };
    exports.default = ENTimeUnitCasualRelativeFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/en/refiners/ENMergeRelativeDateRefiner.js
var require_ENMergeRelativeDateRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/en/refiners/ENMergeRelativeDateRefiner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var abstractRefiners_1 = require_abstractRefiners();
    var results_1 = require_results();
    var constants_1 = require_constants();
    var timeunits_1 = require_timeunits();
    function hasImpliedEarlierReferenceDate(result) {
      return result.text.match(/\s+(before|from)$/i) != null;
    }
    function hasImpliedLaterReferenceDate(result) {
      return result.text.match(/\s+(after|since)$/i) != null;
    }
    var ENMergeRelativeDateRefiner = class extends abstractRefiners_1.MergingRefiner {
      patternBetween() {
        return /^\s*$/i;
      }
      shouldMergeResults(textBetween, currentResult, nextResult) {
        if (!textBetween.match(this.patternBetween())) {
          return false;
        }
        if (!hasImpliedEarlierReferenceDate(currentResult) && !hasImpliedLaterReferenceDate(currentResult)) {
          return false;
        }
        return !!nextResult.start.get("day") && !!nextResult.start.get("month") && !!nextResult.start.get("year");
      }
      mergeResults(textBetween, currentResult, nextResult) {
        let timeUnits = constants_1.parseTimeUnits(currentResult.text);
        if (hasImpliedEarlierReferenceDate(currentResult)) {
          timeUnits = timeunits_1.reverseTimeUnits(timeUnits);
        }
        const components = results_1.ParsingComponents.createRelativeFromReference(new results_1.ReferenceWithTimezone(nextResult.start.date()), timeUnits);
        return new results_1.ParsingResult(nextResult.reference, currentResult.index, `${currentResult.text}${textBetween}${nextResult.text}`, components);
      }
    };
    exports.default = ENMergeRelativeDateRefiner;
  }
});

// node_modules/chrono-node/dist/locales/en/index.js
var require_en = __commonJS({
  "node_modules/chrono-node/dist/locales/en/index.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfiguration = exports.createCasualConfiguration = exports.parseDate = exports.parse = exports.GB = exports.strict = exports.casual = void 0;
    var ENTimeUnitWithinFormatParser_1 = __importDefault2(require_ENTimeUnitWithinFormatParser());
    var ENMonthNameLittleEndianParser_1 = __importDefault2(require_ENMonthNameLittleEndianParser());
    var ENMonthNameMiddleEndianParser_1 = __importDefault2(require_ENMonthNameMiddleEndianParser());
    var ENMonthNameParser_1 = __importDefault2(require_ENMonthNameParser());
    var ENCasualYearMonthDayParser_1 = __importDefault2(require_ENCasualYearMonthDayParser());
    var ENSlashMonthFormatParser_1 = __importDefault2(require_ENSlashMonthFormatParser());
    var ENTimeExpressionParser_1 = __importDefault2(require_ENTimeExpressionParser());
    var ENTimeUnitAgoFormatParser_1 = __importDefault2(require_ENTimeUnitAgoFormatParser());
    var ENTimeUnitLaterFormatParser_1 = __importDefault2(require_ENTimeUnitLaterFormatParser());
    var ENMergeDateRangeRefiner_1 = __importDefault2(require_ENMergeDateRangeRefiner());
    var ENMergeDateTimeRefiner_1 = __importDefault2(require_ENMergeDateTimeRefiner());
    var configurations_1 = require_configurations();
    var ENCasualDateParser_1 = __importDefault2(require_ENCasualDateParser());
    var ENCasualTimeParser_1 = __importDefault2(require_ENCasualTimeParser());
    var ENWeekdayParser_1 = __importDefault2(require_ENWeekdayParser());
    var ENRelativeDateFormatParser_1 = __importDefault2(require_ENRelativeDateFormatParser());
    var chrono_1 = require_chrono();
    var SlashDateFormatParser_1 = __importDefault2(require_SlashDateFormatParser());
    var ENTimeUnitCasualRelativeFormatParser_1 = __importDefault2(require_ENTimeUnitCasualRelativeFormatParser());
    var ENMergeRelativeDateRefiner_1 = __importDefault2(require_ENMergeRelativeDateRefiner());
    exports.casual = new chrono_1.Chrono(createCasualConfiguration(false));
    exports.strict = new chrono_1.Chrono(createConfiguration(true, false));
    exports.GB = new chrono_1.Chrono(createConfiguration(false, true));
    function parse(text2, ref, option) {
      return exports.casual.parse(text2, ref, option);
    }
    exports.parse = parse;
    function parseDate3(text2, ref, option) {
      return exports.casual.parseDate(text2, ref, option);
    }
    exports.parseDate = parseDate3;
    function createCasualConfiguration(littleEndian = false) {
      const option = createConfiguration(false, littleEndian);
      option.parsers.unshift(new ENCasualDateParser_1.default());
      option.parsers.unshift(new ENCasualTimeParser_1.default());
      option.parsers.unshift(new ENMonthNameParser_1.default());
      option.parsers.unshift(new ENRelativeDateFormatParser_1.default());
      option.parsers.unshift(new ENTimeUnitCasualRelativeFormatParser_1.default());
      return option;
    }
    exports.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration(strictMode = true, littleEndian = false) {
      return configurations_1.includeCommonConfiguration({
        parsers: [
          new SlashDateFormatParser_1.default(littleEndian),
          new ENTimeUnitWithinFormatParser_1.default(),
          new ENMonthNameLittleEndianParser_1.default(),
          new ENMonthNameMiddleEndianParser_1.default(),
          new ENWeekdayParser_1.default(),
          new ENCasualYearMonthDayParser_1.default(),
          new ENSlashMonthFormatParser_1.default(),
          new ENTimeExpressionParser_1.default(strictMode),
          new ENTimeUnitAgoFormatParser_1.default(strictMode),
          new ENTimeUnitLaterFormatParser_1.default(strictMode)
        ],
        refiners: [new ENMergeRelativeDateRefiner_1.default(), new ENMergeDateTimeRefiner_1.default(), new ENMergeDateRangeRefiner_1.default()]
      }, strictMode);
    }
    exports.createConfiguration = createConfiguration;
  }
});

// node_modules/chrono-node/dist/locales/de/parsers/DETimeExpressionParser.js
var require_DETimeExpressionParser = __commonJS({
  "node_modules/chrono-node/dist/locales/de/parsers/DETimeExpressionParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractTimeExpressionParser_1 = require_AbstractTimeExpressionParser();
    var DETimeExpressionParser = class extends AbstractTimeExpressionParser_1.AbstractTimeExpressionParser {
      primaryPrefix() {
        return "(?:(?:um|von)\\s*)?";
      }
      followingPhase() {
        return "\\s*(?:\\-|\\\u2013|\\~|\\\u301C|bis)\\s*";
      }
      extractPrimaryTimeComponents(context, match) {
        if (match[0].match(/^\s*\d{4}\s*$/)) {
          return null;
        }
        return super.extractPrimaryTimeComponents(context, match);
      }
    };
    exports.default = DETimeExpressionParser;
  }
});

// node_modules/chrono-node/dist/locales/de/constants.js
var require_constants2 = __commonJS({
  "node_modules/chrono-node/dist/locales/de/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseTimeUnits = exports.TIME_UNITS_PATTERN = exports.parseYear = exports.YEAR_PATTERN = exports.parseNumberPattern = exports.NUMBER_PATTERN = exports.TIME_UNIT_DICTIONARY = exports.INTEGER_WORD_DICTIONARY = exports.MONTH_DICTIONARY = exports.WEEKDAY_DICTIONARY = void 0;
    var pattern_1 = require_pattern();
    var years_1 = require_years();
    exports.WEEKDAY_DICTIONARY = {
      "sonntag": 0,
      "so": 0,
      "montag": 1,
      "mo": 1,
      "dienstag": 2,
      "di": 2,
      "mittwoch": 3,
      "mi": 3,
      "donnerstag": 4,
      "do": 4,
      "freitag": 5,
      "fr": 5,
      "samstag": 6,
      "sa": 6
    };
    exports.MONTH_DICTIONARY = {
      "januar": 1,
      "j\xE4nner": 1,
      "janner": 1,
      "jan": 1,
      "jan.": 1,
      "februar": 2,
      "feber": 2,
      "feb": 2,
      "feb.": 2,
      "m\xE4rz": 3,
      "maerz": 3,
      "m\xE4r": 3,
      "m\xE4r.": 3,
      "mrz": 3,
      "mrz.": 3,
      "april": 4,
      "apr": 4,
      "apr.": 4,
      "mai": 5,
      "juni": 6,
      "jun": 6,
      "jun.": 6,
      "juli": 7,
      "jul": 7,
      "jul.": 7,
      "august": 8,
      "aug": 8,
      "aug.": 8,
      "september": 9,
      "sep": 9,
      "sep.": 9,
      "sept": 9,
      "sept.": 9,
      "oktober": 10,
      "okt": 10,
      "okt.": 10,
      "november": 11,
      "nov": 11,
      "nov.": 11,
      "dezember": 12,
      "dez": 12,
      "dez.": 12
    };
    exports.INTEGER_WORD_DICTIONARY = {
      "eins": 1,
      "eine": 1,
      "einem": 1,
      "einen": 1,
      "einer": 1,
      "zwei": 2,
      "drei": 3,
      "vier": 4,
      "f\xFCnf": 5,
      "fuenf": 5,
      "sechs": 6,
      "sieben": 7,
      "acht": 8,
      "neun": 9,
      "zehn": 10,
      "elf": 11,
      "zw\xF6lf": 12,
      "zwoelf": 12
    };
    exports.TIME_UNIT_DICTIONARY = {
      sek: "second",
      sekunde: "second",
      sekunden: "second",
      min: "minute",
      minute: "minute",
      minuten: "minute",
      h: "hour",
      std: "hour",
      stunde: "hour",
      stunden: "hour",
      tag: "d",
      tage: "d",
      tagen: "d",
      woche: "week",
      wochen: "week",
      monat: "month",
      monate: "month",
      monaten: "month",
      monats: "month",
      quartal: "quarter",
      quartals: "quarter",
      quartale: "quarter",
      quartalen: "quarter",
      a: "year",
      j: "year",
      jr: "year",
      jahr: "year",
      jahre: "year",
      jahren: "year",
      jahres: "year"
    };
    exports.NUMBER_PATTERN = `(?:${pattern_1.matchAnyPattern(exports.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|half(?:\\s*an?)?|an?\\b(?:\\s*few)?|few|several|a?\\s*couple\\s*(?:of)?)`;
    function parseNumberPattern(match) {
      const num = match.toLowerCase();
      if (exports.INTEGER_WORD_DICTIONARY[num] !== void 0) {
        return exports.INTEGER_WORD_DICTIONARY[num];
      } else if (num === "a" || num === "an") {
        return 1;
      } else if (num.match(/few/)) {
        return 3;
      } else if (num.match(/half/)) {
        return 0.5;
      } else if (num.match(/couple/)) {
        return 2;
      } else if (num.match(/several/)) {
        return 7;
      }
      return parseFloat(num);
    }
    exports.parseNumberPattern = parseNumberPattern;
    exports.YEAR_PATTERN = `(?:[0-9]{1,4}(?:\\s*[vn]\\.?\\s*(?:C(?:hr)?|(?:u\\.?|d\\.?(?:\\s*g\\.?)?)?\\s*Z)\\.?|\\s*(?:u\\.?|d\\.?(?:\\s*g\\.)?)\\s*Z\\.?)?)`;
    function parseYear(match) {
      if (/v/i.test(match)) {
        return -parseInt(match.replace(/[^0-9]+/gi, ""));
      }
      if (/n/i.test(match)) {
        return parseInt(match.replace(/[^0-9]+/gi, ""));
      }
      if (/z/i.test(match)) {
        return parseInt(match.replace(/[^0-9]+/gi, ""));
      }
      const rawYearNumber = parseInt(match);
      return years_1.findMostLikelyADYear(rawYearNumber);
    }
    exports.parseYear = parseYear;
    var SINGLE_TIME_UNIT_PATTERN = `(${exports.NUMBER_PATTERN})\\s{0,5}(${pattern_1.matchAnyPattern(exports.TIME_UNIT_DICTIONARY)})\\s{0,5}`;
    var SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
    exports.TIME_UNITS_PATTERN = pattern_1.repeatedTimeunitPattern("", SINGLE_TIME_UNIT_PATTERN);
    function parseTimeUnits(timeunitText) {
      const fragments = {};
      let remainingText = timeunitText;
      let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
      while (match) {
        collectDateTimeFragment(fragments, match);
        remainingText = remainingText.substring(match[0].length);
        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
      }
      return fragments;
    }
    exports.parseTimeUnits = parseTimeUnits;
    function collectDateTimeFragment(fragments, match) {
      const num = parseNumberPattern(match[1]);
      const unit = exports.TIME_UNIT_DICTIONARY[match[2].toLowerCase()];
      fragments[unit] = num;
    }
  }
});

// node_modules/chrono-node/dist/locales/de/parsers/DEWeekdayParser.js
var require_DEWeekdayParser = __commonJS({
  "node_modules/chrono-node/dist/locales/de/parsers/DEWeekdayParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants2();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var weeks_1 = require_weeks();
    var PATTERN = new RegExp(`(?:(?:\\,|\\(|\\\uFF08)\\s*)?(?:a[mn]\\s*?)?(?:(diese[mn]|letzte[mn]|n(?:\xE4|ae)chste[mn])\\s*)?(${pattern_1.matchAnyPattern(constants_1.WEEKDAY_DICTIONARY)})(?:\\s*(?:\\,|\\)|\\\uFF09))?(?:\\s*(diese|letzte|n(?:\xE4|ae)chste)\\s*woche)?(?=\\W|$)`, "i");
    var PREFIX_GROUP = 1;
    var SUFFIX_GROUP = 3;
    var WEEKDAY_GROUP = 2;
    var DEWeekdayParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        const offset = constants_1.WEEKDAY_DICTIONARY[dayOfWeek];
        const prefix = match[PREFIX_GROUP];
        const postfix = match[SUFFIX_GROUP];
        let modifierWord = prefix || postfix;
        modifierWord = modifierWord || "";
        modifierWord = modifierWord.toLowerCase();
        let modifier = null;
        if (modifierWord.match(/letzte/)) {
          modifier = "last";
        } else if (modifierWord.match(/chste/)) {
          modifier = "next";
        } else if (modifierWord.match(/diese/)) {
          modifier = "this";
        }
        const date = weeks_1.toDayJSWeekday(context.refDate, offset, modifier);
        return context.createParsingComponents().assign("weekday", offset).imply("day", date.date()).imply("month", date.month() + 1).imply("year", date.year());
      }
    };
    exports.default = DEWeekdayParser;
  }
});

// node_modules/chrono-node/dist/locales/de/parsers/DESpecificTimeExpressionParser.js
var require_DESpecificTimeExpressionParser = __commonJS({
  "node_modules/chrono-node/dist/locales/de/parsers/DESpecificTimeExpressionParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var index_1 = require_dist();
    var FIRST_REG_PATTERN = new RegExp("(^|\\s|T)(?:(?:um|von)\\s*)?(\\d{1,2})(?:h|:)?(?:(\\d{1,2})(?:m|:)?)?(?:(\\d{1,2})(?:s)?)?(?:\\s*Uhr)?(?:\\s*(morgens|vormittags|nachmittags|abends|nachts|am\\s+(?:Morgen|Vormittag|Nachmittag|Abend)|in\\s+der\\s+Nacht))?(?=\\W|$)", "i");
    var SECOND_REG_PATTERN = new RegExp("^\\s*(\\-|\\\u2013|\\~|\\\u301C|bis(?:\\s+um)?|\\?)\\s*(\\d{1,2})(?:h|:)?(?:(\\d{1,2})(?:m|:)?)?(?:(\\d{1,2})(?:s)?)?(?:\\s*Uhr)?(?:\\s*(morgens|vormittags|nachmittags|abends|nachts|am\\s+(?:Morgen|Vormittag|Nachmittag|Abend)|in\\s+der\\s+Nacht))?(?=\\W|$)", "i");
    var HOUR_GROUP = 2;
    var MINUTE_GROUP = 3;
    var SECOND_GROUP = 4;
    var AM_PM_HOUR_GROUP = 5;
    var DESpecificTimeExpressionParser = class {
      pattern(context) {
        return FIRST_REG_PATTERN;
      }
      extract(context, match) {
        const result = context.createParsingResult(match.index + match[1].length, match[0].substring(match[1].length));
        if (result.text.match(/^\d{4}$/)) {
          match.index += match[0].length;
          return null;
        }
        result.start = DESpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), match);
        if (!result.start) {
          match.index += match[0].length;
          return null;
        }
        const remainingText = context.text.substring(match.index + match[0].length);
        const secondMatch = SECOND_REG_PATTERN.exec(remainingText);
        if (secondMatch) {
          result.end = DESpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), secondMatch);
          if (result.end) {
            result.text += secondMatch[0];
          }
        }
        return result;
      }
      static extractTimeComponent(extractingComponents, match) {
        let hour = 0;
        let minute = 0;
        let meridiem = null;
        hour = parseInt(match[HOUR_GROUP]);
        if (match[MINUTE_GROUP] != null) {
          minute = parseInt(match[MINUTE_GROUP]);
        }
        if (minute >= 60 || hour > 24) {
          return null;
        }
        if (hour >= 12) {
          meridiem = index_1.Meridiem.PM;
        }
        if (match[AM_PM_HOUR_GROUP] != null) {
          if (hour > 12)
            return null;
          const ampm = match[AM_PM_HOUR_GROUP].toLowerCase();
          if (ampm.match(/morgen|vormittag/)) {
            meridiem = index_1.Meridiem.AM;
            if (hour == 12) {
              hour = 0;
            }
          }
          if (ampm.match(/nachmittag|abend/)) {
            meridiem = index_1.Meridiem.PM;
            if (hour != 12) {
              hour += 12;
            }
          }
          if (ampm.match(/nacht/)) {
            if (hour == 12) {
              meridiem = index_1.Meridiem.AM;
              hour = 0;
            } else if (hour < 6) {
              meridiem = index_1.Meridiem.AM;
            } else {
              meridiem = index_1.Meridiem.PM;
              hour += 12;
            }
          }
        }
        extractingComponents.assign("hour", hour);
        extractingComponents.assign("minute", minute);
        if (meridiem !== null) {
          extractingComponents.assign("meridiem", meridiem);
        } else {
          if (hour < 12) {
            extractingComponents.imply("meridiem", index_1.Meridiem.AM);
          } else {
            extractingComponents.imply("meridiem", index_1.Meridiem.PM);
          }
        }
        if (match[SECOND_GROUP] != null) {
          const second = parseInt(match[SECOND_GROUP]);
          if (second >= 60)
            return null;
          extractingComponents.assign("second", second);
        }
        return extractingComponents;
      }
    };
    exports.default = DESpecificTimeExpressionParser;
  }
});

// node_modules/chrono-node/dist/locales/de/refiners/DEMergeDateRangeRefiner.js
var require_DEMergeDateRangeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/de/refiners/DEMergeDateRangeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateRangeRefiner_1 = __importDefault2(require_AbstractMergeDateRangeRefiner());
    var DEMergeDateRangeRefiner = class extends AbstractMergeDateRangeRefiner_1.default {
      patternBetween() {
        return /^\s*(bis(?:\s*(?:am|zum))?|-)\s*$/i;
      }
    };
    exports.default = DEMergeDateRangeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/de/refiners/DEMergeDateTimeRefiner.js
var require_DEMergeDateTimeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/de/refiners/DEMergeDateTimeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateTimeRefiner_1 = __importDefault2(require_AbstractMergeDateTimeRefiner());
    var DEMergeDateTimeRefiner = class extends AbstractMergeDateTimeRefiner_1.default {
      patternBetween() {
        return new RegExp("^\\s*(T|um|am|,|-)?\\s*$");
      }
    };
    exports.default = DEMergeDateTimeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/de/parsers/DECasualTimeParser.js
var require_DECasualTimeParser = __commonJS({
  "node_modules/chrono-node/dist/locales/de/parsers/DECasualTimeParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var index_1 = require_dist();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var dayjs_2 = require_dayjs();
    var timeunits_1 = require_timeunits();
    var DECasualTimeParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern(context) {
        return /(diesen)?\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht)(?=\W|$)/i;
      }
      innerExtract(context, match) {
        const targetDate = dayjs_1.default(context.refDate);
        const timeKeywordPattern = match[2].toLowerCase();
        const component = context.createParsingComponents();
        dayjs_2.implySimilarTime(component, targetDate);
        return DECasualTimeParser.extractTimeComponents(component, timeKeywordPattern);
      }
      static extractTimeComponents(component, timeKeywordPattern) {
        switch (timeKeywordPattern) {
          case "morgen":
            component.imply("hour", 6);
            component.imply("minute", 0);
            component.imply("second", 0);
            component.imply("meridiem", index_1.Meridiem.AM);
            break;
          case "vormittag":
            component.imply("hour", 9);
            component.imply("minute", 0);
            component.imply("second", 0);
            component.imply("meridiem", index_1.Meridiem.AM);
            break;
          case "mittag":
          case "mittags":
            component.imply("hour", 12);
            component.imply("minute", 0);
            component.imply("second", 0);
            component.imply("meridiem", index_1.Meridiem.AM);
            break;
          case "nachmittag":
            component.imply("hour", 15);
            component.imply("minute", 0);
            component.imply("second", 0);
            component.imply("meridiem", index_1.Meridiem.PM);
            break;
          case "abend":
            component.imply("hour", 18);
            component.imply("minute", 0);
            component.imply("second", 0);
            component.imply("meridiem", index_1.Meridiem.PM);
            break;
          case "nacht":
            component.imply("hour", 22);
            component.imply("minute", 0);
            component.imply("second", 0);
            component.imply("meridiem", index_1.Meridiem.PM);
            break;
          case "mitternacht":
            if (component.get("hour") > 1) {
              component = timeunits_1.addImpliedTimeUnits(component, { "day": 1 });
            }
            component.imply("hour", 0);
            component.imply("minute", 0);
            component.imply("second", 0);
            component.imply("meridiem", index_1.Meridiem.AM);
            break;
        }
        return component;
      }
    };
    exports.default = DECasualTimeParser;
  }
});

// node_modules/chrono-node/dist/locales/de/parsers/DECasualDateParser.js
var require_DECasualDateParser = __commonJS({
  "node_modules/chrono-node/dist/locales/de/parsers/DECasualDateParser.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var dayjs_2 = require_dayjs();
    var DECasualTimeParser_1 = __importDefault2(require_DECasualTimeParser());
    var references = __importStar2(require_casualReferences());
    var PATTERN = new RegExp(`(jetzt|heute|morgen|\xFCbermorgen|uebermorgen|gestern|vorgestern|letzte\\s*nacht)(?:\\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht))?(?=\\W|$)`, "i");
    var DATE_GROUP = 1;
    var TIME_GROUP = 2;
    var DECasualDateParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern(context) {
        return PATTERN;
      }
      innerExtract(context, match) {
        let targetDate = dayjs_1.default(context.refDate);
        const dateKeyword = (match[DATE_GROUP] || "").toLowerCase();
        const timeKeyword = (match[TIME_GROUP] || "").toLowerCase();
        let component = context.createParsingComponents();
        switch (dateKeyword) {
          case "jetzt":
            component = references.now(context.reference);
            break;
          case "heute":
            component = references.today(context.reference);
            break;
          case "morgen":
            dayjs_2.assignTheNextDay(component, targetDate);
            break;
          case "\xFCbermorgen":
          case "uebermorgen":
            targetDate = targetDate.add(1, "day");
            dayjs_2.assignTheNextDay(component, targetDate);
            break;
          case "gestern":
            targetDate = targetDate.add(-1, "day");
            dayjs_2.assignSimilarDate(component, targetDate);
            dayjs_2.implySimilarTime(component, targetDate);
            break;
          case "vorgestern":
            targetDate = targetDate.add(-2, "day");
            dayjs_2.assignSimilarDate(component, targetDate);
            dayjs_2.implySimilarTime(component, targetDate);
            break;
          default:
            if (dateKeyword.match(/letzte\s*nacht/)) {
              if (targetDate.hour() > 6) {
                targetDate = targetDate.add(-1, "day");
              }
              dayjs_2.assignSimilarDate(component, targetDate);
              component.imply("hour", 0);
            }
            break;
        }
        if (timeKeyword) {
          component = DECasualTimeParser_1.default.extractTimeComponents(component, timeKeyword);
        }
        return component;
      }
    };
    exports.default = DECasualDateParser;
  }
});

// node_modules/chrono-node/dist/locales/de/parsers/DEMonthNameLittleEndianParser.js
var require_DEMonthNameLittleEndianParser = __commonJS({
  "node_modules/chrono-node/dist/locales/de/parsers/DEMonthNameLittleEndianParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var years_1 = require_years();
    var constants_1 = require_constants2();
    var constants_2 = require_constants2();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp(`(?:am\\s*?)?(?:den\\s*?)?([0-9]{1,2})\\.(?:\\s*(?:bis(?:\\s*(?:am|zum))?|\\-|\\\u2013|\\s)\\s*([0-9]{1,2})\\.?)?\\s*(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})(?:(?:-|/|,?\\s*)(${constants_2.YEAR_PATTERN}(?![^\\s]\\d)))?(?=\\W|$)`, "i");
    var DATE_GROUP = 1;
    var DATE_TO_GROUP = 2;
    var MONTH_NAME_GROUP = 3;
    var YEAR_GROUP = 4;
    var DEMonthNameLittleEndianParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const month = constants_1.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = parseInt(match[DATE_GROUP]);
        if (day > 31) {
          match.index = match.index + match[DATE_GROUP].length;
          return null;
        }
        result.start.assign("month", month);
        result.start.assign("day", day);
        if (match[YEAR_GROUP]) {
          const yearNumber = constants_2.parseYear(match[YEAR_GROUP]);
          result.start.assign("year", yearNumber);
        } else {
          const year = years_1.findYearClosestToRef(context.refDate, day, month);
          result.start.imply("year", year);
        }
        if (match[DATE_TO_GROUP]) {
          const endDate = parseInt(match[DATE_TO_GROUP]);
          result.end = result.start.clone();
          result.end.assign("day", endDate);
        }
        return result;
      }
    };
    exports.default = DEMonthNameLittleEndianParser;
  }
});

// node_modules/chrono-node/dist/locales/de/parsers/DETimeUnitRelativeFormatParser.js
var require_DETimeUnitRelativeFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/de/parsers/DETimeUnitRelativeFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants2();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var timeunits_1 = require_timeunits();
    var pattern_1 = require_pattern();
    var DETimeUnitAgoFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      constructor() {
        super();
      }
      innerPattern() {
        return new RegExp(`(?:\\s*((?:n\xE4chste|kommende|folgende|letzte|vergangene|vorige|vor(?:her|an)gegangene)(?:s|n|m|r)?|vor|in)\\s*)?(${constants_1.NUMBER_PATTERN})?(?:\\s*(n\xE4chste|kommende|folgende|letzte|vergangene|vorige|vor(?:her|an)gegangene)(?:s|n|m|r)?)?\\s*(${pattern_1.matchAnyPattern(constants_1.TIME_UNIT_DICTIONARY)})`, "i");
      }
      innerExtract(context, match) {
        const num = match[2] ? constants_1.parseNumberPattern(match[2]) : 1;
        const unit = constants_1.TIME_UNIT_DICTIONARY[match[4].toLowerCase()];
        let timeUnits = {};
        timeUnits[unit] = num;
        let modifier = match[1] || match[3] || "";
        modifier = modifier.toLowerCase();
        if (!modifier) {
          return;
        }
        if (/vor/.test(modifier) || /letzte/.test(modifier) || /vergangen/.test(modifier)) {
          timeUnits = timeunits_1.reverseTimeUnits(timeUnits);
        }
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
    };
    exports.default = DETimeUnitAgoFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/de/index.js
var require_de = __commonJS({
  "node_modules/chrono-node/dist/locales/de/index.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfiguration = exports.createCasualConfiguration = exports.parseDate = exports.parse = exports.strict = exports.casual = void 0;
    var configurations_1 = require_configurations();
    var chrono_1 = require_chrono();
    var SlashDateFormatParser_1 = __importDefault2(require_SlashDateFormatParser());
    var ISOFormatParser_1 = __importDefault2(require_ISOFormatParser());
    var DETimeExpressionParser_1 = __importDefault2(require_DETimeExpressionParser());
    var DEWeekdayParser_1 = __importDefault2(require_DEWeekdayParser());
    var DESpecificTimeExpressionParser_1 = __importDefault2(require_DESpecificTimeExpressionParser());
    var DEMergeDateRangeRefiner_1 = __importDefault2(require_DEMergeDateRangeRefiner());
    var DEMergeDateTimeRefiner_1 = __importDefault2(require_DEMergeDateTimeRefiner());
    var DECasualDateParser_1 = __importDefault2(require_DECasualDateParser());
    var DECasualTimeParser_1 = __importDefault2(require_DECasualTimeParser());
    var DEMonthNameLittleEndianParser_1 = __importDefault2(require_DEMonthNameLittleEndianParser());
    var DETimeUnitRelativeFormatParser_1 = __importDefault2(require_DETimeUnitRelativeFormatParser());
    exports.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports.strict = new chrono_1.Chrono(createConfiguration(true));
    function parse(text2, ref, option) {
      return exports.casual.parse(text2, ref, option);
    }
    exports.parse = parse;
    function parseDate3(text2, ref, option) {
      return exports.casual.parseDate(text2, ref, option);
    }
    exports.parseDate = parseDate3;
    function createCasualConfiguration(littleEndian = true) {
      const option = createConfiguration(false, littleEndian);
      option.parsers.unshift(new DECasualTimeParser_1.default());
      option.parsers.unshift(new DECasualDateParser_1.default());
      option.parsers.unshift(new DETimeUnitRelativeFormatParser_1.default());
      return option;
    }
    exports.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration(strictMode = true, littleEndian = true) {
      return configurations_1.includeCommonConfiguration({
        parsers: [
          new ISOFormatParser_1.default(),
          new SlashDateFormatParser_1.default(littleEndian),
          new DETimeExpressionParser_1.default(),
          new DESpecificTimeExpressionParser_1.default(),
          new DEMonthNameLittleEndianParser_1.default(),
          new DEWeekdayParser_1.default()
        ],
        refiners: [new DEMergeDateRangeRefiner_1.default(), new DEMergeDateTimeRefiner_1.default()]
      }, strictMode);
    }
    exports.createConfiguration = createConfiguration;
  }
});

// node_modules/chrono-node/dist/locales/fr/parsers/FRCasualDateParser.js
var require_FRCasualDateParser = __commonJS({
  "node_modules/chrono-node/dist/locales/fr/parsers/FRCasualDateParser.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var index_1 = require_dist();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var dayjs_2 = require_dayjs();
    var references = __importStar2(require_casualReferences());
    var FRCasualDateParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern(context) {
        return /(maintenant|aujourd'hui|demain|hier|cette\s*nuit|la\s*veille)(?=\W|$)/i;
      }
      innerExtract(context, match) {
        let targetDate = dayjs_1.default(context.refDate);
        const lowerText = match[0].toLowerCase();
        const component = context.createParsingComponents();
        switch (lowerText) {
          case "maintenant":
            return references.now(context.reference);
          case "aujourd'hui":
            return references.today(context.reference);
          case "hier":
            return references.yesterday(context.reference);
          case "demain":
            return references.tomorrow(context.reference);
          default:
            if (lowerText.match(/cette\s*nuit/)) {
              dayjs_2.assignSimilarDate(component, targetDate);
              component.imply("hour", 22);
              component.imply("meridiem", index_1.Meridiem.PM);
            } else if (lowerText.match(/la\s*veille/)) {
              targetDate = targetDate.add(-1, "day");
              dayjs_2.assignSimilarDate(component, targetDate);
              component.imply("hour", 0);
            }
        }
        return component;
      }
    };
    exports.default = FRCasualDateParser;
  }
});

// node_modules/chrono-node/dist/locales/fr/parsers/FRCasualTimeParser.js
var require_FRCasualTimeParser = __commonJS({
  "node_modules/chrono-node/dist/locales/fr/parsers/FRCasualTimeParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var index_1 = require_dist();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var FRCasualTimeParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern(context) {
        return /(cet?)?\s*(matin|soir|après-midi|aprem|a midi|à minuit)(?=\W|$)/i;
      }
      innerExtract(context, match) {
        const suffixLower = match[2].toLowerCase();
        const component = context.createParsingComponents();
        switch (suffixLower) {
          case "apr\xE8s-midi":
          case "aprem":
            component.imply("hour", 14);
            component.imply("minute", 0);
            component.imply("meridiem", index_1.Meridiem.PM);
            break;
          case "soir":
            component.imply("hour", 18);
            component.imply("minute", 0);
            component.imply("meridiem", index_1.Meridiem.PM);
            break;
          case "matin":
            component.imply("hour", 8);
            component.imply("minute", 0);
            component.imply("meridiem", index_1.Meridiem.AM);
            break;
          case "a midi":
            component.imply("hour", 12);
            component.imply("minute", 0);
            component.imply("meridiem", index_1.Meridiem.AM);
            break;
          case "\xE0 minuit":
            component.imply("hour", 0);
            component.imply("meridiem", index_1.Meridiem.AM);
            break;
        }
        return component;
      }
    };
    exports.default = FRCasualTimeParser;
  }
});

// node_modules/chrono-node/dist/locales/fr/parsers/FRTimeExpressionParser.js
var require_FRTimeExpressionParser = __commonJS({
  "node_modules/chrono-node/dist/locales/fr/parsers/FRTimeExpressionParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractTimeExpressionParser_1 = require_AbstractTimeExpressionParser();
    var FRTimeExpressionParser = class extends AbstractTimeExpressionParser_1.AbstractTimeExpressionParser {
      primaryPrefix() {
        return "(?:(?:[\xE0a])\\s*)?";
      }
      followingPhase() {
        return "\\s*(?:\\-|\\\u2013|\\~|\\\u301C|[\xE0a]|\\?)\\s*";
      }
      extractPrimaryTimeComponents(context, match) {
        if (match[0].match(/^\s*\d{4}\s*$/)) {
          return null;
        }
        return super.extractPrimaryTimeComponents(context, match);
      }
    };
    exports.default = FRTimeExpressionParser;
  }
});

// node_modules/chrono-node/dist/locales/fr/refiners/FRMergeDateTimeRefiner.js
var require_FRMergeDateTimeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/fr/refiners/FRMergeDateTimeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateTimeRefiner_1 = __importDefault2(require_AbstractMergeDateTimeRefiner());
    var FRMergeDateTimeRefiner = class extends AbstractMergeDateTimeRefiner_1.default {
      patternBetween() {
        return new RegExp("^\\s*(T|\xE0|a|vers|de|,|-)?\\s*$");
      }
    };
    exports.default = FRMergeDateTimeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/fr/refiners/FRMergeDateRangeRefiner.js
var require_FRMergeDateRangeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/fr/refiners/FRMergeDateRangeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateRangeRefiner_1 = __importDefault2(require_AbstractMergeDateRangeRefiner());
    var FRMergeDateRangeRefiner = class extends AbstractMergeDateRangeRefiner_1.default {
      patternBetween() {
        return /^\s*(à|a|-)\s*$/i;
      }
    };
    exports.default = FRMergeDateRangeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/fr/constants.js
var require_constants3 = __commonJS({
  "node_modules/chrono-node/dist/locales/fr/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseTimeUnits = exports.TIME_UNITS_PATTERN = exports.parseYear = exports.YEAR_PATTERN = exports.parseOrdinalNumberPattern = exports.ORDINAL_NUMBER_PATTERN = exports.parseNumberPattern = exports.NUMBER_PATTERN = exports.TIME_UNIT_DICTIONARY = exports.INTEGER_WORD_DICTIONARY = exports.MONTH_DICTIONARY = exports.WEEKDAY_DICTIONARY = void 0;
    var pattern_1 = require_pattern();
    exports.WEEKDAY_DICTIONARY = {
      "dimanche": 0,
      "dim": 0,
      "lundi": 1,
      "lun": 1,
      "mardi": 2,
      "mar": 2,
      "mercredi": 3,
      "mer": 3,
      "jeudi": 4,
      "jeu": 4,
      "vendredi": 5,
      "ven": 5,
      "samedi": 6,
      "sam": 6
    };
    exports.MONTH_DICTIONARY = {
      "janvier": 1,
      "jan": 1,
      "jan.": 1,
      "f\xE9vrier": 2,
      "f\xE9v": 2,
      "f\xE9v.": 2,
      "fevrier": 2,
      "fev": 2,
      "fev.": 2,
      "mars": 3,
      "mar": 3,
      "mar.": 3,
      "avril": 4,
      "avr": 4,
      "avr.": 4,
      "mai": 5,
      "juin": 6,
      "jun": 6,
      "juillet": 7,
      "juil": 7,
      "jul": 7,
      "jul.": 7,
      "ao\xFBt": 8,
      "aout": 8,
      "septembre": 9,
      "sep": 9,
      "sep.": 9,
      "sept": 9,
      "sept.": 9,
      "octobre": 10,
      "oct": 10,
      "oct.": 10,
      "novembre": 11,
      "nov": 11,
      "nov.": 11,
      "d\xE9cembre": 12,
      "decembre": 12,
      "dec": 12,
      "dec.": 12
    };
    exports.INTEGER_WORD_DICTIONARY = {
      "un": 1,
      "deux": 2,
      "trois": 3,
      "quatre": 4,
      "cinq": 5,
      "six": 6,
      "sept": 7,
      "huit": 8,
      "neuf": 9,
      "dix": 10,
      "onze": 11,
      "douze": 12,
      "treize": 13
    };
    exports.TIME_UNIT_DICTIONARY = {
      "sec": "second",
      "seconde": "second",
      "secondes": "second",
      "min": "minute",
      "mins": "minute",
      "minute": "minute",
      "minutes": "minute",
      "h": "hour",
      "hr": "hour",
      "hrs": "hour",
      "heure": "hour",
      "heures": "hour",
      "jour": "d",
      "jours": "d",
      "semaine": "week",
      "semaines": "week",
      "mois": "month",
      "trimestre": "quarter",
      "trimestres": "quarter",
      "ans": "year",
      "ann\xE9e": "year",
      "ann\xE9es": "year"
    };
    exports.NUMBER_PATTERN = `(?:${pattern_1.matchAnyPattern(exports.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|une?\\b|quelques?|demi-?)`;
    function parseNumberPattern(match) {
      const num = match.toLowerCase();
      if (exports.INTEGER_WORD_DICTIONARY[num] !== void 0) {
        return exports.INTEGER_WORD_DICTIONARY[num];
      } else if (num === "une" || num === "un") {
        return 1;
      } else if (num.match(/quelques?/)) {
        return 3;
      } else if (num.match(/demi-?/)) {
        return 0.5;
      }
      return parseFloat(num);
    }
    exports.parseNumberPattern = parseNumberPattern;
    exports.ORDINAL_NUMBER_PATTERN = `(?:[0-9]{1,2}(?:er)?)`;
    function parseOrdinalNumberPattern(match) {
      let num = match.toLowerCase();
      num = num.replace(/(?:er)$/i, "");
      return parseInt(num);
    }
    exports.parseOrdinalNumberPattern = parseOrdinalNumberPattern;
    exports.YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\s*(?:AC|AD|p\\.\\s*C(?:hr?)?\\.\\s*n\\.)|[1-2][0-9]{3}|[5-9][0-9])`;
    function parseYear(match) {
      if (/AC/i.test(match)) {
        match = match.replace(/BC/i, "");
        return -parseInt(match);
      }
      if (/AD/i.test(match) || /C/i.test(match)) {
        match = match.replace(/[^\d]+/i, "");
        return parseInt(match);
      }
      let yearNumber = parseInt(match);
      if (yearNumber < 100) {
        if (yearNumber > 50) {
          yearNumber = yearNumber + 1900;
        } else {
          yearNumber = yearNumber + 2e3;
        }
      }
      return yearNumber;
    }
    exports.parseYear = parseYear;
    var SINGLE_TIME_UNIT_PATTERN = `(${exports.NUMBER_PATTERN})\\s{0,5}(${pattern_1.matchAnyPattern(exports.TIME_UNIT_DICTIONARY)})\\s{0,5}`;
    var SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
    exports.TIME_UNITS_PATTERN = pattern_1.repeatedTimeunitPattern("", SINGLE_TIME_UNIT_PATTERN);
    function parseTimeUnits(timeunitText) {
      const fragments = {};
      let remainingText = timeunitText;
      let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
      while (match) {
        collectDateTimeFragment(fragments, match);
        remainingText = remainingText.substring(match[0].length);
        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
      }
      return fragments;
    }
    exports.parseTimeUnits = parseTimeUnits;
    function collectDateTimeFragment(fragments, match) {
      const num = parseNumberPattern(match[1]);
      const unit = exports.TIME_UNIT_DICTIONARY[match[2].toLowerCase()];
      fragments[unit] = num;
    }
  }
});

// node_modules/chrono-node/dist/locales/fr/parsers/FRWeekdayParser.js
var require_FRWeekdayParser = __commonJS({
  "node_modules/chrono-node/dist/locales/fr/parsers/FRWeekdayParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants3();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var weeks_1 = require_weeks();
    var PATTERN = new RegExp(`(?:(?:\\,|\\(|\\\uFF08)\\s*)?(?:(?:ce)\\s*)?(${pattern_1.matchAnyPattern(constants_1.WEEKDAY_DICTIONARY)})(?:\\s*(?:\\,|\\)|\\\uFF09))?(?:\\s*(dernier|prochain)\\s*)?(?=\\W|\\d|$)`, "i");
    var WEEKDAY_GROUP = 1;
    var POSTFIX_GROUP = 2;
    var FRWeekdayParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        const offset = constants_1.WEEKDAY_DICTIONARY[dayOfWeek];
        if (offset === void 0) {
          return null;
        }
        let suffix = match[POSTFIX_GROUP];
        suffix = suffix || "";
        suffix = suffix.toLowerCase();
        let modifier = null;
        if (suffix == "dernier") {
          modifier = "last";
        } else if (suffix == "prochain") {
          modifier = "next";
        }
        const date = weeks_1.toDayJSWeekday(context.refDate, offset, modifier);
        return context.createParsingComponents().assign("weekday", offset).imply("day", date.date()).imply("month", date.month() + 1).imply("year", date.year());
      }
    };
    exports.default = FRWeekdayParser;
  }
});

// node_modules/chrono-node/dist/locales/fr/parsers/FRSpecificTimeExpressionParser.js
var require_FRSpecificTimeExpressionParser = __commonJS({
  "node_modules/chrono-node/dist/locales/fr/parsers/FRSpecificTimeExpressionParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var index_1 = require_dist();
    var FIRST_REG_PATTERN = new RegExp("(^|\\s|T)(?:(?:[\xE0a])\\s*)?(\\d{1,2})(?:h|:)?(?:(\\d{1,2})(?:m|:)?)?(?:(\\d{1,2})(?:s|:)?)?(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?(?=\\W|$)", "i");
    var SECOND_REG_PATTERN = new RegExp("^\\s*(\\-|\\\u2013|\\~|\\\u301C|[\xE0a]|\\?)\\s*(\\d{1,2})(?:h|:)?(?:(\\d{1,2})(?:m|:)?)?(?:(\\d{1,2})(?:s|:)?)?(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?(?=\\W|$)", "i");
    var HOUR_GROUP = 2;
    var MINUTE_GROUP = 3;
    var SECOND_GROUP = 4;
    var AM_PM_HOUR_GROUP = 5;
    var FRSpecificTimeExpressionParser = class {
      pattern(context) {
        return FIRST_REG_PATTERN;
      }
      extract(context, match) {
        const result = context.createParsingResult(match.index + match[1].length, match[0].substring(match[1].length));
        if (result.text.match(/^\d{4}$/)) {
          match.index += match[0].length;
          return null;
        }
        result.start = FRSpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), match);
        if (!result.start) {
          match.index += match[0].length;
          return null;
        }
        const remainingText = context.text.substring(match.index + match[0].length);
        const secondMatch = SECOND_REG_PATTERN.exec(remainingText);
        if (secondMatch) {
          result.end = FRSpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), secondMatch);
          if (result.end) {
            result.text += secondMatch[0];
          }
        }
        return result;
      }
      static extractTimeComponent(extractingComponents, match) {
        let hour = 0;
        let minute = 0;
        let meridiem = null;
        hour = parseInt(match[HOUR_GROUP]);
        if (match[MINUTE_GROUP] != null) {
          minute = parseInt(match[MINUTE_GROUP]);
        }
        if (minute >= 60 || hour > 24) {
          return null;
        }
        if (hour >= 12) {
          meridiem = index_1.Meridiem.PM;
        }
        if (match[AM_PM_HOUR_GROUP] != null) {
          if (hour > 12)
            return null;
          const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
          if (ampm == "a") {
            meridiem = index_1.Meridiem.AM;
            if (hour == 12) {
              hour = 0;
            }
          }
          if (ampm == "p") {
            meridiem = index_1.Meridiem.PM;
            if (hour != 12) {
              hour += 12;
            }
          }
        }
        extractingComponents.assign("hour", hour);
        extractingComponents.assign("minute", minute);
        if (meridiem !== null) {
          extractingComponents.assign("meridiem", meridiem);
        } else {
          if (hour < 12) {
            extractingComponents.imply("meridiem", index_1.Meridiem.AM);
          } else {
            extractingComponents.imply("meridiem", index_1.Meridiem.PM);
          }
        }
        if (match[SECOND_GROUP] != null) {
          const second = parseInt(match[SECOND_GROUP]);
          if (second >= 60)
            return null;
          extractingComponents.assign("second", second);
        }
        return extractingComponents;
      }
    };
    exports.default = FRSpecificTimeExpressionParser;
  }
});

// node_modules/chrono-node/dist/locales/fr/parsers/FRMonthNameLittleEndianParser.js
var require_FRMonthNameLittleEndianParser = __commonJS({
  "node_modules/chrono-node/dist/locales/fr/parsers/FRMonthNameLittleEndianParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var years_1 = require_years();
    var constants_1 = require_constants3();
    var constants_2 = require_constants3();
    var constants_3 = require_constants3();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp(`(?:on\\s*?)?(${constants_3.ORDINAL_NUMBER_PATTERN})(?:\\s*(?:au|\\-|\\\u2013|jusqu'au?|\\s)\\s*(${constants_3.ORDINAL_NUMBER_PATTERN}))?(?:-|/|\\s*(?:de)?\\s*)(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})(?:(?:-|/|,?\\s*)(${constants_2.YEAR_PATTERN}(?![^\\s]\\d)))?(?=\\W|$)`, "i");
    var DATE_GROUP = 1;
    var DATE_TO_GROUP = 2;
    var MONTH_NAME_GROUP = 3;
    var YEAR_GROUP = 4;
    var FRMonthNameLittleEndianParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const month = constants_1.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = constants_3.parseOrdinalNumberPattern(match[DATE_GROUP]);
        if (day > 31) {
          match.index = match.index + match[DATE_GROUP].length;
          return null;
        }
        result.start.assign("month", month);
        result.start.assign("day", day);
        if (match[YEAR_GROUP]) {
          const yearNumber = constants_2.parseYear(match[YEAR_GROUP]);
          result.start.assign("year", yearNumber);
        } else {
          const year = years_1.findYearClosestToRef(context.refDate, day, month);
          result.start.imply("year", year);
        }
        if (match[DATE_TO_GROUP]) {
          const endDate = constants_3.parseOrdinalNumberPattern(match[DATE_TO_GROUP]);
          result.end = result.start.clone();
          result.end.assign("day", endDate);
        }
        return result;
      }
    };
    exports.default = FRMonthNameLittleEndianParser;
  }
});

// node_modules/chrono-node/dist/locales/fr/parsers/FRTimeUnitAgoFormatParser.js
var require_FRTimeUnitAgoFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/fr/parsers/FRTimeUnitAgoFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants3();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var timeunits_1 = require_timeunits();
    var FRTimeUnitAgoFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      constructor() {
        super();
      }
      innerPattern() {
        return new RegExp(`il y a\\s*(${constants_1.TIME_UNITS_PATTERN})(?=(?:\\W|$))`, "i");
      }
      innerExtract(context, match) {
        const timeUnits = constants_1.parseTimeUnits(match[1]);
        const outputTimeUnits = timeunits_1.reverseTimeUnits(timeUnits);
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);
      }
    };
    exports.default = FRTimeUnitAgoFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/fr/parsers/FRTimeUnitWithinFormatParser.js
var require_FRTimeUnitWithinFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/fr/parsers/FRTimeUnitWithinFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants3();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var FRTimeUnitWithinFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return new RegExp(`(?:dans|en|pour|pendant|de)\\s*(${constants_1.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
      }
      innerExtract(context, match) {
        const timeUnits = constants_1.parseTimeUnits(match[1]);
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
    };
    exports.default = FRTimeUnitWithinFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/fr/parsers/FRTimeUnitRelativeFormatParser.js
var require_FRTimeUnitRelativeFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/fr/parsers/FRTimeUnitRelativeFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants3();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var timeunits_1 = require_timeunits();
    var pattern_1 = require_pattern();
    var FRTimeUnitAgoFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      constructor() {
        super();
      }
      innerPattern() {
        return new RegExp(`(?:les?|la|l'|du|des?)\\s*(${constants_1.NUMBER_PATTERN})?(?:\\s*(prochaine?s?|derni[e\xE8]re?s?|pass[\xE9e]e?s?|pr[\xE9e]c[\xE9e]dents?|suivante?s?))?\\s*(${pattern_1.matchAnyPattern(constants_1.TIME_UNIT_DICTIONARY)})(?:\\s*(prochaine?s?|derni[e\xE8]re?s?|pass[\xE9e]e?s?|pr[\xE9e]c[\xE9e]dents?|suivante?s?))?`, "i");
      }
      innerExtract(context, match) {
        const num = match[1] ? constants_1.parseNumberPattern(match[1]) : 1;
        const unit = constants_1.TIME_UNIT_DICTIONARY[match[3].toLowerCase()];
        let timeUnits = {};
        timeUnits[unit] = num;
        let modifier = match[2] || match[4] || "";
        modifier = modifier.toLowerCase();
        if (!modifier) {
          return;
        }
        if (/derni[eè]re?s?/.test(modifier) || /pass[ée]e?s?/.test(modifier) || /pr[ée]c[ée]dents?/.test(modifier)) {
          timeUnits = timeunits_1.reverseTimeUnits(timeUnits);
        }
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
    };
    exports.default = FRTimeUnitAgoFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/fr/index.js
var require_fr = __commonJS({
  "node_modules/chrono-node/dist/locales/fr/index.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfiguration = exports.createCasualConfiguration = exports.parseDate = exports.parse = exports.strict = exports.casual = void 0;
    var configurations_1 = require_configurations();
    var chrono_1 = require_chrono();
    var FRCasualDateParser_1 = __importDefault2(require_FRCasualDateParser());
    var FRCasualTimeParser_1 = __importDefault2(require_FRCasualTimeParser());
    var SlashDateFormatParser_1 = __importDefault2(require_SlashDateFormatParser());
    var FRTimeExpressionParser_1 = __importDefault2(require_FRTimeExpressionParser());
    var FRMergeDateTimeRefiner_1 = __importDefault2(require_FRMergeDateTimeRefiner());
    var FRMergeDateRangeRefiner_1 = __importDefault2(require_FRMergeDateRangeRefiner());
    var FRWeekdayParser_1 = __importDefault2(require_FRWeekdayParser());
    var FRSpecificTimeExpressionParser_1 = __importDefault2(require_FRSpecificTimeExpressionParser());
    var FRMonthNameLittleEndianParser_1 = __importDefault2(require_FRMonthNameLittleEndianParser());
    var FRTimeUnitAgoFormatParser_1 = __importDefault2(require_FRTimeUnitAgoFormatParser());
    var FRTimeUnitWithinFormatParser_1 = __importDefault2(require_FRTimeUnitWithinFormatParser());
    var FRTimeUnitRelativeFormatParser_1 = __importDefault2(require_FRTimeUnitRelativeFormatParser());
    exports.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports.strict = new chrono_1.Chrono(createConfiguration(true));
    function parse(text2, ref, option) {
      return exports.casual.parse(text2, ref, option);
    }
    exports.parse = parse;
    function parseDate3(text2, ref, option) {
      return exports.casual.parseDate(text2, ref, option);
    }
    exports.parseDate = parseDate3;
    function createCasualConfiguration(littleEndian = true) {
      const option = createConfiguration(false, littleEndian);
      option.parsers.unshift(new FRCasualDateParser_1.default());
      option.parsers.unshift(new FRCasualTimeParser_1.default());
      option.parsers.unshift(new FRTimeUnitRelativeFormatParser_1.default());
      return option;
    }
    exports.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration(strictMode = true, littleEndian = true) {
      return configurations_1.includeCommonConfiguration({
        parsers: [
          new SlashDateFormatParser_1.default(littleEndian),
          new FRMonthNameLittleEndianParser_1.default(),
          new FRTimeExpressionParser_1.default(),
          new FRSpecificTimeExpressionParser_1.default(),
          new FRTimeUnitAgoFormatParser_1.default(),
          new FRTimeUnitWithinFormatParser_1.default(),
          new FRWeekdayParser_1.default()
        ],
        refiners: [new FRMergeDateTimeRefiner_1.default(), new FRMergeDateRangeRefiner_1.default()]
      }, strictMode);
    }
    exports.createConfiguration = createConfiguration;
  }
});

// node_modules/chrono-node/dist/locales/ja/constants.js
var require_constants4 = __commonJS({
  "node_modules/chrono-node/dist/locales/ja/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toHankaku = void 0;
    function toHankaku(text2) {
      return String(text2).replace(/\u2019/g, "'").replace(/\u201D/g, '"').replace(/\u3000/g, " ").replace(/\uFFE5/g, "\xA5").replace(/[\uFF01\uFF03-\uFF06\uFF08\uFF09\uFF0C-\uFF19\uFF1C-\uFF1F\uFF21-\uFF3B\uFF3D\uFF3F\uFF41-\uFF5B\uFF5D\uFF5E]/g, alphaNum);
    }
    exports.toHankaku = toHankaku;
    function alphaNum(token) {
      return String.fromCharCode(token.charCodeAt(0) - 65248);
    }
  }
});

// node_modules/chrono-node/dist/locales/ja/parsers/JPStandardParser.js
var require_JPStandardParser = __commonJS({
  "node_modules/chrono-node/dist/locales/ja/parsers/JPStandardParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants4();
    var years_1 = require_years();
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var PATTERN = /(?:(?:([同今本])|((昭和|平成|令和)?([0-9０-９]{1,4}|元)))年\s*)?([0-9０-９]{1,2})月\s*([0-9０-９]{1,2})日/i;
    var SPECIAL_YEAR_GROUP = 1;
    var TYPICAL_YEAR_GROUP = 2;
    var ERA_GROUP = 3;
    var YEAR_NUMBER_GROUP = 4;
    var MONTH_GROUP = 5;
    var DAY_GROUP = 6;
    var JPStandardParser = class {
      pattern() {
        return PATTERN;
      }
      extract(context, match) {
        const month = parseInt(constants_1.toHankaku(match[MONTH_GROUP]));
        const day = parseInt(constants_1.toHankaku(match[DAY_GROUP]));
        const components = context.createParsingComponents({
          day,
          month
        });
        if (match[SPECIAL_YEAR_GROUP] && match[SPECIAL_YEAR_GROUP].match("\u540C|\u4ECA|\u672C")) {
          const moment = dayjs_1.default(context.refDate);
          components.assign("year", moment.year());
        }
        if (match[TYPICAL_YEAR_GROUP]) {
          const yearNumText = match[YEAR_NUMBER_GROUP];
          let year = yearNumText == "\u5143" ? 1 : parseInt(constants_1.toHankaku(yearNumText));
          if (match[ERA_GROUP] == "\u4EE4\u548C") {
            year += 2018;
          } else if (match[ERA_GROUP] == "\u5E73\u6210") {
            year += 1988;
          } else if (match[ERA_GROUP] == "\u662D\u548C") {
            year += 1925;
          }
          components.assign("year", year);
        } else {
          const year = years_1.findYearClosestToRef(context.refDate, day, month);
          components.imply("year", year);
        }
        return components;
      }
    };
    exports.default = JPStandardParser;
  }
});

// node_modules/chrono-node/dist/locales/ja/refiners/JPMergeDateRangeRefiner.js
var require_JPMergeDateRangeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/ja/refiners/JPMergeDateRangeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateRangeRefiner_1 = __importDefault2(require_AbstractMergeDateRangeRefiner());
    var JPMergeDateRangeRefiner = class extends AbstractMergeDateRangeRefiner_1.default {
      patternBetween() {
        return /^\s*(から|ー|-)\s*$/i;
      }
    };
    exports.default = JPMergeDateRangeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/ja/parsers/JPCasualDateParser.js
var require_JPCasualDateParser = __commonJS({
  "node_modules/chrono-node/dist/locales/ja/parsers/JPCasualDateParser.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var index_1 = require_dist();
    var references = __importStar2(require_casualReferences());
    var PATTERN = /今日|当日|昨日|明日|今夜|今夕|今晩|今朝/i;
    var JPCasualDateParser = class {
      pattern() {
        return PATTERN;
      }
      extract(context, match) {
        const text2 = match[0];
        const date = dayjs_1.default(context.refDate);
        const components = context.createParsingComponents();
        switch (text2) {
          case "\u6628\u65E5":
            return references.yesterday(context.reference);
          case "\u660E\u65E5":
            return references.tomorrow(context.reference);
          case "\u4ECA\u65E5":
          case "\u5F53\u65E5":
            return references.today(context.reference);
        }
        if (text2 == "\u4ECA\u591C" || text2 == "\u4ECA\u5915" || text2 == "\u4ECA\u6669") {
          components.imply("hour", 22);
          components.assign("meridiem", index_1.Meridiem.PM);
        } else if (text2.match("\u4ECA\u671D")) {
          components.imply("hour", 6);
          components.assign("meridiem", index_1.Meridiem.AM);
        }
        components.assign("day", date.date());
        components.assign("month", date.month() + 1);
        components.assign("year", date.year());
        return components;
      }
    };
    exports.default = JPCasualDateParser;
  }
});

// node_modules/chrono-node/dist/locales/ja/index.js
var require_ja = __commonJS({
  "node_modules/chrono-node/dist/locales/ja/index.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfiguration = exports.createCasualConfiguration = exports.parseDate = exports.parse = exports.strict = exports.casual = void 0;
    var JPStandardParser_1 = __importDefault2(require_JPStandardParser());
    var JPMergeDateRangeRefiner_1 = __importDefault2(require_JPMergeDateRangeRefiner());
    var JPCasualDateParser_1 = __importDefault2(require_JPCasualDateParser());
    var chrono_1 = require_chrono();
    exports.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports.strict = new chrono_1.Chrono(createConfiguration());
    function parse(text2, ref, option) {
      return exports.casual.parse(text2, ref, option);
    }
    exports.parse = parse;
    function parseDate3(text2, ref, option) {
      return exports.casual.parseDate(text2, ref, option);
    }
    exports.parseDate = parseDate3;
    function createCasualConfiguration() {
      const option = createConfiguration();
      option.parsers.unshift(new JPCasualDateParser_1.default());
      return option;
    }
    exports.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration() {
      return {
        parsers: [new JPStandardParser_1.default()],
        refiners: [new JPMergeDateRangeRefiner_1.default()]
      };
    }
    exports.createConfiguration = createConfiguration;
  }
});

// node_modules/chrono-node/dist/locales/pt/constants.js
var require_constants5 = __commonJS({
  "node_modules/chrono-node/dist/locales/pt/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseYear = exports.YEAR_PATTERN = exports.MONTH_DICTIONARY = exports.WEEKDAY_DICTIONARY = void 0;
    exports.WEEKDAY_DICTIONARY = {
      "domingo": 0,
      "dom": 0,
      "segunda": 1,
      "segunda-feira": 1,
      "seg": 1,
      "ter\xE7a": 2,
      "ter\xE7a-feira": 2,
      "ter": 2,
      "quarta": 3,
      "quarta-feira": 3,
      "qua": 3,
      "quinta": 4,
      "quinta-feira": 4,
      "qui": 4,
      "sexta": 5,
      "sexta-feira": 5,
      "sex": 5,
      "s\xE1bado": 6,
      "sabado": 6,
      "sab": 6
    };
    exports.MONTH_DICTIONARY = {
      "janeiro": 1,
      "jan": 1,
      "jan.": 1,
      "fevereiro": 2,
      "fev": 2,
      "fev.": 2,
      "mar\xE7o": 3,
      "mar": 3,
      "mar.": 3,
      "abril": 4,
      "abr": 4,
      "abr.": 4,
      "maio": 5,
      "mai": 5,
      "mai.": 5,
      "junho": 6,
      "jun": 6,
      "jun.": 6,
      "julho": 7,
      "jul": 7,
      "jul.": 7,
      "agosto": 8,
      "ago": 8,
      "ago.": 8,
      "setembro": 9,
      "set": 9,
      "set.": 9,
      "outubro": 10,
      "out": 10,
      "out.": 10,
      "novembro": 11,
      "nov": 11,
      "nov.": 11,
      "dezembro": 12,
      "dez": 12,
      "dez.": 12
    };
    exports.YEAR_PATTERN = "[0-9]{1,4}(?![^\\s]\\d)(?:\\s*[a|d]\\.?\\s*c\\.?|\\s*a\\.?\\s*d\\.?)?";
    function parseYear(match) {
      if (match.match(/^[0-9]{1,4}$/)) {
        let yearNumber = parseInt(match);
        if (yearNumber < 100) {
          if (yearNumber > 50) {
            yearNumber = yearNumber + 1900;
          } else {
            yearNumber = yearNumber + 2e3;
          }
        }
        return yearNumber;
      }
      if (match.match(/a\.?\s*c\.?/i)) {
        match = match.replace(/a\.?\s*c\.?/i, "");
        return -parseInt(match);
      }
      return parseInt(match);
    }
    exports.parseYear = parseYear;
  }
});

// node_modules/chrono-node/dist/locales/pt/parsers/PTWeekdayParser.js
var require_PTWeekdayParser = __commonJS({
  "node_modules/chrono-node/dist/locales/pt/parsers/PTWeekdayParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants5();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var weeks_1 = require_weeks();
    var PATTERN = new RegExp(`(?:(?:\\,|\\(|\\\uFF08)\\s*)?(?:(este|esta|passado|pr[o\xF3]ximo)\\s*)?(${pattern_1.matchAnyPattern(constants_1.WEEKDAY_DICTIONARY)})(?:\\s*(?:\\,|\\)|\\\uFF09))?(?:\\s*(este|esta|passado|pr[\xF3o]ximo)\\s*semana)?(?=\\W|\\d|$)`, "i");
    var PREFIX_GROUP = 1;
    var WEEKDAY_GROUP = 2;
    var POSTFIX_GROUP = 3;
    var PTWeekdayParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        const offset = constants_1.WEEKDAY_DICTIONARY[dayOfWeek];
        if (offset === void 0) {
          return null;
        }
        const prefix = match[PREFIX_GROUP];
        const postfix = match[POSTFIX_GROUP];
        let norm = prefix || postfix || "";
        norm = norm.toLowerCase();
        let modifier = null;
        if (norm == "passado") {
          modifier = "this";
        } else if (norm == "pr\xF3ximo" || norm == "proximo") {
          modifier = "next";
        } else if (norm == "este") {
          modifier = "this";
        }
        const date = weeks_1.toDayJSWeekday(context.refDate, offset, modifier);
        return context.createParsingComponents().assign("weekday", offset).imply("day", date.date()).imply("month", date.month() + 1).imply("year", date.year());
      }
    };
    exports.default = PTWeekdayParser;
  }
});

// node_modules/chrono-node/dist/locales/pt/parsers/PTTimeExpressionParser.js
var require_PTTimeExpressionParser = __commonJS({
  "node_modules/chrono-node/dist/locales/pt/parsers/PTTimeExpressionParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractTimeExpressionParser_1 = require_AbstractTimeExpressionParser();
    var PTTimeExpressionParser = class extends AbstractTimeExpressionParser_1.AbstractTimeExpressionParser {
      primaryPrefix() {
        return "(?:(?:ao?|\xE0s?|das|da|de|do)\\s*)?";
      }
      followingPhase() {
        return "\\s*(?:\\-|\\\u2013|\\~|\\\u301C|a(?:o)?|\\?)\\s*";
      }
    };
    exports.default = PTTimeExpressionParser;
  }
});

// node_modules/chrono-node/dist/locales/pt/refiners/PTMergeDateTimeRefiner.js
var require_PTMergeDateTimeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/pt/refiners/PTMergeDateTimeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateTimeRefiner_1 = __importDefault2(require_AbstractMergeDateTimeRefiner());
    var PTMergeDateTimeRefiner = class extends AbstractMergeDateTimeRefiner_1.default {
      patternBetween() {
        return new RegExp("^\\s*(?:,|\xE0)?\\s*$");
      }
    };
    exports.default = PTMergeDateTimeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/pt/refiners/PTMergeDateRangeRefiner.js
var require_PTMergeDateRangeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/pt/refiners/PTMergeDateRangeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateRangeRefiner_1 = __importDefault2(require_AbstractMergeDateRangeRefiner());
    var PTMergeDateRangeRefiner = class extends AbstractMergeDateRangeRefiner_1.default {
      patternBetween() {
        return /^\s*(?:-)\s*$/i;
      }
    };
    exports.default = PTMergeDateRangeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/pt/parsers/PTMonthNameLittleEndianParser.js
var require_PTMonthNameLittleEndianParser = __commonJS({
  "node_modules/chrono-node/dist/locales/pt/parsers/PTMonthNameLittleEndianParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var years_1 = require_years();
    var constants_1 = require_constants5();
    var constants_2 = require_constants5();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp(`([0-9]{1,2})(?:\xBA|\xAA|\xB0)?(?:\\s*(?:desde|de|\\-|\\\u2013|ao?|\\s)\\s*([0-9]{1,2})(?:\xBA|\xAA|\xB0)?)?\\s*(?:de)?\\s*(?:-|/|\\s*(?:de|,)?\\s*)(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})(?:\\s*(?:de|,)?\\s*(${constants_2.YEAR_PATTERN}))?(?=\\W|$)`, "i");
    var DATE_GROUP = 1;
    var DATE_TO_GROUP = 2;
    var MONTH_NAME_GROUP = 3;
    var YEAR_GROUP = 4;
    var PTMonthNameLittleEndianParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const month = constants_1.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = parseInt(match[DATE_GROUP]);
        if (day > 31) {
          match.index = match.index + match[DATE_GROUP].length;
          return null;
        }
        result.start.assign("month", month);
        result.start.assign("day", day);
        if (match[YEAR_GROUP]) {
          const yearNumber = constants_2.parseYear(match[YEAR_GROUP]);
          result.start.assign("year", yearNumber);
        } else {
          const year = years_1.findYearClosestToRef(context.refDate, day, month);
          result.start.imply("year", year);
        }
        if (match[DATE_TO_GROUP]) {
          const endDate = parseInt(match[DATE_TO_GROUP]);
          result.end = result.start.clone();
          result.end.assign("day", endDate);
        }
        return result;
      }
    };
    exports.default = PTMonthNameLittleEndianParser;
  }
});

// node_modules/chrono-node/dist/locales/pt/parsers/PTCasualDateParser.js
var require_PTCasualDateParser = __commonJS({
  "node_modules/chrono-node/dist/locales/pt/parsers/PTCasualDateParser.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var references = __importStar2(require_casualReferences());
    var PTCasualDateParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern(context) {
        return /(agora|hoje|amanha|amanhã|ontem)(?=\W|$)/i;
      }
      innerExtract(context, match) {
        const lowerText = match[0].toLowerCase();
        const component = context.createParsingComponents();
        switch (lowerText) {
          case "agora":
            return references.now(context.reference);
          case "hoje":
            return references.today(context.reference);
          case "amanha":
          case "amanh\xE3":
            return references.tomorrow(context.reference);
          case "ontem":
            return references.yesterday(context.reference);
        }
        return component;
      }
    };
    exports.default = PTCasualDateParser;
  }
});

// node_modules/chrono-node/dist/locales/pt/parsers/PTCasualTimeParser.js
var require_PTCasualTimeParser = __commonJS({
  "node_modules/chrono-node/dist/locales/pt/parsers/PTCasualTimeParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var index_1 = require_dist();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var dayjs_1 = require_dayjs();
    var dayjs_2 = __importDefault2(require_dayjs_min());
    var PTCasualTimeParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return /(?:esta\s*)?(manha|manhã|tarde|meia-noite|meio-dia|noite)(?=\W|$)/i;
      }
      innerExtract(context, match) {
        const targetDate = dayjs_2.default(context.refDate);
        const component = context.createParsingComponents();
        switch (match[1].toLowerCase()) {
          case "tarde":
            component.imply("meridiem", index_1.Meridiem.PM);
            component.imply("hour", 15);
            break;
          case "noite":
            component.imply("meridiem", index_1.Meridiem.PM);
            component.imply("hour", 22);
            break;
          case "manha":
          case "manh\xE3":
            component.imply("meridiem", index_1.Meridiem.AM);
            component.imply("hour", 6);
            break;
          case "meia-noite":
            dayjs_1.assignTheNextDay(component, targetDate);
            component.imply("hour", 0);
            component.imply("minute", 0);
            component.imply("second", 0);
            break;
          case "meio-dia":
            component.imply("meridiem", index_1.Meridiem.AM);
            component.imply("hour", 12);
            break;
        }
        return component;
      }
    };
    exports.default = PTCasualTimeParser;
  }
});

// node_modules/chrono-node/dist/locales/pt/index.js
var require_pt = __commonJS({
  "node_modules/chrono-node/dist/locales/pt/index.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfiguration = exports.createCasualConfiguration = exports.parseDate = exports.parse = exports.strict = exports.casual = void 0;
    var configurations_1 = require_configurations();
    var chrono_1 = require_chrono();
    var SlashDateFormatParser_1 = __importDefault2(require_SlashDateFormatParser());
    var PTWeekdayParser_1 = __importDefault2(require_PTWeekdayParser());
    var PTTimeExpressionParser_1 = __importDefault2(require_PTTimeExpressionParser());
    var PTMergeDateTimeRefiner_1 = __importDefault2(require_PTMergeDateTimeRefiner());
    var PTMergeDateRangeRefiner_1 = __importDefault2(require_PTMergeDateRangeRefiner());
    var PTMonthNameLittleEndianParser_1 = __importDefault2(require_PTMonthNameLittleEndianParser());
    var PTCasualDateParser_1 = __importDefault2(require_PTCasualDateParser());
    var PTCasualTimeParser_1 = __importDefault2(require_PTCasualTimeParser());
    exports.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports.strict = new chrono_1.Chrono(createConfiguration(true));
    function parse(text2, ref, option) {
      return exports.casual.parse(text2, ref, option);
    }
    exports.parse = parse;
    function parseDate3(text2, ref, option) {
      return exports.casual.parseDate(text2, ref, option);
    }
    exports.parseDate = parseDate3;
    function createCasualConfiguration(littleEndian = true) {
      const option = createConfiguration(false, littleEndian);
      option.parsers.push(new PTCasualDateParser_1.default());
      option.parsers.push(new PTCasualTimeParser_1.default());
      return option;
    }
    exports.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration(strictMode = true, littleEndian = true) {
      return configurations_1.includeCommonConfiguration({
        parsers: [
          new SlashDateFormatParser_1.default(littleEndian),
          new PTWeekdayParser_1.default(),
          new PTTimeExpressionParser_1.default(),
          new PTMonthNameLittleEndianParser_1.default()
        ],
        refiners: [new PTMergeDateTimeRefiner_1.default(), new PTMergeDateRangeRefiner_1.default()]
      }, strictMode);
    }
    exports.createConfiguration = createConfiguration;
  }
});

// node_modules/chrono-node/dist/locales/nl/refiners/NLMergeDateRangeRefiner.js
var require_NLMergeDateRangeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/refiners/NLMergeDateRangeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateRangeRefiner_1 = __importDefault2(require_AbstractMergeDateRangeRefiner());
    var NLMergeDateRangeRefiner = class extends AbstractMergeDateRangeRefiner_1.default {
      patternBetween() {
        return /^\s*(tot|-)\s*$/i;
      }
    };
    exports.default = NLMergeDateRangeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/nl/refiners/NLMergeDateTimeRefiner.js
var require_NLMergeDateTimeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/refiners/NLMergeDateTimeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateTimeRefiner_1 = __importDefault2(require_AbstractMergeDateTimeRefiner());
    var NLMergeDateTimeRefiner = class extends AbstractMergeDateTimeRefiner_1.default {
      patternBetween() {
        return new RegExp("^\\s*(om|na|voor|in de|,|-)?\\s*$");
      }
    };
    exports.default = NLMergeDateTimeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLCasualDateParser.js
var require_NLCasualDateParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLCasualDateParser.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var references = __importStar2(require_casualReferences());
    var NLCasualDateParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern(context) {
        return /(nu|vandaag|morgen|morgend|gisteren)(?=\W|$)/i;
      }
      innerExtract(context, match) {
        const lowerText = match[0].toLowerCase();
        const component = context.createParsingComponents();
        switch (lowerText) {
          case "nu":
            return references.now(context.reference);
          case "vandaag":
            return references.today(context.reference);
          case "morgen":
          case "morgend":
            return references.tomorrow(context.reference);
          case "gisteren":
            return references.yesterday(context.reference);
        }
        return component;
      }
    };
    exports.default = NLCasualDateParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLCasualTimeParser.js
var require_NLCasualTimeParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLCasualTimeParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var index_1 = require_dist();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var dayjs_2 = require_dayjs();
    var DAY_GROUP = 1;
    var MOMENT_GROUP = 2;
    var NLCasualTimeParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return /(deze)?\s*(namiddag|avond|middernacht|ochtend|middag|'s middags|'s avonds|'s ochtends)(?=\W|$)/i;
      }
      innerExtract(context, match) {
        const targetDate = dayjs_1.default(context.refDate);
        const component = context.createParsingComponents();
        if (match[DAY_GROUP] === "deze") {
          component.assign("day", context.refDate.getDate());
          component.assign("month", context.refDate.getMonth() + 1);
          component.assign("year", context.refDate.getFullYear());
        }
        switch (match[MOMENT_GROUP].toLowerCase()) {
          case "namiddag":
          case "'s namiddags":
            component.imply("meridiem", index_1.Meridiem.PM);
            component.imply("hour", 15);
            break;
          case "avond":
          case "'s avonds'":
            component.imply("meridiem", index_1.Meridiem.PM);
            component.imply("hour", 20);
            break;
          case "middernacht":
            dayjs_2.assignTheNextDay(component, targetDate);
            component.imply("hour", 0);
            component.imply("minute", 0);
            component.imply("second", 0);
            break;
          case "ochtend":
          case "'s ochtends":
            component.imply("meridiem", index_1.Meridiem.AM);
            component.imply("hour", 6);
            break;
          case "middag":
          case "'s middags":
            component.imply("meridiem", index_1.Meridiem.AM);
            component.imply("hour", 12);
            break;
        }
        return component;
      }
    };
    exports.default = NLCasualTimeParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/constants.js
var require_constants6 = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseTimeUnits = exports.TIME_UNITS_PATTERN = exports.parseYear = exports.YEAR_PATTERN = exports.parseOrdinalNumberPattern = exports.ORDINAL_NUMBER_PATTERN = exports.parseNumberPattern = exports.NUMBER_PATTERN = exports.TIME_UNIT_DICTIONARY = exports.ORDINAL_WORD_DICTIONARY = exports.INTEGER_WORD_DICTIONARY = exports.MONTH_DICTIONARY = exports.WEEKDAY_DICTIONARY = void 0;
    var pattern_1 = require_pattern();
    var years_1 = require_years();
    exports.WEEKDAY_DICTIONARY = {
      zondag: 0,
      zon: 0,
      "zon.": 0,
      zo: 0,
      "zo.": 0,
      maandag: 1,
      ma: 1,
      "ma.": 1,
      dinsdag: 2,
      din: 2,
      "din.": 2,
      di: 2,
      "di.": 2,
      woensdag: 3,
      woe: 3,
      "woe.": 3,
      wo: 3,
      "wo.": 3,
      donderdag: 4,
      dond: 4,
      "dond.": 4,
      do: 4,
      "do.": 4,
      vrijdag: 5,
      vrij: 5,
      "vrij.": 5,
      vr: 5,
      "vr.": 5,
      zaterdag: 6,
      zat: 6,
      "zat.": 6,
      "za": 6,
      "za.": 6
    };
    exports.MONTH_DICTIONARY = {
      januari: 1,
      jan: 1,
      "jan.": 1,
      februari: 2,
      feb: 2,
      "feb.": 2,
      maart: 3,
      mar: 3,
      "mar.": 3,
      april: 4,
      apr: 4,
      "apr.": 4,
      mei: 5,
      juni: 6,
      jun: 6,
      "jun.": 6,
      juli: 7,
      jul: 7,
      "jul.": 7,
      augustus: 8,
      aug: 8,
      "aug.": 8,
      september: 9,
      sep: 9,
      "sep.": 9,
      sept: 9,
      "sept.": 9,
      oktober: 10,
      okt: 10,
      "okt.": 10,
      november: 11,
      nov: 11,
      "nov.": 11,
      december: 12,
      dec: 12,
      "dec.": 12
    };
    exports.INTEGER_WORD_DICTIONARY = {
      een: 1,
      twee: 2,
      drie: 3,
      vier: 4,
      vijf: 5,
      zes: 6,
      zeven: 7,
      acht: 8,
      negen: 9,
      tien: 10,
      elf: 11,
      twaalf: 12
    };
    exports.ORDINAL_WORD_DICTIONARY = {
      eerste: 1,
      tweede: 2,
      derde: 3,
      vierde: 4,
      vijfde: 5,
      zesde: 6,
      zevende: 7,
      achtste: 8,
      negende: 9,
      tiende: 10,
      elfde: 11,
      twaalfde: 12,
      dertiende: 13,
      veertiende: 14,
      vijftiende: 15,
      zestiende: 16,
      zeventiende: 17,
      achttiende: 18,
      negentiende: 19,
      twintigste: 20,
      "eenentwintigste": 21,
      "twee\xEBntwintigste": 22,
      "drieentwintigste": 23,
      "vierentwintigste": 24,
      "vijfentwintigste": 25,
      "zesentwintigste": 26,
      "zevenentwintigste": 27,
      "achtentwintig": 28,
      "negenentwintig": 29,
      "dertigste": 30,
      "eenendertigste": 31
    };
    exports.TIME_UNIT_DICTIONARY = {
      sec: "second",
      second: "second",
      seconden: "second",
      min: "minute",
      mins: "minute",
      minute: "minute",
      minuut: "minute",
      minuten: "minute",
      minuutje: "minute",
      h: "hour",
      hr: "hour",
      hrs: "hour",
      uur: "hour",
      u: "hour",
      uren: "hour",
      dag: "d",
      dagen: "d",
      week: "week",
      weken: "week",
      maand: "month",
      maanden: "month",
      jaar: "year",
      jr: "year",
      jaren: "year"
    };
    exports.NUMBER_PATTERN = `(?:${pattern_1.matchAnyPattern(exports.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+[\\.,][0-9]+|halve?|half|paar)`;
    function parseNumberPattern(match) {
      const num = match.toLowerCase();
      if (exports.INTEGER_WORD_DICTIONARY[num] !== void 0) {
        return exports.INTEGER_WORD_DICTIONARY[num];
      } else if (num === "paar") {
        return 2;
      } else if (num === "half" || num.match(/halve?/)) {
        return 0.5;
      }
      return parseFloat(num.replace(",", "."));
    }
    exports.parseNumberPattern = parseNumberPattern;
    exports.ORDINAL_NUMBER_PATTERN = `(?:${pattern_1.matchAnyPattern(exports.ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:ste|de)?)`;
    function parseOrdinalNumberPattern(match) {
      let num = match.toLowerCase();
      if (exports.ORDINAL_WORD_DICTIONARY[num] !== void 0) {
        return exports.ORDINAL_WORD_DICTIONARY[num];
      }
      num = num.replace(/(?:ste|de)$/i, "");
      return parseInt(num);
    }
    exports.parseOrdinalNumberPattern = parseOrdinalNumberPattern;
    exports.YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\s*(?:voor Christus|na Christus)|[1-2][0-9]{3}|[5-9][0-9])`;
    function parseYear(match) {
      if (/voor Christus/i.test(match)) {
        match = match.replace(/voor Christus/i, "");
        return -parseInt(match);
      }
      if (/na Christus/i.test(match)) {
        match = match.replace(/na Christus/i, "");
        return parseInt(match);
      }
      const rawYearNumber = parseInt(match);
      return years_1.findMostLikelyADYear(rawYearNumber);
    }
    exports.parseYear = parseYear;
    var SINGLE_TIME_UNIT_PATTERN = `(${exports.NUMBER_PATTERN})\\s{0,5}(${pattern_1.matchAnyPattern(exports.TIME_UNIT_DICTIONARY)})\\s{0,5}`;
    var SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
    exports.TIME_UNITS_PATTERN = pattern_1.repeatedTimeunitPattern(`(?:(?:binnen|in)\\s*)?`, SINGLE_TIME_UNIT_PATTERN);
    function parseTimeUnits(timeunitText) {
      const fragments = {};
      let remainingText = timeunitText;
      let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
      while (match) {
        collectDateTimeFragment(fragments, match);
        remainingText = remainingText.substring(match[0].length);
        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
      }
      return fragments;
    }
    exports.parseTimeUnits = parseTimeUnits;
    function collectDateTimeFragment(fragments, match) {
      const num = parseNumberPattern(match[1]);
      const unit = exports.TIME_UNIT_DICTIONARY[match[2].toLowerCase()];
      fragments[unit] = num;
    }
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLTimeUnitWithinFormatParser.js
var require_NLTimeUnitWithinFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLTimeUnitWithinFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants6();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var NLTimeUnitWithinFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return new RegExp(`(?:binnen|in|binnen de|voor)\\s*(` + constants_1.TIME_UNITS_PATTERN + `)(?=\\W|$)`, "i");
      }
      innerExtract(context, match) {
        const timeUnits = constants_1.parseTimeUnits(match[1]);
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
    };
    exports.default = NLTimeUnitWithinFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLWeekdayParser.js
var require_NLWeekdayParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLWeekdayParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants6();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var weeks_1 = require_weeks();
    var PATTERN = new RegExp(`(?:(?:\\,|\\(|\\\uFF08)\\s*)?(?:op\\s*?)?(?:(deze|vorige|volgende)\\s*(?:week\\s*)?)?(${pattern_1.matchAnyPattern(constants_1.WEEKDAY_DICTIONARY)})(?=\\W|$)`, "i");
    var PREFIX_GROUP = 1;
    var WEEKDAY_GROUP = 2;
    var POSTFIX_GROUP = 3;
    var NLWeekdayParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        const offset = constants_1.WEEKDAY_DICTIONARY[dayOfWeek];
        const prefix = match[PREFIX_GROUP];
        const postfix = match[POSTFIX_GROUP];
        let modifierWord = prefix || postfix;
        modifierWord = modifierWord || "";
        modifierWord = modifierWord.toLowerCase();
        let modifier = null;
        if (modifierWord == "vorige") {
          modifier = "last";
        } else if (modifierWord == "volgende") {
          modifier = "next";
        } else if (modifierWord == "deze") {
          modifier = "this";
        }
        const date = weeks_1.toDayJSWeekday(context.refDate, offset, modifier);
        return context.createParsingComponents().assign("weekday", offset).imply("day", date.date()).imply("month", date.month() + 1).imply("year", date.year());
      }
    };
    exports.default = NLWeekdayParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLMonthNameMiddleEndianParser.js
var require_NLMonthNameMiddleEndianParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLMonthNameMiddleEndianParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var years_1 = require_years();
    var constants_1 = require_constants6();
    var constants_2 = require_constants6();
    var constants_3 = require_constants6();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp(`(?:on\\s*?)?(${constants_2.ORDINAL_NUMBER_PATTERN})(?:\\s*(?:tot|\\-|\\\u2013|until|through|till|\\s)\\s*(${constants_2.ORDINAL_NUMBER_PATTERN}))?(?:-|/|\\s*(?:of)?\\s*)(` + pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY) + `)(?:(?:-|/|,?\\s*)(${constants_3.YEAR_PATTERN}(?![^\\s]\\d)))?(?=\\W|$)`, "i");
    var MONTH_NAME_GROUP = 3;
    var DATE_GROUP = 1;
    var DATE_TO_GROUP = 2;
    var YEAR_GROUP = 4;
    var NLMonthNameMiddleEndianParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const month = constants_1.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = constants_2.parseOrdinalNumberPattern(match[DATE_GROUP]);
        if (day > 31) {
          match.index = match.index + match[DATE_GROUP].length;
          return null;
        }
        const components = context.createParsingComponents({
          day,
          month
        });
        if (match[YEAR_GROUP]) {
          const year = constants_3.parseYear(match[YEAR_GROUP]);
          components.assign("year", year);
        } else {
          const year = years_1.findYearClosestToRef(context.refDate, day, month);
          components.imply("year", year);
        }
        if (!match[DATE_TO_GROUP]) {
          return components;
        }
        const endDate = constants_2.parseOrdinalNumberPattern(match[DATE_TO_GROUP]);
        const result = context.createParsingResult(match.index, match[0]);
        result.start = components;
        result.end = components.clone();
        result.end.assign("day", endDate);
        return result;
      }
    };
    exports.default = NLMonthNameMiddleEndianParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLMonthNameParser.js
var require_NLMonthNameParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLMonthNameParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants6();
    var years_1 = require_years();
    var pattern_1 = require_pattern();
    var constants_2 = require_constants6();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp(`(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})\\s*(?:[,-]?\\s*(${constants_2.YEAR_PATTERN})?)?(?=[^\\s\\w]|\\s+[^0-9]|\\s+$|$)`, "i");
    var MONTH_NAME_GROUP = 1;
    var YEAR_GROUP = 2;
    var NLMonthNameParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const components = context.createParsingComponents();
        components.imply("day", 1);
        const monthName = match[MONTH_NAME_GROUP];
        const month = constants_1.MONTH_DICTIONARY[monthName.toLowerCase()];
        components.assign("month", month);
        if (match[YEAR_GROUP]) {
          const year = constants_2.parseYear(match[YEAR_GROUP]);
          components.assign("year", year);
        } else {
          const year = years_1.findYearClosestToRef(context.refDate, 1, month);
          components.imply("year", year);
        }
        return components;
      }
    };
    exports.default = NLMonthNameParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLSlashMonthFormatParser.js
var require_NLSlashMonthFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLSlashMonthFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp("([0-9]|0[1-9]|1[012])/([0-9]{4})", "i");
    var MONTH_GROUP = 1;
    var YEAR_GROUP = 2;
    var NLSlashMonthFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const year = parseInt(match[YEAR_GROUP]);
        const month = parseInt(match[MONTH_GROUP]);
        return context.createParsingComponents().imply("day", 1).assign("month", month).assign("year", year);
      }
    };
    exports.default = NLSlashMonthFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLTimeExpressionParser.js
var require_NLTimeExpressionParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLTimeExpressionParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractTimeExpressionParser_1 = require_AbstractTimeExpressionParser();
    var NLTimeExpressionParser = class extends AbstractTimeExpressionParser_1.AbstractTimeExpressionParser {
      primaryPrefix() {
        return "(?:(?:om)\\s*)?";
      }
      followingPhase() {
        return "\\s*(?:\\-|\\\u2013|\\~|\\\u301C|om|\\?)\\s*";
      }
      primarySuffix() {
        return "(?:\\s*(?:uur))?(?!/)(?=\\W|$)";
      }
      extractPrimaryTimeComponents(context, match) {
        if (match[0].match(/^\s*\d{4}\s*$/)) {
          return null;
        }
        return super.extractPrimaryTimeComponents(context, match);
      }
    };
    exports.default = NLTimeExpressionParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLCasualYearMonthDayParser.js
var require_NLCasualYearMonthDayParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLCasualYearMonthDayParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants6();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp(`([0-9]{4})[\\.\\/\\s](?:(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})|([0-9]{1,2}))[\\.\\/\\s]([0-9]{1,2})(?=\\W|$)`, "i");
    var YEAR_NUMBER_GROUP = 1;
    var MONTH_NAME_GROUP = 2;
    var MONTH_NUMBER_GROUP = 3;
    var DATE_NUMBER_GROUP = 4;
    var NLCasualYearMonthDayParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const month = match[MONTH_NUMBER_GROUP] ? parseInt(match[MONTH_NUMBER_GROUP]) : constants_1.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        if (month < 1 || month > 12) {
          return null;
        }
        const year = parseInt(match[YEAR_NUMBER_GROUP]);
        const day = parseInt(match[DATE_NUMBER_GROUP]);
        return {
          day,
          month,
          year
        };
      }
    };
    exports.default = NLCasualYearMonthDayParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLCasualDateTimeParser.js
var require_NLCasualDateTimeParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLCasualDateTimeParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var index_1 = require_dist();
    var dayjs_1 = require_dayjs();
    var dayjs_2 = __importDefault2(require_dayjs_min());
    var DATE_GROUP = 1;
    var TIME_OF_DAY_GROUP = 2;
    var NLCasualDateTimeParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern(context) {
        return /(gisteren|morgen|van)(ochtend|middag|namiddag|avond|nacht)(?=\W|$)/i;
      }
      innerExtract(context, match) {
        const dateText = match[DATE_GROUP].toLowerCase();
        const timeText = match[TIME_OF_DAY_GROUP].toLowerCase();
        const component = context.createParsingComponents();
        const targetDate = dayjs_2.default(context.refDate);
        switch (dateText) {
          case "gisteren":
            dayjs_1.assignSimilarDate(component, targetDate.add(-1, "day"));
            break;
          case "van":
            dayjs_1.assignSimilarDate(component, targetDate);
            break;
          case "morgen":
            dayjs_1.assignTheNextDay(component, targetDate);
            break;
        }
        switch (timeText) {
          case "ochtend":
            component.imply("meridiem", index_1.Meridiem.AM);
            component.imply("hour", 6);
            break;
          case "middag":
            component.imply("meridiem", index_1.Meridiem.AM);
            component.imply("hour", 12);
            break;
          case "namiddag":
            component.imply("meridiem", index_1.Meridiem.PM);
            component.imply("hour", 15);
            break;
          case "avond":
            component.imply("meridiem", index_1.Meridiem.PM);
            component.imply("hour", 20);
            break;
        }
        return component;
      }
    };
    exports.default = NLCasualDateTimeParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLTimeUnitCasualRelativeFormatParser.js
var require_NLTimeUnitCasualRelativeFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLTimeUnitCasualRelativeFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants6();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var timeunits_1 = require_timeunits();
    var PATTERN = new RegExp(`(deze|vorige|afgelopen|komende|over|\\+|-)\\s*(${constants_1.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
    var NLTimeUnitCasualRelativeFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const prefix = match[1].toLowerCase();
        let timeUnits = constants_1.parseTimeUnits(match[2]);
        switch (prefix) {
          case "vorige":
          case "afgelopen":
          case "-":
            timeUnits = timeunits_1.reverseTimeUnits(timeUnits);
            break;
        }
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
    };
    exports.default = NLTimeUnitCasualRelativeFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLRelativeDateFormatParser.js
var require_NLRelativeDateFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLRelativeDateFormatParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants6();
    var results_1 = require_results();
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var pattern_1 = require_pattern();
    var PATTERN = new RegExp(`(dit|deze|komende|volgend|volgende|afgelopen|vorige)\\s*(${pattern_1.matchAnyPattern(constants_1.TIME_UNIT_DICTIONARY)})(?=\\s*)(?=\\W|$)`, "i");
    var MODIFIER_WORD_GROUP = 1;
    var RELATIVE_WORD_GROUP = 2;
    var NLRelativeDateFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();
        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();
        const timeunit = constants_1.TIME_UNIT_DICTIONARY[unitWord];
        if (modifier == "volgend" || modifier == "volgende" || modifier == "komende") {
          const timeUnits = {};
          timeUnits[timeunit] = 1;
          return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        if (modifier == "afgelopen" || modifier == "vorige") {
          const timeUnits = {};
          timeUnits[timeunit] = -1;
          return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        const components = context.createParsingComponents();
        let date = dayjs_1.default(context.reference.instant);
        if (unitWord.match(/week/i)) {
          date = date.add(-date.get("d"), "d");
          components.imply("day", date.date());
          components.imply("month", date.month() + 1);
          components.imply("year", date.year());
        } else if (unitWord.match(/maand/i)) {
          date = date.add(-date.date() + 1, "d");
          components.imply("day", date.date());
          components.assign("year", date.year());
          components.assign("month", date.month() + 1);
        } else if (unitWord.match(/jaar/i)) {
          date = date.add(-date.date() + 1, "d");
          date = date.add(-date.month(), "month");
          components.imply("day", date.date());
          components.imply("month", date.month() + 1);
          components.assign("year", date.year());
        }
        return components;
      }
    };
    exports.default = NLRelativeDateFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLTimeUnitAgoFormatParser.js
var require_NLTimeUnitAgoFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLTimeUnitAgoFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants6();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var timeunits_1 = require_timeunits();
    var PATTERN = new RegExp("(" + constants_1.TIME_UNITS_PATTERN + ")(?:geleden|voor|eerder)(?=(?:\\W|$))", "i");
    var STRICT_PATTERN = new RegExp("(" + constants_1.TIME_UNITS_PATTERN + ")geleden(?=(?:\\W|$))", "i");
    var NLTimeUnitAgoFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      constructor(strictMode) {
        super();
        this.strictMode = strictMode;
      }
      innerPattern() {
        return this.strictMode ? STRICT_PATTERN : PATTERN;
      }
      innerExtract(context, match) {
        const timeUnits = constants_1.parseTimeUnits(match[1]);
        const outputTimeUnits = timeunits_1.reverseTimeUnits(timeUnits);
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);
      }
    };
    exports.default = NLTimeUnitAgoFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/parsers/NLTimeUnitLaterFormatParser.js
var require_NLTimeUnitLaterFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/parsers/NLTimeUnitLaterFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants6();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp("(" + constants_1.TIME_UNITS_PATTERN + ")(later|na|vanaf nu|voortaan|vooruit|uit)(?=(?:\\W|$))", "i");
    var STRICT_PATTERN = new RegExp("(" + constants_1.TIME_UNITS_PATTERN + ")(later|vanaf nu)(?=(?:\\W|$))", "i");
    var GROUP_NUM_TIMEUNITS = 1;
    var NLTimeUnitLaterFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      constructor(strictMode) {
        super();
        this.strictMode = strictMode;
      }
      innerPattern() {
        return this.strictMode ? STRICT_PATTERN : PATTERN;
      }
      innerExtract(context, match) {
        const fragments = constants_1.parseTimeUnits(match[GROUP_NUM_TIMEUNITS]);
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, fragments);
      }
    };
    exports.default = NLTimeUnitLaterFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/nl/index.js
var require_nl = __commonJS({
  "node_modules/chrono-node/dist/locales/nl/index.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfiguration = exports.createCasualConfiguration = exports.parseDate = exports.parse = exports.strict = exports.casual = void 0;
    var configurations_1 = require_configurations();
    var chrono_1 = require_chrono();
    var NLMergeDateRangeRefiner_1 = __importDefault2(require_NLMergeDateRangeRefiner());
    var NLMergeDateTimeRefiner_1 = __importDefault2(require_NLMergeDateTimeRefiner());
    var NLCasualDateParser_1 = __importDefault2(require_NLCasualDateParser());
    var NLCasualTimeParser_1 = __importDefault2(require_NLCasualTimeParser());
    var SlashDateFormatParser_1 = __importDefault2(require_SlashDateFormatParser());
    var NLTimeUnitWithinFormatParser_1 = __importDefault2(require_NLTimeUnitWithinFormatParser());
    var NLWeekdayParser_1 = __importDefault2(require_NLWeekdayParser());
    var NLMonthNameMiddleEndianParser_1 = __importDefault2(require_NLMonthNameMiddleEndianParser());
    var NLMonthNameParser_1 = __importDefault2(require_NLMonthNameParser());
    var NLSlashMonthFormatParser_1 = __importDefault2(require_NLSlashMonthFormatParser());
    var NLTimeExpressionParser_1 = __importDefault2(require_NLTimeExpressionParser());
    var NLCasualYearMonthDayParser_1 = __importDefault2(require_NLCasualYearMonthDayParser());
    var NLCasualDateTimeParser_1 = __importDefault2(require_NLCasualDateTimeParser());
    var NLTimeUnitCasualRelativeFormatParser_1 = __importDefault2(require_NLTimeUnitCasualRelativeFormatParser());
    var NLRelativeDateFormatParser_1 = __importDefault2(require_NLRelativeDateFormatParser());
    var NLTimeUnitAgoFormatParser_1 = __importDefault2(require_NLTimeUnitAgoFormatParser());
    var NLTimeUnitLaterFormatParser_1 = __importDefault2(require_NLTimeUnitLaterFormatParser());
    exports.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports.strict = new chrono_1.Chrono(createConfiguration(true));
    function parse(text2, ref, option) {
      return exports.casual.parse(text2, ref, option);
    }
    exports.parse = parse;
    function parseDate3(text2, ref, option) {
      return exports.casual.parseDate(text2, ref, option);
    }
    exports.parseDate = parseDate3;
    function createCasualConfiguration(littleEndian = true) {
      const option = createConfiguration(false, littleEndian);
      option.parsers.unshift(new NLCasualDateParser_1.default());
      option.parsers.unshift(new NLCasualTimeParser_1.default());
      option.parsers.unshift(new NLCasualDateTimeParser_1.default());
      option.parsers.unshift(new NLMonthNameParser_1.default());
      option.parsers.unshift(new NLRelativeDateFormatParser_1.default());
      option.parsers.unshift(new NLTimeUnitCasualRelativeFormatParser_1.default());
      return option;
    }
    exports.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration(strictMode = true, littleEndian = true) {
      return configurations_1.includeCommonConfiguration({
        parsers: [
          new SlashDateFormatParser_1.default(littleEndian),
          new NLTimeUnitWithinFormatParser_1.default(),
          new NLMonthNameMiddleEndianParser_1.default(),
          new NLMonthNameParser_1.default(),
          new NLWeekdayParser_1.default(),
          new NLCasualYearMonthDayParser_1.default(),
          new NLSlashMonthFormatParser_1.default(),
          new NLTimeExpressionParser_1.default(strictMode),
          new NLTimeUnitAgoFormatParser_1.default(strictMode),
          new NLTimeUnitLaterFormatParser_1.default(strictMode)
        ],
        refiners: [new NLMergeDateTimeRefiner_1.default(), new NLMergeDateRangeRefiner_1.default()]
      }, strictMode);
    }
    exports.createConfiguration = createConfiguration;
  }
});

// node_modules/chrono-node/dist/locales/zh/hant/parsers/ZHHantCasualDateParser.js
var require_ZHHantCasualDateParser = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hant/parsers/ZHHantCasualDateParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var NOW_GROUP = 1;
    var DAY_GROUP_1 = 2;
    var TIME_GROUP_1 = 3;
    var TIME_GROUP_2 = 4;
    var DAY_GROUP_3 = 5;
    var TIME_GROUP_3 = 6;
    var ZHHantCasualDateParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern(context) {
        return new RegExp("(\u800C\u5BB6|\u7ACB(?:\u523B|\u5373)|\u5373\u523B)|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(\u65E9|\u671D|\u665A)|(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(?:\u65E5|\u5929)(?:[\\s|,|\uFF0C]*)(?:(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?", "i");
      }
      innerExtract(context, match) {
        const index = match.index;
        const result = context.createParsingResult(index, match[0]);
        const refMoment = dayjs_1.default(context.refDate);
        let startMoment = refMoment;
        if (match[NOW_GROUP]) {
          result.start.imply("hour", refMoment.hour());
          result.start.imply("minute", refMoment.minute());
          result.start.imply("second", refMoment.second());
          result.start.imply("millisecond", refMoment.millisecond());
        } else if (match[DAY_GROUP_1]) {
          const day1 = match[DAY_GROUP_1];
          const time1 = match[TIME_GROUP_1];
          if (day1 == "\u660E" || day1 == "\u807D") {
            if (refMoment.hour() > 1) {
              startMoment = startMoment.add(1, "day");
            }
          } else if (day1 == "\u6628" || day1 == "\u5C0B" || day1 == "\u7434") {
            startMoment = startMoment.add(-1, "day");
          } else if (day1 == "\u524D") {
            startMoment = startMoment.add(-2, "day");
          } else if (day1 == "\u5927\u524D") {
            startMoment = startMoment.add(-3, "day");
          } else if (day1 == "\u5F8C") {
            startMoment = startMoment.add(2, "day");
          } else if (day1 == "\u5927\u5F8C") {
            startMoment = startMoment.add(3, "day");
          }
          if (time1 == "\u65E9" || time1 == "\u671D") {
            result.start.imply("hour", 6);
          } else if (time1 == "\u665A") {
            result.start.imply("hour", 22);
            result.start.imply("meridiem", 1);
          }
        } else if (match[TIME_GROUP_2]) {
          const timeString2 = match[TIME_GROUP_2];
          const time2 = timeString2[0];
          if (time2 == "\u65E9" || time2 == "\u671D" || time2 == "\u4E0A") {
            result.start.imply("hour", 6);
          } else if (time2 == "\u4E0B" || time2 == "\u664F") {
            result.start.imply("hour", 15);
            result.start.imply("meridiem", 1);
          } else if (time2 == "\u4E2D") {
            result.start.imply("hour", 12);
            result.start.imply("meridiem", 1);
          } else if (time2 == "\u591C" || time2 == "\u665A") {
            result.start.imply("hour", 22);
            result.start.imply("meridiem", 1);
          } else if (time2 == "\u51CC") {
            result.start.imply("hour", 0);
          }
        } else if (match[DAY_GROUP_3]) {
          const day3 = match[DAY_GROUP_3];
          if (day3 == "\u660E" || day3 == "\u807D") {
            if (refMoment.hour() > 1) {
              startMoment = startMoment.add(1, "day");
            }
          } else if (day3 == "\u6628" || day3 == "\u5C0B" || day3 == "\u7434") {
            startMoment = startMoment.add(-1, "day");
          } else if (day3 == "\u524D") {
            startMoment = startMoment.add(-2, "day");
          } else if (day3 == "\u5927\u524D") {
            startMoment = startMoment.add(-3, "day");
          } else if (day3 == "\u5F8C") {
            startMoment = startMoment.add(2, "day");
          } else if (day3 == "\u5927\u5F8C") {
            startMoment = startMoment.add(3, "day");
          }
          const timeString3 = match[TIME_GROUP_3];
          if (timeString3) {
            const time3 = timeString3[0];
            if (time3 == "\u65E9" || time3 == "\u671D" || time3 == "\u4E0A") {
              result.start.imply("hour", 6);
            } else if (time3 == "\u4E0B" || time3 == "\u664F") {
              result.start.imply("hour", 15);
              result.start.imply("meridiem", 1);
            } else if (time3 == "\u4E2D") {
              result.start.imply("hour", 12);
              result.start.imply("meridiem", 1);
            } else if (time3 == "\u591C" || time3 == "\u665A") {
              result.start.imply("hour", 22);
              result.start.imply("meridiem", 1);
            } else if (time3 == "\u51CC") {
              result.start.imply("hour", 0);
            }
          }
        }
        result.start.assign("day", startMoment.date());
        result.start.assign("month", startMoment.month() + 1);
        result.start.assign("year", startMoment.year());
        return result;
      }
    };
    exports.default = ZHHantCasualDateParser;
  }
});

// node_modules/chrono-node/dist/locales/zh/hant/constants.js
var require_constants7 = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hant/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zhStringToYear = exports.zhStringToNumber = exports.WEEKDAY_OFFSET = exports.NUMBER = void 0;
    exports.NUMBER = {
      "\u96F6": 0,
      "\u4E00": 1,
      "\u4E8C": 2,
      "\u5169": 2,
      "\u4E09": 3,
      "\u56DB": 4,
      "\u4E94": 5,
      "\u516D": 6,
      "\u4E03": 7,
      "\u516B": 8,
      "\u4E5D": 9,
      "\u5341": 10,
      "\u5EFF": 20,
      "\u5345": 30
    };
    exports.WEEKDAY_OFFSET = {
      "\u5929": 0,
      "\u65E5": 0,
      "\u4E00": 1,
      "\u4E8C": 2,
      "\u4E09": 3,
      "\u56DB": 4,
      "\u4E94": 5,
      "\u516D": 6
    };
    function zhStringToNumber(text2) {
      let number = 0;
      for (let i = 0; i < text2.length; i++) {
        const char = text2[i];
        if (char === "\u5341") {
          number = number === 0 ? exports.NUMBER[char] : number * exports.NUMBER[char];
        } else {
          number += exports.NUMBER[char];
        }
      }
      return number;
    }
    exports.zhStringToNumber = zhStringToNumber;
    function zhStringToYear(text2) {
      let string = "";
      for (let i = 0; i < text2.length; i++) {
        const char = text2[i];
        string = string + exports.NUMBER[char];
      }
      return parseInt(string);
    }
    exports.zhStringToYear = zhStringToYear;
  }
});

// node_modules/chrono-node/dist/locales/zh/hant/parsers/ZHHantDateParser.js
var require_ZHHantDateParser = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hant/parsers/ZHHantDateParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var constants_1 = require_constants7();
    var YEAR_GROUP = 1;
    var MONTH_GROUP = 2;
    var DAY_GROUP = 3;
    var ZHHantDateParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return new RegExp("(\\d{2,4}|[" + Object.keys(constants_1.NUMBER).join("") + "]{4}|[" + Object.keys(constants_1.NUMBER).join("") + "]{2})?(?:\\s*)(?:\u5E74)?(?:[\\s|,|\uFF0C]*)(\\d{1,2}|[" + Object.keys(constants_1.NUMBER).join("") + "]{1,2})(?:\\s*)(?:\u6708)(?:\\s*)(\\d{1,2}|[" + Object.keys(constants_1.NUMBER).join("") + "]{1,2})?(?:\\s*)(?:\u65E5|\u865F)?");
      }
      innerExtract(context, match) {
        const startMoment = dayjs_1.default(context.refDate);
        const result = context.createParsingResult(match.index, match[0]);
        let month = parseInt(match[MONTH_GROUP]);
        if (isNaN(month))
          month = constants_1.zhStringToNumber(match[MONTH_GROUP]);
        result.start.assign("month", month);
        if (match[DAY_GROUP]) {
          let day = parseInt(match[DAY_GROUP]);
          if (isNaN(day))
            day = constants_1.zhStringToNumber(match[DAY_GROUP]);
          result.start.assign("day", day);
        } else {
          result.start.imply("day", startMoment.date());
        }
        if (match[YEAR_GROUP]) {
          let year = parseInt(match[YEAR_GROUP]);
          if (isNaN(year))
            year = constants_1.zhStringToYear(match[YEAR_GROUP]);
          result.start.assign("year", year);
        } else {
          result.start.imply("year", startMoment.year());
        }
        return result;
      }
    };
    exports.default = ZHHantDateParser;
  }
});

// node_modules/chrono-node/dist/locales/zh/hant/parsers/ZHHantDeadlineFormatParser.js
var require_ZHHantDeadlineFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hant/parsers/ZHHantDeadlineFormatParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var constants_1 = require_constants7();
    var PATTERN = new RegExp("(\\d+|[" + Object.keys(constants_1.NUMBER).join("") + "]+|\u534A|\u5E7E)(?:\\s*)(?:\u500B)?(\u79D2(?:\u9418)?|\u5206\u9418|\u5C0F\u6642|\u9418|\u65E5|\u5929|\u661F\u671F|\u79AE\u62DC|\u6708|\u5E74)(?:(?:\u4E4B|\u904E)?\u5F8C|(?:\u4E4B)?\u5167)", "i");
    var NUMBER_GROUP = 1;
    var UNIT_GROUP = 2;
    var ZHHantDeadlineFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        let number = parseInt(match[NUMBER_GROUP]);
        if (isNaN(number)) {
          number = constants_1.zhStringToNumber(match[NUMBER_GROUP]);
        }
        if (isNaN(number)) {
          const string = match[NUMBER_GROUP];
          if (string === "\u5E7E") {
            number = 3;
          } else if (string === "\u534A") {
            number = 0.5;
          } else {
            return null;
          }
        }
        let date = dayjs_1.default(context.refDate);
        const unit = match[UNIT_GROUP];
        const unitAbbr = unit[0];
        if (unitAbbr.match(/[日天星禮月年]/)) {
          if (unitAbbr == "\u65E5" || unitAbbr == "\u5929") {
            date = date.add(number, "d");
          } else if (unitAbbr == "\u661F" || unitAbbr == "\u79AE") {
            date = date.add(number * 7, "d");
          } else if (unitAbbr == "\u6708") {
            date = date.add(number, "month");
          } else if (unitAbbr == "\u5E74") {
            date = date.add(number, "year");
          }
          result.start.assign("year", date.year());
          result.start.assign("month", date.month() + 1);
          result.start.assign("day", date.date());
          return result;
        }
        if (unitAbbr == "\u79D2") {
          date = date.add(number, "second");
        } else if (unitAbbr == "\u5206") {
          date = date.add(number, "minute");
        } else if (unitAbbr == "\u5C0F" || unitAbbr == "\u9418") {
          date = date.add(number, "hour");
        }
        result.start.imply("year", date.year());
        result.start.imply("month", date.month() + 1);
        result.start.imply("day", date.date());
        result.start.assign("hour", date.hour());
        result.start.assign("minute", date.minute());
        result.start.assign("second", date.second());
        return result;
      }
    };
    exports.default = ZHHantDeadlineFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/zh/hant/parsers/ZHHantRelationWeekdayParser.js
var require_ZHHantRelationWeekdayParser = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hant/parsers/ZHHantRelationWeekdayParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var constants_1 = require_constants7();
    var PATTERN = new RegExp("(?<prefix>\u4E0A|\u4ECA|\u4E0B|\u9019|\u5462)(?:\u500B)?(?:\u661F\u671F|\u79AE\u62DC|\u9031)(?<weekday>" + Object.keys(constants_1.WEEKDAY_OFFSET).join("|") + ")");
    var ZHHantRelationWeekdayParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const dayOfWeek = match.groups.weekday;
        const offset = constants_1.WEEKDAY_OFFSET[dayOfWeek];
        if (offset === void 0)
          return null;
        let modifier = null;
        const prefix = match.groups.prefix;
        if (prefix == "\u4E0A") {
          modifier = "last";
        } else if (prefix == "\u4E0B") {
          modifier = "next";
        } else if (prefix == "\u4ECA" || prefix == "\u9019" || prefix == "\u5462") {
          modifier = "this";
        }
        let startMoment = dayjs_1.default(context.refDate);
        let startMomentFixed = false;
        const refOffset = startMoment.day();
        if (modifier == "last" || modifier == "past") {
          startMoment = startMoment.day(offset - 7);
          startMomentFixed = true;
        } else if (modifier == "next") {
          startMoment = startMoment.day(offset + 7);
          startMomentFixed = true;
        } else if (modifier == "this") {
          startMoment = startMoment.day(offset);
        } else {
          if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {
            startMoment = startMoment.day(offset - 7);
          } else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {
            startMoment = startMoment.day(offset + 7);
          } else {
            startMoment = startMoment.day(offset);
          }
        }
        result.start.assign("weekday", offset);
        if (startMomentFixed) {
          result.start.assign("day", startMoment.date());
          result.start.assign("month", startMoment.month() + 1);
          result.start.assign("year", startMoment.year());
        } else {
          result.start.imply("day", startMoment.date());
          result.start.imply("month", startMoment.month() + 1);
          result.start.imply("year", startMoment.year());
        }
        return result;
      }
    };
    exports.default = ZHHantRelationWeekdayParser;
  }
});

// node_modules/chrono-node/dist/locales/zh/hant/parsers/ZHHantTimeExpressionParser.js
var require_ZHHantTimeExpressionParser = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hant/parsers/ZHHantTimeExpressionParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var constants_1 = require_constants7();
    var FIRST_REG_PATTERN = new RegExp("(?:\u7531|\u5F9E|\u81EA)?(?:(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(\u65E9|\u671D|\u665A)|(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(?:\u65E5|\u5929)(?:[\\s,\uFF0C]*)(?:(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?)?(?:[\\s,\uFF0C]*)(?:(\\d+|[" + Object.keys(constants_1.NUMBER).join("") + "]+)(?:\\s*)(?:\u9EDE|\u6642|:|\uFF1A)(?:\\s*)(\\d+|\u534A|\u6B63|\u6574|[" + Object.keys(constants_1.NUMBER).join("") + "]+)?(?:\\s*)(?:\u5206|:|\uFF1A)?(?:\\s*)(\\d+|[" + Object.keys(constants_1.NUMBER).join("") + "]+)?(?:\\s*)(?:\u79D2)?)(?:\\s*(A.M.|P.M.|AM?|PM?))?", "i");
    var SECOND_REG_PATTERN = new RegExp("(?:^\\s*(?:\u5230|\u81F3|\\-|\\\u2013|\\~|\\\u301C)\\s*)(?:(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(\u65E9|\u671D|\u665A)|(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(?:\u65E5|\u5929)(?:[\\s,\uFF0C]*)(?:(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?)?(?:[\\s,\uFF0C]*)(?:(\\d+|[" + Object.keys(constants_1.NUMBER).join("") + "]+)(?:\\s*)(?:\u9EDE|\u6642|:|\uFF1A)(?:\\s*)(\\d+|\u534A|\u6B63|\u6574|[" + Object.keys(constants_1.NUMBER).join("") + "]+)?(?:\\s*)(?:\u5206|:|\uFF1A)?(?:\\s*)(\\d+|[" + Object.keys(constants_1.NUMBER).join("") + "]+)?(?:\\s*)(?:\u79D2)?)(?:\\s*(A.M.|P.M.|AM?|PM?))?", "i");
    var DAY_GROUP_1 = 1;
    var ZH_AM_PM_HOUR_GROUP_1 = 2;
    var ZH_AM_PM_HOUR_GROUP_2 = 3;
    var DAY_GROUP_3 = 4;
    var ZH_AM_PM_HOUR_GROUP_3 = 5;
    var HOUR_GROUP = 6;
    var MINUTE_GROUP = 7;
    var SECOND_GROUP = 8;
    var AM_PM_HOUR_GROUP = 9;
    var ZHHantTimeExpressionParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return FIRST_REG_PATTERN;
      }
      innerExtract(context, match) {
        if (match.index > 0 && context.text[match.index - 1].match(/\w/)) {
          return null;
        }
        const refMoment = dayjs_1.default(context.refDate);
        const result = context.createParsingResult(match.index, match[0]);
        const startMoment = refMoment.clone();
        if (match[DAY_GROUP_1]) {
          var day1 = match[DAY_GROUP_1];
          if (day1 == "\u660E" || day1 == "\u807D") {
            if (refMoment.hour() > 1) {
              startMoment.add(1, "day");
            }
          } else if (day1 == "\u6628" || day1 == "\u5C0B" || day1 == "\u7434") {
            startMoment.add(-1, "day");
          } else if (day1 == "\u524D") {
            startMoment.add(-2, "day");
          } else if (day1 == "\u5927\u524D") {
            startMoment.add(-3, "day");
          } else if (day1 == "\u5F8C") {
            startMoment.add(2, "day");
          } else if (day1 == "\u5927\u5F8C") {
            startMoment.add(3, "day");
          }
          result.start.assign("day", startMoment.date());
          result.start.assign("month", startMoment.month() + 1);
          result.start.assign("year", startMoment.year());
        } else if (match[DAY_GROUP_3]) {
          var day3 = match[DAY_GROUP_3];
          if (day3 == "\u660E" || day3 == "\u807D") {
            startMoment.add(1, "day");
          } else if (day3 == "\u6628" || day3 == "\u5C0B" || day3 == "\u7434") {
            startMoment.add(-1, "day");
          } else if (day3 == "\u524D") {
            startMoment.add(-2, "day");
          } else if (day3 == "\u5927\u524D") {
            startMoment.add(-3, "day");
          } else if (day3 == "\u5F8C") {
            startMoment.add(2, "day");
          } else if (day3 == "\u5927\u5F8C") {
            startMoment.add(3, "day");
          }
          result.start.assign("day", startMoment.date());
          result.start.assign("month", startMoment.month() + 1);
          result.start.assign("year", startMoment.year());
        } else {
          result.start.imply("day", startMoment.date());
          result.start.imply("month", startMoment.month() + 1);
          result.start.imply("year", startMoment.year());
        }
        let hour = 0;
        let minute = 0;
        let meridiem = -1;
        if (match[SECOND_GROUP]) {
          var second = parseInt(match[SECOND_GROUP]);
          if (isNaN(second)) {
            second = constants_1.zhStringToNumber(match[SECOND_GROUP]);
          }
          if (second >= 60)
            return null;
          result.start.assign("second", second);
        }
        hour = parseInt(match[HOUR_GROUP]);
        if (isNaN(hour)) {
          hour = constants_1.zhStringToNumber(match[HOUR_GROUP]);
        }
        if (match[MINUTE_GROUP]) {
          if (match[MINUTE_GROUP] == "\u534A") {
            minute = 30;
          } else if (match[MINUTE_GROUP] == "\u6B63" || match[MINUTE_GROUP] == "\u6574") {
            minute = 0;
          } else {
            minute = parseInt(match[MINUTE_GROUP]);
            if (isNaN(minute)) {
              minute = constants_1.zhStringToNumber(match[MINUTE_GROUP]);
            }
          }
        } else if (hour > 100) {
          minute = hour % 100;
          hour = Math.floor(hour / 100);
        }
        if (minute >= 60) {
          return null;
        }
        if (hour > 24) {
          return null;
        }
        if (hour >= 12) {
          meridiem = 1;
        }
        if (match[AM_PM_HOUR_GROUP]) {
          if (hour > 12)
            return null;
          var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
          if (ampm == "a") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          }
          if (ampm == "p") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {
          var zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];
          var zhAMPM1 = zhAMPMString1[0];
          if (zhAMPM1 == "\u671D" || zhAMPM1 == "\u65E9") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          } else if (zhAMPM1 == "\u665A") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {
          var zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];
          var zhAMPM2 = zhAMPMString2[0];
          if (zhAMPM2 == "\u4E0A" || zhAMPM2 == "\u671D" || zhAMPM2 == "\u65E9" || zhAMPM2 == "\u51CC") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          } else if (zhAMPM2 == "\u4E0B" || zhAMPM2 == "\u664F" || zhAMPM2 == "\u665A") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {
          var zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];
          var zhAMPM3 = zhAMPMString3[0];
          if (zhAMPM3 == "\u4E0A" || zhAMPM3 == "\u671D" || zhAMPM3 == "\u65E9" || zhAMPM3 == "\u51CC") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          } else if (zhAMPM3 == "\u4E0B" || zhAMPM3 == "\u664F" || zhAMPM3 == "\u665A") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        }
        result.start.assign("hour", hour);
        result.start.assign("minute", minute);
        if (meridiem >= 0) {
          result.start.assign("meridiem", meridiem);
        } else {
          if (hour < 12) {
            result.start.imply("meridiem", 0);
          } else {
            result.start.imply("meridiem", 1);
          }
        }
        match = SECOND_REG_PATTERN.exec(context.text.substring(result.index + result.text.length));
        if (!match) {
          if (result.text.match(/^\d+$/)) {
            return null;
          }
          return result;
        }
        const endMoment = startMoment.clone();
        result.end = context.createParsingComponents();
        if (match[DAY_GROUP_1]) {
          var day1 = match[DAY_GROUP_1];
          if (day1 == "\u660E" || day1 == "\u807D") {
            if (refMoment.hour() > 1) {
              endMoment.add(1, "day");
            }
          } else if (day1 == "\u6628" || day1 == "\u5C0B" || day1 == "\u7434") {
            endMoment.add(-1, "day");
          } else if (day1 == "\u524D") {
            endMoment.add(-2, "day");
          } else if (day1 == "\u5927\u524D") {
            endMoment.add(-3, "day");
          } else if (day1 == "\u5F8C") {
            endMoment.add(2, "day");
          } else if (day1 == "\u5927\u5F8C") {
            endMoment.add(3, "day");
          }
          result.end.assign("day", endMoment.date());
          result.end.assign("month", endMoment.month() + 1);
          result.end.assign("year", endMoment.year());
        } else if (match[DAY_GROUP_3]) {
          var day3 = match[DAY_GROUP_3];
          if (day3 == "\u660E" || day3 == "\u807D") {
            endMoment.add(1, "day");
          } else if (day3 == "\u6628" || day3 == "\u5C0B" || day3 == "\u7434") {
            endMoment.add(-1, "day");
          } else if (day3 == "\u524D") {
            endMoment.add(-2, "day");
          } else if (day3 == "\u5927\u524D") {
            endMoment.add(-3, "day");
          } else if (day3 == "\u5F8C") {
            endMoment.add(2, "day");
          } else if (day3 == "\u5927\u5F8C") {
            endMoment.add(3, "day");
          }
          result.end.assign("day", endMoment.date());
          result.end.assign("month", endMoment.month() + 1);
          result.end.assign("year", endMoment.year());
        } else {
          result.end.imply("day", endMoment.date());
          result.end.imply("month", endMoment.month() + 1);
          result.end.imply("year", endMoment.year());
        }
        hour = 0;
        minute = 0;
        meridiem = -1;
        if (match[SECOND_GROUP]) {
          var second = parseInt(match[SECOND_GROUP]);
          if (isNaN(second)) {
            second = constants_1.zhStringToNumber(match[SECOND_GROUP]);
          }
          if (second >= 60)
            return null;
          result.end.assign("second", second);
        }
        hour = parseInt(match[HOUR_GROUP]);
        if (isNaN(hour)) {
          hour = constants_1.zhStringToNumber(match[HOUR_GROUP]);
        }
        if (match[MINUTE_GROUP]) {
          if (match[MINUTE_GROUP] == "\u534A") {
            minute = 30;
          } else if (match[MINUTE_GROUP] == "\u6B63" || match[MINUTE_GROUP] == "\u6574") {
            minute = 0;
          } else {
            minute = parseInt(match[MINUTE_GROUP]);
            if (isNaN(minute)) {
              minute = constants_1.zhStringToNumber(match[MINUTE_GROUP]);
            }
          }
        } else if (hour > 100) {
          minute = hour % 100;
          hour = Math.floor(hour / 100);
        }
        if (minute >= 60) {
          return null;
        }
        if (hour > 24) {
          return null;
        }
        if (hour >= 12) {
          meridiem = 1;
        }
        if (match[AM_PM_HOUR_GROUP]) {
          if (hour > 12)
            return null;
          var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
          if (ampm == "a") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          }
          if (ampm == "p") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
          if (!result.start.isCertain("meridiem")) {
            if (meridiem == 0) {
              result.start.imply("meridiem", 0);
              if (result.start.get("hour") == 12) {
                result.start.assign("hour", 0);
              }
            } else {
              result.start.imply("meridiem", 1);
              if (result.start.get("hour") != 12) {
                result.start.assign("hour", result.start.get("hour") + 12);
              }
            }
          }
        } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {
          var zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];
          var zhAMPM1 = zhAMPMString1[0];
          if (zhAMPM1 == "\u671D" || zhAMPM1 == "\u65E9") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          } else if (zhAMPM1 == "\u665A") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {
          var zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];
          var zhAMPM2 = zhAMPMString2[0];
          if (zhAMPM2 == "\u4E0A" || zhAMPM2 == "\u671D" || zhAMPM2 == "\u65E9" || zhAMPM2 == "\u51CC") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          } else if (zhAMPM2 == "\u4E0B" || zhAMPM2 == "\u664F" || zhAMPM2 == "\u665A") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {
          var zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];
          var zhAMPM3 = zhAMPMString3[0];
          if (zhAMPM3 == "\u4E0A" || zhAMPM3 == "\u671D" || zhAMPM3 == "\u65E9" || zhAMPM3 == "\u51CC") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          } else if (zhAMPM3 == "\u4E0B" || zhAMPM3 == "\u664F" || zhAMPM3 == "\u665A") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        }
        result.text = result.text + match[0];
        result.end.assign("hour", hour);
        result.end.assign("minute", minute);
        if (meridiem >= 0) {
          result.end.assign("meridiem", meridiem);
        } else {
          const startAtPM = result.start.isCertain("meridiem") && result.start.get("meridiem") == 1;
          if (startAtPM && result.start.get("hour") > hour) {
            result.end.imply("meridiem", 0);
          } else if (hour > 12) {
            result.end.imply("meridiem", 1);
          }
        }
        if (result.end.date().getTime() < result.start.date().getTime()) {
          result.end.imply("day", result.end.get("day") + 1);
        }
        return result;
      }
    };
    exports.default = ZHHantTimeExpressionParser;
  }
});

// node_modules/chrono-node/dist/locales/zh/hant/parsers/ZHHantWeekdayParser.js
var require_ZHHantWeekdayParser = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hant/parsers/ZHHantWeekdayParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var constants_1 = require_constants7();
    var PATTERN = new RegExp("(?:\u661F\u671F|\u79AE\u62DC|\u9031)(?<weekday>" + Object.keys(constants_1.WEEKDAY_OFFSET).join("|") + ")");
    var ZHHantWeekdayParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const dayOfWeek = match.groups.weekday;
        const offset = constants_1.WEEKDAY_OFFSET[dayOfWeek];
        if (offset === void 0)
          return null;
        let startMoment = dayjs_1.default(context.refDate);
        const startMomentFixed = false;
        const refOffset = startMoment.day();
        if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {
          startMoment = startMoment.day(offset - 7);
        } else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {
          startMoment = startMoment.day(offset + 7);
        } else {
          startMoment = startMoment.day(offset);
        }
        result.start.assign("weekday", offset);
        if (startMomentFixed) {
          result.start.assign("day", startMoment.date());
          result.start.assign("month", startMoment.month() + 1);
          result.start.assign("year", startMoment.year());
        } else {
          result.start.imply("day", startMoment.date());
          result.start.imply("month", startMoment.month() + 1);
          result.start.imply("year", startMoment.year());
        }
        return result;
      }
    };
    exports.default = ZHHantWeekdayParser;
  }
});

// node_modules/chrono-node/dist/locales/zh/hant/refiners/ZHHantMergeDateRangeRefiner.js
var require_ZHHantMergeDateRangeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hant/refiners/ZHHantMergeDateRangeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateRangeRefiner_1 = __importDefault2(require_AbstractMergeDateRangeRefiner());
    var ZHHantMergeDateRangeRefiner = class extends AbstractMergeDateRangeRefiner_1.default {
      patternBetween() {
        return /^\s*(至|到|\-|\~|～|－|ー)\s*$/i;
      }
    };
    exports.default = ZHHantMergeDateRangeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/zh/hant/refiners/ZHHantMergeDateTimeRefiner.js
var require_ZHHantMergeDateTimeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hant/refiners/ZHHantMergeDateTimeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateTimeRefiner_1 = __importDefault2(require_AbstractMergeDateTimeRefiner());
    var ZHHantMergeDateTimeRefiner = class extends AbstractMergeDateTimeRefiner_1.default {
      patternBetween() {
        return /^\s*$/i;
      }
    };
    exports.default = ZHHantMergeDateTimeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/zh/hant/index.js
var require_hant = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hant/index.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfiguration = exports.createCasualConfiguration = exports.parseDate = exports.parse = exports.strict = exports.casual = exports.hant = void 0;
    var chrono_1 = require_chrono();
    var ExtractTimezoneOffsetRefiner_1 = __importDefault2(require_ExtractTimezoneOffsetRefiner());
    var configurations_1 = require_configurations();
    var ZHHantCasualDateParser_1 = __importDefault2(require_ZHHantCasualDateParser());
    var ZHHantDateParser_1 = __importDefault2(require_ZHHantDateParser());
    var ZHHantDeadlineFormatParser_1 = __importDefault2(require_ZHHantDeadlineFormatParser());
    var ZHHantRelationWeekdayParser_1 = __importDefault2(require_ZHHantRelationWeekdayParser());
    var ZHHantTimeExpressionParser_1 = __importDefault2(require_ZHHantTimeExpressionParser());
    var ZHHantWeekdayParser_1 = __importDefault2(require_ZHHantWeekdayParser());
    var ZHHantMergeDateRangeRefiner_1 = __importDefault2(require_ZHHantMergeDateRangeRefiner());
    var ZHHantMergeDateTimeRefiner_1 = __importDefault2(require_ZHHantMergeDateTimeRefiner());
    exports.hant = new chrono_1.Chrono(createCasualConfiguration());
    exports.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports.strict = new chrono_1.Chrono(createConfiguration());
    function parse(text2, ref, option) {
      return exports.casual.parse(text2, ref, option);
    }
    exports.parse = parse;
    function parseDate3(text2, ref, option) {
      return exports.casual.parseDate(text2, ref, option);
    }
    exports.parseDate = parseDate3;
    function createCasualConfiguration() {
      const option = createConfiguration();
      option.parsers.unshift(new ZHHantCasualDateParser_1.default());
      return option;
    }
    exports.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration() {
      const configuration = configurations_1.includeCommonConfiguration({
        parsers: [
          new ZHHantDateParser_1.default(),
          new ZHHantRelationWeekdayParser_1.default(),
          new ZHHantWeekdayParser_1.default(),
          new ZHHantTimeExpressionParser_1.default(),
          new ZHHantDeadlineFormatParser_1.default()
        ],
        refiners: [new ZHHantMergeDateRangeRefiner_1.default(), new ZHHantMergeDateTimeRefiner_1.default()]
      });
      configuration.refiners = configuration.refiners.filter((refiner) => !(refiner instanceof ExtractTimezoneOffsetRefiner_1.default));
      return configuration;
    }
    exports.createConfiguration = createConfiguration;
  }
});

// node_modules/chrono-node/dist/locales/zh/hans/parsers/ZHHansCasualDateParser.js
var require_ZHHansCasualDateParser = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hans/parsers/ZHHansCasualDateParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var NOW_GROUP = 1;
    var DAY_GROUP_1 = 2;
    var TIME_GROUP_1 = 3;
    var TIME_GROUP_2 = 4;
    var DAY_GROUP_3 = 5;
    var TIME_GROUP_3 = 6;
    var ZHHansCasualDateParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern(context) {
        return new RegExp("(\u73B0\u5728|\u7ACB(?:\u523B|\u5373)|\u5373\u523B)|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(\u65E9|\u665A)|(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(?:\u65E5|\u5929)(?:[\\s|,|\uFF0C]*)(?:(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?", "i");
      }
      innerExtract(context, match) {
        const index = match.index;
        const result = context.createParsingResult(index, match[0]);
        const refMoment = dayjs_1.default(context.refDate);
        let startMoment = refMoment;
        if (match[NOW_GROUP]) {
          result.start.imply("hour", refMoment.hour());
          result.start.imply("minute", refMoment.minute());
          result.start.imply("second", refMoment.second());
          result.start.imply("millisecond", refMoment.millisecond());
        } else if (match[DAY_GROUP_1]) {
          const day1 = match[DAY_GROUP_1];
          const time1 = match[TIME_GROUP_1];
          if (day1 == "\u660E") {
            if (refMoment.hour() > 1) {
              startMoment = startMoment.add(1, "day");
            }
          } else if (day1 == "\u6628") {
            startMoment = startMoment.add(-1, "day");
          } else if (day1 == "\u524D") {
            startMoment = startMoment.add(-2, "day");
          } else if (day1 == "\u5927\u524D") {
            startMoment = startMoment.add(-3, "day");
          } else if (day1 == "\u540E") {
            startMoment = startMoment.add(2, "day");
          } else if (day1 == "\u5927\u540E") {
            startMoment = startMoment.add(3, "day");
          }
          if (time1 == "\u65E9") {
            result.start.imply("hour", 6);
          } else if (time1 == "\u665A") {
            result.start.imply("hour", 22);
            result.start.imply("meridiem", 1);
          }
        } else if (match[TIME_GROUP_2]) {
          const timeString2 = match[TIME_GROUP_2];
          const time2 = timeString2[0];
          if (time2 == "\u65E9" || time2 == "\u4E0A") {
            result.start.imply("hour", 6);
          } else if (time2 == "\u4E0B") {
            result.start.imply("hour", 15);
            result.start.imply("meridiem", 1);
          } else if (time2 == "\u4E2D") {
            result.start.imply("hour", 12);
            result.start.imply("meridiem", 1);
          } else if (time2 == "\u591C" || time2 == "\u665A") {
            result.start.imply("hour", 22);
            result.start.imply("meridiem", 1);
          } else if (time2 == "\u51CC") {
            result.start.imply("hour", 0);
          }
        } else if (match[DAY_GROUP_3]) {
          const day3 = match[DAY_GROUP_3];
          if (day3 == "\u660E") {
            if (refMoment.hour() > 1) {
              startMoment = startMoment.add(1, "day");
            }
          } else if (day3 == "\u6628") {
            startMoment = startMoment.add(-1, "day");
          } else if (day3 == "\u524D") {
            startMoment = startMoment.add(-2, "day");
          } else if (day3 == "\u5927\u524D") {
            startMoment = startMoment.add(-3, "day");
          } else if (day3 == "\u540E") {
            startMoment = startMoment.add(2, "day");
          } else if (day3 == "\u5927\u540E") {
            startMoment = startMoment.add(3, "day");
          }
          const timeString3 = match[TIME_GROUP_3];
          if (timeString3) {
            const time3 = timeString3[0];
            if (time3 == "\u65E9" || time3 == "\u4E0A") {
              result.start.imply("hour", 6);
            } else if (time3 == "\u4E0B") {
              result.start.imply("hour", 15);
              result.start.imply("meridiem", 1);
            } else if (time3 == "\u4E2D") {
              result.start.imply("hour", 12);
              result.start.imply("meridiem", 1);
            } else if (time3 == "\u591C" || time3 == "\u665A") {
              result.start.imply("hour", 22);
              result.start.imply("meridiem", 1);
            } else if (time3 == "\u51CC") {
              result.start.imply("hour", 0);
            }
          }
        }
        result.start.assign("day", startMoment.date());
        result.start.assign("month", startMoment.month() + 1);
        result.start.assign("year", startMoment.year());
        return result;
      }
    };
    exports.default = ZHHansCasualDateParser;
  }
});

// node_modules/chrono-node/dist/locales/zh/hans/constants.js
var require_constants8 = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hans/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zhStringToYear = exports.zhStringToNumber = exports.WEEKDAY_OFFSET = exports.NUMBER = void 0;
    exports.NUMBER = {
      "\u96F6": 0,
      "\u3007": 0,
      "\u4E00": 1,
      "\u4E8C": 2,
      "\u4E24": 2,
      "\u4E09": 3,
      "\u56DB": 4,
      "\u4E94": 5,
      "\u516D": 6,
      "\u4E03": 7,
      "\u516B": 8,
      "\u4E5D": 9,
      "\u5341": 10
    };
    exports.WEEKDAY_OFFSET = {
      "\u5929": 0,
      "\u65E5": 0,
      "\u4E00": 1,
      "\u4E8C": 2,
      "\u4E09": 3,
      "\u56DB": 4,
      "\u4E94": 5,
      "\u516D": 6
    };
    function zhStringToNumber(text2) {
      let number = 0;
      for (let i = 0; i < text2.length; i++) {
        const char = text2[i];
        if (char === "\u5341") {
          number = number === 0 ? exports.NUMBER[char] : number * exports.NUMBER[char];
        } else {
          number += exports.NUMBER[char];
        }
      }
      return number;
    }
    exports.zhStringToNumber = zhStringToNumber;
    function zhStringToYear(text2) {
      let string = "";
      for (let i = 0; i < text2.length; i++) {
        const char = text2[i];
        string = string + exports.NUMBER[char];
      }
      return parseInt(string);
    }
    exports.zhStringToYear = zhStringToYear;
  }
});

// node_modules/chrono-node/dist/locales/zh/hans/parsers/ZHHansDateParser.js
var require_ZHHansDateParser = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hans/parsers/ZHHansDateParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var constants_1 = require_constants8();
    var YEAR_GROUP = 1;
    var MONTH_GROUP = 2;
    var DAY_GROUP = 3;
    var ZHHansDateParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return new RegExp("(\\d{2,4}|[" + Object.keys(constants_1.NUMBER).join("") + "]{4}|[" + Object.keys(constants_1.NUMBER).join("") + "]{2})?(?:\\s*)(?:\u5E74)?(?:[\\s|,|\uFF0C]*)(\\d{1,2}|[" + Object.keys(constants_1.NUMBER).join("") + "]{1,3})(?:\\s*)(?:\u6708)(?:\\s*)(\\d{1,2}|[" + Object.keys(constants_1.NUMBER).join("") + "]{1,3})?(?:\\s*)(?:\u65E5|\u53F7)?");
      }
      innerExtract(context, match) {
        const startMoment = dayjs_1.default(context.refDate);
        const result = context.createParsingResult(match.index, match[0]);
        let month = parseInt(match[MONTH_GROUP]);
        if (isNaN(month))
          month = constants_1.zhStringToNumber(match[MONTH_GROUP]);
        result.start.assign("month", month);
        if (match[DAY_GROUP]) {
          let day = parseInt(match[DAY_GROUP]);
          if (isNaN(day))
            day = constants_1.zhStringToNumber(match[DAY_GROUP]);
          result.start.assign("day", day);
        } else {
          result.start.imply("day", startMoment.date());
        }
        if (match[YEAR_GROUP]) {
          let year = parseInt(match[YEAR_GROUP]);
          if (isNaN(year))
            year = constants_1.zhStringToYear(match[YEAR_GROUP]);
          result.start.assign("year", year);
        } else {
          result.start.imply("year", startMoment.year());
        }
        return result;
      }
    };
    exports.default = ZHHansDateParser;
  }
});

// node_modules/chrono-node/dist/locales/zh/hans/parsers/ZHHansDeadlineFormatParser.js
var require_ZHHansDeadlineFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hans/parsers/ZHHansDeadlineFormatParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var constants_1 = require_constants8();
    var PATTERN = new RegExp("(\\d+|[" + Object.keys(constants_1.NUMBER).join("") + "]+|\u534A|\u51E0)(?:\\s*)(?:\u4E2A)?(\u79D2(?:\u949F)?|\u5206\u949F|\u5C0F\u65F6|\u949F|\u65E5|\u5929|\u661F\u671F|\u793C\u62DC|\u6708|\u5E74)(?:(?:\u4E4B|\u8FC7)?\u540E|(?:\u4E4B)?\u5185)", "i");
    var NUMBER_GROUP = 1;
    var UNIT_GROUP = 2;
    var ZHHansDeadlineFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        let number = parseInt(match[NUMBER_GROUP]);
        if (isNaN(number)) {
          number = constants_1.zhStringToNumber(match[NUMBER_GROUP]);
        }
        if (isNaN(number)) {
          const string = match[NUMBER_GROUP];
          if (string === "\u51E0") {
            number = 3;
          } else if (string === "\u534A") {
            number = 0.5;
          } else {
            return null;
          }
        }
        let date = dayjs_1.default(context.refDate);
        const unit = match[UNIT_GROUP];
        const unitAbbr = unit[0];
        if (unitAbbr.match(/[日天星礼月年]/)) {
          if (unitAbbr == "\u65E5" || unitAbbr == "\u5929") {
            date = date.add(number, "d");
          } else if (unitAbbr == "\u661F" || unitAbbr == "\u793C") {
            date = date.add(number * 7, "d");
          } else if (unitAbbr == "\u6708") {
            date = date.add(number, "month");
          } else if (unitAbbr == "\u5E74") {
            date = date.add(number, "year");
          }
          result.start.assign("year", date.year());
          result.start.assign("month", date.month() + 1);
          result.start.assign("day", date.date());
          return result;
        }
        if (unitAbbr == "\u79D2") {
          date = date.add(number, "second");
        } else if (unitAbbr == "\u5206") {
          date = date.add(number, "minute");
        } else if (unitAbbr == "\u5C0F" || unitAbbr == "\u949F") {
          date = date.add(number, "hour");
        }
        result.start.imply("year", date.year());
        result.start.imply("month", date.month() + 1);
        result.start.imply("day", date.date());
        result.start.assign("hour", date.hour());
        result.start.assign("minute", date.minute());
        result.start.assign("second", date.second());
        return result;
      }
    };
    exports.default = ZHHansDeadlineFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/zh/hans/parsers/ZHHansRelationWeekdayParser.js
var require_ZHHansRelationWeekdayParser = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hans/parsers/ZHHansRelationWeekdayParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var constants_1 = require_constants8();
    var PATTERN = new RegExp("(?<prefix>\u4E0A|\u4E0B|\u8FD9)(?:\u4E2A)?(?:\u661F\u671F|\u793C\u62DC|\u5468)(?<weekday>" + Object.keys(constants_1.WEEKDAY_OFFSET).join("|") + ")");
    var ZHHansRelationWeekdayParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const dayOfWeek = match.groups.weekday;
        const offset = constants_1.WEEKDAY_OFFSET[dayOfWeek];
        if (offset === void 0)
          return null;
        let modifier = null;
        const prefix = match.groups.prefix;
        if (prefix == "\u4E0A") {
          modifier = "last";
        } else if (prefix == "\u4E0B") {
          modifier = "next";
        } else if (prefix == "\u8FD9") {
          modifier = "this";
        }
        let startMoment = dayjs_1.default(context.refDate);
        let startMomentFixed = false;
        const refOffset = startMoment.day();
        if (modifier == "last" || modifier == "past") {
          startMoment = startMoment.day(offset - 7);
          startMomentFixed = true;
        } else if (modifier == "next") {
          startMoment = startMoment.day(offset + 7);
          startMomentFixed = true;
        } else if (modifier == "this") {
          startMoment = startMoment.day(offset);
        } else {
          if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {
            startMoment = startMoment.day(offset - 7);
          } else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {
            startMoment = startMoment.day(offset + 7);
          } else {
            startMoment = startMoment.day(offset);
          }
        }
        result.start.assign("weekday", offset);
        if (startMomentFixed) {
          result.start.assign("day", startMoment.date());
          result.start.assign("month", startMoment.month() + 1);
          result.start.assign("year", startMoment.year());
        } else {
          result.start.imply("day", startMoment.date());
          result.start.imply("month", startMoment.month() + 1);
          result.start.imply("year", startMoment.year());
        }
        return result;
      }
    };
    exports.default = ZHHansRelationWeekdayParser;
  }
});

// node_modules/chrono-node/dist/locales/zh/hans/parsers/ZHHansTimeExpressionParser.js
var require_ZHHansTimeExpressionParser = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hans/parsers/ZHHansTimeExpressionParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var constants_1 = require_constants8();
    var FIRST_REG_PATTERN = new RegExp("(?:\u4ECE|\u81EA)?(?:(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(\u65E9|\u671D|\u665A)|(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(?:\u65E5|\u5929)(?:[\\s,\uFF0C]*)(?:(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?)?(?:[\\s,\uFF0C]*)(?:(\\d+|[" + Object.keys(constants_1.NUMBER).join("") + "]+)(?:\\s*)(?:\u70B9|\u65F6|:|\uFF1A)(?:\\s*)(\\d+|\u534A|\u6B63|\u6574|[" + Object.keys(constants_1.NUMBER).join("") + "]+)?(?:\\s*)(?:\u5206|:|\uFF1A)?(?:\\s*)(\\d+|[" + Object.keys(constants_1.NUMBER).join("") + "]+)?(?:\\s*)(?:\u79D2)?)(?:\\s*(A.M.|P.M.|AM?|PM?))?", "i");
    var SECOND_REG_PATTERN = new RegExp("(?:^\\s*(?:\u5230|\u81F3|\\-|\\\u2013|\\~|\\\u301C)\\s*)(?:(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(\u65E9|\u671D|\u665A)|(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(?:\u65E5|\u5929)(?:[\\s,\uFF0C]*)(?:(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?)?(?:[\\s,\uFF0C]*)(?:(\\d+|[" + Object.keys(constants_1.NUMBER).join("") + "]+)(?:\\s*)(?:\u70B9|\u65F6|:|\uFF1A)(?:\\s*)(\\d+|\u534A|\u6B63|\u6574|[" + Object.keys(constants_1.NUMBER).join("") + "]+)?(?:\\s*)(?:\u5206|:|\uFF1A)?(?:\\s*)(\\d+|[" + Object.keys(constants_1.NUMBER).join("") + "]+)?(?:\\s*)(?:\u79D2)?)(?:\\s*(A.M.|P.M.|AM?|PM?))?", "i");
    var DAY_GROUP_1 = 1;
    var ZH_AM_PM_HOUR_GROUP_1 = 2;
    var ZH_AM_PM_HOUR_GROUP_2 = 3;
    var DAY_GROUP_3 = 4;
    var ZH_AM_PM_HOUR_GROUP_3 = 5;
    var HOUR_GROUP = 6;
    var MINUTE_GROUP = 7;
    var SECOND_GROUP = 8;
    var AM_PM_HOUR_GROUP = 9;
    var ZHHansTimeExpressionParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return FIRST_REG_PATTERN;
      }
      innerExtract(context, match) {
        if (match.index > 0 && context.text[match.index - 1].match(/\w/)) {
          return null;
        }
        const refMoment = dayjs_1.default(context.refDate);
        const result = context.createParsingResult(match.index, match[0]);
        const startMoment = refMoment.clone();
        if (match[DAY_GROUP_1]) {
          const day1 = match[DAY_GROUP_1];
          if (day1 == "\u660E") {
            if (refMoment.hour() > 1) {
              startMoment.add(1, "day");
            }
          } else if (day1 == "\u6628") {
            startMoment.add(-1, "day");
          } else if (day1 == "\u524D") {
            startMoment.add(-2, "day");
          } else if (day1 == "\u5927\u524D") {
            startMoment.add(-3, "day");
          } else if (day1 == "\u540E") {
            startMoment.add(2, "day");
          } else if (day1 == "\u5927\u540E") {
            startMoment.add(3, "day");
          }
          result.start.assign("day", startMoment.date());
          result.start.assign("month", startMoment.month() + 1);
          result.start.assign("year", startMoment.year());
        } else if (match[DAY_GROUP_3]) {
          const day3 = match[DAY_GROUP_3];
          if (day3 == "\u660E") {
            startMoment.add(1, "day");
          } else if (day3 == "\u6628") {
            startMoment.add(-1, "day");
          } else if (day3 == "\u524D") {
            startMoment.add(-2, "day");
          } else if (day3 == "\u5927\u524D") {
            startMoment.add(-3, "day");
          } else if (day3 == "\u540E") {
            startMoment.add(2, "day");
          } else if (day3 == "\u5927\u540E") {
            startMoment.add(3, "day");
          }
          result.start.assign("day", startMoment.date());
          result.start.assign("month", startMoment.month() + 1);
          result.start.assign("year", startMoment.year());
        } else {
          result.start.imply("day", startMoment.date());
          result.start.imply("month", startMoment.month() + 1);
          result.start.imply("year", startMoment.year());
        }
        let hour = 0;
        let minute = 0;
        let meridiem = -1;
        if (match[SECOND_GROUP]) {
          let second = parseInt(match[SECOND_GROUP]);
          if (isNaN(second)) {
            second = constants_1.zhStringToNumber(match[SECOND_GROUP]);
          }
          if (second >= 60)
            return null;
          result.start.assign("second", second);
        }
        hour = parseInt(match[HOUR_GROUP]);
        if (isNaN(hour)) {
          hour = constants_1.zhStringToNumber(match[HOUR_GROUP]);
        }
        if (match[MINUTE_GROUP]) {
          if (match[MINUTE_GROUP] == "\u534A") {
            minute = 30;
          } else if (match[MINUTE_GROUP] == "\u6B63" || match[MINUTE_GROUP] == "\u6574") {
            minute = 0;
          } else {
            minute = parseInt(match[MINUTE_GROUP]);
            if (isNaN(minute)) {
              minute = constants_1.zhStringToNumber(match[MINUTE_GROUP]);
            }
          }
        } else if (hour > 100) {
          minute = hour % 100;
          hour = Math.floor(hour / 100);
        }
        if (minute >= 60) {
          return null;
        }
        if (hour > 24) {
          return null;
        }
        if (hour >= 12) {
          meridiem = 1;
        }
        if (match[AM_PM_HOUR_GROUP]) {
          if (hour > 12)
            return null;
          const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
          if (ampm == "a") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          }
          if (ampm == "p") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {
          const zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];
          const zhAMPM1 = zhAMPMString1[0];
          if (zhAMPM1 == "\u65E9") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          } else if (zhAMPM1 == "\u665A") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {
          const zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];
          const zhAMPM2 = zhAMPMString2[0];
          if (zhAMPM2 == "\u4E0A" || zhAMPM2 == "\u65E9" || zhAMPM2 == "\u51CC") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          } else if (zhAMPM2 == "\u4E0B" || zhAMPM2 == "\u665A") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {
          const zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];
          const zhAMPM3 = zhAMPMString3[0];
          if (zhAMPM3 == "\u4E0A" || zhAMPM3 == "\u65E9" || zhAMPM3 == "\u51CC") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          } else if (zhAMPM3 == "\u4E0B" || zhAMPM3 == "\u665A") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        }
        result.start.assign("hour", hour);
        result.start.assign("minute", minute);
        if (meridiem >= 0) {
          result.start.assign("meridiem", meridiem);
        } else {
          if (hour < 12) {
            result.start.imply("meridiem", 0);
          } else {
            result.start.imply("meridiem", 1);
          }
        }
        match = SECOND_REG_PATTERN.exec(context.text.substring(result.index + result.text.length));
        if (!match) {
          if (result.text.match(/^\d+$/)) {
            return null;
          }
          return result;
        }
        const endMoment = startMoment.clone();
        result.end = context.createParsingComponents();
        if (match[DAY_GROUP_1]) {
          const day1 = match[DAY_GROUP_1];
          if (day1 == "\u660E") {
            if (refMoment.hour() > 1) {
              endMoment.add(1, "day");
            }
          } else if (day1 == "\u6628") {
            endMoment.add(-1, "day");
          } else if (day1 == "\u524D") {
            endMoment.add(-2, "day");
          } else if (day1 == "\u5927\u524D") {
            endMoment.add(-3, "day");
          } else if (day1 == "\u540E") {
            endMoment.add(2, "day");
          } else if (day1 == "\u5927\u540E") {
            endMoment.add(3, "day");
          }
          result.end.assign("day", endMoment.date());
          result.end.assign("month", endMoment.month() + 1);
          result.end.assign("year", endMoment.year());
        } else if (match[DAY_GROUP_3]) {
          const day3 = match[DAY_GROUP_3];
          if (day3 == "\u660E") {
            endMoment.add(1, "day");
          } else if (day3 == "\u6628") {
            endMoment.add(-1, "day");
          } else if (day3 == "\u524D") {
            endMoment.add(-2, "day");
          } else if (day3 == "\u5927\u524D") {
            endMoment.add(-3, "day");
          } else if (day3 == "\u540E") {
            endMoment.add(2, "day");
          } else if (day3 == "\u5927\u540E") {
            endMoment.add(3, "day");
          }
          result.end.assign("day", endMoment.date());
          result.end.assign("month", endMoment.month() + 1);
          result.end.assign("year", endMoment.year());
        } else {
          result.end.imply("day", endMoment.date());
          result.end.imply("month", endMoment.month() + 1);
          result.end.imply("year", endMoment.year());
        }
        hour = 0;
        minute = 0;
        meridiem = -1;
        if (match[SECOND_GROUP]) {
          let second = parseInt(match[SECOND_GROUP]);
          if (isNaN(second)) {
            second = constants_1.zhStringToNumber(match[SECOND_GROUP]);
          }
          if (second >= 60)
            return null;
          result.end.assign("second", second);
        }
        hour = parseInt(match[HOUR_GROUP]);
        if (isNaN(hour)) {
          hour = constants_1.zhStringToNumber(match[HOUR_GROUP]);
        }
        if (match[MINUTE_GROUP]) {
          if (match[MINUTE_GROUP] == "\u534A") {
            minute = 30;
          } else if (match[MINUTE_GROUP] == "\u6B63" || match[MINUTE_GROUP] == "\u6574") {
            minute = 0;
          } else {
            minute = parseInt(match[MINUTE_GROUP]);
            if (isNaN(minute)) {
              minute = constants_1.zhStringToNumber(match[MINUTE_GROUP]);
            }
          }
        } else if (hour > 100) {
          minute = hour % 100;
          hour = Math.floor(hour / 100);
        }
        if (minute >= 60) {
          return null;
        }
        if (hour > 24) {
          return null;
        }
        if (hour >= 12) {
          meridiem = 1;
        }
        if (match[AM_PM_HOUR_GROUP]) {
          if (hour > 12)
            return null;
          const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
          if (ampm == "a") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          }
          if (ampm == "p") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
          if (!result.start.isCertain("meridiem")) {
            if (meridiem == 0) {
              result.start.imply("meridiem", 0);
              if (result.start.get("hour") == 12) {
                result.start.assign("hour", 0);
              }
            } else {
              result.start.imply("meridiem", 1);
              if (result.start.get("hour") != 12) {
                result.start.assign("hour", result.start.get("hour") + 12);
              }
            }
          }
        } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {
          const zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];
          const zhAMPM1 = zhAMPMString1[0];
          if (zhAMPM1 == "\u65E9") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          } else if (zhAMPM1 == "\u665A") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {
          const zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];
          const zhAMPM2 = zhAMPMString2[0];
          if (zhAMPM2 == "\u4E0A" || zhAMPM2 == "\u65E9" || zhAMPM2 == "\u51CC") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          } else if (zhAMPM2 == "\u4E0B" || zhAMPM2 == "\u665A") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {
          const zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];
          const zhAMPM3 = zhAMPMString3[0];
          if (zhAMPM3 == "\u4E0A" || zhAMPM3 == "\u65E9" || zhAMPM3 == "\u51CC") {
            meridiem = 0;
            if (hour == 12)
              hour = 0;
          } else if (zhAMPM3 == "\u4E0B" || zhAMPM3 == "\u665A") {
            meridiem = 1;
            if (hour != 12)
              hour += 12;
          }
        }
        result.text = result.text + match[0];
        result.end.assign("hour", hour);
        result.end.assign("minute", minute);
        if (meridiem >= 0) {
          result.end.assign("meridiem", meridiem);
        } else {
          const startAtPM = result.start.isCertain("meridiem") && result.start.get("meridiem") == 1;
          if (startAtPM && result.start.get("hour") > hour) {
            result.end.imply("meridiem", 0);
          } else if (hour > 12) {
            result.end.imply("meridiem", 1);
          }
        }
        if (result.end.date().getTime() < result.start.date().getTime()) {
          result.end.imply("day", result.end.get("day") + 1);
        }
        return result;
      }
    };
    exports.default = ZHHansTimeExpressionParser;
  }
});

// node_modules/chrono-node/dist/locales/zh/hans/parsers/ZHHansWeekdayParser.js
var require_ZHHansWeekdayParser = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hans/parsers/ZHHansWeekdayParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var constants_1 = require_constants8();
    var PATTERN = new RegExp("(?:\u661F\u671F|\u793C\u62DC|\u5468)(?<weekday>" + Object.keys(constants_1.WEEKDAY_OFFSET).join("|") + ")");
    var ZHHansWeekdayParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const dayOfWeek = match.groups.weekday;
        const offset = constants_1.WEEKDAY_OFFSET[dayOfWeek];
        if (offset === void 0)
          return null;
        let startMoment = dayjs_1.default(context.refDate);
        const startMomentFixed = false;
        const refOffset = startMoment.day();
        if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {
          startMoment = startMoment.day(offset - 7);
        } else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {
          startMoment = startMoment.day(offset + 7);
        } else {
          startMoment = startMoment.day(offset);
        }
        result.start.assign("weekday", offset);
        if (startMomentFixed) {
          result.start.assign("day", startMoment.date());
          result.start.assign("month", startMoment.month() + 1);
          result.start.assign("year", startMoment.year());
        } else {
          result.start.imply("day", startMoment.date());
          result.start.imply("month", startMoment.month() + 1);
          result.start.imply("year", startMoment.year());
        }
        return result;
      }
    };
    exports.default = ZHHansWeekdayParser;
  }
});

// node_modules/chrono-node/dist/locales/zh/hans/refiners/ZHHansMergeDateRangeRefiner.js
var require_ZHHansMergeDateRangeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hans/refiners/ZHHansMergeDateRangeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateRangeRefiner_1 = __importDefault2(require_AbstractMergeDateRangeRefiner());
    var ZHHansMergeDateRangeRefiner = class extends AbstractMergeDateRangeRefiner_1.default {
      patternBetween() {
        return /^\s*(至|到|-|~|～|－|ー)\s*$/i;
      }
    };
    exports.default = ZHHansMergeDateRangeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/zh/hans/refiners/ZHHansMergeDateTimeRefiner.js
var require_ZHHansMergeDateTimeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hans/refiners/ZHHansMergeDateTimeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateTimeRefiner_1 = __importDefault2(require_AbstractMergeDateTimeRefiner());
    var ZHHansMergeDateTimeRefiner = class extends AbstractMergeDateTimeRefiner_1.default {
      patternBetween() {
        return /^\s*$/i;
      }
    };
    exports.default = ZHHansMergeDateTimeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/zh/hans/index.js
var require_hans = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/hans/index.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfiguration = exports.createCasualConfiguration = exports.parseDate = exports.parse = exports.strict = exports.casual = exports.hans = void 0;
    var chrono_1 = require_chrono();
    var ExtractTimezoneOffsetRefiner_1 = __importDefault2(require_ExtractTimezoneOffsetRefiner());
    var configurations_1 = require_configurations();
    var ZHHansCasualDateParser_1 = __importDefault2(require_ZHHansCasualDateParser());
    var ZHHansDateParser_1 = __importDefault2(require_ZHHansDateParser());
    var ZHHansDeadlineFormatParser_1 = __importDefault2(require_ZHHansDeadlineFormatParser());
    var ZHHansRelationWeekdayParser_1 = __importDefault2(require_ZHHansRelationWeekdayParser());
    var ZHHansTimeExpressionParser_1 = __importDefault2(require_ZHHansTimeExpressionParser());
    var ZHHansWeekdayParser_1 = __importDefault2(require_ZHHansWeekdayParser());
    var ZHHansMergeDateRangeRefiner_1 = __importDefault2(require_ZHHansMergeDateRangeRefiner());
    var ZHHansMergeDateTimeRefiner_1 = __importDefault2(require_ZHHansMergeDateTimeRefiner());
    exports.hans = new chrono_1.Chrono(createCasualConfiguration());
    exports.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports.strict = new chrono_1.Chrono(createConfiguration());
    function parse(text2, ref, option) {
      return exports.casual.parse(text2, ref, option);
    }
    exports.parse = parse;
    function parseDate3(text2, ref, option) {
      return exports.casual.parseDate(text2, ref, option);
    }
    exports.parseDate = parseDate3;
    function createCasualConfiguration() {
      const option = createConfiguration();
      option.parsers.unshift(new ZHHansCasualDateParser_1.default());
      return option;
    }
    exports.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration() {
      const configuration = configurations_1.includeCommonConfiguration({
        parsers: [
          new ZHHansDateParser_1.default(),
          new ZHHansRelationWeekdayParser_1.default(),
          new ZHHansWeekdayParser_1.default(),
          new ZHHansTimeExpressionParser_1.default(),
          new ZHHansDeadlineFormatParser_1.default()
        ],
        refiners: [new ZHHansMergeDateRangeRefiner_1.default(), new ZHHansMergeDateTimeRefiner_1.default()]
      });
      configuration.refiners = configuration.refiners.filter((refiner) => !(refiner instanceof ExtractTimezoneOffsetRefiner_1.default));
      return configuration;
    }
    exports.createConfiguration = createConfiguration;
  }
});

// node_modules/chrono-node/dist/locales/zh/index.js
var require_zh = __commonJS({
  "node_modules/chrono-node/dist/locales/zh/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding2(exports2, m, p);
    };
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hans = void 0;
    __exportStar2(require_hant(), exports);
    exports.hans = __importStar2(require_hans());
  }
});

// node_modules/chrono-node/dist/locales/ru/constants.js
var require_constants9 = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseTimeUnits = exports.TIME_UNITS_PATTERN = exports.parseYear = exports.YEAR_PATTERN = exports.parseOrdinalNumberPattern = exports.ORDINAL_NUMBER_PATTERN = exports.parseNumberPattern = exports.NUMBER_PATTERN = exports.TIME_UNIT_DICTIONARY = exports.ORDINAL_WORD_DICTIONARY = exports.INTEGER_WORD_DICTIONARY = exports.MONTH_DICTIONARY = exports.FULL_MONTH_NAME_DICTIONARY = exports.WEEKDAY_DICTIONARY = exports.REGEX_PARTS = void 0;
    var pattern_1 = require_pattern();
    var years_1 = require_years();
    exports.REGEX_PARTS = {
      leftBoundary: "([^\\p{L}\\p{N}_]|^)",
      rightBoundary: "(?=[^\\p{L}\\p{N}_]|$)",
      flags: "iu"
    };
    exports.WEEKDAY_DICTIONARY = {
      \u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435: 0,
      \u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u044F: 0,
      \u0432\u0441\u043A: 0,
      "\u0432\u0441\u043A.": 0,
      \u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A: 1,
      \u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A\u0430: 1,
      \u043F\u043D: 1,
      "\u043F\u043D.": 1,
      \u0432\u0442\u043E\u0440\u043D\u0438\u043A: 2,
      \u0432\u0442\u043E\u0440\u043D\u0438\u043A\u0430: 2,
      \u0432\u0442: 2,
      "\u0432\u0442.": 2,
      \u0441\u0440\u0435\u0434\u0430: 3,
      \u0441\u0440\u0435\u0434\u044B: 3,
      \u0441\u0440\u0435\u0434\u0443: 3,
      \u0441\u0440: 3,
      "\u0441\u0440.": 3,
      \u0447\u0435\u0442\u0432\u0435\u0440\u0433: 4,
      \u0447\u0435\u0442\u0432\u0435\u0440\u0433\u0430: 4,
      \u0447\u0442: 4,
      "\u0447\u0442.": 4,
      \u043F\u044F\u0442\u043D\u0438\u0446\u0430: 5,
      \u043F\u044F\u0442\u043D\u0438\u0446\u0443: 5,
      \u043F\u044F\u0442\u043D\u0438\u0446\u044B: 5,
      \u043F\u0442: 5,
      "\u043F\u0442.": 5,
      \u0441\u0443\u0431\u0431\u043E\u0442\u0430: 6,
      \u0441\u0443\u0431\u0431\u043E\u0442\u0443: 6,
      \u0441\u0443\u0431\u0431\u043E\u0442\u044B: 6,
      \u0441\u0431: 6,
      "\u0441\u0431.": 6
    };
    exports.FULL_MONTH_NAME_DICTIONARY = {
      \u044F\u043D\u0432\u0430\u0440\u044C: 1,
      \u044F\u043D\u0432\u0430\u0440\u044F: 1,
      \u044F\u043D\u0432\u0430\u0440\u0435: 1,
      \u0444\u0435\u0432\u0440\u044F\u043B\u044C: 2,
      \u0444\u0435\u0432\u0440\u044F\u043B\u044F: 2,
      \u0444\u0435\u0432\u0440\u044F\u043B\u0435: 2,
      \u043C\u0430\u0440\u0442: 3,
      \u043C\u0430\u0440\u0442\u0430: 3,
      \u043C\u0430\u0440\u0442\u0435: 3,
      \u0430\u043F\u0440\u0435\u043B\u044C: 4,
      \u0430\u043F\u0440\u0435\u043B\u044F: 4,
      \u0430\u043F\u0440\u0435\u043B\u0435: 4,
      \u043C\u0430\u0439: 5,
      \u043C\u0430\u044F: 5,
      \u043C\u0430\u0435: 5,
      \u0438\u044E\u043D\u044C: 6,
      \u0438\u044E\u043D\u044F: 6,
      \u0438\u044E\u043D\u0435: 6,
      \u0438\u044E\u043B\u044C: 7,
      \u0438\u044E\u043B\u044F: 7,
      \u0438\u044E\u043B\u0435: 7,
      \u0430\u0432\u0433\u0443\u0441\u0442: 8,
      \u0430\u0432\u0433\u0443\u0441\u0442\u0430: 8,
      \u0430\u0432\u0433\u0443\u0441\u0442\u0435: 8,
      \u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C: 9,
      \u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044F: 9,
      \u0441\u0435\u043D\u0442\u044F\u0431\u0440\u0435: 9,
      \u043E\u043A\u0442\u044F\u0431\u0440\u044C: 10,
      \u043E\u043A\u0442\u044F\u0431\u0440\u044F: 10,
      \u043E\u043A\u0442\u044F\u0431\u0440\u0435: 10,
      \u043D\u043E\u044F\u0431\u0440\u044C: 11,
      \u043D\u043E\u044F\u0431\u0440\u044F: 11,
      \u043D\u043E\u044F\u0431\u0440\u0435: 11,
      \u0434\u0435\u043A\u0430\u0431\u0440\u044C: 12,
      \u0434\u0435\u043A\u0430\u0431\u0440\u044F: 12,
      \u0434\u0435\u043A\u0430\u0431\u0440\u0435: 12
    };
    exports.MONTH_DICTIONARY = Object.assign(Object.assign({}, exports.FULL_MONTH_NAME_DICTIONARY), { \u044F\u043D\u0432: 1, "\u044F\u043D\u0432.": 1, \u0444\u0435\u0432: 2, "\u0444\u0435\u0432.": 2, \u043C\u0430\u0440: 3, "\u043C\u0430\u0440.": 3, \u0430\u043F\u0440: 4, "\u0430\u043F\u0440.": 4, \u0430\u0432\u0433: 8, "\u0430\u0432\u0433.": 8, \u0441\u0435\u043D: 9, "\u0441\u0435\u043D.": 9, \u043E\u043A\u0442: 10, "\u043E\u043A\u0442.": 10, \u043D\u043E\u044F: 11, "\u043D\u043E\u044F.": 11, \u0434\u0435\u043A: 12, "\u0434\u0435\u043A.": 12 });
    exports.INTEGER_WORD_DICTIONARY = {
      \u043E\u0434\u0438\u043D: 1,
      \u043E\u0434\u043D\u0430: 1,
      \u043E\u0434\u043D\u043E\u0439: 1,
      \u043E\u0434\u043D\u0443: 1,
      \u0434\u0432\u0435: 2,
      \u0434\u0432\u0430: 2,
      \u0434\u0432\u0443\u0445: 2,
      \u0442\u0440\u0438: 3,
      \u0442\u0440\u0435\u0445: 3,
      \u0442\u0440\u0451\u0445: 3,
      \u0447\u0435\u0442\u044B\u0440\u0435: 4,
      \u0447\u0435\u0442\u044B\u0440\u0435\u0445: 4,
      \u0447\u0435\u0442\u044B\u0440\u0451\u0445: 4,
      \u043F\u044F\u0442\u044C: 5,
      \u043F\u044F\u0442\u0438: 5,
      \u0448\u0435\u0441\u0442\u044C: 6,
      \u0448\u0435\u0441\u0442\u0438: 6,
      \u0441\u0435\u043C\u044C: 7,
      \u0441\u0435\u043C\u0438: 7,
      \u0432\u043E\u0441\u0435\u043C\u044C: 8,
      \u0432\u043E\u0441\u0435\u043C\u044C\u043C\u0438: 8,
      \u0434\u0435\u0432\u044F\u0442\u044C: 9,
      \u0434\u0435\u0432\u044F\u0442\u0438: 9,
      \u0434\u0435\u0441\u044F\u0442\u044C: 10,
      \u0434\u0435\u0441\u044F\u0442\u0438: 10,
      \u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u044C: 11,
      \u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u0438: 11,
      \u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u044C: 12,
      \u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u0438: 12
    };
    exports.ORDINAL_WORD_DICTIONARY = {
      \u043F\u0435\u0440\u0432\u043E\u0435: 1,
      \u043F\u0435\u0440\u0432\u043E\u0433\u043E: 1,
      \u0432\u0442\u043E\u0440\u043E\u0435: 2,
      \u0432\u0442\u043E\u0440\u043E\u0433\u043E: 2,
      \u0442\u0440\u0435\u0442\u044C\u0435: 3,
      \u0442\u0440\u0435\u0442\u044C\u0435\u0433\u043E: 3,
      \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043E\u0435: 4,
      \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043E\u0433\u043E: 4,
      \u043F\u044F\u0442\u043E\u0435: 5,
      \u043F\u044F\u0442\u043E\u0433\u043E: 5,
      \u0448\u0435\u0441\u0442\u043E\u0435: 6,
      \u0448\u0435\u0441\u0442\u043E\u0433\u043E: 6,
      \u0441\u0435\u0434\u044C\u043C\u043E\u0435: 7,
      \u0441\u0435\u0434\u044C\u043C\u043E\u0433\u043E: 7,
      \u0432\u043E\u0441\u044C\u043C\u043E\u0435: 8,
      \u0432\u043E\u0441\u044C\u043C\u043E\u0433\u043E: 8,
      \u0434\u0435\u0432\u044F\u0442\u043E\u0435: 9,
      \u0434\u0435\u0432\u044F\u0442\u043E\u0433\u043E: 9,
      \u0434\u0435\u0441\u044F\u0442\u043E\u0435: 10,
      \u0434\u0435\u0441\u044F\u0442\u043E\u0433\u043E: 10,
      \u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 11,
      \u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 11,
      \u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 12,
      \u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 12,
      \u0442\u0440\u0438\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 13,
      \u0442\u0440\u0438\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 13,
      \u0447\u0435\u0442\u044B\u0440\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 14,
      \u0447\u0435\u0442\u044B\u0440\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 14,
      \u043F\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 15,
      \u043F\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 15,
      \u0448\u0435\u0441\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 16,
      \u0448\u0435\u0441\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 16,
      \u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 17,
      \u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 17,
      \u0432\u043E\u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 18,
      \u0432\u043E\u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 18,
      \u0434\u0435\u0432\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 19,
      \u0434\u0435\u0432\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 19,
      \u0434\u0432\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 20,
      \u0434\u0432\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 20,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u043F\u0435\u0440\u0432\u043E\u0435": 21,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u043F\u0435\u0440\u0432\u043E\u0433\u043E": 21,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0432\u0442\u043E\u0440\u043E\u0435": 22,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0432\u0442\u043E\u0440\u043E\u0433\u043E": 22,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0442\u0440\u0435\u0442\u044C\u0435": 23,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0442\u0440\u0435\u0442\u044C\u0435\u0433\u043E": 23,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043E\u0435": 24,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043E\u0433\u043E": 24,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u043F\u044F\u0442\u043E\u0435": 25,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u043F\u044F\u0442\u043E\u0433\u043E": 25,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0448\u0435\u0441\u0442\u043E\u0435": 26,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0448\u0435\u0441\u0442\u043E\u0433\u043E": 26,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0441\u0435\u0434\u044C\u043C\u043E\u0435": 27,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0441\u0435\u0434\u044C\u043C\u043E\u0433\u043E": 27,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0432\u043E\u0441\u044C\u043C\u043E\u0435": 28,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0432\u043E\u0441\u044C\u043C\u043E\u0433\u043E": 28,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0434\u0435\u0432\u044F\u0442\u043E\u0435": 29,
      "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0434\u0435\u0432\u044F\u0442\u043E\u0433\u043E": 29,
      "\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u043E\u0435": 30,
      "\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u043E\u0433\u043E": 30,
      "\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044C \u043F\u0435\u0440\u0432\u043E\u0435": 31,
      "\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044C \u043F\u0435\u0440\u0432\u043E\u0433\u043E": 31
    };
    exports.TIME_UNIT_DICTIONARY = {
      \u0441\u0435\u043A: "second",
      \u0441\u0435\u043A\u0443\u043D\u0434\u0430: "second",
      \u0441\u0435\u043A\u0443\u043D\u0434: "second",
      \u0441\u0435\u043A\u0443\u043D\u0434\u044B: "second",
      \u0441\u0435\u043A\u0443\u043D\u0434\u0443: "second",
      \u0441\u0435\u043A\u0443\u043D\u0434\u043E\u0447\u043A\u0430: "second",
      \u0441\u0435\u043A\u0443\u043D\u0434\u043E\u0447\u043A\u0438: "second",
      \u0441\u0435\u043A\u0443\u043D\u0434\u043E\u0447\u0435\u043A: "second",
      \u0441\u0435\u043A\u0443\u043D\u0434\u043E\u0447\u043A\u0443: "second",
      \u043C\u0438\u043D: "minute",
      \u043C\u0438\u043D\u0443\u0442\u0430: "minute",
      \u043C\u0438\u043D\u0443\u0442: "minute",
      \u043C\u0438\u043D\u0443\u0442\u044B: "minute",
      \u043C\u0438\u043D\u0443\u0442\u0443: "minute",
      \u043C\u0438\u043D\u0443\u0442\u043E\u043A: "minute",
      \u043C\u0438\u043D\u0443\u0442\u043A\u0438: "minute",
      \u043C\u0438\u043D\u0443\u0442\u043A\u0443: "minute",
      \u0447\u0430\u0441: "hour",
      \u0447\u0430\u0441\u043E\u0432: "hour",
      \u0447\u0430\u0441\u0430: "hour",
      \u0447\u0430\u0441\u0443: "hour",
      \u0447\u0430\u0441\u0438\u043A\u043E\u0432: "hour",
      \u0447\u0430\u0441\u0438\u043A\u0430: "hour",
      \u0447\u0430\u0441\u0438\u043A\u0435: "hour",
      \u0447\u0430\u0441\u0438\u043A: "hour",
      \u0434\u0435\u043D\u044C: "d",
      \u0434\u043D\u044F: "d",
      \u0434\u043D\u0435\u0439: "d",
      \u0441\u0443\u0442\u043E\u043A: "d",
      \u0441\u0443\u0442\u043A\u0438: "d",
      \u043D\u0435\u0434\u0435\u043B\u044F: "week",
      \u043D\u0435\u0434\u0435\u043B\u0435: "week",
      \u043D\u0435\u0434\u0435\u043B\u0438: "week",
      \u043D\u0435\u0434\u0435\u043B\u044E: "week",
      \u043D\u0435\u0434\u0435\u043B\u044C: "week",
      \u043D\u0435\u0434\u0435\u043B\u044C\u043A\u0435: "week",
      \u043D\u0435\u0434\u0435\u043B\u044C\u043A\u0438: "week",
      \u043D\u0435\u0434\u0435\u043B\u0435\u043A: "week",
      \u043C\u0435\u0441\u044F\u0446: "month",
      \u043C\u0435\u0441\u044F\u0446\u0435: "month",
      \u043C\u0435\u0441\u044F\u0446\u0435\u0432: "month",
      \u043C\u0435\u0441\u044F\u0446\u0430: "month",
      \u043A\u0432\u0430\u0440\u0442\u0430\u043B: "quarter",
      \u043A\u0432\u0430\u0440\u0442\u0430\u043B\u0435: "quarter",
      \u043A\u0432\u0430\u0440\u0442\u0430\u043B\u043E\u0432: "quarter",
      \u0433\u043E\u0434: "year",
      \u0433\u043E\u0434\u0430: "year",
      \u0433\u043E\u0434\u0443: "year",
      \u0433\u043E\u0434\u043E\u0432: "year",
      \u043B\u0435\u0442: "year",
      \u0433\u043E\u0434\u0438\u043A: "year",
      \u0433\u043E\u0434\u0438\u043A\u0430: "year",
      \u0433\u043E\u0434\u0438\u043A\u043E\u0432: "year"
    };
    exports.NUMBER_PATTERN = `(?:${pattern_1.matchAnyPattern(exports.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|\u043F\u043E\u043B|\u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E|\u043F\u0430\u0440(?:\u044B|\u0443)|\\s{0,3})`;
    function parseNumberPattern(match) {
      const num = match.toLowerCase();
      if (exports.INTEGER_WORD_DICTIONARY[num] !== void 0) {
        return exports.INTEGER_WORD_DICTIONARY[num];
      }
      if (num.match(/несколько/)) {
        return 3;
      } else if (num.match(/пол/)) {
        return 0.5;
      } else if (num.match(/пар/)) {
        return 2;
      } else if (num === "") {
        return 1;
      }
      return parseFloat(num);
    }
    exports.parseNumberPattern = parseNumberPattern;
    exports.ORDINAL_NUMBER_PATTERN = `(?:${pattern_1.matchAnyPattern(exports.ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:\u0433\u043E|\u043E\u0433\u043E|\u0435|\u043E\u0435)?)`;
    function parseOrdinalNumberPattern(match) {
      let num = match.toLowerCase();
      if (exports.ORDINAL_WORD_DICTIONARY[num] !== void 0) {
        return exports.ORDINAL_WORD_DICTIONARY[num];
      }
      num = num.replace(/(?:st|nd|rd|th)$/i, "");
      return parseInt(num);
    }
    exports.parseOrdinalNumberPattern = parseOrdinalNumberPattern;
    var year = "(?:\\s+(?:\u0433\u043E\u0434\u0443|\u0433\u043E\u0434\u0430|\u0433\u043E\u0434|\u0433|\u0433.))?";
    exports.YEAR_PATTERN = `(?:[1-9][0-9]{0,3}${year}\\s*(?:\u043D.\u044D.|\u0434\u043E \u043D.\u044D.|\u043D. \u044D.|\u0434\u043E \u043D. \u044D.)|[1-2][0-9]{3}${year}|[5-9][0-9]${year})`;
    function parseYear(match) {
      if (/(год|года|г|г.)/i.test(match)) {
        match = match.replace(/(год|года|г|г.)/i, "");
      }
      if (/(до н.э.|до н. э.)/i.test(match)) {
        match = match.replace(/(до н.э.|до н. э.)/i, "");
        return -parseInt(match);
      }
      if (/(н. э.|н.э.)/i.test(match)) {
        match = match.replace(/(н. э.|н.э.)/i, "");
        return parseInt(match);
      }
      const rawYearNumber = parseInt(match);
      return years_1.findMostLikelyADYear(rawYearNumber);
    }
    exports.parseYear = parseYear;
    var SINGLE_TIME_UNIT_PATTERN = `(${exports.NUMBER_PATTERN})\\s{0,3}(${pattern_1.matchAnyPattern(exports.TIME_UNIT_DICTIONARY)})`;
    var SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
    exports.TIME_UNITS_PATTERN = pattern_1.repeatedTimeunitPattern(`(?:(?:\u043E\u043A\u043E\u043B\u043E|\u043F\u0440\u0438\u043C\u0435\u0440\u043D\u043E)\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN);
    function parseTimeUnits(timeunitText) {
      const fragments = {};
      let remainingText = timeunitText;
      let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
      while (match) {
        collectDateTimeFragment(fragments, match);
        remainingText = remainingText.substring(match[0].length).trim();
        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
      }
      return fragments;
    }
    exports.parseTimeUnits = parseTimeUnits;
    function collectDateTimeFragment(fragments, match) {
      const num = parseNumberPattern(match[1]);
      const unit = exports.TIME_UNIT_DICTIONARY[match[2].toLowerCase()];
      fragments[unit] = num;
    }
  }
});

// node_modules/chrono-node/dist/locales/ru/parsers/RUTimeUnitWithinFormatParser.js
var require_RUTimeUnitWithinFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/parsers/RUTimeUnitWithinFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants9();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = `(?:(?:\u043E\u043A\u043E\u043B\u043E|\u043F\u0440\u0438\u043C\u0435\u0440\u043D\u043E)\\s*(?:~\\s*)?)?(${constants_1.TIME_UNITS_PATTERN})${constants_1.REGEX_PARTS.rightBoundary}`;
    var PATTERN_WITH_PREFIX = new RegExp(`(?:\u0432 \u0442\u0435\u0447\u0435\u043D\u0438\u0435|\u0432 \u0442\u0435\u0447\u0435\u043D\u0438\u0438)\\s*${PATTERN}`, constants_1.REGEX_PARTS.flags);
    var PATTERN_WITHOUT_PREFIX = new RegExp(PATTERN, "i");
    var RUTimeUnitWithinFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      patternLeftBoundary() {
        return constants_1.REGEX_PARTS.leftBoundary;
      }
      innerPattern(context) {
        return context.option.forwardDate ? PATTERN_WITHOUT_PREFIX : PATTERN_WITH_PREFIX;
      }
      innerExtract(context, match) {
        const timeUnits = constants_1.parseTimeUnits(match[1]);
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
    };
    exports.default = RUTimeUnitWithinFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/ru/parsers/RUMonthNameLittleEndianParser.js
var require_RUMonthNameLittleEndianParser = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/parsers/RUMonthNameLittleEndianParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var years_1 = require_years();
    var constants_1 = require_constants9();
    var constants_2 = require_constants9();
    var constants_3 = require_constants9();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp(`(?:\u0441)?\\s*(${constants_3.ORDINAL_NUMBER_PATTERN})(?:\\s{0,3}(?:\u043F\u043E|-|\u2013|\u0434\u043E)?\\s{0,3}(${constants_3.ORDINAL_NUMBER_PATTERN}))?(?:-|\\/|\\s{0,3}(?:of)?\\s{0,3})(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})(?:(?:-|\\/|,?\\s{0,3})(${constants_2.YEAR_PATTERN}(?![^\\s]\\d)))?${constants_1.REGEX_PARTS.rightBoundary}`, constants_1.REGEX_PARTS.flags);
    var DATE_GROUP = 1;
    var DATE_TO_GROUP = 2;
    var MONTH_NAME_GROUP = 3;
    var YEAR_GROUP = 4;
    var RUMonthNameLittleEndianParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      patternLeftBoundary() {
        return constants_1.REGEX_PARTS.leftBoundary;
      }
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const month = constants_1.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = constants_3.parseOrdinalNumberPattern(match[DATE_GROUP]);
        if (day > 31) {
          match.index = match.index + match[DATE_GROUP].length;
          return null;
        }
        result.start.assign("month", month);
        result.start.assign("day", day);
        if (match[YEAR_GROUP]) {
          const yearNumber = constants_2.parseYear(match[YEAR_GROUP]);
          result.start.assign("year", yearNumber);
        } else {
          const year = years_1.findYearClosestToRef(context.refDate, day, month);
          result.start.imply("year", year);
        }
        if (match[DATE_TO_GROUP]) {
          const endDate = constants_3.parseOrdinalNumberPattern(match[DATE_TO_GROUP]);
          result.end = result.start.clone();
          result.end.assign("day", endDate);
        }
        return result;
      }
    };
    exports.default = RUMonthNameLittleEndianParser;
  }
});

// node_modules/chrono-node/dist/locales/ru/parsers/RUMonthNameParser.js
var require_RUMonthNameParser = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/parsers/RUMonthNameParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants9();
    var years_1 = require_years();
    var pattern_1 = require_pattern();
    var constants_2 = require_constants9();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var PATTERN = new RegExp(`((?:\u0432)\\s*)?(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})\\s*(?:[,-]?\\s*(${constants_2.YEAR_PATTERN})?)?(?=[^\\s\\w]|\\s+[^0-9]|\\s+$|$)`, constants_1.REGEX_PARTS.flags);
    var MONTH_NAME_GROUP = 2;
    var YEAR_GROUP = 3;
    var RUMonthNameParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      patternLeftBoundary() {
        return constants_1.REGEX_PARTS.leftBoundary;
      }
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const monthName = match[MONTH_NAME_GROUP].toLowerCase();
        if (match[0].length <= 3 && !constants_1.FULL_MONTH_NAME_DICTIONARY[monthName]) {
          return null;
        }
        const result = context.createParsingResult(match.index, match.index + match[0].length);
        result.start.imply("day", 1);
        const month = constants_1.MONTH_DICTIONARY[monthName];
        result.start.assign("month", month);
        if (match[YEAR_GROUP]) {
          const year = constants_2.parseYear(match[YEAR_GROUP]);
          result.start.assign("year", year);
        } else {
          const year = years_1.findYearClosestToRef(context.refDate, 1, month);
          result.start.imply("year", year);
        }
        return result;
      }
    };
    exports.default = RUMonthNameParser;
  }
});

// node_modules/chrono-node/dist/locales/ru/parsers/RUTimeExpressionParser.js
var require_RUTimeExpressionParser = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/parsers/RUTimeExpressionParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var index_1 = require_dist();
    var AbstractTimeExpressionParser_1 = require_AbstractTimeExpressionParser();
    var constants_1 = require_constants9();
    var RUTimeExpressionParser = class extends AbstractTimeExpressionParser_1.AbstractTimeExpressionParser {
      constructor(strictMode) {
        super(strictMode);
      }
      patternFlags() {
        return constants_1.REGEX_PARTS.flags;
      }
      primaryPatternLeftBoundary() {
        return `(^|\\s|T|(?:[^\\p{L}\\p{N}_]))`;
      }
      followingPhase() {
        return `\\s*(?:\\-|\\\u2013|\\~|\\\u301C|\u0434\u043E|\u0438|\u043F\u043E|\\?)\\s*`;
      }
      primaryPrefix() {
        return `(?:(?:\u0432|\u0441)\\s*)??`;
      }
      primarySuffix() {
        return `(?:\\s*(?:\u0443\u0442\u0440\u0430|\u0432\u0435\u0447\u0435\u0440\u0430|\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u043B\u0443\u0434\u043D\u044F))?(?!\\/)${constants_1.REGEX_PARTS.rightBoundary}`;
      }
      extractPrimaryTimeComponents(context, match) {
        const components = super.extractPrimaryTimeComponents(context, match);
        if (components) {
          if (match[0].endsWith("\u0432\u0435\u0447\u0435\u0440\u0430")) {
            const hour = components.get("hour");
            if (hour >= 6 && hour < 12) {
              components.assign("hour", components.get("hour") + 12);
              components.assign("meridiem", index_1.Meridiem.PM);
            } else if (hour < 6) {
              components.assign("meridiem", index_1.Meridiem.AM);
            }
          }
          if (match[0].endsWith("\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u043B\u0443\u0434\u043D\u044F")) {
            components.assign("meridiem", index_1.Meridiem.PM);
            const hour = components.get("hour");
            if (hour >= 0 && hour <= 6) {
              components.assign("hour", components.get("hour") + 12);
            }
          }
          if (match[0].endsWith("\u0443\u0442\u0440\u0430")) {
            components.assign("meridiem", index_1.Meridiem.AM);
            const hour = components.get("hour");
            if (hour < 12) {
              components.assign("hour", components.get("hour"));
            }
          }
        }
        return components;
      }
    };
    exports.default = RUTimeExpressionParser;
  }
});

// node_modules/chrono-node/dist/locales/ru/parsers/RUTimeUnitAgoFormatParser.js
var require_RUTimeUnitAgoFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/parsers/RUTimeUnitAgoFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants9();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var timeunits_1 = require_timeunits();
    var PATTERN = new RegExp(`(${constants_1.TIME_UNITS_PATTERN})\\s{0,5}\u043D\u0430\u0437\u0430\u0434(?=(?:\\W|$))`, constants_1.REGEX_PARTS.flags);
    var RUTimeUnitAgoFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      patternLeftBoundary() {
        return constants_1.REGEX_PARTS.leftBoundary;
      }
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const timeUnits = constants_1.parseTimeUnits(match[1]);
        const outputTimeUnits = timeunits_1.reverseTimeUnits(timeUnits);
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);
      }
    };
    exports.default = RUTimeUnitAgoFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/ru/refiners/RUMergeDateRangeRefiner.js
var require_RUMergeDateRangeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/refiners/RUMergeDateRangeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateRangeRefiner_1 = __importDefault2(require_AbstractMergeDateRangeRefiner());
    var xf = class extends AbstractMergeDateRangeRefiner_1.default {
      patternBetween() {
        return /^\s*(и до|и по|до|по|-)\s*$/i;
      }
    };
    exports.default = xf;
  }
});

// node_modules/chrono-node/dist/locales/ru/refiners/RUMergeDateTimeRefiner.js
var require_RUMergeDateTimeRefiner = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/refiners/RUMergeDateTimeRefiner.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractMergeDateTimeRefiner_1 = __importDefault2(require_AbstractMergeDateTimeRefiner());
    var RUMergeDateTimeRefiner = class extends AbstractMergeDateTimeRefiner_1.default {
      patternBetween() {
        return new RegExp(`^\\s*(T|\u0432|,|-)?\\s*$`);
      }
    };
    exports.default = RUMergeDateTimeRefiner;
  }
});

// node_modules/chrono-node/dist/locales/ru/parsers/RUCasualDateParser.js
var require_RUCasualDateParser = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/parsers/RUCasualDateParser.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var references = __importStar2(require_casualReferences());
    var constants_1 = require_constants9();
    var PATTERN = new RegExp(`(?:\u0441|\u0441\u043E)?\\s*(\u0441\u0435\u0433\u043E\u0434\u043D\u044F|\u0432\u0447\u0435\u0440\u0430|\u0437\u0430\u0432\u0442\u0440\u0430|\u043F\u043E\u0441\u043B\u0435\u0437\u0430\u0432\u0442\u0440\u0430|\u043F\u043E\u0437\u0430\u0432\u0447\u0435\u0440\u0430)${constants_1.REGEX_PARTS.rightBoundary}`, constants_1.REGEX_PARTS.flags);
    var RUCasualDateParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      patternLeftBoundary() {
        return constants_1.REGEX_PARTS.leftBoundary;
      }
      innerPattern(context) {
        return PATTERN;
      }
      innerExtract(context, match) {
        const lowerText = match[1].toLowerCase();
        const component = context.createParsingComponents();
        switch (lowerText) {
          case "\u0441\u0435\u0433\u043E\u0434\u043D\u044F":
            return references.today(context.reference);
          case "\u0432\u0447\u0435\u0440\u0430":
            return references.yesterday(context.reference);
          case "\u0437\u0430\u0432\u0442\u0440\u0430":
            return references.tomorrow(context.reference);
          case "\u043F\u043E\u0441\u043B\u0435\u0437\u0430\u0432\u0442\u0440\u0430":
            return references.theDayAfter(context.reference, 2);
          case "\u043F\u043E\u0437\u0430\u0432\u0447\u0435\u0440\u0430":
            return references.theDayBefore(context.reference, 2);
        }
        return component;
      }
    };
    exports.default = RUCasualDateParser;
  }
});

// node_modules/chrono-node/dist/locales/ru/parsers/RUCasualTimeParser.js
var require_RUCasualTimeParser = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/parsers/RUCasualTimeParser.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var references = __importStar2(require_casualReferences());
    var dayjs_1 = require_dayjs();
    var dayjs_2 = __importDefault2(require_dayjs_min());
    var constants_1 = require_constants9();
    var PATTERN = new RegExp(`(\u0441\u0435\u0439\u0447\u0430\u0441|\u043F\u0440\u043E\u0448\u043B\u044B\u043C\\s*\u0432\u0435\u0447\u0435\u0440\u043E\u043C|\u043F\u0440\u043E\u0448\u043B\u043E\u0439\\s*\u043D\u043E\u0447\u044C\u044E|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439\\s*\u043D\u043E\u0447\u044C\u044E|\u0441\u0435\u0433\u043E\u0434\u043D\u044F\\s*\u043D\u043E\u0447\u044C\u044E|\u044D\u0442\u043E\u0439\\s*\u043D\u043E\u0447\u044C\u044E|\u043D\u043E\u0447\u044C\u044E|\u044D\u0442\u0438\u043C \u0443\u0442\u0440\u043E\u043C|\u0443\u0442\u0440\u043E\u043C|\u0443\u0442\u0440\u0430|\u0432\\s*\u043F\u043E\u043B\u0434\u0435\u043D\u044C|\u0432\u0435\u0447\u0435\u0440\u043E\u043C|\u0432\u0435\u0447\u0435\u0440\u0430|\u0432\\s*\u043F\u043E\u043B\u043D\u043E\u0447\u044C)${constants_1.REGEX_PARTS.rightBoundary}`, constants_1.REGEX_PARTS.flags);
    var RUCasualTimeParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      patternLeftBoundary() {
        return constants_1.REGEX_PARTS.leftBoundary;
      }
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        let targetDate = dayjs_2.default(context.refDate);
        const lowerText = match[0].toLowerCase();
        const component = context.createParsingComponents();
        if (lowerText === "\u0441\u0435\u0439\u0447\u0430\u0441") {
          return references.now(context.reference);
        }
        if (lowerText === "\u0432\u0435\u0447\u0435\u0440\u043E\u043C" || lowerText === "\u0432\u0435\u0447\u0435\u0440\u0430") {
          return references.evening(context.reference);
        }
        if (lowerText.endsWith("\u0443\u0442\u0440\u043E\u043C") || lowerText.endsWith("\u0443\u0442\u0440\u0430")) {
          return references.morning(context.reference);
        }
        if (lowerText.match(/в\s*полдень/)) {
          return references.noon(context.reference);
        }
        if (lowerText.match(/прошлой\s*ночью/)) {
          return references.lastNight(context.reference);
        }
        if (lowerText.match(/прошлым\s*вечером/)) {
          return references.yesterdayEvening(context.reference);
        }
        if (lowerText.match(/следующей\s*ночью/)) {
          const daysToAdd = targetDate.hour() < 22 ? 1 : 2;
          targetDate = targetDate.add(daysToAdd, "day");
          dayjs_1.assignSimilarDate(component, targetDate);
          component.imply("hour", 0);
        }
        if (lowerText.match(/в\s*полночь/) || lowerText.endsWith("\u043D\u043E\u0447\u044C\u044E")) {
          return references.midnight(context.reference);
        }
        return component;
      }
    };
    exports.default = RUCasualTimeParser;
  }
});

// node_modules/chrono-node/dist/locales/ru/parsers/RUWeekdayParser.js
var require_RUWeekdayParser = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/parsers/RUWeekdayParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants9();
    var pattern_1 = require_pattern();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var weeks_1 = require_weeks();
    var PATTERN = new RegExp(`(?:(?:,|\\(|\uFF08)\\s*)?(?:\u0432\\s*?)?(?:(\u044D\u0442\u0443|\u044D\u0442\u043E\u0442|\u043F\u0440\u043E\u0448\u043B\u044B\u0439|\u043F\u0440\u043E\u0448\u043B\u0443\u044E|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0433\u043E)\\s*)?(${pattern_1.matchAnyPattern(constants_1.WEEKDAY_DICTIONARY)})(?:\\s*(?:,|\\)|\uFF09))?(?:\\s*\u043D\u0430\\s*(\u044D\u0442\u043E\u0439|\u043F\u0440\u043E\u0448\u043B\u043E\u0439|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439)\\s*\u043D\u0435\u0434\u0435\u043B\u0435)?${constants_1.REGEX_PARTS.rightBoundary}`, constants_1.REGEX_PARTS.flags);
    var PREFIX_GROUP = 1;
    var WEEKDAY_GROUP = 2;
    var POSTFIX_GROUP = 3;
    var RUWeekdayParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      innerPattern() {
        return PATTERN;
      }
      patternLeftBoundary() {
        return constants_1.REGEX_PARTS.leftBoundary;
      }
      innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        const offset = constants_1.WEEKDAY_DICTIONARY[dayOfWeek];
        const prefix = match[PREFIX_GROUP];
        const postfix = match[POSTFIX_GROUP];
        let modifierWord = prefix || postfix;
        modifierWord = modifierWord || "";
        modifierWord = modifierWord.toLowerCase();
        let modifier = null;
        if (modifierWord == "\u043F\u0440\u043E\u0448\u043B\u044B\u0439" || modifierWord == "\u043F\u0440\u043E\u0448\u043B\u0443\u044E" || modifierWord == "\u043F\u0440\u043E\u0448\u043B\u043E\u0439") {
          modifier = "last";
        } else if (modifierWord == "\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439" || modifierWord == "\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E" || modifierWord == "\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439" || modifierWord == "\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0433\u043E") {
          modifier = "next";
        } else if (modifierWord == "\u044D\u0442\u043E\u0442" || modifierWord == "\u044D\u0442\u0443" || modifierWord == "\u044D\u0442\u043E\u0439") {
          modifier = "this";
        }
        const date = weeks_1.toDayJSWeekday(context.refDate, offset, modifier);
        return context.createParsingComponents().assign("weekday", offset).imply("day", date.date()).imply("month", date.month() + 1).imply("year", date.year());
      }
    };
    exports.default = RUWeekdayParser;
  }
});

// node_modules/chrono-node/dist/locales/ru/parsers/RURelativeDateFormatParser.js
var require_RURelativeDateFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/parsers/RURelativeDateFormatParser.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants9();
    var results_1 = require_results();
    var dayjs_1 = __importDefault2(require_dayjs_min());
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var pattern_1 = require_pattern();
    var PATTERN = new RegExp(`(\u0432 \u043F\u0440\u043E\u0448\u043B\u043E\u043C|\u043D\u0430 \u043F\u0440\u043E\u0448\u043B\u043E\u0439|\u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439|\u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u043C|\u043D\u0430 \u044D\u0442\u043E\u0439|\u0432 \u044D\u0442\u043E\u043C)\\s*(${pattern_1.matchAnyPattern(constants_1.TIME_UNIT_DICTIONARY)})(?=\\s*)${constants_1.REGEX_PARTS.rightBoundary}`, constants_1.REGEX_PARTS.flags);
    var MODIFIER_WORD_GROUP = 1;
    var RELATIVE_WORD_GROUP = 2;
    var RURelativeDateFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      patternLeftBoundary() {
        return constants_1.REGEX_PARTS.leftBoundary;
      }
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();
        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();
        const timeunit = constants_1.TIME_UNIT_DICTIONARY[unitWord];
        if (modifier == "\u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439" || modifier == "\u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u043C") {
          const timeUnits = {};
          timeUnits[timeunit] = 1;
          return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        if (modifier == "\u0432 \u043F\u0440\u043E\u0448\u043B\u043E\u043C" || modifier == "\u043D\u0430 \u043F\u0440\u043E\u0448\u043B\u043E\u0439") {
          const timeUnits = {};
          timeUnits[timeunit] = -1;
          return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        const components = context.createParsingComponents();
        let date = dayjs_1.default(context.reference.instant);
        if (timeunit.match(/week/i)) {
          date = date.add(-date.get("d"), "d");
          components.imply("day", date.date());
          components.imply("month", date.month() + 1);
          components.imply("year", date.year());
        } else if (timeunit.match(/month/i)) {
          date = date.add(-date.date() + 1, "d");
          components.imply("day", date.date());
          components.assign("year", date.year());
          components.assign("month", date.month() + 1);
        } else if (timeunit.match(/year/i)) {
          date = date.add(-date.date() + 1, "d");
          date = date.add(-date.month(), "month");
          components.imply("day", date.date());
          components.imply("month", date.month() + 1);
          components.assign("year", date.year());
        }
        return components;
      }
    };
    exports.default = RURelativeDateFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/ru/parsers/RUTimeUnitCasualRelativeFormatParser.js
var require_RUTimeUnitCasualRelativeFormatParser = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/parsers/RUTimeUnitCasualRelativeFormatParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants9();
    var results_1 = require_results();
    var AbstractParserWithWordBoundary_1 = require_AbstractParserWithWordBoundary();
    var timeunits_1 = require_timeunits();
    var PATTERN = new RegExp(`(\u044D\u0442\u0438|\u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0435|\u043F\u0440\u043E\u0448\u043B\u044B\u0435|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0435|\u043F\u043E\u0441\u043B\u0435|\u0447\u0435\u0440\u0435\u0437|\\+|-)\\s*(${constants_1.TIME_UNITS_PATTERN})${constants_1.REGEX_PARTS.rightBoundary}`, constants_1.REGEX_PARTS.flags);
    var RUTimeUnitCasualRelativeFormatParser = class extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
      patternLeftBoundary() {
        return constants_1.REGEX_PARTS.leftBoundary;
      }
      innerPattern() {
        return PATTERN;
      }
      innerExtract(context, match) {
        const prefix = match[1].toLowerCase();
        let timeUnits = constants_1.parseTimeUnits(match[2]);
        switch (prefix) {
          case "\u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0435":
          case "\u043F\u0440\u043E\u0448\u043B\u044B\u0435":
          case "-":
            timeUnits = timeunits_1.reverseTimeUnits(timeUnits);
            break;
        }
        return results_1.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
      }
    };
    exports.default = RUTimeUnitCasualRelativeFormatParser;
  }
});

// node_modules/chrono-node/dist/locales/ru/index.js
var require_ru = __commonJS({
  "node_modules/chrono-node/dist/locales/ru/index.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfiguration = exports.createCasualConfiguration = exports.parseDate = exports.parse = exports.strict = exports.casual = void 0;
    var RUTimeUnitWithinFormatParser_1 = __importDefault2(require_RUTimeUnitWithinFormatParser());
    var RUMonthNameLittleEndianParser_1 = __importDefault2(require_RUMonthNameLittleEndianParser());
    var RUMonthNameParser_1 = __importDefault2(require_RUMonthNameParser());
    var RUTimeExpressionParser_1 = __importDefault2(require_RUTimeExpressionParser());
    var RUTimeUnitAgoFormatParser_1 = __importDefault2(require_RUTimeUnitAgoFormatParser());
    var RUMergeDateRangeRefiner_1 = __importDefault2(require_RUMergeDateRangeRefiner());
    var RUMergeDateTimeRefiner_1 = __importDefault2(require_RUMergeDateTimeRefiner());
    var configurations_1 = require_configurations();
    var RUCasualDateParser_1 = __importDefault2(require_RUCasualDateParser());
    var RUCasualTimeParser_1 = __importDefault2(require_RUCasualTimeParser());
    var RUWeekdayParser_1 = __importDefault2(require_RUWeekdayParser());
    var RURelativeDateFormatParser_1 = __importDefault2(require_RURelativeDateFormatParser());
    var chrono_1 = require_chrono();
    var SlashDateFormatParser_1 = __importDefault2(require_SlashDateFormatParser());
    var RUTimeUnitCasualRelativeFormatParser_1 = __importDefault2(require_RUTimeUnitCasualRelativeFormatParser());
    exports.casual = new chrono_1.Chrono(createCasualConfiguration());
    exports.strict = new chrono_1.Chrono(createConfiguration(true));
    function parse(text2, ref, option) {
      return exports.casual.parse(text2, ref, option);
    }
    exports.parse = parse;
    function parseDate3(text2, ref, option) {
      return exports.casual.parseDate(text2, ref, option);
    }
    exports.parseDate = parseDate3;
    function createCasualConfiguration() {
      const option = createConfiguration(false);
      option.parsers.unshift(new RUCasualDateParser_1.default());
      option.parsers.unshift(new RUCasualTimeParser_1.default());
      option.parsers.unshift(new RUMonthNameParser_1.default());
      option.parsers.unshift(new RURelativeDateFormatParser_1.default());
      option.parsers.unshift(new RUTimeUnitCasualRelativeFormatParser_1.default());
      return option;
    }
    exports.createCasualConfiguration = createCasualConfiguration;
    function createConfiguration(strictMode = true) {
      return configurations_1.includeCommonConfiguration({
        parsers: [
          new SlashDateFormatParser_1.default(true),
          new RUTimeUnitWithinFormatParser_1.default(),
          new RUMonthNameLittleEndianParser_1.default(),
          new RUWeekdayParser_1.default(),
          new RUTimeExpressionParser_1.default(strictMode),
          new RUTimeUnitAgoFormatParser_1.default()
        ],
        refiners: [new RUMergeDateTimeRefiner_1.default(), new RUMergeDateRangeRefiner_1.default()]
      }, strictMode);
    }
    exports.createConfiguration = createConfiguration;
  }
});

// node_modules/chrono-node/dist/index.js
var require_dist = __commonJS({
  "node_modules/chrono-node/dist/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseDate = exports.parse = exports.casual = exports.strict = exports.ru = exports.zh = exports.nl = exports.pt = exports.ja = exports.fr = exports.de = exports.Meridiem = exports.Chrono = exports.en = void 0;
    var en = __importStar2(require_en());
    exports.en = en;
    var chrono_1 = require_chrono();
    Object.defineProperty(exports, "Chrono", { enumerable: true, get: function() {
      return chrono_1.Chrono;
    } });
    var Meridiem;
    (function(Meridiem2) {
      Meridiem2[Meridiem2["AM"] = 0] = "AM";
      Meridiem2[Meridiem2["PM"] = 1] = "PM";
    })(Meridiem = exports.Meridiem || (exports.Meridiem = {}));
    var de = __importStar2(require_de());
    exports.de = de;
    var fr = __importStar2(require_fr());
    exports.fr = fr;
    var ja = __importStar2(require_ja());
    exports.ja = ja;
    var pt = __importStar2(require_pt());
    exports.pt = pt;
    var nl = __importStar2(require_nl());
    exports.nl = nl;
    var zh = __importStar2(require_zh());
    exports.zh = zh;
    var ru = __importStar2(require_ru());
    exports.ru = ru;
    exports.strict = en.strict;
    exports.casual = en.casual;
    function parse(text2, ref, option) {
      return exports.casual.parse(text2, ref, option);
    }
    exports.parse = parse;
    function parseDate3(text2, ref, option) {
      return exports.casual.parseDate(text2, ref, option);
    }
    exports.parseDate = parseDate3;
  }
});

// node_modules/boon-js/lib/types.js
var require_types = __commonJS({
  "node_modules/boon-js/lib/types.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var Operators;
    (function(Operators2) {
      Operators2["AND"] = "AND";
      Operators2["OR"] = "OR";
      Operators2["XOR"] = "XOR";
      Operators2["NOT"] = "NOT";
    })(Operators = exports.Operators || (exports.Operators = {}));
    var StructuralCharacters;
    (function(StructuralCharacters2) {
      StructuralCharacters2["OPEN_PARENTHESIS"] = "(";
      StructuralCharacters2["CLOSE_PARENTHESIS"] = ")";
    })(StructuralCharacters = exports.StructuralCharacters || (exports.StructuralCharacters = {}));
    var Tokens;
    (function(Tokens2) {
      Tokens2["IDENTIFIER"] = "IDENTIFIER";
      Tokens2["OPERATOR"] = "OPERATOR";
      Tokens2["STRUCTURAL_CHARACTER"] = "STRUCTURAL_CHARACTER";
      Tokens2["EOF"] = "EOF";
      Tokens2["COMMENT"] = "COMMENT";
    })(Tokens = exports.Tokens || (exports.Tokens = {}));
  }
});

// node_modules/boon-js/lib/parse/const.js
var require_const = __commonJS({
  "node_modules/boon-js/lib/parse/const.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var types_1 = require_types();
    exports.OPERATOR_PRECEDENCE = {
      NOT: 0,
      XOR: 1,
      AND: 2,
      OR: 3
    };
    exports.VALID_TOKENS = {
      identifierOnly: [
        { name: types_1.Tokens.IDENTIFIER },
        {
          name: types_1.Tokens.STRUCTURAL_CHARACTER,
          value: types_1.StructuralCharacters.OPEN_PARENTHESIS
        }
      ],
      identifierOrNot: [
        { name: types_1.Tokens.IDENTIFIER },
        {
          name: types_1.Tokens.STRUCTURAL_CHARACTER,
          value: types_1.StructuralCharacters.OPEN_PARENTHESIS
        },
        { name: types_1.Tokens.OPERATOR, value: types_1.Operators.NOT }
      ],
      binaryOperator: [
        { name: types_1.Tokens.OPERATOR, value: types_1.Operators.AND },
        { name: types_1.Tokens.OPERATOR, value: types_1.Operators.OR },
        { name: types_1.Tokens.OPERATOR, value: types_1.Operators.XOR }
      ],
      binaryOperatorOrClose: [
        { name: types_1.Tokens.OPERATOR, value: types_1.Operators.AND },
        { name: types_1.Tokens.OPERATOR, value: types_1.Operators.OR },
        { name: types_1.Tokens.OPERATOR, value: types_1.Operators.XOR },
        {
          name: types_1.Tokens.STRUCTURAL_CHARACTER,
          value: types_1.StructuralCharacters.CLOSE_PARENTHESIS
        }
      ]
    };
  }
});

// node_modules/boon-js/lib/lex/const.js
var require_const2 = __commonJS({
  "node_modules/boon-js/lib/lex/const.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var types_1 = require_types();
    exports.STRUCTURAL_CHARACTERS = {
      "(": types_1.StructuralCharacters.OPEN_PARENTHESIS,
      ")": types_1.StructuralCharacters.CLOSE_PARENTHESIS
    };
    exports.OPERATORS = {
      AND: types_1.Operators.AND,
      OR: types_1.Operators.OR,
      XOR: types_1.Operators.XOR,
      NOT: types_1.Operators.NOT
    };
    exports.SEPARATORS = new Set([
      32,
      9,
      10,
      13
    ].map(function(separator) {
      return String.fromCodePoint(separator);
    }));
    exports.QUOTED_IDENTIFIER_DELIMITER = String.fromCodePoint(34);
    exports.COMMENT_DELIMITER = String.fromCodePoint(35);
    exports.EOL = String.fromCodePoint(10);
    exports.ESCAPE_CHARACTER = String.fromCodePoint(92);
  }
});

// node_modules/boon-js/lib/lex/utils.js
var require_utils = __commonJS({
  "node_modules/boon-js/lib/lex/utils.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    exports.__esModule = true;
    var types_1 = require_types();
    var const_1 = require_const2();
    exports.createResult = function(name, value, remainingString) {
      return {
        token: __assign2({ name }, value !== null ? { value } : {}),
        remainingString
      };
    };
    exports.getComment = function(expression) {
      var tokenEnd = expression.length;
      for (var i = 0; i < expression.length; i += 1) {
        var letter = expression[i];
        if (letter === const_1.EOL) {
          tokenEnd = i;
          break;
        }
      }
      return exports.createResult(types_1.Tokens.COMMENT, expression.slice(0, tokenEnd), expression.slice(tokenEnd + 1));
    };
    exports.getQuotedIdentifier = function(expression) {
      var escapeQuotation = false;
      var value = "";
      var tokenEnd = null;
      for (var i = 0; i < expression.length; i += 1) {
        var char = expression[i];
        if (tokenEnd === null) {
          if (char === const_1.QUOTED_IDENTIFIER_DELIMITER) {
            if (escapeQuotation) {
              value = value.slice(-1) + const_1.QUOTED_IDENTIFIER_DELIMITER;
            } else {
              tokenEnd = i;
            }
          } else {
            if (char === const_1.ESCAPE_CHARACTER) {
              escapeQuotation = true;
            } else {
              escapeQuotation = false;
            }
            value = value += char;
          }
        } else {
          if (!const_1.SEPARATORS.has(char) && !const_1.STRUCTURAL_CHARACTERS[char]) {
            throw new Error("Unexpected character: " + char + " Expected ) character or separator");
          }
          break;
        }
      }
      if (tokenEnd === null) {
        throw new Error("Unexpected end of expression: expected " + const_1.QUOTED_IDENTIFIER_DELIMITER + " character");
      }
      return exports.createResult(types_1.Tokens.IDENTIFIER, value, expression.slice(tokenEnd + 1));
    };
  }
});

// node_modules/boon-js/lib/lex/lex.js
var require_lex = __commonJS({
  "node_modules/boon-js/lib/lex/lex.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var types_1 = require_types();
    var const_1 = require_const2();
    var utils_1 = require_utils();
    exports.lex = function(expression) {
      var tokenStart = null;
      var tokenEnd = null;
      var delimitingCharacter = null;
      for (var i = 0; i < expression.length; i += 1) {
        var char = expression[i];
        if (tokenStart === null) {
          if (!const_1.SEPARATORS.has(char)) {
            var structuralChar = const_1.STRUCTURAL_CHARACTERS[char];
            if (structuralChar) {
              var nextChar = expression[i + 1];
              if (structuralChar === types_1.StructuralCharacters.CLOSE_PARENTHESIS && nextChar && !const_1.SEPARATORS.has(nextChar) && nextChar !== types_1.StructuralCharacters.CLOSE_PARENTHESIS) {
                throw new Error("Unexpected character: " + nextChar + ". A closing parenthesis should be followed by another closing parenthesis or whitespace");
              }
              return utils_1.createResult(types_1.Tokens.STRUCTURAL_CHARACTER, const_1.STRUCTURAL_CHARACTERS[char], expression.slice(i + 1));
            }
            if (char === const_1.QUOTED_IDENTIFIER_DELIMITER) {
              return utils_1.getQuotedIdentifier(expression.slice(i + 1));
            }
            if (char === const_1.COMMENT_DELIMITER) {
              return utils_1.getComment(expression.slice(i + 1));
            }
            tokenStart = i;
          }
        } else {
          if (const_1.SEPARATORS.has(char) || const_1.STRUCTURAL_CHARACTERS[char]) {
            tokenEnd = i;
            delimitingCharacter = char;
            break;
          } else {
            if (char === const_1.QUOTED_IDENTIFIER_DELIMITER || char === const_1.COMMENT_DELIMITER) {
              throw new Error("Unexpected character: " + char);
            }
          }
        }
      }
      if (tokenStart !== null) {
        tokenEnd = tokenEnd !== null && tokenEnd !== void 0 ? tokenEnd : expression.length;
        var value = expression.slice(tokenStart, tokenEnd);
        var remainingString = expression.slice(tokenEnd);
        if (const_1.OPERATORS[value]) {
          if (delimitingCharacter && !const_1.SEPARATORS.has(delimitingCharacter)) {
            throw new Error("Unexpected character: " + delimitingCharacter + ". Operators should be separated using whitespace");
          }
          return utils_1.createResult(types_1.Tokens.OPERATOR, const_1.OPERATORS[value], remainingString);
        } else {
          return utils_1.createResult(types_1.Tokens.IDENTIFIER, value, remainingString);
        }
      }
      return utils_1.createResult(types_1.Tokens.EOF, null, "");
    };
  }
});

// node_modules/boon-js/lib/parse/utils.js
var require_utils2 = __commonJS({
  "node_modules/boon-js/lib/parse/utils.js"(exports) {
    "use strict";
    var __spreadArrays2 = exports && exports.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    exports.__esModule = true;
    var lex_1 = require_lex();
    var types_1 = require_types();
    var const_1 = require_const();
    exports.newTokenGenerator = function(expression) {
      var remainingExpression = expression;
      return function(validTokens, endIsValid) {
        if (endIsValid === void 0) {
          endIsValid = false;
        }
        while (true) {
          var _a = lex_1.lex(remainingExpression), token = _a.token, remainingString = _a.remainingString;
          remainingExpression = remainingString;
          if (token.name !== types_1.Tokens.COMMENT) {
            exports.validateToken(token, validTokens, endIsValid);
            return token;
          }
        }
      };
    };
    exports.getValue = function(getNextToken, parser) {
      var nextToken = getNextToken(const_1.VALID_TOKENS.identifierOrNot);
      var negatedValue = nextToken.value === types_1.Operators.NOT;
      if (negatedValue) {
        nextToken = getNextToken(const_1.VALID_TOKENS.identifierOnly);
      }
      var value = nextToken.name === types_1.Tokens.STRUCTURAL_CHARACTER ? parser(getNextToken, true) : [nextToken];
      return negatedValue ? __spreadArrays2(value, [{ name: types_1.Tokens.OPERATOR, value: types_1.Operators.NOT }]) : value;
    };
    exports.previousOperatorTakesPrecedent = function(previousOperator, nextOperator) {
      return const_1.OPERATOR_PRECEDENCE[previousOperator] <= const_1.OPERATOR_PRECEDENCE[nextOperator];
    };
    exports.validateToken = function(token, validTokens, endIsValid) {
      if (endIsValid === void 0) {
        endIsValid = false;
      }
      if (token.name === types_1.Tokens.EOF) {
        if (endIsValid) {
          return;
        }
        throw new Error("Unexpected end of expression");
      }
      for (var _i = 0, validTokens_1 = validTokens; _i < validTokens_1.length; _i++) {
        var validToken = validTokens_1[_i];
        if (validToken.name === token.name) {
          if (!validToken.value || validToken.value === token.value) {
            return;
          }
        }
      }
      throw new TypeError("Invalid token");
    };
  }
});

// node_modules/boon-js/lib/parse/parse.js
var require_parse = __commonJS({
  "node_modules/boon-js/lib/parse/parse.js"(exports) {
    "use strict";
    var __spreadArrays2 = exports && exports.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    exports.__esModule = true;
    var types_1 = require_types();
    var const_1 = require_const();
    var utils_1 = require_utils2();
    exports.parse = function(expression) {
      if (typeof expression !== "string") {
        throw new Error("Expected string but received " + typeof expression);
      }
      var getNextToken = utils_1.newTokenGenerator(expression);
      return parseInternal(getNextToken);
    };
    var parseInternal = function(getNextToken, nested) {
      if (nested === void 0) {
        nested = false;
      }
      var output = __spreadArrays2(utils_1.getValue(getNextToken, parseInternal));
      var operators = [];
      while (true) {
        var validTokens = nested ? const_1.VALID_TOKENS.binaryOperatorOrClose : const_1.VALID_TOKENS.binaryOperator;
        var nextToken = getNextToken(validTokens, !nested);
        if (nextToken.name === types_1.Tokens.EOF || nextToken.name === types_1.Tokens.STRUCTURAL_CHARACTER) {
          return __spreadArrays2(output, __spreadArrays2(operators).reverse());
        }
        while (operators.length) {
          var previousOperator = operators[operators.length - 1] || null;
          if (previousOperator && utils_1.previousOperatorTakesPrecedent(previousOperator.value, nextToken.value)) {
            output = __spreadArrays2(output, [previousOperator]);
            operators = operators.slice(0, -1);
          } else {
            break;
          }
        }
        operators = __spreadArrays2(operators, [nextToken]);
        output = __spreadArrays2(output, utils_1.getValue(getNextToken, parseInternal));
      }
    };
  }
});

// node_modules/boon-js/lib/evaluate/utils.js
var require_utils3 = __commonJS({
  "node_modules/boon-js/lib/evaluate/utils.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var types_1 = require_types();
    exports.andUtil = function(left, right) {
      return left && right;
    };
    exports.orUtil = function(left, right) {
      return left || right;
    };
    exports.xorUtil = function(left, right) {
      return !(left === right);
    };
    exports.notUtil = function(identifier) {
      return !identifier;
    };
    exports.isIdentifier = function(_a) {
      var name = _a.name, value = _a.value;
      return name === types_1.Tokens.IDENTIFIER && typeof value === "string";
    };
    exports.isOperator = function(_a) {
      var name = _a.name, value = _a.value;
      return name === types_1.Tokens.OPERATOR && typeof value === "string";
    };
    exports.throwInvalidExpression = function(message) {
      throw new TypeError("Invalid postfix expression: " + message);
    };
  }
});

// node_modules/boon-js/lib/evaluate/const.js
var require_const3 = __commonJS({
  "node_modules/boon-js/lib/evaluate/const.js"(exports) {
    "use strict";
    var _a;
    exports.__esModule = true;
    var types_1 = require_types();
    var utils_1 = require_utils3();
    exports.OPERATOR_MAP = (_a = {}, _a[types_1.Operators.AND] = utils_1.andUtil, _a[types_1.Operators.OR] = utils_1.orUtil, _a[types_1.Operators.XOR] = utils_1.xorUtil, _a);
  }
});

// node_modules/boon-js/lib/evaluate/evaluate.js
var require_evaluate = __commonJS({
  "node_modules/boon-js/lib/evaluate/evaluate.js"(exports) {
    "use strict";
    var __spreadArrays2 = exports && exports.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    exports.__esModule = true;
    var parse_1 = require_parse();
    var types_1 = require_types();
    var const_1 = require_const3();
    var utils_1 = require_utils3();
    exports.getEvaluator = function(expression) {
      var parsedExpression = parse_1.parse(expression);
      return function(booleanMap) {
        return exports.evaluate(parsedExpression, booleanMap);
      };
    };
    exports.evaluate = function(expression, booleanMap) {
      if (!Array.isArray(expression)) {
        throw new Error(expression + " should be an array. evaluate takes in a parsed expression. Use in combination with parse or use getEvaluator");
      }
      var evaluatedExpression = expression.reduce(function(stack, token, i) {
        if (!(token && (utils_1.isIdentifier(token) || utils_1.isOperator(token)))) {
          throw new Error("Invalid token: " + token + ". Found in parsed expression at index " + i);
        }
        if (token.name === types_1.Tokens.IDENTIFIER) {
          return __spreadArrays2(stack, [Boolean(booleanMap[token.value])]);
        }
        var secondLastItem = stack[stack.length - 2];
        var lastItem = stack[stack.length - 1];
        if (token.value === types_1.Operators.NOT) {
          if (lastItem === void 0) {
            utils_1.throwInvalidExpression("missing identifier");
          }
          return __spreadArrays2(stack.slice(0, -1), [utils_1.notUtil(lastItem)]);
        }
        if (lastItem === void 0 || secondLastItem === void 0) {
          utils_1.throwInvalidExpression("missing identifier");
        }
        var operatorUtil = const_1.OPERATOR_MAP[token.value];
        if (!operatorUtil) {
          utils_1.throwInvalidExpression("unknown operator");
        }
        return __spreadArrays2(stack.slice(0, -2), [operatorUtil(secondLastItem, lastItem)]);
      }, []);
      if (evaluatedExpression.length !== 1) {
        utils_1.throwInvalidExpression("too many identifiers after evaluation");
      }
      return evaluatedExpression[0];
    };
  }
});

// node_modules/boon-js/lib/index.js
var require_lib = __commonJS({
  "node_modules/boon-js/lib/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var evaluate_1 = require_evaluate();
    exports.getEvaluator = evaluate_1.getEvaluator;
    exports.evaluate = evaluate_1.evaluate;
    var parse_1 = require_parse();
    exports.parse = parse_1.parse;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TasksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian11 = require("obsidian");

// src/Cache.ts
var import_obsidian3 = require("obsidian");

// node_modules/async-mutex/index.mjs
var E_TIMEOUT = new Error("timeout while waiting for mutex to become available");
var E_ALREADY_LOCKED = new Error("mutex already locked");
var E_CANCELED = new Error("request for lock canceled");
var __awaiter$2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Semaphore = class {
  constructor(_maxConcurrency, _cancelError = E_CANCELED) {
    this._maxConcurrency = _maxConcurrency;
    this._cancelError = _cancelError;
    this._queue = [];
    this._waiters = [];
    if (_maxConcurrency <= 0) {
      throw new Error("semaphore must be initialized to a positive value");
    }
    this._value = _maxConcurrency;
  }
  acquire() {
    const locked = this.isLocked();
    const ticketPromise = new Promise((resolve, reject) => this._queue.push({ resolve, reject }));
    if (!locked)
      this._dispatch();
    return ticketPromise;
  }
  runExclusive(callback) {
    return __awaiter$2(this, void 0, void 0, function* () {
      const [value, release] = yield this.acquire();
      try {
        return yield callback(value);
      } finally {
        release();
      }
    });
  }
  waitForUnlock() {
    return __awaiter$2(this, void 0, void 0, function* () {
      if (!this.isLocked()) {
        return Promise.resolve();
      }
      const waitPromise = new Promise((resolve) => this._waiters.push({ resolve }));
      return waitPromise;
    });
  }
  isLocked() {
    return this._value <= 0;
  }
  release() {
    if (this._maxConcurrency > 1) {
      throw new Error("this method is unavailable on semaphores with concurrency > 1; use the scoped release returned by acquire instead");
    }
    if (this._currentReleaser) {
      const releaser = this._currentReleaser;
      this._currentReleaser = void 0;
      releaser();
    }
  }
  cancel() {
    this._queue.forEach((ticket) => ticket.reject(this._cancelError));
    this._queue = [];
  }
  _dispatch() {
    const nextTicket = this._queue.shift();
    if (!nextTicket)
      return;
    let released = false;
    this._currentReleaser = () => {
      if (released)
        return;
      released = true;
      this._value++;
      this._resolveWaiters();
      this._dispatch();
    };
    nextTicket.resolve([this._value--, this._currentReleaser]);
  }
  _resolveWaiters() {
    this._waiters.forEach((waiter) => waiter.resolve());
    this._waiters = [];
  }
};
var __awaiter$1 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Mutex = class {
  constructor(cancelError) {
    this._semaphore = new Semaphore(1, cancelError);
  }
  acquire() {
    return __awaiter$1(this, void 0, void 0, function* () {
      const [, releaser] = yield this._semaphore.acquire();
      return releaser;
    });
  }
  runExclusive(callback) {
    return this._semaphore.runExclusive(() => callback());
  }
  isLocked() {
    return this._semaphore.isLocked();
  }
  waitForUnlock() {
    return this._semaphore.waitForUnlock();
  }
  release() {
    this._semaphore.release();
  }
  cancel() {
    return this._semaphore.cancel();
  }
};

// src/Task.ts
var import_obsidian2 = require("obsidian");

// src/File.ts
var import_obsidian = require("obsidian");

// src/Config/featureConfiguration.json
var featureConfiguration_default = [
  {
    index: 9999,
    internalName: "INTERNAL_TESTING_ENABLED_BY_DEFAULT",
    displayName: "Test Item. Used to validate the Feature Framework.",
    description: "Description",
    enabledByDefault: true,
    stable: false
  }
];

// src/Config/Feature.ts
var Feature = class {
  constructor(internalName, index, description, displayName, enabledByDefault, stable) {
    this.internalName = internalName;
    this.index = index;
    this.description = description;
    this.displayName = displayName;
    this.enabledByDefault = enabledByDefault;
    this.stable = stable;
  }
  static get values() {
    let availableFeatures = [];
    featureConfiguration_default.forEach((feature) => {
      availableFeatures = [
        ...availableFeatures,
        new Feature(
          feature.internalName,
          feature.index,
          feature.description,
          feature.displayName,
          feature.enabledByDefault,
          feature.stable
        )
      ];
    });
    return availableFeatures;
  }
  static get settingsFlags() {
    const featureFlags = {};
    Feature.values.forEach((feature) => {
      featureFlags[feature.internalName] = feature.enabledByDefault;
    });
    return featureFlags;
  }
  static fromString(name) {
    for (const feature of Feature.values) {
      if (name === feature.internalName) {
        return feature;
      }
    }
    throw new RangeError(
      `Illegal argument passed to fromString(): ${name} does not correspond to any available Feature ${this.prototype.constructor.name}`
    );
  }
};

// src/Config/Settings.ts
var defaultSettings = {
  globalFilter: "",
  removeGlobalFilter: false,
  setDoneDate: true,
  autoSuggestInEditor: true,
  autoSuggestMinMatch: 0,
  autoSuggestMaxItems: 6,
  provideAccessKeys: true,
  useFilenameAsScheduledDate: false,
  filenameAsDateFolders: [],
  features: Feature.settingsFlags
};
var settings = __spreadValues({}, defaultSettings);
var getSettings = () => {
  for (const flag in Feature.settingsFlags) {
    if (settings.features[flag] === void 0) {
      settings.features[flag] = Feature.settingsFlags[flag];
    }
  }
  return __spreadValues({}, settings);
};
var updateSettings = (newSettings) => {
  settings = __spreadValues(__spreadValues({}, settings), newSettings);
  return getSettings();
};

// src/File.ts
var metadataCache;
var vault;
var initializeFile = ({
  metadataCache: newMetadataCache,
  vault: newVault
}) => {
  metadataCache = newMetadataCache;
  vault = newVault;
};
var replaceTaskWithTasks = (_0) => __async(void 0, [_0], function* ({
  originalTask,
  newTasks
}) {
  if (vault === void 0 || metadataCache === void 0) {
    console.error("Tasks: cannot use File before initializing it.");
    return;
  }
  if (!Array.isArray(newTasks)) {
    newTasks = [newTasks];
  }
  tryRepetitive({
    originalTask,
    newTasks,
    vault,
    metadataCache,
    previousTries: 0
  });
});
var tryRepetitive = (_0) => __async(void 0, [_0], function* ({
  originalTask,
  newTasks,
  vault: vault2,
  metadataCache: metadataCache2,
  previousTries
}) {
  const retry = () => {
    if (previousTries > 10) {
      console.error("Tasks: Too many retries. File update not possible ...");
      return;
    }
    const timeout = Math.min(Math.pow(10, previousTries), 100);
    setTimeout(() => {
      tryRepetitive({
        originalTask,
        newTasks,
        vault: vault2,
        metadataCache: metadataCache2,
        previousTries: previousTries + 1
      });
    }, timeout);
  };
  const file = vault2.getAbstractFileByPath(originalTask.path);
  if (!(file instanceof import_obsidian.TFile)) {
    console.warn(`Tasks: No file found for task ${originalTask.description}. Retrying ...`);
    return retry();
  }
  if (file.extension !== "md") {
    console.error("Tasks: Only supporting files with the .md file extension.");
    return;
  }
  const fileCache = metadataCache2.getFileCache(file);
  if (fileCache == void 0 || fileCache === null) {
    console.warn(`Tasks: No file cache found for file ${file.path}. Retrying ...`);
    return retry();
  }
  const listItemsCache = fileCache.listItems;
  if (listItemsCache === void 0 || listItemsCache.length === 0) {
    console.warn(`Tasks: No list items found in file cache of ${file.path}. Retrying ...`);
    return retry();
  }
  const fileContent = yield vault2.read(file);
  const fileLines = fileContent.split("\n");
  const { globalFilter } = getSettings();
  let listItem;
  let sectionIndex = 0;
  for (const listItemCache of listItemsCache) {
    if (listItemCache.position.start.line < originalTask.sectionStart) {
      continue;
    }
    if (listItemCache.task === void 0) {
      continue;
    }
    const line = fileLines[listItemCache.position.start.line];
    if (line.includes(globalFilter)) {
      if (sectionIndex === originalTask.sectionIndex) {
        listItem = listItemCache;
        break;
      }
      sectionIndex++;
    }
  }
  if (listItem === void 0) {
    console.error("Tasks: could not find task to toggle in the file.");
    return;
  }
  const updatedFileLines = [
    ...fileLines.slice(0, listItem.position.start.line),
    ...newTasks.map((task) => task.toFileLineString()),
    ...fileLines.slice(listItem.position.start.line + 1)
  ];
  yield vault2.modify(file, updatedFileLines.join("\n"));
});

// src/LayoutOptions.ts
var LayoutOptions = class {
  constructor() {
    this.hideTaskCount = false;
    this.hideBacklinks = false;
    this.hidePriority = false;
    this.hideStartDate = false;
    this.hideScheduledDate = false;
    this.hideDoneDate = false;
    this.hideDueDate = false;
    this.hideRecurrenceRule = false;
    this.hideEditButton = false;
    this.hideUrgency = true;
    this.shortMode = false;
    this.explainQuery = false;
  }
};

// node_modules/rrule/dist/esm/weekday.js
var ALL_WEEKDAYS = [
  "MO",
  "TU",
  "WE",
  "TH",
  "FR",
  "SA",
  "SU"
];
var Weekday = function() {
  function Weekday2(weekday, n) {
    if (n === 0)
      throw new Error("Can't create weekday with n == 0");
    this.weekday = weekday;
    this.n = n;
  }
  Weekday2.fromStr = function(str) {
    return new Weekday2(ALL_WEEKDAYS.indexOf(str));
  };
  Weekday2.prototype.nth = function(n) {
    return this.n === n ? this : new Weekday2(this.weekday, n);
  };
  Weekday2.prototype.equals = function(other) {
    return this.weekday === other.weekday && this.n === other.n;
  };
  Weekday2.prototype.toString = function() {
    var s = ALL_WEEKDAYS[this.weekday];
    if (this.n)
      s = (this.n > 0 ? "+" : "") + String(this.n) + s;
    return s;
  };
  Weekday2.prototype.getJsWeekday = function() {
    return this.weekday === 6 ? 0 : this.weekday + 1;
  };
  return Weekday2;
}();

// node_modules/rrule/dist/esm/helpers.js
var isPresent = function(value) {
  return value !== null && value !== void 0;
};
var isNumber = function(value) {
  return typeof value === "number";
};
var isWeekdayStr = function(value) {
  return typeof value === "string" && ALL_WEEKDAYS.includes(value);
};
var isArray = Array.isArray;
var range = function(start, end) {
  if (end === void 0) {
    end = start;
  }
  if (arguments.length === 1) {
    end = start;
    start = 0;
  }
  var rang = [];
  for (var i = start; i < end; i++)
    rang.push(i);
  return rang;
};
var repeat = function(value, times) {
  var i = 0;
  var array = [];
  if (isArray(value)) {
    for (; i < times; i++)
      array[i] = [].concat(value);
  } else {
    for (; i < times; i++)
      array[i] = value;
  }
  return array;
};
var toArray = function(item) {
  if (isArray(item)) {
    return item;
  }
  return [item];
};
function padStart(item, targetLength, padString) {
  if (padString === void 0) {
    padString = " ";
  }
  var str = String(item);
  targetLength = targetLength >> 0;
  if (str.length > targetLength) {
    return String(str);
  }
  targetLength = targetLength - str.length;
  if (targetLength > padString.length) {
    padString += repeat(padString, targetLength / padString.length);
  }
  return padString.slice(0, targetLength) + String(str);
}
var split = function(str, sep, num) {
  var splits = str.split(sep);
  return num ? splits.slice(0, num).concat([splits.slice(num).join(sep)]) : splits;
};
var pymod = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
var divmod = function(a, b) {
  return { div: Math.floor(a / b), mod: pymod(a, b) };
};
var empty = function(obj) {
  return !isPresent(obj) || obj.length === 0;
};
var notEmpty = function(obj) {
  return !empty(obj);
};
var includes = function(arr, val) {
  return notEmpty(arr) && arr.indexOf(val) !== -1;
};

// node_modules/rrule/dist/esm/dateutil.js
var dateutil;
(function(dateutil2) {
  dateutil2.MONTH_DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  dateutil2.ONE_DAY = 1e3 * 60 * 60 * 24;
  dateutil2.MAXYEAR = 9999;
  dateutil2.ORDINAL_BASE = new Date(Date.UTC(1970, 0, 1));
  dateutil2.PY_WEEKDAYS = [6, 0, 1, 2, 3, 4, 5];
  dateutil2.getYearDay = function(date) {
    var dateNoTime = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
    return Math.ceil((dateNoTime.valueOf() - new Date(date.getUTCFullYear(), 0, 1).valueOf()) / dateutil2.ONE_DAY) + 1;
  };
  dateutil2.isLeapYear = function(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  };
  dateutil2.isDate = function(value) {
    return value instanceof Date;
  };
  dateutil2.isValidDate = function(value) {
    return dateutil2.isDate(value) && !isNaN(value.getTime());
  };
  dateutil2.tzOffset = function(date) {
    return date.getTimezoneOffset() * 60 * 1e3;
  };
  dateutil2.daysBetween = function(date1, date2) {
    var date1ms = date1.getTime() - dateutil2.tzOffset(date1);
    var date2ms = date2.getTime() - dateutil2.tzOffset(date2);
    var differencems = date1ms - date2ms;
    return Math.round(differencems / dateutil2.ONE_DAY);
  };
  dateutil2.toOrdinal = function(date) {
    return dateutil2.daysBetween(date, dateutil2.ORDINAL_BASE);
  };
  dateutil2.fromOrdinal = function(ordinal) {
    return new Date(dateutil2.ORDINAL_BASE.getTime() + ordinal * dateutil2.ONE_DAY);
  };
  dateutil2.getMonthDays = function(date) {
    var month = date.getUTCMonth();
    return month === 1 && dateutil2.isLeapYear(date.getUTCFullYear()) ? 29 : dateutil2.MONTH_DAYS[month];
  };
  dateutil2.getWeekday = function(date) {
    return dateutil2.PY_WEEKDAYS[date.getUTCDay()];
  };
  dateutil2.monthRange = function(year, month) {
    var date = new Date(Date.UTC(year, month, 1));
    return [dateutil2.getWeekday(date), dateutil2.getMonthDays(date)];
  };
  dateutil2.combine = function(date, time) {
    time = time || date;
    return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds()));
  };
  dateutil2.clone = function(date) {
    var dolly = new Date(date.getTime());
    return dolly;
  };
  dateutil2.cloneDates = function(dates) {
    var clones = [];
    for (var i = 0; i < dates.length; i++) {
      clones.push(dateutil2.clone(dates[i]));
    }
    return clones;
  };
  dateutil2.sort = function(dates) {
    dates.sort(function(a, b) {
      return a.getTime() - b.getTime();
    });
  };
  dateutil2.timeToUntilString = function(time, utc) {
    if (utc === void 0) {
      utc = true;
    }
    var date = new Date(time);
    return [
      padStart(date.getUTCFullYear().toString(), 4, "0"),
      padStart(date.getUTCMonth() + 1, 2, "0"),
      padStart(date.getUTCDate(), 2, "0"),
      "T",
      padStart(date.getUTCHours(), 2, "0"),
      padStart(date.getUTCMinutes(), 2, "0"),
      padStart(date.getUTCSeconds(), 2, "0"),
      utc ? "Z" : ""
    ].join("");
  };
  dateutil2.untilStringToDate = function(until) {
    var re = /^(\d{4})(\d{2})(\d{2})(T(\d{2})(\d{2})(\d{2})Z?)?$/;
    var bits = re.exec(until);
    if (!bits)
      throw new Error("Invalid UNTIL value: ".concat(until));
    return new Date(Date.UTC(parseInt(bits[1], 10), parseInt(bits[2], 10) - 1, parseInt(bits[3], 10), parseInt(bits[5], 10) || 0, parseInt(bits[6], 10) || 0, parseInt(bits[7], 10) || 0));
  };
})(dateutil || (dateutil = {}));
var dateutil_default = dateutil;

// node_modules/rrule/dist/esm/iterresult.js
var IterResult = function() {
  function IterResult2(method, args) {
    this.minDate = null;
    this.maxDate = null;
    this._result = [];
    this.total = 0;
    this.method = method;
    this.args = args;
    if (method === "between") {
      this.maxDate = args.inc ? args.before : new Date(args.before.getTime() - 1);
      this.minDate = args.inc ? args.after : new Date(args.after.getTime() + 1);
    } else if (method === "before") {
      this.maxDate = args.inc ? args.dt : new Date(args.dt.getTime() - 1);
    } else if (method === "after") {
      this.minDate = args.inc ? args.dt : new Date(args.dt.getTime() + 1);
    }
  }
  IterResult2.prototype.accept = function(date) {
    ++this.total;
    var tooEarly = this.minDate && date < this.minDate;
    var tooLate = this.maxDate && date > this.maxDate;
    if (this.method === "between") {
      if (tooEarly)
        return true;
      if (tooLate)
        return false;
    } else if (this.method === "before") {
      if (tooLate)
        return false;
    } else if (this.method === "after") {
      if (tooEarly)
        return true;
      this.add(date);
      return false;
    }
    return this.add(date);
  };
  IterResult2.prototype.add = function(date) {
    this._result.push(date);
    return true;
  };
  IterResult2.prototype.getValue = function() {
    var res = this._result;
    switch (this.method) {
      case "all":
      case "between":
        return res;
      case "before":
      case "after":
      default:
        return res.length ? res[res.length - 1] : null;
    }
  };
  IterResult2.prototype.clone = function() {
    return new IterResult2(this.method, this.args);
  };
  return IterResult2;
}();
var iterresult_default = IterResult;

// node_modules/tslib/modules/index.js
var import_tslib = __toESM(require_tslib(), 1);
var {
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __exportStar,
  __createBinding,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn
} = import_tslib.default;

// node_modules/rrule/dist/esm/callbackiterresult.js
var CallbackIterResult = function(_super) {
  __extends(CallbackIterResult2, _super);
  function CallbackIterResult2(method, args, iterator) {
    var _this = _super.call(this, method, args) || this;
    _this.iterator = iterator;
    return _this;
  }
  CallbackIterResult2.prototype.add = function(date) {
    if (this.iterator(date, this._result.length)) {
      this._result.push(date);
      return true;
    }
    return false;
  };
  return CallbackIterResult2;
}(iterresult_default);
var callbackiterresult_default = CallbackIterResult;

// node_modules/rrule/dist/esm/nlp/i18n.js
var ENGLISH = {
  dayNames: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ],
  monthNames: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  tokens: {
    SKIP: /^[ \r\n\t]+|^\.$/,
    number: /^[1-9][0-9]*/,
    numberAsText: /^(one|two|three)/i,
    every: /^every/i,
    "day(s)": /^days?/i,
    "weekday(s)": /^weekdays?/i,
    "week(s)": /^weeks?/i,
    "hour(s)": /^hours?/i,
    "minute(s)": /^minutes?/i,
    "month(s)": /^months?/i,
    "year(s)": /^years?/i,
    on: /^(on|in)/i,
    at: /^(at)/i,
    the: /^the/i,
    first: /^first/i,
    second: /^second/i,
    third: /^third/i,
    nth: /^([1-9][0-9]*)(\.|th|nd|rd|st)/i,
    last: /^last/i,
    for: /^for/i,
    "time(s)": /^times?/i,
    until: /^(un)?til/i,
    monday: /^mo(n(day)?)?/i,
    tuesday: /^tu(e(s(day)?)?)?/i,
    wednesday: /^we(d(n(esday)?)?)?/i,
    thursday: /^th(u(r(sday)?)?)?/i,
    friday: /^fr(i(day)?)?/i,
    saturday: /^sa(t(urday)?)?/i,
    sunday: /^su(n(day)?)?/i,
    january: /^jan(uary)?/i,
    february: /^feb(ruary)?/i,
    march: /^mar(ch)?/i,
    april: /^apr(il)?/i,
    may: /^may/i,
    june: /^june?/i,
    july: /^july?/i,
    august: /^aug(ust)?/i,
    september: /^sep(t(ember)?)?/i,
    october: /^oct(ober)?/i,
    november: /^nov(ember)?/i,
    december: /^dec(ember)?/i,
    comma: /^(,\s*|(and|or)\s*)+/i
  }
};
var i18n_default = ENGLISH;

// node_modules/rrule/dist/esm/nlp/totext.js
var contains = function(arr, val) {
  return arr.indexOf(val) !== -1;
};
var defaultGetText = function(id) {
  return id.toString();
};
var defaultDateFormatter = function(year, month, day) {
  return "".concat(month, " ").concat(day, ", ").concat(year);
};
var ToText = function() {
  function ToText2(rrule, gettext, language, dateFormatter) {
    if (gettext === void 0) {
      gettext = defaultGetText;
    }
    if (language === void 0) {
      language = i18n_default;
    }
    if (dateFormatter === void 0) {
      dateFormatter = defaultDateFormatter;
    }
    this.text = [];
    this.language = language || i18n_default;
    this.gettext = gettext;
    this.dateFormatter = dateFormatter;
    this.rrule = rrule;
    this.options = rrule.options;
    this.origOptions = rrule.origOptions;
    if (this.origOptions.bymonthday) {
      var bymonthday = [].concat(this.options.bymonthday);
      var bynmonthday = [].concat(this.options.bynmonthday);
      bymonthday.sort(function(a, b) {
        return a - b;
      });
      bynmonthday.sort(function(a, b) {
        return b - a;
      });
      this.bymonthday = bymonthday.concat(bynmonthday);
      if (!this.bymonthday.length)
        this.bymonthday = null;
    }
    if (isPresent(this.origOptions.byweekday)) {
      var byweekday = !isArray(this.origOptions.byweekday) ? [this.origOptions.byweekday] : this.origOptions.byweekday;
      var days = String(byweekday);
      this.byweekday = {
        allWeeks: byweekday.filter(function(weekday) {
          return !weekday.n;
        }),
        someWeeks: byweekday.filter(function(weekday) {
          return Boolean(weekday.n);
        }),
        isWeekdays: days.indexOf("MO") !== -1 && days.indexOf("TU") !== -1 && days.indexOf("WE") !== -1 && days.indexOf("TH") !== -1 && days.indexOf("FR") !== -1 && days.indexOf("SA") === -1 && days.indexOf("SU") === -1,
        isEveryDay: days.indexOf("MO") !== -1 && days.indexOf("TU") !== -1 && days.indexOf("WE") !== -1 && days.indexOf("TH") !== -1 && days.indexOf("FR") !== -1 && days.indexOf("SA") !== -1 && days.indexOf("SU") !== -1
      };
      var sortWeekDays = function(a, b) {
        return a.weekday - b.weekday;
      };
      this.byweekday.allWeeks.sort(sortWeekDays);
      this.byweekday.someWeeks.sort(sortWeekDays);
      if (!this.byweekday.allWeeks.length)
        this.byweekday.allWeeks = null;
      if (!this.byweekday.someWeeks.length)
        this.byweekday.someWeeks = null;
    } else {
      this.byweekday = null;
    }
  }
  ToText2.isFullyConvertible = function(rrule) {
    var canConvert = true;
    if (!(rrule.options.freq in ToText2.IMPLEMENTED))
      return false;
    if (rrule.origOptions.until && rrule.origOptions.count)
      return false;
    for (var key in rrule.origOptions) {
      if (contains(["dtstart", "wkst", "freq"], key))
        return true;
      if (!contains(ToText2.IMPLEMENTED[rrule.options.freq], key))
        return false;
    }
    return canConvert;
  };
  ToText2.prototype.isFullyConvertible = function() {
    return ToText2.isFullyConvertible(this.rrule);
  };
  ToText2.prototype.toString = function() {
    var gettext = this.gettext;
    if (!(this.options.freq in ToText2.IMPLEMENTED)) {
      return gettext("RRule error: Unable to fully convert this rrule to text");
    }
    this.text = [gettext("every")];
    this[RRule.FREQUENCIES[this.options.freq]]();
    if (this.options.until) {
      this.add(gettext("until"));
      var until = this.options.until;
      this.add(this.dateFormatter(until.getUTCFullYear(), this.language.monthNames[until.getUTCMonth()], until.getUTCDate()));
    } else if (this.options.count) {
      this.add(gettext("for")).add(this.options.count.toString()).add(this.plural(this.options.count) ? gettext("times") : gettext("time"));
    }
    if (!this.isFullyConvertible())
      this.add(gettext("(~ approximate)"));
    return this.text.join("");
  };
  ToText2.prototype.HOURLY = function() {
    var gettext = this.gettext;
    if (this.options.interval !== 1)
      this.add(this.options.interval.toString());
    this.add(this.plural(this.options.interval) ? gettext("hours") : gettext("hour"));
  };
  ToText2.prototype.MINUTELY = function() {
    var gettext = this.gettext;
    if (this.options.interval !== 1)
      this.add(this.options.interval.toString());
    this.add(this.plural(this.options.interval) ? gettext("minutes") : gettext("minute"));
  };
  ToText2.prototype.DAILY = function() {
    var gettext = this.gettext;
    if (this.options.interval !== 1)
      this.add(this.options.interval.toString());
    if (this.byweekday && this.byweekday.isWeekdays) {
      this.add(this.plural(this.options.interval) ? gettext("weekdays") : gettext("weekday"));
    } else {
      this.add(this.plural(this.options.interval) ? gettext("days") : gettext("day"));
    }
    if (this.origOptions.bymonth) {
      this.add(gettext("in"));
      this._bymonth();
    }
    if (this.bymonthday) {
      this._bymonthday();
    } else if (this.byweekday) {
      this._byweekday();
    } else if (this.origOptions.byhour) {
      this._byhour();
    }
  };
  ToText2.prototype.WEEKLY = function() {
    var gettext = this.gettext;
    if (this.options.interval !== 1) {
      this.add(this.options.interval.toString()).add(this.plural(this.options.interval) ? gettext("weeks") : gettext("week"));
    }
    if (this.byweekday && this.byweekday.isWeekdays) {
      if (this.options.interval === 1) {
        this.add(this.plural(this.options.interval) ? gettext("weekdays") : gettext("weekday"));
      } else {
        this.add(gettext("on")).add(gettext("weekdays"));
      }
    } else if (this.byweekday && this.byweekday.isEveryDay) {
      this.add(this.plural(this.options.interval) ? gettext("days") : gettext("day"));
    } else {
      if (this.options.interval === 1)
        this.add(gettext("week"));
      if (this.origOptions.bymonth) {
        this.add(gettext("in"));
        this._bymonth();
      }
      if (this.bymonthday) {
        this._bymonthday();
      } else if (this.byweekday) {
        this._byweekday();
      }
    }
  };
  ToText2.prototype.MONTHLY = function() {
    var gettext = this.gettext;
    if (this.origOptions.bymonth) {
      if (this.options.interval !== 1) {
        this.add(this.options.interval.toString()).add(gettext("months"));
        if (this.plural(this.options.interval))
          this.add(gettext("in"));
      } else {
      }
      this._bymonth();
    } else {
      if (this.options.interval !== 1) {
        this.add(this.options.interval.toString());
      }
      this.add(this.plural(this.options.interval) ? gettext("months") : gettext("month"));
    }
    if (this.bymonthday) {
      this._bymonthday();
    } else if (this.byweekday && this.byweekday.isWeekdays) {
      this.add(gettext("on")).add(gettext("weekdays"));
    } else if (this.byweekday) {
      this._byweekday();
    }
  };
  ToText2.prototype.YEARLY = function() {
    var gettext = this.gettext;
    if (this.origOptions.bymonth) {
      if (this.options.interval !== 1) {
        this.add(this.options.interval.toString());
        this.add(gettext("years"));
      } else {
      }
      this._bymonth();
    } else {
      if (this.options.interval !== 1) {
        this.add(this.options.interval.toString());
      }
      this.add(this.plural(this.options.interval) ? gettext("years") : gettext("year"));
    }
    if (this.bymonthday) {
      this._bymonthday();
    } else if (this.byweekday) {
      this._byweekday();
    }
    if (this.options.byyearday) {
      this.add(gettext("on the")).add(this.list(this.options.byyearday, this.nth, gettext("and"))).add(gettext("day"));
    }
    if (this.options.byweekno) {
      this.add(gettext("in")).add(this.plural(this.options.byweekno.length) ? gettext("weeks") : gettext("week")).add(this.list(this.options.byweekno, void 0, gettext("and")));
    }
  };
  ToText2.prototype._bymonthday = function() {
    var gettext = this.gettext;
    if (this.byweekday && this.byweekday.allWeeks) {
      this.add(gettext("on")).add(this.list(this.byweekday.allWeeks, this.weekdaytext, gettext("or"))).add(gettext("the")).add(this.list(this.bymonthday, this.nth, gettext("or")));
    } else {
      this.add(gettext("on the")).add(this.list(this.bymonthday, this.nth, gettext("and")));
    }
  };
  ToText2.prototype._byweekday = function() {
    var gettext = this.gettext;
    if (this.byweekday.allWeeks && !this.byweekday.isWeekdays) {
      this.add(gettext("on")).add(this.list(this.byweekday.allWeeks, this.weekdaytext));
    }
    if (this.byweekday.someWeeks) {
      if (this.byweekday.allWeeks)
        this.add(gettext("and"));
      this.add(gettext("on the")).add(this.list(this.byweekday.someWeeks, this.weekdaytext, gettext("and")));
    }
  };
  ToText2.prototype._byhour = function() {
    var gettext = this.gettext;
    this.add(gettext("at")).add(this.list(this.origOptions.byhour, void 0, gettext("and")));
  };
  ToText2.prototype._bymonth = function() {
    this.add(this.list(this.options.bymonth, this.monthtext, this.gettext("and")));
  };
  ToText2.prototype.nth = function(n) {
    n = parseInt(n.toString(), 10);
    var nth;
    var gettext = this.gettext;
    if (n === -1)
      return gettext("last");
    var npos = Math.abs(n);
    switch (npos) {
      case 1:
      case 21:
      case 31:
        nth = npos + gettext("st");
        break;
      case 2:
      case 22:
        nth = npos + gettext("nd");
        break;
      case 3:
      case 23:
        nth = npos + gettext("rd");
        break;
      default:
        nth = npos + gettext("th");
    }
    return n < 0 ? nth + " " + gettext("last") : nth;
  };
  ToText2.prototype.monthtext = function(m) {
    return this.language.monthNames[m - 1];
  };
  ToText2.prototype.weekdaytext = function(wday) {
    var weekday = isNumber(wday) ? (wday + 1) % 7 : wday.getJsWeekday();
    return (wday.n ? this.nth(wday.n) + " " : "") + this.language.dayNames[weekday];
  };
  ToText2.prototype.plural = function(n) {
    return n % 100 !== 1;
  };
  ToText2.prototype.add = function(s) {
    this.text.push(" ");
    this.text.push(s);
    return this;
  };
  ToText2.prototype.list = function(arr, callback, finalDelim, delim) {
    var _this = this;
    if (delim === void 0) {
      delim = ",";
    }
    if (!isArray(arr)) {
      arr = [arr];
    }
    var delimJoin = function(array, delimiter, finalDelimiter) {
      var list = "";
      for (var i = 0; i < array.length; i++) {
        if (i !== 0) {
          if (i === array.length - 1) {
            list += " " + finalDelimiter + " ";
          } else {
            list += delimiter + " ";
          }
        }
        list += array[i];
      }
      return list;
    };
    callback = callback || function(o) {
      return o.toString();
    };
    var realCallback = function(arg) {
      return callback && callback.call(_this, arg);
    };
    if (finalDelim) {
      return delimJoin(arr.map(realCallback), delim, finalDelim);
    } else {
      return arr.map(realCallback).join(delim + " ");
    }
  };
  return ToText2;
}();
var totext_default = ToText;

// node_modules/rrule/dist/esm/nlp/parsetext.js
var Parser = function() {
  function Parser2(rules) {
    this.done = true;
    this.rules = rules;
  }
  Parser2.prototype.start = function(text2) {
    this.text = text2;
    this.done = false;
    return this.nextSymbol();
  };
  Parser2.prototype.isDone = function() {
    return this.done && this.symbol === null;
  };
  Parser2.prototype.nextSymbol = function() {
    var best;
    var bestSymbol;
    this.symbol = null;
    this.value = null;
    do {
      if (this.done)
        return false;
      var rule = void 0;
      best = null;
      for (var name_1 in this.rules) {
        rule = this.rules[name_1];
        var match = rule.exec(this.text);
        if (match) {
          if (best === null || match[0].length > best[0].length) {
            best = match;
            bestSymbol = name_1;
          }
        }
      }
      if (best != null) {
        this.text = this.text.substr(best[0].length);
        if (this.text === "")
          this.done = true;
      }
      if (best == null) {
        this.done = true;
        this.symbol = null;
        this.value = null;
        return;
      }
    } while (bestSymbol === "SKIP");
    this.symbol = bestSymbol;
    this.value = best;
    return true;
  };
  Parser2.prototype.accept = function(name) {
    if (this.symbol === name) {
      if (this.value) {
        var v = this.value;
        this.nextSymbol();
        return v;
      }
      this.nextSymbol();
      return true;
    }
    return false;
  };
  Parser2.prototype.acceptNumber = function() {
    return this.accept("number");
  };
  Parser2.prototype.expect = function(name) {
    if (this.accept(name))
      return true;
    throw new Error("expected " + name + " but found " + this.symbol);
  };
  return Parser2;
}();
function parseText(text2, language) {
  if (language === void 0) {
    language = i18n_default;
  }
  var options = {};
  var ttr = new Parser(language.tokens);
  if (!ttr.start(text2))
    return null;
  S();
  return options;
  function S() {
    ttr.expect("every");
    var n = ttr.acceptNumber();
    if (n)
      options.interval = parseInt(n[0], 10);
    if (ttr.isDone())
      throw new Error("Unexpected end");
    switch (ttr.symbol) {
      case "day(s)":
        options.freq = RRule.DAILY;
        if (ttr.nextSymbol()) {
          AT();
          F();
        }
        break;
      case "weekday(s)":
        options.freq = RRule.WEEKLY;
        options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];
        ttr.nextSymbol();
        F();
        break;
      case "week(s)":
        options.freq = RRule.WEEKLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "hour(s)":
        options.freq = RRule.HOURLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "minute(s)":
        options.freq = RRule.MINUTELY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "month(s)":
        options.freq = RRule.MONTHLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "year(s)":
        options.freq = RRule.YEARLY;
        if (ttr.nextSymbol()) {
          ON();
          F();
        }
        break;
      case "monday":
      case "tuesday":
      case "wednesday":
      case "thursday":
      case "friday":
      case "saturday":
      case "sunday":
        options.freq = RRule.WEEKLY;
        var key = ttr.symbol.substr(0, 2).toUpperCase();
        options.byweekday = [RRule[key]];
        if (!ttr.nextSymbol())
          return;
        while (ttr.accept("comma")) {
          if (ttr.isDone())
            throw new Error("Unexpected end");
          var wkd = decodeWKD();
          if (!wkd) {
            throw new Error("Unexpected symbol " + ttr.symbol + ", expected weekday");
          }
          options.byweekday.push(RRule[wkd]);
          ttr.nextSymbol();
        }
        MDAYs();
        F();
        break;
      case "january":
      case "february":
      case "march":
      case "april":
      case "may":
      case "june":
      case "july":
      case "august":
      case "september":
      case "october":
      case "november":
      case "december":
        options.freq = RRule.YEARLY;
        options.bymonth = [decodeM()];
        if (!ttr.nextSymbol())
          return;
        while (ttr.accept("comma")) {
          if (ttr.isDone())
            throw new Error("Unexpected end");
          var m = decodeM();
          if (!m) {
            throw new Error("Unexpected symbol " + ttr.symbol + ", expected month");
          }
          options.bymonth.push(m);
          ttr.nextSymbol();
        }
        ON();
        F();
        break;
      default:
        throw new Error("Unknown symbol");
    }
  }
  function ON() {
    var on = ttr.accept("on");
    var the = ttr.accept("the");
    if (!(on || the))
      return;
    do {
      var nth = decodeNTH();
      var wkd = decodeWKD();
      var m = decodeM();
      if (nth) {
        if (wkd) {
          ttr.nextSymbol();
          if (!options.byweekday)
            options.byweekday = [];
          options.byweekday.push(RRule[wkd].nth(nth));
        } else {
          if (!options.bymonthday)
            options.bymonthday = [];
          options.bymonthday.push(nth);
          ttr.accept("day(s)");
        }
      } else if (wkd) {
        ttr.nextSymbol();
        if (!options.byweekday)
          options.byweekday = [];
        options.byweekday.push(RRule[wkd]);
      } else if (ttr.symbol === "weekday(s)") {
        ttr.nextSymbol();
        if (!options.byweekday) {
          options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];
        }
      } else if (ttr.symbol === "week(s)") {
        ttr.nextSymbol();
        var n = ttr.acceptNumber();
        if (!n) {
          throw new Error("Unexpected symbol " + ttr.symbol + ", expected week number");
        }
        options.byweekno = [parseInt(n[0], 10)];
        while (ttr.accept("comma")) {
          n = ttr.acceptNumber();
          if (!n) {
            throw new Error("Unexpected symbol " + ttr.symbol + "; expected monthday");
          }
          options.byweekno.push(parseInt(n[0], 10));
        }
      } else if (m) {
        ttr.nextSymbol();
        if (!options.bymonth)
          options.bymonth = [];
        options.bymonth.push(m);
      } else {
        return;
      }
    } while (ttr.accept("comma") || ttr.accept("the") || ttr.accept("on"));
  }
  function AT() {
    var at = ttr.accept("at");
    if (!at)
      return;
    do {
      var n = ttr.acceptNumber();
      if (!n) {
        throw new Error("Unexpected symbol " + ttr.symbol + ", expected hour");
      }
      options.byhour = [parseInt(n[0], 10)];
      while (ttr.accept("comma")) {
        n = ttr.acceptNumber();
        if (!n) {
          throw new Error("Unexpected symbol " + ttr.symbol + "; expected hour");
        }
        options.byhour.push(parseInt(n[0], 10));
      }
    } while (ttr.accept("comma") || ttr.accept("at"));
  }
  function decodeM() {
    switch (ttr.symbol) {
      case "january":
        return 1;
      case "february":
        return 2;
      case "march":
        return 3;
      case "april":
        return 4;
      case "may":
        return 5;
      case "june":
        return 6;
      case "july":
        return 7;
      case "august":
        return 8;
      case "september":
        return 9;
      case "october":
        return 10;
      case "november":
        return 11;
      case "december":
        return 12;
      default:
        return false;
    }
  }
  function decodeWKD() {
    switch (ttr.symbol) {
      case "monday":
      case "tuesday":
      case "wednesday":
      case "thursday":
      case "friday":
      case "saturday":
      case "sunday":
        return ttr.symbol.substr(0, 2).toUpperCase();
      default:
        return false;
    }
  }
  function decodeNTH() {
    switch (ttr.symbol) {
      case "last":
        ttr.nextSymbol();
        return -1;
      case "first":
        ttr.nextSymbol();
        return 1;
      case "second":
        ttr.nextSymbol();
        return ttr.accept("last") ? -2 : 2;
      case "third":
        ttr.nextSymbol();
        return ttr.accept("last") ? -3 : 3;
      case "nth":
        var v = parseInt(ttr.value[1], 10);
        if (v < -366 || v > 366)
          throw new Error("Nth out of range: " + v);
        ttr.nextSymbol();
        return ttr.accept("last") ? -v : v;
      default:
        return false;
    }
  }
  function MDAYs() {
    ttr.accept("on");
    ttr.accept("the");
    var nth = decodeNTH();
    if (!nth)
      return;
    options.bymonthday = [nth];
    ttr.nextSymbol();
    while (ttr.accept("comma")) {
      nth = decodeNTH();
      if (!nth) {
        throw new Error("Unexpected symbol " + ttr.symbol + "; expected monthday");
      }
      options.bymonthday.push(nth);
      ttr.nextSymbol();
    }
  }
  function F() {
    if (ttr.symbol === "until") {
      var date = Date.parse(ttr.text);
      if (!date)
        throw new Error("Cannot parse until date:" + ttr.text);
      options.until = new Date(date);
    } else if (ttr.accept("for")) {
      options.count = parseInt(ttr.value[0], 10);
      ttr.expect("number");
    }
  }
}

// node_modules/rrule/dist/esm/types.js
var Frequency;
(function(Frequency2) {
  Frequency2[Frequency2["YEARLY"] = 0] = "YEARLY";
  Frequency2[Frequency2["MONTHLY"] = 1] = "MONTHLY";
  Frequency2[Frequency2["WEEKLY"] = 2] = "WEEKLY";
  Frequency2[Frequency2["DAILY"] = 3] = "DAILY";
  Frequency2[Frequency2["HOURLY"] = 4] = "HOURLY";
  Frequency2[Frequency2["MINUTELY"] = 5] = "MINUTELY";
  Frequency2[Frequency2["SECONDLY"] = 6] = "SECONDLY";
})(Frequency || (Frequency = {}));
function freqIsDailyOrGreater(freq) {
  return freq < Frequency.HOURLY;
}

// node_modules/rrule/dist/esm/nlp/index.js
var fromText = function(text2, language) {
  if (language === void 0) {
    language = i18n_default;
  }
  return new RRule(parseText(text2, language) || void 0);
};
var common = [
  "count",
  "until",
  "interval",
  "byweekday",
  "bymonthday",
  "bymonth"
];
totext_default.IMPLEMENTED = [];
totext_default.IMPLEMENTED[Frequency.HOURLY] = common;
totext_default.IMPLEMENTED[Frequency.MINUTELY] = common;
totext_default.IMPLEMENTED[Frequency.DAILY] = ["byhour"].concat(common);
totext_default.IMPLEMENTED[Frequency.WEEKLY] = common;
totext_default.IMPLEMENTED[Frequency.MONTHLY] = common;
totext_default.IMPLEMENTED[Frequency.YEARLY] = ["byweekno", "byyearday"].concat(common);
var toText = function(rrule, gettext, language, dateFormatter) {
  return new totext_default(rrule, gettext, language, dateFormatter).toString();
};
var isFullyConvertible = totext_default.isFullyConvertible;

// node_modules/rrule/dist/esm/datetime.js
var Time = function() {
  function Time2(hour, minute, second, millisecond) {
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.millisecond = millisecond || 0;
  }
  Time2.prototype.getHours = function() {
    return this.hour;
  };
  Time2.prototype.getMinutes = function() {
    return this.minute;
  };
  Time2.prototype.getSeconds = function() {
    return this.second;
  };
  Time2.prototype.getMilliseconds = function() {
    return this.millisecond;
  };
  Time2.prototype.getTime = function() {
    return (this.hour * 60 * 60 + this.minute * 60 + this.second) * 1e3 + this.millisecond;
  };
  return Time2;
}();
var DateTime = function(_super) {
  __extends(DateTime2, _super);
  function DateTime2(year, month, day, hour, minute, second, millisecond) {
    var _this = _super.call(this, hour, minute, second, millisecond) || this;
    _this.year = year;
    _this.month = month;
    _this.day = day;
    return _this;
  }
  DateTime2.fromDate = function(date) {
    return new this(date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.valueOf() % 1e3);
  };
  DateTime2.prototype.getWeekday = function() {
    return dateutil.getWeekday(new Date(this.getTime()));
  };
  DateTime2.prototype.getTime = function() {
    return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)).getTime();
  };
  DateTime2.prototype.getDay = function() {
    return this.day;
  };
  DateTime2.prototype.getMonth = function() {
    return this.month;
  };
  DateTime2.prototype.getYear = function() {
    return this.year;
  };
  DateTime2.prototype.addYears = function(years) {
    this.year += years;
  };
  DateTime2.prototype.addMonths = function(months) {
    this.month += months;
    if (this.month > 12) {
      var yearDiv = Math.floor(this.month / 12);
      var monthMod = pymod(this.month, 12);
      this.month = monthMod;
      this.year += yearDiv;
      if (this.month === 0) {
        this.month = 12;
        --this.year;
      }
    }
  };
  DateTime2.prototype.addWeekly = function(days, wkst) {
    if (wkst > this.getWeekday()) {
      this.day += -(this.getWeekday() + 1 + (6 - wkst)) + days * 7;
    } else {
      this.day += -(this.getWeekday() - wkst) + days * 7;
    }
    this.fixDay();
  };
  DateTime2.prototype.addDaily = function(days) {
    this.day += days;
    this.fixDay();
  };
  DateTime2.prototype.addHours = function(hours, filtered, byhour) {
    if (filtered) {
      this.hour += Math.floor((23 - this.hour) / hours) * hours;
    }
    for (; ; ) {
      this.hour += hours;
      var _a = divmod(this.hour, 24), dayDiv = _a.div, hourMod = _a.mod;
      if (dayDiv) {
        this.hour = hourMod;
        this.addDaily(dayDiv);
      }
      if (empty(byhour) || includes(byhour, this.hour))
        break;
    }
  };
  DateTime2.prototype.addMinutes = function(minutes, filtered, byhour, byminute) {
    if (filtered) {
      this.minute += Math.floor((1439 - (this.hour * 60 + this.minute)) / minutes) * minutes;
    }
    for (; ; ) {
      this.minute += minutes;
      var _a = divmod(this.minute, 60), hourDiv = _a.div, minuteMod = _a.mod;
      if (hourDiv) {
        this.minute = minuteMod;
        this.addHours(hourDiv, false, byhour);
      }
      if ((empty(byhour) || includes(byhour, this.hour)) && (empty(byminute) || includes(byminute, this.minute))) {
        break;
      }
    }
  };
  DateTime2.prototype.addSeconds = function(seconds, filtered, byhour, byminute, bysecond) {
    if (filtered) {
      this.second += Math.floor((86399 - (this.hour * 3600 + this.minute * 60 + this.second)) / seconds) * seconds;
    }
    for (; ; ) {
      this.second += seconds;
      var _a = divmod(this.second, 60), minuteDiv = _a.div, secondMod = _a.mod;
      if (minuteDiv) {
        this.second = secondMod;
        this.addMinutes(minuteDiv, false, byhour, byminute);
      }
      if ((empty(byhour) || includes(byhour, this.hour)) && (empty(byminute) || includes(byminute, this.minute)) && (empty(bysecond) || includes(bysecond, this.second))) {
        break;
      }
    }
  };
  DateTime2.prototype.fixDay = function() {
    if (this.day <= 28) {
      return;
    }
    var daysinmonth = dateutil.monthRange(this.year, this.month - 1)[1];
    if (this.day <= daysinmonth) {
      return;
    }
    while (this.day > daysinmonth) {
      this.day -= daysinmonth;
      ++this.month;
      if (this.month === 13) {
        this.month = 1;
        ++this.year;
        if (this.year > dateutil.MAXYEAR) {
          return;
        }
      }
      daysinmonth = dateutil.monthRange(this.year, this.month - 1)[1];
    }
  };
  DateTime2.prototype.add = function(options, filtered) {
    var freq = options.freq, interval = options.interval, wkst = options.wkst, byhour = options.byhour, byminute = options.byminute, bysecond = options.bysecond;
    switch (freq) {
      case Frequency.YEARLY:
        return this.addYears(interval);
      case Frequency.MONTHLY:
        return this.addMonths(interval);
      case Frequency.WEEKLY:
        return this.addWeekly(interval, wkst);
      case Frequency.DAILY:
        return this.addDaily(interval);
      case Frequency.HOURLY:
        return this.addHours(interval, filtered, byhour);
      case Frequency.MINUTELY:
        return this.addMinutes(interval, filtered, byhour, byminute);
      case Frequency.SECONDLY:
        return this.addSeconds(interval, filtered, byhour, byminute, bysecond);
    }
  };
  return DateTime2;
}(Time);

// node_modules/rrule/dist/esm/parseoptions.js
function initializeOptions(options) {
  var invalid = [];
  var keys = Object.keys(options);
  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
    var key = keys_1[_i];
    if (!includes(defaultKeys, key))
      invalid.push(key);
    if (dateutil_default.isDate(options[key]) && !dateutil_default.isValidDate(options[key])) {
      invalid.push(key);
    }
  }
  if (invalid.length) {
    throw new Error("Invalid options: " + invalid.join(", "));
  }
  return __assign({}, options);
}
function parseOptions(options) {
  var opts = __assign(__assign({}, DEFAULT_OPTIONS), initializeOptions(options));
  if (isPresent(opts.byeaster))
    opts.freq = RRule.YEARLY;
  if (!(isPresent(opts.freq) && RRule.FREQUENCIES[opts.freq])) {
    throw new Error("Invalid frequency: ".concat(opts.freq, " ").concat(options.freq));
  }
  if (!opts.dtstart)
    opts.dtstart = new Date(new Date().setMilliseconds(0));
  if (!isPresent(opts.wkst)) {
    opts.wkst = RRule.MO.weekday;
  } else if (isNumber(opts.wkst)) {
  } else {
    opts.wkst = opts.wkst.weekday;
  }
  if (isPresent(opts.bysetpos)) {
    if (isNumber(opts.bysetpos))
      opts.bysetpos = [opts.bysetpos];
    for (var i = 0; i < opts.bysetpos.length; i++) {
      var v = opts.bysetpos[i];
      if (v === 0 || !(v >= -366 && v <= 366)) {
        throw new Error("bysetpos must be between 1 and 366, or between -366 and -1");
      }
    }
  }
  if (!(Boolean(opts.byweekno) || notEmpty(opts.byweekno) || notEmpty(opts.byyearday) || Boolean(opts.bymonthday) || notEmpty(opts.bymonthday) || isPresent(opts.byweekday) || isPresent(opts.byeaster))) {
    switch (opts.freq) {
      case RRule.YEARLY:
        if (!opts.bymonth)
          opts.bymonth = opts.dtstart.getUTCMonth() + 1;
        opts.bymonthday = opts.dtstart.getUTCDate();
        break;
      case RRule.MONTHLY:
        opts.bymonthday = opts.dtstart.getUTCDate();
        break;
      case RRule.WEEKLY:
        opts.byweekday = [dateutil_default.getWeekday(opts.dtstart)];
        break;
    }
  }
  if (isPresent(opts.bymonth) && !isArray(opts.bymonth)) {
    opts.bymonth = [opts.bymonth];
  }
  if (isPresent(opts.byyearday) && !isArray(opts.byyearday) && isNumber(opts.byyearday)) {
    opts.byyearday = [opts.byyearday];
  }
  if (!isPresent(opts.bymonthday)) {
    opts.bymonthday = [];
    opts.bynmonthday = [];
  } else if (isArray(opts.bymonthday)) {
    var bymonthday = [];
    var bynmonthday = [];
    for (var i = 0; i < opts.bymonthday.length; i++) {
      var v = opts.bymonthday[i];
      if (v > 0) {
        bymonthday.push(v);
      } else if (v < 0) {
        bynmonthday.push(v);
      }
    }
    opts.bymonthday = bymonthday;
    opts.bynmonthday = bynmonthday;
  } else if (opts.bymonthday < 0) {
    opts.bynmonthday = [opts.bymonthday];
    opts.bymonthday = [];
  } else {
    opts.bynmonthday = [];
    opts.bymonthday = [opts.bymonthday];
  }
  if (isPresent(opts.byweekno) && !isArray(opts.byweekno)) {
    opts.byweekno = [opts.byweekno];
  }
  if (!isPresent(opts.byweekday)) {
    opts.bynweekday = null;
  } else if (isNumber(opts.byweekday)) {
    opts.byweekday = [opts.byweekday];
    opts.bynweekday = null;
  } else if (isWeekdayStr(opts.byweekday)) {
    opts.byweekday = [Weekday.fromStr(opts.byweekday).weekday];
    opts.bynweekday = null;
  } else if (opts.byweekday instanceof Weekday) {
    if (!opts.byweekday.n || opts.freq > RRule.MONTHLY) {
      opts.byweekday = [opts.byweekday.weekday];
      opts.bynweekday = null;
    } else {
      opts.bynweekday = [[opts.byweekday.weekday, opts.byweekday.n]];
      opts.byweekday = null;
    }
  } else {
    var byweekday = [];
    var bynweekday = [];
    for (var i = 0; i < opts.byweekday.length; i++) {
      var wday = opts.byweekday[i];
      if (isNumber(wday)) {
        byweekday.push(wday);
        continue;
      } else if (isWeekdayStr(wday)) {
        byweekday.push(Weekday.fromStr(wday).weekday);
        continue;
      }
      if (!wday.n || opts.freq > RRule.MONTHLY) {
        byweekday.push(wday.weekday);
      } else {
        bynweekday.push([wday.weekday, wday.n]);
      }
    }
    opts.byweekday = notEmpty(byweekday) ? byweekday : null;
    opts.bynweekday = notEmpty(bynweekday) ? bynweekday : null;
  }
  if (!isPresent(opts.byhour)) {
    opts.byhour = opts.freq < RRule.HOURLY ? [opts.dtstart.getUTCHours()] : null;
  } else if (isNumber(opts.byhour)) {
    opts.byhour = [opts.byhour];
  }
  if (!isPresent(opts.byminute)) {
    opts.byminute = opts.freq < RRule.MINUTELY ? [opts.dtstart.getUTCMinutes()] : null;
  } else if (isNumber(opts.byminute)) {
    opts.byminute = [opts.byminute];
  }
  if (!isPresent(opts.bysecond)) {
    opts.bysecond = opts.freq < RRule.SECONDLY ? [opts.dtstart.getUTCSeconds()] : null;
  } else if (isNumber(opts.bysecond)) {
    opts.bysecond = [opts.bysecond];
  }
  return { parsedOptions: opts };
}
function buildTimeset(opts) {
  var millisecondModulo = opts.dtstart.getTime() % 1e3;
  if (!freqIsDailyOrGreater(opts.freq)) {
    return [];
  }
  var timeset = [];
  opts.byhour.forEach(function(hour) {
    opts.byminute.forEach(function(minute) {
      opts.bysecond.forEach(function(second) {
        timeset.push(new Time(hour, minute, second, millisecondModulo));
      });
    });
  });
  return timeset;
}

// node_modules/rrule/dist/esm/parsestring.js
function parseString(rfcString) {
  var options = rfcString.split("\n").map(parseLine).filter(function(x) {
    return x !== null;
  });
  return __assign(__assign({}, options[0]), options[1]);
}
function parseDtstart(line) {
  var options = {};
  var dtstartWithZone = /DTSTART(?:;TZID=([^:=]+?))?(?::|=)([^;\s]+)/i.exec(line);
  if (!dtstartWithZone) {
    return options;
  }
  var tzid = dtstartWithZone[1], dtstart = dtstartWithZone[2];
  if (tzid) {
    options.tzid = tzid;
  }
  options.dtstart = dateutil_default.untilStringToDate(dtstart);
  return options;
}
function parseLine(rfcString) {
  rfcString = rfcString.replace(/^\s+|\s+$/, "");
  if (!rfcString.length)
    return null;
  var header = /^([A-Z]+?)[:;]/.exec(rfcString.toUpperCase());
  if (!header) {
    return parseRrule(rfcString);
  }
  var key = header[1];
  switch (key.toUpperCase()) {
    case "RRULE":
    case "EXRULE":
      return parseRrule(rfcString);
    case "DTSTART":
      return parseDtstart(rfcString);
    default:
      throw new Error("Unsupported RFC prop ".concat(key, " in ").concat(rfcString));
  }
}
function parseRrule(line) {
  var strippedLine = line.replace(/^RRULE:/i, "");
  var options = parseDtstart(strippedLine);
  var attrs = line.replace(/^(?:RRULE|EXRULE):/i, "").split(";");
  attrs.forEach(function(attr2) {
    var _a = attr2.split("="), key = _a[0], value = _a[1];
    switch (key.toUpperCase()) {
      case "FREQ":
        options.freq = Frequency[value.toUpperCase()];
        break;
      case "WKST":
        options.wkst = Days[value.toUpperCase()];
        break;
      case "COUNT":
      case "INTERVAL":
      case "BYSETPOS":
      case "BYMONTH":
      case "BYMONTHDAY":
      case "BYYEARDAY":
      case "BYWEEKNO":
      case "BYHOUR":
      case "BYMINUTE":
      case "BYSECOND":
        var num = parseNumber(value);
        var optionKey = key.toLowerCase();
        options[optionKey] = num;
        break;
      case "BYWEEKDAY":
      case "BYDAY":
        options.byweekday = parseWeekday(value);
        break;
      case "DTSTART":
      case "TZID":
        var dtstart = parseDtstart(line);
        options.tzid = dtstart.tzid;
        options.dtstart = dtstart.dtstart;
        break;
      case "UNTIL":
        options.until = dateutil_default.untilStringToDate(value);
        break;
      case "BYEASTER":
        options.byeaster = Number(value);
        break;
      default:
        throw new Error("Unknown RRULE property '" + key + "'");
    }
  });
  return options;
}
function parseNumber(value) {
  if (value.indexOf(",") !== -1) {
    var values = value.split(",");
    return values.map(parseIndividualNumber);
  }
  return parseIndividualNumber(value);
}
function parseIndividualNumber(value) {
  if (/^[+-]?\d+$/.test(value)) {
    return Number(value);
  }
  return value;
}
function parseWeekday(value) {
  var days = value.split(",");
  return days.map(function(day) {
    if (day.length === 2) {
      return Days[day];
    }
    var parts = day.match(/^([+-]?\d{1,2})([A-Z]{2})$/);
    if (!parts || parts.length < 3) {
      throw new SyntaxError("Invalid weekday string: ".concat(day));
    }
    var n = Number(parts[1]);
    var wdaypart = parts[2];
    var wday = Days[wdaypart].weekday;
    return new Weekday(wday, n);
  });
}

// node_modules/rrule/dist/esm/datewithzone.js
var DateWithZone = function() {
  function DateWithZone2(date, tzid) {
    if (isNaN(date.getTime())) {
      throw new RangeError("Invalid date passed to DateWithZone");
    }
    this.date = date;
    this.tzid = tzid;
  }
  Object.defineProperty(DateWithZone2.prototype, "isUTC", {
    get: function() {
      return !this.tzid || this.tzid.toUpperCase() === "UTC";
    },
    enumerable: false,
    configurable: true
  });
  DateWithZone2.prototype.toString = function() {
    var datestr = dateutil_default.timeToUntilString(this.date.getTime(), this.isUTC);
    if (!this.isUTC) {
      return ";TZID=".concat(this.tzid, ":").concat(datestr);
    }
    return ":".concat(datestr);
  };
  DateWithZone2.prototype.getTime = function() {
    return this.date.getTime();
  };
  DateWithZone2.prototype.rezonedDate = function() {
    var _a;
    if (this.isUTC) {
      return this.date;
    }
    var localTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    var dateInLocalTZ = new Date(this.date.toLocaleString(void 0, { timeZone: localTimeZone }));
    var dateInTargetTZ = new Date(this.date.toLocaleString(void 0, { timeZone: (_a = this.tzid) !== null && _a !== void 0 ? _a : "UTC" }));
    var tzOffset = dateInTargetTZ.getTime() - dateInLocalTZ.getTime();
    return new Date(this.date.getTime() - tzOffset);
  };
  return DateWithZone2;
}();

// node_modules/rrule/dist/esm/optionstostring.js
function optionsToString(options) {
  var rrule = [];
  var dtstart = "";
  var keys = Object.keys(options);
  var defaultKeys2 = Object.keys(DEFAULT_OPTIONS);
  for (var i = 0; i < keys.length; i++) {
    if (keys[i] === "tzid")
      continue;
    if (!includes(defaultKeys2, keys[i]))
      continue;
    var key = keys[i].toUpperCase();
    var value = options[keys[i]];
    var outValue = "";
    if (!isPresent(value) || isArray(value) && !value.length)
      continue;
    switch (key) {
      case "FREQ":
        outValue = RRule.FREQUENCIES[options.freq];
        break;
      case "WKST":
        if (isNumber(value)) {
          outValue = new Weekday(value).toString();
        } else {
          outValue = value.toString();
        }
        break;
      case "BYWEEKDAY":
        key = "BYDAY";
        outValue = toArray(value).map(function(wday) {
          if (wday instanceof Weekday) {
            return wday;
          }
          if (isArray(wday)) {
            return new Weekday(wday[0], wday[1]);
          }
          return new Weekday(wday);
        }).toString();
        break;
      case "DTSTART":
        dtstart = buildDtstart(value, options.tzid);
        break;
      case "UNTIL":
        outValue = dateutil_default.timeToUntilString(value, !options.tzid);
        break;
      default:
        if (isArray(value)) {
          var strValues = [];
          for (var j = 0; j < value.length; j++) {
            strValues[j] = String(value[j]);
          }
          outValue = strValues.toString();
        } else {
          outValue = String(value);
        }
    }
    if (outValue) {
      rrule.push([key, outValue]);
    }
  }
  var rules = rrule.map(function(_a) {
    var key2 = _a[0], value2 = _a[1];
    return "".concat(key2, "=").concat(value2.toString());
  }).join(";");
  var ruleString = "";
  if (rules !== "") {
    ruleString = "RRULE:".concat(rules);
  }
  return [dtstart, ruleString].filter(function(x) {
    return !!x;
  }).join("\n");
}
function buildDtstart(dtstart, tzid) {
  if (!dtstart) {
    return "";
  }
  return "DTSTART" + new DateWithZone(new Date(dtstart), tzid).toString();
}

// node_modules/rrule/dist/esm/cache.js
function argsMatch(left, right) {
  if (Array.isArray(left)) {
    if (!Array.isArray(right))
      return false;
    if (left.length !== right.length)
      return false;
    return left.every(function(date, i) {
      return date.getTime() === right[i].getTime();
    });
  }
  if (left instanceof Date) {
    return right instanceof Date && left.getTime() === right.getTime();
  }
  return left === right;
}
var Cache = function() {
  function Cache3() {
    this.all = false;
    this.before = [];
    this.after = [];
    this.between = [];
  }
  Cache3.prototype._cacheAdd = function(what, value, args) {
    if (value) {
      value = value instanceof Date ? dateutil_default.clone(value) : dateutil_default.cloneDates(value);
    }
    if (what === "all") {
      this.all = value;
    } else {
      args._value = value;
      this[what].push(args);
    }
  };
  Cache3.prototype._cacheGet = function(what, args) {
    var cached = false;
    var argsKeys = args ? Object.keys(args) : [];
    var findCacheDiff = function(item2) {
      for (var i2 = 0; i2 < argsKeys.length; i2++) {
        var key = argsKeys[i2];
        if (!argsMatch(args[key], item2[key])) {
          return true;
        }
      }
      return false;
    };
    var cachedObject = this[what];
    if (what === "all") {
      cached = this.all;
    } else if (isArray(cachedObject)) {
      for (var i = 0; i < cachedObject.length; i++) {
        var item = cachedObject[i];
        if (argsKeys.length && findCacheDiff(item))
          continue;
        cached = item._value;
        break;
      }
    }
    if (!cached && this.all) {
      var iterResult = new iterresult_default(what, args);
      for (var i = 0; i < this.all.length; i++) {
        if (!iterResult.accept(this.all[i]))
          break;
      }
      cached = iterResult.getValue();
      this._cacheAdd(what, cached, args);
    }
    return isArray(cached) ? dateutil_default.cloneDates(cached) : cached instanceof Date ? dateutil_default.clone(cached) : cached;
  };
  return Cache3;
}();

// node_modules/rrule/dist/esm/masks.js
var M365MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], repeat(1, 31), true), repeat(2, 28), true), repeat(3, 31), true), repeat(4, 30), true), repeat(5, 31), true), repeat(6, 30), true), repeat(7, 31), true), repeat(8, 31), true), repeat(9, 30), true), repeat(10, 31), true), repeat(11, 30), true), repeat(12, 31), true), repeat(1, 7), true);
var M366MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], repeat(1, 31), true), repeat(2, 29), true), repeat(3, 31), true), repeat(4, 30), true), repeat(5, 31), true), repeat(6, 30), true), repeat(7, 31), true), repeat(8, 31), true), repeat(9, 30), true), repeat(10, 31), true), repeat(11, 30), true), repeat(12, 31), true), repeat(1, 7), true);
var M28 = range(1, 29);
var M29 = range(1, 30);
var M30 = range(1, 31);
var M31 = range(1, 32);
var MDAY366MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], M31, true), M29, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31.slice(0, 7), true);
var MDAY365MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], M31, true), M28, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31, true), M30, true), M31, true), M30, true), M31, true), M31.slice(0, 7), true);
var NM28 = range(-28, 0);
var NM29 = range(-29, 0);
var NM30 = range(-30, 0);
var NM31 = range(-31, 0);
var NMDAY366MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], NM31, true), NM29, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31.slice(0, 7), true);
var NMDAY365MASK = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], NM31, true), NM28, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31, true), NM30, true), NM31, true), NM30, true), NM31, true), NM31.slice(0, 7), true);
var M366RANGE = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];
var M365RANGE = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];
var WDAYMASK = function() {
  var wdaymask = [];
  for (var i = 0; i < 55; i++)
    wdaymask = wdaymask.concat(range(7));
  return wdaymask;
}();

// node_modules/rrule/dist/esm/iterinfo/yearinfo.js
function rebuildYear(year, options) {
  var firstyday = new Date(Date.UTC(year, 0, 1));
  var yearlen = dateutil_default.isLeapYear(year) ? 366 : 365;
  var nextyearlen = dateutil_default.isLeapYear(year + 1) ? 366 : 365;
  var yearordinal = dateutil_default.toOrdinal(firstyday);
  var yearweekday = dateutil_default.getWeekday(firstyday);
  var result = __assign(__assign({ yearlen, nextyearlen, yearordinal, yearweekday }, baseYearMasks(year)), { wnomask: null });
  if (empty(options.byweekno)) {
    return result;
  }
  result.wnomask = repeat(0, yearlen + 7);
  var firstwkst;
  var wyearlen;
  var no1wkst = firstwkst = pymod(7 - yearweekday + options.wkst, 7);
  if (no1wkst >= 4) {
    no1wkst = 0;
    wyearlen = result.yearlen + pymod(yearweekday - options.wkst, 7);
  } else {
    wyearlen = yearlen - no1wkst;
  }
  var div = Math.floor(wyearlen / 7);
  var mod = pymod(wyearlen, 7);
  var numweeks = Math.floor(div + mod / 4);
  for (var j = 0; j < options.byweekno.length; j++) {
    var n = options.byweekno[j];
    if (n < 0) {
      n += numweeks + 1;
    }
    if (!(n > 0 && n <= numweeks)) {
      continue;
    }
    var i = void 0;
    if (n > 1) {
      i = no1wkst + (n - 1) * 7;
      if (no1wkst !== firstwkst) {
        i -= 7 - firstwkst;
      }
    } else {
      i = no1wkst;
    }
    for (var k = 0; k < 7; k++) {
      result.wnomask[i] = 1;
      i++;
      if (result.wdaymask[i] === options.wkst)
        break;
    }
  }
  if (includes(options.byweekno, 1)) {
    var i = no1wkst + numweeks * 7;
    if (no1wkst !== firstwkst)
      i -= 7 - firstwkst;
    if (i < yearlen) {
      for (var j = 0; j < 7; j++) {
        result.wnomask[i] = 1;
        i += 1;
        if (result.wdaymask[i] === options.wkst)
          break;
      }
    }
  }
  if (no1wkst) {
    var lnumweeks = void 0;
    if (!includes(options.byweekno, -1)) {
      var lyearweekday = dateutil_default.getWeekday(new Date(Date.UTC(year - 1, 0, 1)));
      var lno1wkst = pymod(7 - lyearweekday.valueOf() + options.wkst, 7);
      var lyearlen = dateutil_default.isLeapYear(year - 1) ? 366 : 365;
      var weekst = void 0;
      if (lno1wkst >= 4) {
        lno1wkst = 0;
        weekst = lyearlen + pymod(lyearweekday - options.wkst, 7);
      } else {
        weekst = yearlen - no1wkst;
      }
      lnumweeks = Math.floor(52 + pymod(weekst, 7) / 4);
    } else {
      lnumweeks = -1;
    }
    if (includes(options.byweekno, lnumweeks)) {
      for (var i = 0; i < no1wkst; i++)
        result.wnomask[i] = 1;
    }
  }
  return result;
}
function baseYearMasks(year) {
  var yearlen = dateutil_default.isLeapYear(year) ? 366 : 365;
  var firstyday = new Date(Date.UTC(year, 0, 1));
  var wday = dateutil_default.getWeekday(firstyday);
  if (yearlen === 365) {
    return {
      mmask: M365MASK,
      mdaymask: MDAY365MASK,
      nmdaymask: NMDAY365MASK,
      wdaymask: WDAYMASK.slice(wday),
      mrange: M365RANGE
    };
  }
  return {
    mmask: M366MASK,
    mdaymask: MDAY366MASK,
    nmdaymask: NMDAY366MASK,
    wdaymask: WDAYMASK.slice(wday),
    mrange: M366RANGE
  };
}

// node_modules/rrule/dist/esm/iterinfo/monthinfo.js
function rebuildMonth(year, month, yearlen, mrange, wdaymask, options) {
  var result = {
    lastyear: year,
    lastmonth: month,
    nwdaymask: []
  };
  var ranges = [];
  if (options.freq === RRule.YEARLY) {
    if (empty(options.bymonth)) {
      ranges = [[0, yearlen]];
    } else {
      for (var j = 0; j < options.bymonth.length; j++) {
        month = options.bymonth[j];
        ranges.push(mrange.slice(month - 1, month + 1));
      }
    }
  } else if (options.freq === RRule.MONTHLY) {
    ranges = [mrange.slice(month - 1, month + 1)];
  }
  if (empty(ranges)) {
    return result;
  }
  result.nwdaymask = repeat(0, yearlen);
  for (var j = 0; j < ranges.length; j++) {
    var rang = ranges[j];
    var first = rang[0];
    var last = rang[1] - 1;
    for (var k = 0; k < options.bynweekday.length; k++) {
      var i = void 0;
      var _a = options.bynweekday[k], wday = _a[0], n = _a[1];
      if (n < 0) {
        i = last + (n + 1) * 7;
        i -= pymod(wdaymask[i] - wday, 7);
      } else {
        i = first + (n - 1) * 7;
        i += pymod(7 - wdaymask[i] + wday, 7);
      }
      if (first <= i && i <= last)
        result.nwdaymask[i] = 1;
    }
  }
  return result;
}

// node_modules/rrule/dist/esm/iterinfo/easter.js
function easter(y, offset) {
  if (offset === void 0) {
    offset = 0;
  }
  var a = y % 19;
  var b = Math.floor(y / 100);
  var c = y % 100;
  var d = Math.floor(b / 4);
  var e = b % 4;
  var f = Math.floor((b + 8) / 25);
  var g = Math.floor((b - f + 1) / 3);
  var h = Math.floor(19 * a + b - d - g + 15) % 30;
  var i = Math.floor(c / 4);
  var k = c % 4;
  var l = Math.floor(32 + 2 * e + 2 * i - h - k) % 7;
  var m = Math.floor((a + 11 * h + 22 * l) / 451);
  var month = Math.floor((h + l - 7 * m + 114) / 31);
  var day = (h + l - 7 * m + 114) % 31 + 1;
  var date = Date.UTC(y, month - 1, day + offset);
  var yearStart = Date.UTC(y, 0, 1);
  return [Math.ceil((date - yearStart) / (1e3 * 60 * 60 * 24))];
}

// node_modules/rrule/dist/esm/iterinfo/index.js
var Iterinfo = function() {
  function Iterinfo2(options) {
    this.options = options;
  }
  Iterinfo2.prototype.rebuild = function(year, month) {
    var options = this.options;
    if (year !== this.lastyear) {
      this.yearinfo = rebuildYear(year, options);
    }
    if (notEmpty(options.bynweekday) && (month !== this.lastmonth || year !== this.lastyear)) {
      var _a = this.yearinfo, yearlen = _a.yearlen, mrange = _a.mrange, wdaymask = _a.wdaymask;
      this.monthinfo = rebuildMonth(year, month, yearlen, mrange, wdaymask, options);
    }
    if (isPresent(options.byeaster)) {
      this.eastermask = easter(year, options.byeaster);
    }
  };
  Object.defineProperty(Iterinfo2.prototype, "lastyear", {
    get: function() {
      return this.monthinfo ? this.monthinfo.lastyear : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "lastmonth", {
    get: function() {
      return this.monthinfo ? this.monthinfo.lastmonth : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "yearlen", {
    get: function() {
      return this.yearinfo.yearlen;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "yearordinal", {
    get: function() {
      return this.yearinfo.yearordinal;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "mrange", {
    get: function() {
      return this.yearinfo.mrange;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "wdaymask", {
    get: function() {
      return this.yearinfo.wdaymask;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "mmask", {
    get: function() {
      return this.yearinfo.mmask;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "wnomask", {
    get: function() {
      return this.yearinfo.wnomask;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "nwdaymask", {
    get: function() {
      return this.monthinfo ? this.monthinfo.nwdaymask : [];
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "nextyearlen", {
    get: function() {
      return this.yearinfo.nextyearlen;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "mdaymask", {
    get: function() {
      return this.yearinfo.mdaymask;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Iterinfo2.prototype, "nmdaymask", {
    get: function() {
      return this.yearinfo.nmdaymask;
    },
    enumerable: false,
    configurable: true
  });
  Iterinfo2.prototype.ydayset = function() {
    return [range(this.yearlen), 0, this.yearlen];
  };
  Iterinfo2.prototype.mdayset = function(_, month) {
    var start = this.mrange[month - 1];
    var end = this.mrange[month];
    var set = repeat(null, this.yearlen);
    for (var i = start; i < end; i++)
      set[i] = i;
    return [set, start, end];
  };
  Iterinfo2.prototype.wdayset = function(year, month, day) {
    var set = repeat(null, this.yearlen + 7);
    var i = dateutil_default.toOrdinal(new Date(Date.UTC(year, month - 1, day))) - this.yearordinal;
    var start = i;
    for (var j = 0; j < 7; j++) {
      set[i] = i;
      ++i;
      if (this.wdaymask[i] === this.options.wkst)
        break;
    }
    return [set, start, i];
  };
  Iterinfo2.prototype.ddayset = function(year, month, day) {
    var set = repeat(null, this.yearlen);
    var i = dateutil_default.toOrdinal(new Date(Date.UTC(year, month - 1, day))) - this.yearordinal;
    set[i] = i;
    return [set, i, i + 1];
  };
  Iterinfo2.prototype.htimeset = function(hour, _, second, millisecond) {
    var _this = this;
    var set = [];
    this.options.byminute.forEach(function(minute) {
      set = set.concat(_this.mtimeset(hour, minute, second, millisecond));
    });
    dateutil_default.sort(set);
    return set;
  };
  Iterinfo2.prototype.mtimeset = function(hour, minute, _, millisecond) {
    var set = this.options.bysecond.map(function(second) {
      return new Time(hour, minute, second, millisecond);
    });
    dateutil_default.sort(set);
    return set;
  };
  Iterinfo2.prototype.stimeset = function(hour, minute, second, millisecond) {
    return [new Time(hour, minute, second, millisecond)];
  };
  Iterinfo2.prototype.getdayset = function(freq) {
    switch (freq) {
      case Frequency.YEARLY:
        return this.ydayset.bind(this);
      case Frequency.MONTHLY:
        return this.mdayset.bind(this);
      case Frequency.WEEKLY:
        return this.wdayset.bind(this);
      case Frequency.DAILY:
        return this.ddayset.bind(this);
      default:
        return this.ddayset.bind(this);
    }
  };
  Iterinfo2.prototype.gettimeset = function(freq) {
    switch (freq) {
      case Frequency.HOURLY:
        return this.htimeset.bind(this);
      case Frequency.MINUTELY:
        return this.mtimeset.bind(this);
      case Frequency.SECONDLY:
        return this.stimeset.bind(this);
    }
  };
  return Iterinfo2;
}();
var iterinfo_default = Iterinfo;

// node_modules/rrule/dist/esm/iter/poslist.js
function buildPoslist(bysetpos, timeset, start, end, ii, dayset) {
  var poslist = [];
  for (var j = 0; j < bysetpos.length; j++) {
    var daypos = void 0;
    var timepos = void 0;
    var pos = bysetpos[j];
    if (pos < 0) {
      daypos = Math.floor(pos / timeset.length);
      timepos = pymod(pos, timeset.length);
    } else {
      daypos = Math.floor((pos - 1) / timeset.length);
      timepos = pymod(pos - 1, timeset.length);
    }
    var tmp = [];
    for (var k = start; k < end; k++) {
      var val = dayset[k];
      if (!isPresent(val))
        continue;
      tmp.push(val);
    }
    var i = void 0;
    if (daypos < 0) {
      i = tmp.slice(daypos)[0];
    } else {
      i = tmp[daypos];
    }
    var time = timeset[timepos];
    var date = dateutil_default.fromOrdinal(ii.yearordinal + i);
    var res = dateutil_default.combine(date, time);
    if (!includes(poslist, res))
      poslist.push(res);
  }
  dateutil_default.sort(poslist);
  return poslist;
}

// node_modules/rrule/dist/esm/iter/index.js
function iter(iterResult, options) {
  var dtstart = options.dtstart, freq = options.freq, interval = options.interval, until = options.until, bysetpos = options.bysetpos;
  var count = options.count;
  if (count === 0 || interval === 0) {
    return emitResult(iterResult);
  }
  var counterDate = DateTime.fromDate(dtstart);
  var ii = new iterinfo_default(options);
  ii.rebuild(counterDate.year, counterDate.month);
  var timeset = makeTimeset(ii, counterDate, options);
  for (; ; ) {
    var _a = ii.getdayset(freq)(counterDate.year, counterDate.month, counterDate.day), dayset = _a[0], start = _a[1], end = _a[2];
    var filtered = removeFilteredDays(dayset, start, end, ii, options);
    if (notEmpty(bysetpos)) {
      var poslist = buildPoslist(bysetpos, timeset, start, end, ii, dayset);
      for (var j = 0; j < poslist.length; j++) {
        var res = poslist[j];
        if (until && res > until) {
          return emitResult(iterResult);
        }
        if (res >= dtstart) {
          var rezonedDate = rezoneIfNeeded(res, options);
          if (!iterResult.accept(rezonedDate)) {
            return emitResult(iterResult);
          }
          if (count) {
            --count;
            if (!count) {
              return emitResult(iterResult);
            }
          }
        }
      }
    } else {
      for (var j = start; j < end; j++) {
        var currentDay = dayset[j];
        if (!isPresent(currentDay)) {
          continue;
        }
        var date = dateutil_default.fromOrdinal(ii.yearordinal + currentDay);
        for (var k = 0; k < timeset.length; k++) {
          var time = timeset[k];
          var res = dateutil_default.combine(date, time);
          if (until && res > until) {
            return emitResult(iterResult);
          }
          if (res >= dtstart) {
            var rezonedDate = rezoneIfNeeded(res, options);
            if (!iterResult.accept(rezonedDate)) {
              return emitResult(iterResult);
            }
            if (count) {
              --count;
              if (!count) {
                return emitResult(iterResult);
              }
            }
          }
        }
      }
    }
    if (options.interval === 0) {
      return emitResult(iterResult);
    }
    counterDate.add(options, filtered);
    if (counterDate.year > dateutil_default.MAXYEAR) {
      return emitResult(iterResult);
    }
    if (!freqIsDailyOrGreater(freq)) {
      timeset = ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, 0);
    }
    ii.rebuild(counterDate.year, counterDate.month);
  }
}
function isFiltered(ii, currentDay, options) {
  var bymonth = options.bymonth, byweekno = options.byweekno, byweekday = options.byweekday, byeaster = options.byeaster, bymonthday = options.bymonthday, bynmonthday = options.bynmonthday, byyearday = options.byyearday;
  return notEmpty(bymonth) && !includes(bymonth, ii.mmask[currentDay]) || notEmpty(byweekno) && !ii.wnomask[currentDay] || notEmpty(byweekday) && !includes(byweekday, ii.wdaymask[currentDay]) || notEmpty(ii.nwdaymask) && !ii.nwdaymask[currentDay] || byeaster !== null && !includes(ii.eastermask, currentDay) || (notEmpty(bymonthday) || notEmpty(bynmonthday)) && !includes(bymonthday, ii.mdaymask[currentDay]) && !includes(bynmonthday, ii.nmdaymask[currentDay]) || notEmpty(byyearday) && (currentDay < ii.yearlen && !includes(byyearday, currentDay + 1) && !includes(byyearday, -ii.yearlen + currentDay) || currentDay >= ii.yearlen && !includes(byyearday, currentDay + 1 - ii.yearlen) && !includes(byyearday, -ii.nextyearlen + currentDay - ii.yearlen));
}
function rezoneIfNeeded(date, options) {
  return new DateWithZone(date, options.tzid).rezonedDate();
}
function emitResult(iterResult) {
  return iterResult.getValue();
}
function removeFilteredDays(dayset, start, end, ii, options) {
  var filtered = false;
  for (var dayCounter = start; dayCounter < end; dayCounter++) {
    var currentDay = dayset[dayCounter];
    filtered = isFiltered(ii, currentDay, options);
    if (filtered)
      dayset[currentDay] = null;
  }
  return filtered;
}
function makeTimeset(ii, counterDate, options) {
  var freq = options.freq, byhour = options.byhour, byminute = options.byminute, bysecond = options.bysecond;
  if (freqIsDailyOrGreater(freq)) {
    return buildTimeset(options);
  }
  if (freq >= RRule.HOURLY && notEmpty(byhour) && !includes(byhour, counterDate.hour) || freq >= RRule.MINUTELY && notEmpty(byminute) && !includes(byminute, counterDate.minute) || freq >= RRule.SECONDLY && notEmpty(bysecond) && !includes(bysecond, counterDate.second)) {
    return [];
  }
  return ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, counterDate.millisecond);
}

// node_modules/rrule/dist/esm/rrule.js
var Days = {
  MO: new Weekday(0),
  TU: new Weekday(1),
  WE: new Weekday(2),
  TH: new Weekday(3),
  FR: new Weekday(4),
  SA: new Weekday(5),
  SU: new Weekday(6)
};
var DEFAULT_OPTIONS = {
  freq: Frequency.YEARLY,
  dtstart: null,
  interval: 1,
  wkst: Days.MO,
  count: null,
  until: null,
  tzid: null,
  bysetpos: null,
  bymonth: null,
  bymonthday: null,
  bynmonthday: null,
  byyearday: null,
  byweekno: null,
  byweekday: null,
  bynweekday: null,
  byhour: null,
  byminute: null,
  bysecond: null,
  byeaster: null
};
var defaultKeys = Object.keys(DEFAULT_OPTIONS);
var RRule = function() {
  function RRule2(options, noCache) {
    if (options === void 0) {
      options = {};
    }
    if (noCache === void 0) {
      noCache = false;
    }
    this._cache = noCache ? null : new Cache();
    this.origOptions = initializeOptions(options);
    var parsedOptions = parseOptions(options).parsedOptions;
    this.options = parsedOptions;
  }
  RRule2.parseText = function(text2, language) {
    return parseText(text2, language);
  };
  RRule2.fromText = function(text2, language) {
    return fromText(text2, language);
  };
  RRule2.fromString = function(str) {
    return new RRule2(RRule2.parseString(str) || void 0);
  };
  RRule2.prototype._iter = function(iterResult) {
    return iter(iterResult, this.options);
  };
  RRule2.prototype._cacheGet = function(what, args) {
    if (!this._cache)
      return false;
    return this._cache._cacheGet(what, args);
  };
  RRule2.prototype._cacheAdd = function(what, value, args) {
    if (!this._cache)
      return;
    return this._cache._cacheAdd(what, value, args);
  };
  RRule2.prototype.all = function(iterator) {
    if (iterator) {
      return this._iter(new callbackiterresult_default("all", {}, iterator));
    }
    var result = this._cacheGet("all");
    if (result === false) {
      result = this._iter(new iterresult_default("all", {}));
      this._cacheAdd("all", result);
    }
    return result;
  };
  RRule2.prototype.between = function(after, before, inc, iterator) {
    if (inc === void 0) {
      inc = false;
    }
    if (!dateutil_default.isValidDate(after) || !dateutil_default.isValidDate(before)) {
      throw new Error("Invalid date passed in to RRule.between");
    }
    var args = {
      before,
      after,
      inc
    };
    if (iterator) {
      return this._iter(new callbackiterresult_default("between", args, iterator));
    }
    var result = this._cacheGet("between", args);
    if (result === false) {
      result = this._iter(new iterresult_default("between", args));
      this._cacheAdd("between", result, args);
    }
    return result;
  };
  RRule2.prototype.before = function(dt, inc) {
    if (inc === void 0) {
      inc = false;
    }
    if (!dateutil_default.isValidDate(dt)) {
      throw new Error("Invalid date passed in to RRule.before");
    }
    var args = { dt, inc };
    var result = this._cacheGet("before", args);
    if (result === false) {
      result = this._iter(new iterresult_default("before", args));
      this._cacheAdd("before", result, args);
    }
    return result;
  };
  RRule2.prototype.after = function(dt, inc) {
    if (inc === void 0) {
      inc = false;
    }
    if (!dateutil_default.isValidDate(dt)) {
      throw new Error("Invalid date passed in to RRule.after");
    }
    var args = { dt, inc };
    var result = this._cacheGet("after", args);
    if (result === false) {
      result = this._iter(new iterresult_default("after", args));
      this._cacheAdd("after", result, args);
    }
    return result;
  };
  RRule2.prototype.count = function() {
    return this.all().length;
  };
  RRule2.prototype.toString = function() {
    return optionsToString(this.origOptions);
  };
  RRule2.prototype.toText = function(gettext, language, dateFormatter) {
    return toText(this, gettext, language, dateFormatter);
  };
  RRule2.prototype.isFullyConvertibleToText = function() {
    return isFullyConvertible(this);
  };
  RRule2.prototype.clone = function() {
    return new RRule2(this.origOptions);
  };
  RRule2.FREQUENCIES = [
    "YEARLY",
    "MONTHLY",
    "WEEKLY",
    "DAILY",
    "HOURLY",
    "MINUTELY",
    "SECONDLY"
  ];
  RRule2.YEARLY = Frequency.YEARLY;
  RRule2.MONTHLY = Frequency.MONTHLY;
  RRule2.WEEKLY = Frequency.WEEKLY;
  RRule2.DAILY = Frequency.DAILY;
  RRule2.HOURLY = Frequency.HOURLY;
  RRule2.MINUTELY = Frequency.MINUTELY;
  RRule2.SECONDLY = Frequency.SECONDLY;
  RRule2.MO = Days.MO;
  RRule2.TU = Days.TU;
  RRule2.WE = Days.WE;
  RRule2.TH = Days.TH;
  RRule2.FR = Days.FR;
  RRule2.SA = Days.SA;
  RRule2.SU = Days.SU;
  RRule2.parseString = parseString;
  RRule2.optionsToString = optionsToString;
  return RRule2;
}();

// node_modules/rrule/dist/esm/iterset.js
function iterSet(iterResult, _rrule, _exrule, _rdate, _exdate, tzid) {
  var _exdateHash = {};
  var _accept = iterResult.accept;
  function evalExdate(after, before) {
    _exrule.forEach(function(rrule) {
      rrule.between(after, before, true).forEach(function(date) {
        _exdateHash[Number(date)] = true;
      });
    });
  }
  _exdate.forEach(function(date) {
    var zonedDate2 = new DateWithZone(date, tzid).rezonedDate();
    _exdateHash[Number(zonedDate2)] = true;
  });
  iterResult.accept = function(date) {
    var dt = Number(date);
    if (isNaN(dt))
      return _accept.call(this, date);
    if (!_exdateHash[dt]) {
      evalExdate(new Date(dt - 1), new Date(dt + 1));
      if (!_exdateHash[dt]) {
        _exdateHash[dt] = true;
        return _accept.call(this, date);
      }
    }
    return true;
  };
  if (iterResult.method === "between") {
    evalExdate(iterResult.args.after, iterResult.args.before);
    iterResult.accept = function(date) {
      var dt = Number(date);
      if (!_exdateHash[dt]) {
        _exdateHash[dt] = true;
        return _accept.call(this, date);
      }
      return true;
    };
  }
  for (var i = 0; i < _rdate.length; i++) {
    var zonedDate = new DateWithZone(_rdate[i], tzid).rezonedDate();
    if (!iterResult.accept(new Date(zonedDate.getTime())))
      break;
  }
  _rrule.forEach(function(rrule) {
    iter(iterResult, rrule.options);
  });
  var res = iterResult._result;
  dateutil_default.sort(res);
  switch (iterResult.method) {
    case "all":
    case "between":
      return res;
    case "before":
      return res.length && res[res.length - 1] || null;
    case "after":
    default:
      return res.length && res[0] || null;
  }
}

// node_modules/rrule/dist/esm/rrulestr.js
var DEFAULT_OPTIONS2 = {
  dtstart: null,
  cache: false,
  unfold: false,
  forceset: false,
  compatible: false,
  tzid: null
};
function parseInput(s, options) {
  var rrulevals = [];
  var rdatevals = [];
  var exrulevals = [];
  var exdatevals = [];
  var parsedDtstart = parseDtstart(s);
  var dtstart = parsedDtstart.dtstart;
  var tzid = parsedDtstart.tzid;
  var lines = splitIntoLines(s, options.unfold);
  lines.forEach(function(line) {
    var _a;
    if (!line)
      return;
    var _b = breakDownLine(line), name = _b.name, parms = _b.parms, value = _b.value;
    switch (name.toUpperCase()) {
      case "RRULE":
        if (parms.length) {
          throw new Error("unsupported RRULE parm: ".concat(parms.join(",")));
        }
        rrulevals.push(parseString(line));
        break;
      case "RDATE":
        var _c = (_a = /RDATE(?:;TZID=([^:=]+))?/i.exec(line)) !== null && _a !== void 0 ? _a : [], rdateTzid = _c[1];
        if (rdateTzid && !tzid) {
          tzid = rdateTzid;
        }
        rdatevals = rdatevals.concat(parseRDate(value, parms));
        break;
      case "EXRULE":
        if (parms.length) {
          throw new Error("unsupported EXRULE parm: ".concat(parms.join(",")));
        }
        exrulevals.push(parseString(value));
        break;
      case "EXDATE":
        exdatevals = exdatevals.concat(parseRDate(value, parms));
        break;
      case "DTSTART":
        break;
      default:
        throw new Error("unsupported property: " + name);
    }
  });
  return {
    dtstart,
    tzid,
    rrulevals,
    rdatevals,
    exrulevals,
    exdatevals
  };
}
function buildRule(s, options) {
  var _a = parseInput(s, options), rrulevals = _a.rrulevals, rdatevals = _a.rdatevals, exrulevals = _a.exrulevals, exdatevals = _a.exdatevals, dtstart = _a.dtstart, tzid = _a.tzid;
  var noCache = options.cache === false;
  if (options.compatible) {
    options.forceset = true;
    options.unfold = true;
  }
  if (options.forceset || rrulevals.length > 1 || rdatevals.length || exrulevals.length || exdatevals.length) {
    var rset_1 = new RRuleSet(noCache);
    rset_1.dtstart(dtstart);
    rset_1.tzid(tzid || void 0);
    rrulevals.forEach(function(val2) {
      rset_1.rrule(new RRule(groomRruleOptions(val2, dtstart, tzid), noCache));
    });
    rdatevals.forEach(function(date) {
      rset_1.rdate(date);
    });
    exrulevals.forEach(function(val2) {
      rset_1.exrule(new RRule(groomRruleOptions(val2, dtstart, tzid), noCache));
    });
    exdatevals.forEach(function(date) {
      rset_1.exdate(date);
    });
    if (options.compatible && options.dtstart)
      rset_1.rdate(dtstart);
    return rset_1;
  }
  var val = rrulevals[0] || {};
  return new RRule(groomRruleOptions(val, val.dtstart || options.dtstart || dtstart, val.tzid || options.tzid || tzid), noCache);
}
function rrulestr(s, options) {
  if (options === void 0) {
    options = {};
  }
  return buildRule(s, initializeOptions2(options));
}
function groomRruleOptions(val, dtstart, tzid) {
  return __assign(__assign({}, val), { dtstart, tzid });
}
function initializeOptions2(options) {
  var invalid = [];
  var keys = Object.keys(options);
  var defaultKeys2 = Object.keys(DEFAULT_OPTIONS2);
  keys.forEach(function(key) {
    if (!includes(defaultKeys2, key))
      invalid.push(key);
  });
  if (invalid.length) {
    throw new Error("Invalid options: " + invalid.join(", "));
  }
  return __assign(__assign({}, DEFAULT_OPTIONS2), options);
}
function extractName(line) {
  if (line.indexOf(":") === -1) {
    return {
      name: "RRULE",
      value: line
    };
  }
  var _a = split(line, ":", 1), name = _a[0], value = _a[1];
  return {
    name,
    value
  };
}
function breakDownLine(line) {
  var _a = extractName(line), name = _a.name, value = _a.value;
  var parms = name.split(";");
  if (!parms)
    throw new Error("empty property name");
  return {
    name: parms[0].toUpperCase(),
    parms: parms.slice(1),
    value
  };
}
function splitIntoLines(s, unfold) {
  if (unfold === void 0) {
    unfold = false;
  }
  s = s && s.trim();
  if (!s)
    throw new Error("Invalid empty string");
  if (!unfold) {
    return s.split(/\s/);
  }
  var lines = s.split("\n");
  var i = 0;
  while (i < lines.length) {
    var line = lines[i] = lines[i].replace(/\s+$/g, "");
    if (!line) {
      lines.splice(i, 1);
    } else if (i > 0 && line[0] === " ") {
      lines[i - 1] += line.slice(1);
      lines.splice(i, 1);
    } else {
      i += 1;
    }
  }
  return lines;
}
function validateDateParm(parms) {
  parms.forEach(function(parm) {
    if (!/(VALUE=DATE(-TIME)?)|(TZID=)/.test(parm)) {
      throw new Error("unsupported RDATE/EXDATE parm: " + parm);
    }
  });
}
function parseRDate(rdateval, parms) {
  validateDateParm(parms);
  return rdateval.split(",").map(function(datestr) {
    return dateutil_default.untilStringToDate(datestr);
  });
}

// node_modules/rrule/dist/esm/rruleset.js
function createGetterSetter(fieldName) {
  var _this = this;
  return function(field) {
    if (field !== void 0) {
      _this["_".concat(fieldName)] = field;
    }
    if (_this["_".concat(fieldName)] !== void 0) {
      return _this["_".concat(fieldName)];
    }
    for (var i = 0; i < _this._rrule.length; i++) {
      var field_1 = _this._rrule[i].origOptions[fieldName];
      if (field_1) {
        return field_1;
      }
    }
  };
}
var RRuleSet = function(_super) {
  __extends(RRuleSet2, _super);
  function RRuleSet2(noCache) {
    if (noCache === void 0) {
      noCache = false;
    }
    var _this = _super.call(this, {}, noCache) || this;
    _this.dtstart = createGetterSetter.apply(_this, ["dtstart"]);
    _this.tzid = createGetterSetter.apply(_this, ["tzid"]);
    _this._rrule = [];
    _this._rdate = [];
    _this._exrule = [];
    _this._exdate = [];
    return _this;
  }
  RRuleSet2.prototype._iter = function(iterResult) {
    return iterSet(iterResult, this._rrule, this._exrule, this._rdate, this._exdate, this.tzid());
  };
  RRuleSet2.prototype.rrule = function(rrule) {
    _addRule(rrule, this._rrule);
  };
  RRuleSet2.prototype.exrule = function(rrule) {
    _addRule(rrule, this._exrule);
  };
  RRuleSet2.prototype.rdate = function(date) {
    _addDate(date, this._rdate);
  };
  RRuleSet2.prototype.exdate = function(date) {
    _addDate(date, this._exdate);
  };
  RRuleSet2.prototype.rrules = function() {
    return this._rrule.map(function(e) {
      return rrulestr(e.toString());
    });
  };
  RRuleSet2.prototype.exrules = function() {
    return this._exrule.map(function(e) {
      return rrulestr(e.toString());
    });
  };
  RRuleSet2.prototype.rdates = function() {
    return this._rdate.map(function(e) {
      return new Date(e.getTime());
    });
  };
  RRuleSet2.prototype.exdates = function() {
    return this._exdate.map(function(e) {
      return new Date(e.getTime());
    });
  };
  RRuleSet2.prototype.valueOf = function() {
    var result = [];
    if (!this._rrule.length && this._dtstart) {
      result = result.concat(optionsToString({ dtstart: this._dtstart }));
    }
    this._rrule.forEach(function(rrule) {
      result = result.concat(rrule.toString().split("\n"));
    });
    this._exrule.forEach(function(exrule) {
      result = result.concat(exrule.toString().split("\n").map(function(line) {
        return line.replace(/^RRULE:/, "EXRULE:");
      }).filter(function(line) {
        return !/^DTSTART/.test(line);
      }));
    });
    if (this._rdate.length) {
      result.push(rdatesToString("RDATE", this._rdate, this.tzid()));
    }
    if (this._exdate.length) {
      result.push(rdatesToString("EXDATE", this._exdate, this.tzid()));
    }
    return result;
  };
  RRuleSet2.prototype.toString = function() {
    return this.valueOf().join("\n");
  };
  RRuleSet2.prototype.clone = function() {
    var rrs = new RRuleSet2(!!this._cache);
    this._rrule.forEach(function(rule) {
      return rrs.rrule(rule.clone());
    });
    this._exrule.forEach(function(rule) {
      return rrs.exrule(rule.clone());
    });
    this._rdate.forEach(function(date) {
      return rrs.rdate(new Date(date.getTime()));
    });
    this._exdate.forEach(function(date) {
      return rrs.exdate(new Date(date.getTime()));
    });
    return rrs;
  };
  return RRuleSet2;
}(RRule);
function _addRule(rrule, collection) {
  if (!(rrule instanceof RRule)) {
    throw new TypeError(String(rrule) + " is not RRule instance");
  }
  if (!includes(collection.map(String), String(rrule))) {
    collection.push(rrule);
  }
}
function _addDate(date, collection) {
  if (!(date instanceof Date)) {
    throw new TypeError(String(date) + " is not Date instance");
  }
  if (!includes(collection.map(Number), Number(date))) {
    collection.push(date);
    dateutil_default.sort(collection);
  }
}
function rdatesToString(param, rdates, tzid) {
  var isUTC = !tzid || tzid.toUpperCase() === "UTC";
  var header = isUTC ? "".concat(param, ":") : "".concat(param, ";TZID=").concat(tzid, ":");
  var dateString = rdates.map(function(rdate) {
    return dateutil_default.timeToUntilString(rdate.valueOf(), isUTC);
  }).join(",");
  return "".concat(header).concat(dateString);
}

// src/Query/Sort.ts
var _Sort = class {
  static by(query, tasks) {
    const defaultComparators = [
      _Sort.compareByUrgency,
      _Sort.compareByStatus,
      _Sort.compareByDueDate,
      _Sort.compareByPriority,
      _Sort.compareByPath
    ];
    const userComparators = [];
    for (const { property, reverse, propertyInstance } of query.sorting) {
      const comparator = _Sort.comparators[property];
      userComparators.push(reverse ? _Sort.makeReversedComparator(comparator) : comparator);
      if (property === "tag") {
        _Sort.tagPropertyInstance = propertyInstance;
      }
    }
    return tasks.sort(_Sort.makeCompositeComparator([...userComparators, ...defaultComparators]));
  }
  static makeReversedComparator(comparator) {
    return (a, b) => comparator(a, b) * -1;
  }
  static makeCompositeComparator(comparators) {
    return (a, b) => {
      for (const comparator of comparators) {
        const result = comparator(a, b);
        if (result !== 0) {
          return result;
        }
      }
      return 0;
    };
  }
  static compareByUrgency(a, b) {
    return b.urgency - a.urgency;
  }
  static compareByStatus(a, b) {
    if (a.status < b.status) {
      return 1;
    } else if (a.status > b.status) {
      return -1;
    } else {
      return 0;
    }
  }
  static compareByPriority(a, b) {
    return a.priority.localeCompare(b.priority);
  }
  static compareByStartDate(a, b) {
    return _Sort.compareByDate(a.startDate, b.startDate);
  }
  static compareByScheduledDate(a, b) {
    return _Sort.compareByDate(a.scheduledDate, b.scheduledDate);
  }
  static compareByDueDate(a, b) {
    return _Sort.compareByDate(a.dueDate, b.dueDate);
  }
  static compareByDoneDate(a, b) {
    return _Sort.compareByDate(a.doneDate, b.doneDate);
  }
  static compareByTag(a, b) {
    if (a.tags.length === 0 && b.tags.length === 0) {
      return 0;
    } else if (a.tags.length === 0) {
      return 1;
    } else if (b.tags.length === 0) {
      return -1;
    }
    const tagInstanceToSortBy = _Sort.tagPropertyInstance - 1;
    if (a.tags.length < _Sort.tagPropertyInstance && b.tags.length >= _Sort.tagPropertyInstance) {
      return 1;
    } else if (b.tags.length < _Sort.tagPropertyInstance && a.tags.length >= _Sort.tagPropertyInstance) {
      return -1;
    } else if (a.tags.length < _Sort.tagPropertyInstance && b.tags.length < _Sort.tagPropertyInstance) {
      return 0;
    }
    if (a.tags[tagInstanceToSortBy] < b.tags[tagInstanceToSortBy]) {
      return -1;
    } else if (a.tags[tagInstanceToSortBy] > b.tags[tagInstanceToSortBy]) {
      return 1;
    } else {
      return 0;
    }
  }
  static compareByDate(a, b) {
    if (a !== null && b === null) {
      return -1;
    } else if (a === null && b !== null) {
      return 1;
    } else if (a !== null && b !== null) {
      if (a.isValid() && !b.isValid()) {
        return -1;
      } else if (!a.isValid() && b.isValid()) {
        return 1;
      }
      if (a.isAfter(b)) {
        return 1;
      } else if (a.isBefore(b)) {
        return -1;
      } else {
        return 0;
      }
    } else {
      return 0;
    }
  }
  static compareByPath(a, b) {
    if (a.path < b.path) {
      return -1;
    } else if (a.path > b.path) {
      return 1;
    } else {
      return 0;
    }
  }
  static compareByDescription(a, b) {
    return _Sort.cleanDescription(a.description).localeCompare(_Sort.cleanDescription(b.description));
  }
  static cleanDescription(description) {
    const globalFilter = getSettings().globalFilter;
    description = description.replace(globalFilter, "").trim();
    const startsWithLinkRegex = /^\[\[?([^\]]*)\]/;
    const linkRegexMatch = description.match(startsWithLinkRegex);
    if (linkRegexMatch !== null) {
      const innerLinkText = linkRegexMatch[1];
      description = innerLinkText.substring(innerLinkText.indexOf("|") + 1) + description.replace(startsWithLinkRegex, "");
    }
    const startsWithItalicOrBoldRegex = /^\*\*?([^*]*)\*/;
    const italicBoldRegexMatch = description.match(startsWithItalicOrBoldRegex);
    if (italicBoldRegexMatch !== null) {
      const innerItalicBoldText = italicBoldRegexMatch[1];
      description = innerItalicBoldText + description.replace(startsWithLinkRegex, "");
    }
    const startsWithHighlightRegex = /^==?([^=]*)==/;
    const highlightRegexMatch = description.match(startsWithHighlightRegex);
    if (highlightRegexMatch !== null) {
      const innerHighlightsText = highlightRegexMatch[1];
      description = innerHighlightsText + description.replace(startsWithHighlightRegex, "");
    }
    return description;
  }
};
var Sort = _Sort;
Sort.tagPropertyInstance = 1;
Sort.comparators = {
  urgency: _Sort.compareByUrgency,
  description: _Sort.compareByDescription,
  priority: _Sort.compareByPriority,
  start: _Sort.compareByStartDate,
  scheduled: _Sort.compareByScheduledDate,
  due: _Sort.compareByDueDate,
  done: _Sort.compareByDoneDate,
  path: _Sort.compareByPath,
  status: _Sort.compareByStatus,
  tag: _Sort.compareByTag
};

// src/Recurrence.ts
var Recurrence = class {
  constructor({
    rrule,
    baseOnToday,
    referenceDate,
    startDate,
    scheduledDate,
    dueDate
  }) {
    this.rrule = rrule;
    this.baseOnToday = baseOnToday;
    this.referenceDate = referenceDate;
    this.startDate = startDate;
    this.scheduledDate = scheduledDate;
    this.dueDate = dueDate;
  }
  static fromText({
    recurrenceRuleText,
    startDate,
    scheduledDate,
    dueDate
  }) {
    try {
      const match = recurrenceRuleText.match(/^([a-zA-Z0-9, !]+?)( when done)?$/i);
      if (match == null) {
        return null;
      }
      const isolatedRuleText = match[1].trim();
      const baseOnToday = match[2] !== void 0;
      const options = RRule.parseText(isolatedRuleText);
      if (options !== null) {
        let referenceDate = null;
        if (dueDate) {
          referenceDate = window.moment(dueDate);
        } else if (scheduledDate) {
          referenceDate = window.moment(scheduledDate);
        } else if (startDate) {
          referenceDate = window.moment(startDate);
        }
        if (!baseOnToday && referenceDate !== null) {
          options.dtstart = window.moment(referenceDate).startOf("day").utc(true).toDate();
        } else {
          options.dtstart = window.moment().startOf("day").utc(true).toDate();
        }
        const rrule = new RRule(options);
        return new Recurrence({
          rrule,
          baseOnToday,
          referenceDate,
          startDate,
          scheduledDate,
          dueDate
        });
      }
    } catch (error) {
    }
    return null;
  }
  toText() {
    let text2 = this.rrule.toText();
    if (this.baseOnToday) {
      text2 += " when done";
    }
    return text2;
  }
  next() {
    var _a;
    let next;
    if (this.baseOnToday) {
      const today = window.moment();
      const ruleBasedOnToday = new RRule(__spreadProps(__spreadValues({}, this.rrule.origOptions), {
        dtstart: today.startOf("day").utc(true).toDate()
      }));
      next = this.nextAfter(today.endOf("day"), ruleBasedOnToday);
    } else {
      const after = window.moment((_a = this.referenceDate) != null ? _a : void 0).endOf("day");
      next = this.nextAfter(after, this.rrule);
    }
    if (next !== null) {
      let startDate = null;
      let scheduledDate = null;
      let dueDate = null;
      if (this.referenceDate) {
        if (this.startDate) {
          const originalDifference = window.moment.duration(this.startDate.diff(this.referenceDate));
          startDate = window.moment(next);
          startDate.add(Math.round(originalDifference.asDays()), "days");
        }
        if (this.scheduledDate) {
          const originalDifference = window.moment.duration(this.scheduledDate.diff(this.referenceDate));
          scheduledDate = window.moment(next);
          scheduledDate.add(Math.round(originalDifference.asDays()), "days");
        }
        if (this.dueDate) {
          const originalDifference = window.moment.duration(this.dueDate.diff(this.referenceDate));
          dueDate = window.moment(next);
          dueDate.add(Math.round(originalDifference.asDays()), "days");
        }
      }
      return {
        startDate,
        scheduledDate,
        dueDate
      };
    }
    return null;
  }
  identicalTo(other) {
    if (this.baseOnToday !== other.baseOnToday) {
      return false;
    }
    if (Sort.compareByDate(this.startDate, other.startDate) !== 0) {
      return false;
    }
    if (Sort.compareByDate(this.scheduledDate, other.scheduledDate) !== 0) {
      return false;
    }
    if (Sort.compareByDate(this.dueDate, other.dueDate) !== 0) {
      return false;
    }
    return this.toText() === other.toText();
  }
  nextAfter(after, rrule) {
    after.utc(true);
    let next = window.moment(rrule.after(after.toDate()));
    const asText = this.toText();
    const monthMatch = asText.match(/every( \d+)? month(s)?(.*)?/);
    if (monthMatch !== null) {
      if (!asText.includes(" on ")) {
        next = Recurrence.nextAfterMonths(after, next, rrule, monthMatch[1]);
      }
    }
    const yearMatch = asText.match(/every( \d+)? year(s)?(.*)?/);
    if (yearMatch !== null) {
      next = Recurrence.nextAfterYears(after, next, rrule, yearMatch[1]);
    }
    return Recurrence.addTimezone(next).toDate();
  }
  static nextAfterMonths(after, next, rrule, skippingMonths) {
    let parsedSkippingMonths = 1;
    if (skippingMonths !== void 0) {
      parsedSkippingMonths = Number.parseInt(skippingMonths.trim(), 10);
    }
    while (Recurrence.isSkippingTooManyMonths(after, next, parsedSkippingMonths)) {
      next = Recurrence.fromOneDayEarlier(after, rrule);
    }
    return next;
  }
  static isSkippingTooManyMonths(after, next, skippingMonths) {
    let diffMonths = next.month() - after.month();
    const diffYears = next.year() - after.year();
    diffMonths += diffYears * 12;
    return diffMonths > skippingMonths;
  }
  static nextAfterYears(after, next, rrule, skippingYears) {
    let parsedSkippingYears = 1;
    if (skippingYears !== void 0) {
      parsedSkippingYears = Number.parseInt(skippingYears.trim(), 10);
    }
    while (Recurrence.isSkippingTooManyYears(after, next, parsedSkippingYears)) {
      next = Recurrence.fromOneDayEarlier(after, rrule);
    }
    return next;
  }
  static isSkippingTooManyYears(after, next, skippingYears) {
    const diff = next.year() - after.year();
    return diff > skippingYears;
  }
  static fromOneDayEarlier(after, rrule) {
    after.subtract(1, "days").endOf("day");
    const options = rrule.origOptions;
    options.dtstart = after.startOf("day").toDate();
    rrule = new RRule(options);
    const next = window.moment(rrule.after(after.toDate()));
    return next;
  }
  static addTimezone(date) {
    const localTimeZone = window.moment.utc(date).local(true);
    return localTimeZone.startOf("day");
  }
};

// src/Urgency.ts
var _Urgency = class {
  static calculate(task) {
    let urgency = 0;
    if (task.dueDate !== null) {
      const daysOverdue = Math.round(window.moment().diff(task.dueDate) / _Urgency.milliSecondsPerDay);
      let dueMultiplier;
      if (daysOverdue >= 7) {
        dueMultiplier = 1;
      } else if (daysOverdue >= -14) {
        dueMultiplier = (daysOverdue + 14) * 0.8 / 21 + 0.2;
      } else {
        dueMultiplier = 0.2;
      }
      urgency += dueMultiplier * _Urgency.dueCoefficient;
    }
    if (task.scheduledDate !== null) {
      if (window.moment().isSameOrAfter(task.scheduledDate)) {
        urgency += 1 * _Urgency.scheduledCoefficient;
      }
    }
    if (task.startDate !== null) {
      if (window.moment().isBefore(task.startDate)) {
        urgency += 1 * _Urgency.startedCoefficient;
      }
    }
    switch (task.priority) {
      case "1":
        urgency += 1 * _Urgency.priorityCoefficient;
        break;
      case "2":
        urgency += 0.65 * _Urgency.priorityCoefficient;
        break;
      case "3":
        urgency += 0.325 * _Urgency.priorityCoefficient;
        break;
    }
    return urgency;
  }
};
var Urgency = _Urgency;
Urgency.dueCoefficient = 12;
Urgency.scheduledCoefficient = 5;
Urgency.startedCoefficient = -3;
Urgency.priorityCoefficient = 6;
Urgency.milliSecondsPerDay = 1e3 * 60 * 60 * 24;

// src/DateFallback.ts
var DateFallback = class {
  static fromPath(path) {
    const { useFilenameAsScheduledDate, filenameAsDateFolders } = getSettings();
    if (!useFilenameAsScheduledDate) {
      return null;
    }
    if (!this.matchesAnyFolder(filenameAsDateFolders, path)) {
      return null;
    }
    return this.extractDateFromPath(path);
  }
  static matchesAnyFolder(folders, path) {
    if (folders.length === 0) {
      return true;
    }
    return folders.some((folder) => path.startsWith(folder + "/"));
  }
  static extractDateFromPath(path) {
    const firstPos = Math.max(0, path.lastIndexOf("/") + 1);
    const lastPos = path.lastIndexOf(".");
    const basename = path.substring(firstPos, lastPos);
    let dateMatch = /(\d{4})-(\d{2})-(\d{2})/.exec(basename);
    if (!dateMatch)
      dateMatch = /(\d{4})(\d{2})(\d{2})/.exec(basename);
    if (dateMatch) {
      const date = window.moment([parseInt(dateMatch[1]), parseInt(dateMatch[2]) - 1, parseInt(dateMatch[3])]);
      if (date.isValid()) {
        return date;
      }
    }
    return null;
  }
  static canApplyFallback({
    startDate,
    scheduledDate,
    dueDate
  }) {
    return startDate === null && dueDate === null && scheduledDate === null;
  }
  static updateTaskPath(task, newPath, fallbackDate) {
    let scheduledDate = task.scheduledDate;
    let scheduledDateIsInferred = task.scheduledDateIsInferred;
    if (fallbackDate === null) {
      if (scheduledDateIsInferred) {
        scheduledDateIsInferred = false;
        scheduledDate = null;
      } else {
      }
    } else {
      if (scheduledDateIsInferred) {
        scheduledDate = fallbackDate;
      } else if (this.canApplyFallback(task)) {
        scheduledDate = fallbackDate;
        scheduledDateIsInferred = true;
      } else {
      }
    }
    return new Task(__spreadProps(__spreadValues({}, task), {
      path: newPath,
      scheduledDate,
      scheduledDateIsInferred
    }));
  }
  static removeInferredStatusIfNeeded(originalTask, updatedTasks) {
    const inferredScheduledDate = originalTask.scheduledDateIsInferred ? originalTask.scheduledDate : null;
    return updatedTasks.map((task) => {
      if (inferredScheduledDate !== null && !inferredScheduledDate.isSame(task.scheduledDate, "day")) {
        task = new Task(__spreadProps(__spreadValues({}, task), { scheduledDateIsInferred: false }));
      }
      return task;
    });
  }
};

// src/Task.ts
var prioritySymbols = {
  High: "\u23EB",
  Medium: "\u{1F53C}",
  Low: "\u{1F53D}",
  None: ""
};
var recurrenceSymbol = "\u{1F501}";
var startDateSymbol = "\u{1F6EB}";
var scheduledDateSymbol = "\u23F3";
var dueDateSymbol = "\u{1F4C5}";
var doneDateSymbol = "\u2705";
var _TaskRegularExpressions = class {
};
var TaskRegularExpressions = _TaskRegularExpressions;
TaskRegularExpressions.dateFormat = "YYYY-MM-DD";
TaskRegularExpressions.indentationRegex = /^([\s\t>]*)/;
TaskRegularExpressions.listMarkerRegex = /(?:[-*]|[0-9]+\.)/;
TaskRegularExpressions.checkboxRegex = /\[(.)\]/u;
TaskRegularExpressions.afterCheckboxRegex = / *(.*)/u;
TaskRegularExpressions.taskRegex = new RegExp(
  _TaskRegularExpressions.indentationRegex.source + _TaskRegularExpressions.listMarkerRegex.source + " +" + _TaskRegularExpressions.checkboxRegex.source + _TaskRegularExpressions.afterCheckboxRegex.source,
  "u"
);
TaskRegularExpressions.nonTaskRegex = new RegExp(
  _TaskRegularExpressions.indentationRegex.source + _TaskRegularExpressions.listMarkerRegex.source + "? *(" + _TaskRegularExpressions.checkboxRegex.source + ")?" + _TaskRegularExpressions.afterCheckboxRegex.source,
  "u"
);
TaskRegularExpressions.listItemRegex = new RegExp(
  _TaskRegularExpressions.indentationRegex.source + "(" + _TaskRegularExpressions.listMarkerRegex.source + ")"
);
TaskRegularExpressions.blockLinkRegex = / \^[a-zA-Z0-9-]+$/u;
TaskRegularExpressions.priorityRegex = /([⏫🔼🔽])$/u;
TaskRegularExpressions.startDateRegex = /🛫 *(\d{4}-\d{2}-\d{2})$/u;
TaskRegularExpressions.scheduledDateRegex = /[⏳⌛] *(\d{4}-\d{2}-\d{2})$/u;
TaskRegularExpressions.dueDateRegex = /[📅📆🗓] *(\d{4}-\d{2}-\d{2})$/u;
TaskRegularExpressions.doneDateRegex = /✅ *(\d{4}-\d{2}-\d{2})$/u;
TaskRegularExpressions.recurrenceRegex = /🔁 ?([a-zA-Z0-9, !]+)$/iu;
TaskRegularExpressions.hashTags = /(^|\s)#[^ !@#$%^&*(),.?":{}|<>]*/g;
TaskRegularExpressions.hashTagsFromEnd = new RegExp(_TaskRegularExpressions.hashTags.source + "$");
var Task = class {
  constructor({
    status,
    description,
    path,
    indentation,
    listMarker,
    sectionStart,
    sectionIndex,
    originalStatusCharacter,
    precedingHeader,
    priority,
    startDate,
    scheduledDate,
    dueDate,
    doneDate,
    recurrence,
    blockLink,
    tags,
    originalMarkdown,
    scheduledDateIsInferred
  }) {
    this._urgency = null;
    this.status = status;
    this.description = description;
    this.path = path;
    this.indentation = indentation;
    this.listMarker = listMarker;
    this.sectionStart = sectionStart;
    this.sectionIndex = sectionIndex;
    this.originalStatusCharacter = originalStatusCharacter;
    this.precedingHeader = precedingHeader;
    this.tags = tags;
    this.priority = priority;
    this.startDate = startDate;
    this.scheduledDate = scheduledDate;
    this.dueDate = dueDate;
    this.doneDate = doneDate;
    this.recurrence = recurrence;
    this.blockLink = blockLink;
    this.originalMarkdown = originalMarkdown;
    this.scheduledDateIsInferred = scheduledDateIsInferred;
  }
  static fromLine({
    line,
    path,
    sectionStart,
    sectionIndex,
    precedingHeader,
    fallbackDate
  }) {
    const regexMatch = line.match(TaskRegularExpressions.taskRegex);
    if (regexMatch === null) {
      return null;
    }
    const body = regexMatch[3].trim();
    const { globalFilter } = getSettings();
    if (!body.includes(globalFilter)) {
      return null;
    }
    let description = body;
    const indentation = regexMatch[1];
    const listMarker = "-";
    const statusString = regexMatch[2];
    let status;
    switch (statusString) {
      case " ":
        status = "Todo" /* TODO */;
        break;
      default:
        status = "Done" /* DONE */;
    }
    const blockLinkMatch = description.match(TaskRegularExpressions.blockLinkRegex);
    const blockLink = blockLinkMatch !== null ? blockLinkMatch[0] : "";
    if (blockLink !== "") {
      description = description.replace(TaskRegularExpressions.blockLinkRegex, "").trim();
    }
    let matched;
    let priority = "3" /* None */;
    let startDate = null;
    let scheduledDate = null;
    let scheduledDateIsInferred = false;
    let dueDate = null;
    let doneDate = null;
    let recurrenceRule = "";
    let recurrence = null;
    let tags = [];
    let trailingTags = "";
    const maxRuns = 20;
    let runs = 0;
    do {
      matched = false;
      const priorityMatch = description.match(TaskRegularExpressions.priorityRegex);
      if (priorityMatch !== null) {
        switch (priorityMatch[1]) {
          case prioritySymbols.Low:
            priority = "4" /* Low */;
            break;
          case prioritySymbols.Medium:
            priority = "2" /* Medium */;
            break;
          case prioritySymbols.High:
            priority = "1" /* High */;
            break;
        }
        description = description.replace(TaskRegularExpressions.priorityRegex, "").trim();
        matched = true;
      }
      const doneDateMatch = description.match(TaskRegularExpressions.doneDateRegex);
      if (doneDateMatch !== null) {
        doneDate = window.moment(doneDateMatch[1], TaskRegularExpressions.dateFormat);
        description = description.replace(TaskRegularExpressions.doneDateRegex, "").trim();
        matched = true;
      }
      const dueDateMatch = description.match(TaskRegularExpressions.dueDateRegex);
      if (dueDateMatch !== null) {
        dueDate = window.moment(dueDateMatch[1], TaskRegularExpressions.dateFormat);
        description = description.replace(TaskRegularExpressions.dueDateRegex, "").trim();
        matched = true;
      }
      const scheduledDateMatch = description.match(TaskRegularExpressions.scheduledDateRegex);
      if (scheduledDateMatch !== null) {
        scheduledDate = window.moment(scheduledDateMatch[1], TaskRegularExpressions.dateFormat);
        description = description.replace(TaskRegularExpressions.scheduledDateRegex, "").trim();
        matched = true;
      }
      const startDateMatch = description.match(TaskRegularExpressions.startDateRegex);
      if (startDateMatch !== null) {
        startDate = window.moment(startDateMatch[1], TaskRegularExpressions.dateFormat);
        description = description.replace(TaskRegularExpressions.startDateRegex, "").trim();
        matched = true;
      }
      const recurrenceMatch = description.match(TaskRegularExpressions.recurrenceRegex);
      if (recurrenceMatch !== null) {
        recurrenceRule = recurrenceMatch[1].trim();
        description = description.replace(TaskRegularExpressions.recurrenceRegex, "").trim();
        matched = true;
      }
      const tagsMatch = description.match(TaskRegularExpressions.hashTagsFromEnd);
      if (tagsMatch != null) {
        description = description.replace(TaskRegularExpressions.hashTagsFromEnd, "").trim();
        matched = true;
        const tagName = tagsMatch[0].trim();
        trailingTags = trailingTags.length > 0 ? [tagName, trailingTags].join(" ") : tagName;
      }
      runs++;
    } while (matched && runs <= maxRuns);
    if (recurrenceRule.length > 0) {
      recurrence = Recurrence.fromText({
        recurrenceRuleText: recurrenceRule,
        startDate,
        scheduledDate,
        dueDate
      });
    }
    if (DateFallback.canApplyFallback({ startDate, scheduledDate, dueDate }) && fallbackDate !== null) {
      scheduledDate = fallbackDate;
      scheduledDateIsInferred = true;
    }
    if (trailingTags.length > 0)
      description += " " + trailingTags;
    const hashTagMatch = description.match(TaskRegularExpressions.hashTags);
    if (hashTagMatch !== null) {
      tags = hashTagMatch.filter((tag) => tag !== globalFilter).map((tag) => tag.trim());
    }
    return new Task({
      status,
      description,
      path,
      indentation,
      listMarker,
      sectionStart,
      sectionIndex,
      originalStatusCharacter: statusString,
      precedingHeader,
      priority,
      startDate,
      scheduledDate,
      dueDate,
      doneDate,
      recurrence,
      blockLink,
      tags,
      originalMarkdown: line,
      scheduledDateIsInferred
    });
  }
  toLi(_0) {
    return __async(this, arguments, function* ({
      parentUlElement,
      listIndex,
      layoutOptions,
      isFilenameUnique
    }) {
      const li = parentUlElement.createEl("li");
      li.addClasses(["task-list-item", "plugin-tasks-list-item"]);
      let taskAsString = this.toString(layoutOptions);
      const { globalFilter, removeGlobalFilter } = getSettings();
      if (removeGlobalFilter) {
        taskAsString = taskAsString.replace(globalFilter, "").trim();
      }
      const textSpan = li.createSpan();
      textSpan.addClass("tasks-list-text");
      yield import_obsidian2.MarkdownRenderer.renderMarkdown(taskAsString, textSpan, this.path, null);
      const blockQuote = textSpan.querySelector("blockquote");
      const directParentOfPTag = blockQuote != null ? blockQuote : textSpan;
      const pElement = directParentOfPTag.querySelector("p");
      if (pElement !== null) {
        while (pElement.firstChild) {
          directParentOfPTag.insertBefore(pElement.firstChild, pElement);
        }
        pElement.remove();
      }
      textSpan.findAll("p").forEach((pElement2) => {
        if (!pElement2.hasChildNodes()) {
          pElement2.remove();
        }
      });
      textSpan.findAll(".footnotes").forEach((footnoteElement) => {
        footnoteElement.remove();
      });
      const checkbox = li.createEl("input");
      checkbox.addClass("task-list-item-checkbox");
      checkbox.type = "checkbox";
      if (this.status !== "Todo" /* TODO */) {
        checkbox.checked = true;
        li.addClass("is-checked");
      }
      checkbox.onClickEvent((event) => {
        event.preventDefault();
        event.stopPropagation();
        checkbox.disabled = true;
        const toggledTasks = this.toggle();
        replaceTaskWithTasks({
          originalTask: this,
          newTasks: toggledTasks
        });
      });
      li.prepend(checkbox);
      li.setAttr("data-task", this.originalStatusCharacter.trim());
      li.setAttr("data-line", listIndex);
      checkbox.setAttr("data-line", listIndex);
      if (layoutOptions == null ? void 0 : layoutOptions.shortMode) {
        this.addTooltip({ element: textSpan, isFilenameUnique });
      }
      return li;
    });
  }
  toString(layoutOptions) {
    var _a;
    layoutOptions = layoutOptions != null ? layoutOptions : new LayoutOptions();
    let taskString = this.description;
    if (!layoutOptions.hidePriority) {
      let priority = "";
      if (this.priority === "1" /* High */) {
        priority = " " + prioritySymbols.High;
      } else if (this.priority === "2" /* Medium */) {
        priority = " " + prioritySymbols.Medium;
      } else if (this.priority === "4" /* Low */) {
        priority = " " + prioritySymbols.Low;
      }
      taskString += priority;
    }
    if (!layoutOptions.hideRecurrenceRule && this.recurrence) {
      const recurrenceRule = layoutOptions.shortMode ? " " + recurrenceSymbol : ` ${recurrenceSymbol} ${this.recurrence.toText()}`;
      taskString += recurrenceRule;
    }
    if (!layoutOptions.hideStartDate && this.startDate) {
      const startDate = layoutOptions.shortMode ? " " + startDateSymbol : ` ${startDateSymbol} ${this.startDate.format(TaskRegularExpressions.dateFormat)}`;
      taskString += startDate;
    }
    if (!layoutOptions.hideScheduledDate && this.scheduledDate && !this.scheduledDateIsInferred) {
      const scheduledDate = layoutOptions.shortMode ? " " + scheduledDateSymbol : ` ${scheduledDateSymbol} ${this.scheduledDate.format(TaskRegularExpressions.dateFormat)}`;
      taskString += scheduledDate;
    }
    if (!layoutOptions.hideDueDate && this.dueDate) {
      const dueDate = layoutOptions.shortMode ? " " + dueDateSymbol : ` ${dueDateSymbol} ${this.dueDate.format(TaskRegularExpressions.dateFormat)}`;
      taskString += dueDate;
    }
    if (!layoutOptions.hideDoneDate && this.doneDate) {
      const doneDate = layoutOptions.shortMode ? " " + doneDateSymbol : ` ${doneDateSymbol} ${this.doneDate.format(TaskRegularExpressions.dateFormat)}`;
      taskString += doneDate;
    }
    const blockLink = (_a = this.blockLink) != null ? _a : "";
    taskString += blockLink;
    return taskString;
  }
  toFileLineString() {
    return `${this.indentation}${this.listMarker} [${this.originalStatusCharacter}] ${this.toString()}`;
  }
  toggle() {
    const newStatus = this.status === "Todo" /* TODO */ ? "Done" /* DONE */ : "Todo" /* TODO */;
    let newDoneDate = null;
    let nextOccurrence = null;
    if (newStatus !== "Todo" /* TODO */) {
      const { setDoneDate } = getSettings();
      if (setDoneDate) {
        newDoneDate = window.moment();
      }
      if (this.recurrence !== null) {
        nextOccurrence = this.recurrence.next();
      }
    }
    const toggledTask = new Task(__spreadProps(__spreadValues({}, this), {
      status: newStatus,
      doneDate: newDoneDate,
      originalStatusCharacter: newStatus === "Done" /* DONE */ ? "x" : " "
    }));
    const newTasks = [];
    if (nextOccurrence !== null) {
      const nextTask = new Task(__spreadProps(__spreadValues(__spreadValues({}, this), nextOccurrence), {
        blockLink: ""
      }));
      newTasks.push(nextTask);
    }
    newTasks.push(toggledTask);
    return newTasks;
  }
  get urgency() {
    if (this._urgency === null) {
      this._urgency = Urgency.calculate(this);
    }
    return this._urgency;
  }
  get filename() {
    const fileNameMatch = this.path.match(/([^/]+)\.md$/);
    if (fileNameMatch !== null) {
      return fileNameMatch[1];
    } else {
      return null;
    }
  }
  getLinkText({ isFilenameUnique }) {
    let linkText;
    if (isFilenameUnique) {
      linkText = this.filename;
    } else {
      linkText = "/" + this.path;
    }
    if (linkText === null) {
      return null;
    }
    if (this.precedingHeader !== null && this.precedingHeader !== linkText) {
      linkText = linkText + " > " + this.precedingHeader;
    }
    return linkText;
  }
  static tasksListsIdentical(oldTasks, newTasks) {
    if (oldTasks.length !== newTasks.length) {
      return false;
    }
    return oldTasks.every((oldTask, index) => oldTask.identicalTo(newTasks[index]));
  }
  identicalTo(other) {
    let args = [
      "status",
      "description",
      "path",
      "indentation",
      "listMarker",
      "sectionStart",
      "sectionIndex",
      "originalStatusCharacter",
      "precedingHeader",
      "priority",
      "blockLink",
      "scheduledDateIsInferred"
    ];
    for (const el of args) {
      if (this[el] !== other[el])
        return false;
    }
    if (this.tags.length !== other.tags.length) {
      return false;
    }
    if (!this.tags.every(function(element2, index) {
      return element2 === other.tags[index];
    })) {
      return false;
    }
    args = ["startDate", "scheduledDate", "dueDate", "doneDate"];
    for (const el of args) {
      const date1 = this[el];
      const date2 = other[el];
      if (Sort.compareByDate(date1, date2) !== 0) {
        return false;
      }
    }
    const recurrence1 = this.recurrence;
    const recurrence2 = other.recurrence;
    if (recurrence1 === null && recurrence2 !== null) {
      return false;
    } else if (recurrence1 !== null && recurrence2 === null) {
      return false;
    } else if (recurrence1 && recurrence2 && !recurrence1.identicalTo(recurrence2)) {
      return false;
    }
    return true;
  }
  addTooltip({
    element: element2,
    isFilenameUnique
  }) {
    element2.addEventListener("mouseenter", () => {
      const tooltip = element2.createDiv();
      tooltip.addClasses(["tooltip", "mod-right"]);
      if (this.recurrence) {
        const recurrenceDiv = tooltip.createDiv();
        recurrenceDiv.setText(`${recurrenceSymbol} ${this.recurrence.toText()}`);
      }
      if (this.startDate) {
        const startDateDiv = tooltip.createDiv();
        startDateDiv.setText(
          Task.toTooltipDate({
            signifier: startDateSymbol,
            date: this.startDate
          })
        );
      }
      if (this.scheduledDate) {
        const scheduledDateDiv = tooltip.createDiv();
        scheduledDateDiv.setText(
          Task.toTooltipDate({
            signifier: scheduledDateSymbol,
            date: this.scheduledDate
          })
        );
      }
      if (this.dueDate) {
        const dueDateDiv = tooltip.createDiv();
        dueDateDiv.setText(
          Task.toTooltipDate({
            signifier: dueDateSymbol,
            date: this.dueDate
          })
        );
      }
      if (this.doneDate) {
        const doneDateDiv = tooltip.createDiv();
        doneDateDiv.setText(
          Task.toTooltipDate({
            signifier: doneDateSymbol,
            date: this.doneDate
          })
        );
      }
      const linkText = this.getLinkText({ isFilenameUnique });
      if (linkText) {
        const backlinkDiv = tooltip.createDiv();
        backlinkDiv.setText(`\u{1F517} ${linkText}`);
      }
      element2.addEventListener("mouseleave", () => {
        tooltip.remove();
      });
    });
  }
  static toTooltipDate({ signifier, date }) {
    return `${signifier} ${date.format(TaskRegularExpressions.dateFormat)} (${date.from(
      window.moment().startOf("day")
    )})`;
  }
  escapeRegExp(s) {
    return s.replace(/([.*+?^${}()|[\]/\\])/g, "\\$1");
  }
  getDescriptionWithoutGlobalFilter() {
    const { globalFilter } = getSettings();
    let description = this.description;
    if (globalFilter.length === 0)
      return description;
    const globalFilterRegex = RegExp("(^|\\s)" + this.escapeRegExp(globalFilter) + "($|\\s)", "ug");
    if (this.description.search(globalFilterRegex) > -1) {
      description = description.replace(globalFilterRegex, "$1$2").replace("  ", " ").trim();
    }
    return description;
  }
};

// src/lib/Lazy.ts
var Lazy = class {
  constructor(fetch) {
    this.fetch = fetch;
    this._value = void 0;
  }
  get value() {
    if (this._value === void 0) {
      this._value = this.fetch();
    }
    return this._value;
  }
};

// src/Cache.ts
var Cache2 = class {
  constructor({ metadataCache: metadataCache2, vault: vault2, events }) {
    this.metadataCache = metadataCache2;
    this.metadataCacheEventReferences = [];
    this.vault = vault2;
    this.vaultEventReferences = [];
    this.events = events;
    this.eventsEventReferences = [];
    this.tasksMutex = new Mutex();
    this.state = "Cold" /* Cold */;
    this.tasks = [];
    this.loadedAfterFirstResolve = false;
    this.subscribeToCache();
    this.subscribeToVault();
    this.subscribeToEvents();
    this.loadVault();
  }
  unload() {
    for (const eventReference of this.metadataCacheEventReferences) {
      this.metadataCache.offref(eventReference);
    }
    for (const eventReference of this.vaultEventReferences) {
      this.vault.offref(eventReference);
    }
    for (const eventReference of this.eventsEventReferences) {
      this.events.off(eventReference);
    }
  }
  getTasks() {
    return this.tasks;
  }
  getState() {
    return this.state;
  }
  notifySubscribers() {
    this.events.triggerCacheUpdate({
      tasks: this.tasks,
      state: this.state
    });
  }
  subscribeToCache() {
    const resolvedEventeReference = this.metadataCache.on("resolved", () => __async(this, null, function* () {
      if (!this.loadedAfterFirstResolve) {
        this.loadedAfterFirstResolve = true;
        this.loadVault();
      }
    }));
    this.metadataCacheEventReferences.push(resolvedEventeReference);
    const changedEventReference = this.metadataCache.on("changed", (file) => {
      this.tasksMutex.runExclusive(() => {
        this.indexFile(file);
      });
    });
    this.metadataCacheEventReferences.push(changedEventReference);
  }
  subscribeToVault() {
    const { useFilenameAsScheduledDate } = getSettings();
    const createdEventReference = this.vault.on("create", (file) => {
      if (!(file instanceof import_obsidian3.TFile)) {
        return;
      }
      this.tasksMutex.runExclusive(() => {
        this.indexFile(file);
      });
    });
    this.vaultEventReferences.push(createdEventReference);
    const deletedEventReference = this.vault.on("delete", (file) => {
      if (!(file instanceof import_obsidian3.TFile)) {
        return;
      }
      this.tasksMutex.runExclusive(() => {
        this.tasks = this.tasks.filter((task) => {
          return task.path !== file.path;
        });
        this.notifySubscribers();
      });
    });
    this.vaultEventReferences.push(deletedEventReference);
    const renamedEventReference = this.vault.on("rename", (file, oldPath) => {
      if (!(file instanceof import_obsidian3.TFile)) {
        return;
      }
      this.tasksMutex.runExclusive(() => {
        const fallbackDate = new Lazy(() => DateFallback.fromPath(file.path));
        this.tasks = this.tasks.map((task) => {
          if (task.path === oldPath) {
            if (!useFilenameAsScheduledDate) {
              return new Task(__spreadProps(__spreadValues({}, task), { path: file.path }));
            } else {
              return DateFallback.updateTaskPath(task, file.path, fallbackDate.value);
            }
          } else {
            return task;
          }
        });
        this.notifySubscribers();
      });
    });
    this.vaultEventReferences.push(renamedEventReference);
  }
  subscribeToEvents() {
    const requestReference = this.events.onRequestCacheUpdate((handler) => {
      handler({ tasks: this.tasks, state: this.state });
    });
    this.eventsEventReferences.push(requestReference);
  }
  loadVault() {
    return this.tasksMutex.runExclusive(() => __async(this, null, function* () {
      this.state = "Initializing" /* Initializing */;
      yield Promise.all(
        this.vault.getMarkdownFiles().map((file) => {
          return this.indexFile(file);
        })
      );
      this.state = "Warm" /* Warm */;
      this.notifySubscribers();
    }));
  }
  indexFile(file) {
    return __async(this, null, function* () {
      const fileCache = this.metadataCache.getFileCache(file);
      if (fileCache === null || fileCache === void 0) {
        return;
      }
      const oldTasks = this.tasks.filter((task) => {
        return task.path === file.path;
      });
      const listItems = fileCache.listItems;
      let newTasks = [];
      if (listItems !== void 0) {
        const fileContent = yield this.vault.cachedRead(file);
        newTasks = Cache2.getTasksFromFileContent(fileContent, listItems, fileCache, file);
      }
      if (Task.tasksListsIdentical(oldTasks, newTasks)) {
        return;
      }
      if (this.getState() == "Warm" /* Warm */) {
        console.debug(
          `At least one task, its line number or its heading has changed in ${file.path}: triggering a refresh of all active Tasks blocks in Live Preview and Reading mode views.`
        );
      }
      this.tasks = this.tasks.filter((task) => {
        return task.path !== file.path;
      });
      this.tasks.push(...newTasks);
      this.notifySubscribers();
    });
  }
  static getTasksFromFileContent(fileContent, listItems, fileCache, file) {
    const tasks = [];
    const fileLines = fileContent.split("\n");
    const dateFromFileName = new Lazy(() => DateFallback.fromPath(file.path));
    let currentSection = null;
    let sectionIndex = 0;
    for (const listItem of listItems) {
      if (listItem.task !== void 0) {
        if (currentSection === null || currentSection.position.end.line < listItem.position.start.line) {
          currentSection = Cache2.getSection(listItem.position.start.line, fileCache.sections);
          sectionIndex = 0;
        }
        if (currentSection === null) {
          continue;
        }
        const line = fileLines[listItem.position.start.line];
        const task = Task.fromLine({
          line,
          path: file.path,
          sectionStart: currentSection.position.start.line,
          sectionIndex,
          precedingHeader: Cache2.getPrecedingHeader(listItem.position.start.line, fileCache.headings),
          fallbackDate: dateFromFileName.value
        });
        if (task !== null) {
          sectionIndex++;
          tasks.push(task);
        }
      }
    }
    return tasks;
  }
  static getSection(lineNumberTask, sections) {
    if (sections === void 0) {
      return null;
    }
    for (const section of sections) {
      if (section.position.start.line <= lineNumberTask && section.position.end.line >= lineNumberTask) {
        return section;
      }
    }
    return null;
  }
  static getPrecedingHeader(lineNumberTask, headings) {
    if (headings === void 0) {
      return null;
    }
    let precedingHeader = null;
    for (const heading of headings) {
      if (heading.position.start.line > lineNumberTask) {
        return precedingHeader;
      }
      precedingHeader = heading.heading;
    }
    return precedingHeader;
  }
};

// src/Commands/CreateOrEdit.ts
var import_obsidian5 = require("obsidian");

// src/TaskModal.ts
var import_obsidian4 = require("obsidian");

// node_modules/svelte/internal/index.mjs
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function svg_element(name) {
  return document.createElementNS("http://www.w3.org/2000/svg", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
  return function(event) {
    event.preventDefault();
    return fn.call(this, event);
  };
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? "add" : "remove"](name);
}
var HtmlTag = class {
  constructor(is_svg = false) {
    this.is_svg = false;
    this.is_svg = is_svg;
    this.e = this.n = null;
  }
  c(html) {
    this.h(html);
  }
  m(html, target, anchor = null) {
    if (!this.e) {
      if (this.is_svg)
        this.e = svg_element(target.nodeName);
      else
        this.e = element(target.nodeName);
      this.t = target;
      this.c(html);
    }
    this.i(anchor);
  }
  h(html) {
    this.e.innerHTML = html;
    this.n = Array.from(this.e.childNodes);
  }
  i(anchor) {
    for (let i = 0; i < this.n.length; i += 1) {
      insert(this.t, this.n[i], anchor);
    }
  }
  p(html) {
    this.d();
    this.h(html);
    this.i(this.a);
  }
  d() {
    this.n.forEach(detach);
  }
};
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var outroing = /* @__PURE__ */ new Set();
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
function mount_component(component, target, anchor, customElement) {
  const { fragment, on_mount, on_destroy, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = on_mount.map(run).filter(is_function);
      if (on_destroy) {
        on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance2, create_fragment2, not_equal, props, append_styles, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles && append_styles($$.root);
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: "open" });
    }
    connectedCallback() {
      const { on_mount } = this.$$;
      this.$$.on_disconnect = on_mount.map(run).filter(is_function);
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr2, _oldValue, newValue) {
      this[attr2] = newValue;
    }
    disconnectedCallback() {
      run_all(this.$$.on_disconnect);
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type, callback) {
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};

// src/ui/EditTask.svelte
var chrono = __toESM(require_dist());

// src/DateAbbreviations.ts
var abbreviations = {
  td: "today",
  tm: "tomorrow",
  yd: "yesterday",
  tw: "this week",
  nw: "next week",
  weekend: "sat",
  we: "sat"
};
function doAutocomplete(date) {
  for (const [key, val] of Object.entries(abbreviations)) {
    date = date.replace(RegExp(`\\b${key}\\s`, "i"), val);
  }
  return date;
}

// src/ui/EditTask.svelte
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[28] = list[i].value;
  child_ctx[29] = list[i].label;
  child_ctx[30] = list[i].symbol;
  return child_ctx;
}
function create_if_block(ctx) {
  let span;
  let t_value = ctx[30] + "";
  let t;
  return {
    c() {
      span = element("span");
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_each_block(ctx) {
  let span1;
  let input;
  let input_id_value;
  let input_value_value;
  let input_accesskey_value;
  let t0;
  let label;
  let span0;
  let t1_value = ctx[29] + "";
  let t1;
  let t2;
  let show_if = ctx[30] && ctx[30].charCodeAt(0) >= 256;
  let label_for_value;
  let t3;
  let mounted;
  let dispose;
  let if_block = show_if && create_if_block(ctx);
  return {
    c() {
      span1 = element("span");
      input = element("input");
      t0 = space();
      label = element("label");
      span0 = element("span");
      t1 = text(t1_value);
      t2 = space();
      if (if_block)
        if_block.c();
      t3 = space();
      attr(input, "type", "radio");
      attr(input, "id", input_id_value = "priority-" + ctx[28]);
      input.__value = input_value_value = ctx[28];
      input.value = input.__value;
      attr(input, "accesskey", input_accesskey_value = ctx[8](ctx[29].charAt(0).toLowerCase()));
      ctx[20][0].push(input);
      attr(span0, "class", "accesskey-first");
      attr(label, "for", label_for_value = "priority-" + ctx[28]);
    },
    m(target, anchor) {
      insert(target, span1, anchor);
      append(span1, input);
      input.checked = input.__value === ctx[0].priority;
      append(span1, t0);
      append(span1, label);
      append(label, span0);
      append(span0, t1);
      append(label, t2);
      if (if_block)
        if_block.m(label, null);
      append(span1, t3);
      if (!mounted) {
        dispose = listen(input, "change", ctx[19]);
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & 256 && input_accesskey_value !== (input_accesskey_value = ctx2[8](ctx2[29].charAt(0).toLowerCase()))) {
        attr(input, "accesskey", input_accesskey_value);
      }
      if (dirty[0] & 1) {
        input.checked = input.__value === ctx2[0].priority;
      }
      if (show_if)
        if_block.p(ctx2, dirty);
    },
    d(detaching) {
      if (detaching)
        detach(span1);
      ctx[20][0].splice(ctx[20][0].indexOf(input), 1);
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_fragment(ctx) {
  let div8;
  let form;
  let div0;
  let label0;
  let t3;
  let input0;
  let input0_accesskey_value;
  let t4;
  let div1;
  let label1;
  let t5;
  let label1_for_value;
  let t6;
  let t7;
  let div3;
  let label2;
  let t9;
  let input1;
  let input1_accesskey_value;
  let t10;
  let code0;
  let t11;
  let t12;
  let html_tag;
  let t13;
  let label3;
  let t15;
  let input2;
  let input2_accesskey_value;
  let t16;
  let code1;
  let t17;
  let t18;
  let html_tag_1;
  let t19;
  let label4;
  let t21;
  let input3;
  let input3_accesskey_value;
  let t22;
  let code2;
  let t23;
  let t24;
  let html_tag_2;
  let t25;
  let label5;
  let t29;
  let input4;
  let input4_accesskey_value;
  let t30;
  let code3;
  let t31;
  let t32;
  let html_tag_3;
  let t33;
  let div2;
  let label6;
  let t37;
  let input5;
  let input5_accesskey_value;
  let t38;
  let div6;
  let div4;
  let label7;
  let t40;
  let input6;
  let input6_checked_value;
  let t41;
  let code4;
  let t42_value = ctx[0].status + "";
  let t42;
  let t43;
  let div5;
  let span3;
  let t45;
  let code5;
  let t46;
  let div7;
  let button0;
  let t48;
  let button1;
  let mounted;
  let dispose;
  let each_value = ctx[9];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  return {
    c() {
      div8 = element("div");
      form = element("form");
      div0 = element("div");
      label0 = element("label");
      label0.innerHTML = `Descrip<span class="accesskey">t</span>ion`;
      t3 = space();
      input0 = element("input");
      t4 = space();
      div1 = element("div");
      label1 = element("label");
      t5 = text("Priority");
      t6 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t7 = space();
      div3 = element("div");
      label2 = element("label");
      label2.textContent = "Recurs";
      t9 = space();
      input1 = element("input");
      t10 = space();
      code0 = element("code");
      t11 = text(recurrenceSymbol);
      t12 = space();
      html_tag = new HtmlTag(false);
      t13 = space();
      label3 = element("label");
      label3.textContent = "Due";
      t15 = space();
      input2 = element("input");
      t16 = space();
      code1 = element("code");
      t17 = text(dueDateSymbol);
      t18 = space();
      html_tag_1 = new HtmlTag(false);
      t19 = space();
      label4 = element("label");
      label4.textContent = "Scheduled";
      t21 = space();
      input3 = element("input");
      t22 = space();
      code2 = element("code");
      t23 = text(scheduledDateSymbol);
      t24 = space();
      html_tag_2 = new HtmlTag(false);
      t25 = space();
      label5 = element("label");
      label5.innerHTML = `St<span class="accesskey">a</span>rt`;
      t29 = space();
      input4 = element("input");
      t30 = space();
      code3 = element("code");
      t31 = text(startDateSymbol);
      t32 = space();
      html_tag_3 = new HtmlTag(false);
      t33 = space();
      div2 = element("div");
      label6 = element("label");
      label6.innerHTML = `Only
                    <span class="accesskey-first">future</span> dates:`;
      t37 = space();
      input5 = element("input");
      t38 = space();
      div6 = element("div");
      div4 = element("div");
      label7 = element("label");
      label7.textContent = "Status:";
      t40 = space();
      input6 = element("input");
      t41 = space();
      code4 = element("code");
      t42 = text(t42_value);
      t43 = space();
      div5 = element("div");
      span3 = element("span");
      span3.textContent = "Done on:";
      t45 = space();
      code5 = element("code");
      t46 = space();
      div7 = element("div");
      button0 = element("button");
      button0.textContent = "Apply";
      t48 = space();
      button1 = element("button");
      button1.textContent = "Cancel";
      attr(label0, "for", "description");
      attr(input0, "id", "description");
      attr(input0, "type", "text");
      attr(input0, "class", "tasks-modal-description");
      attr(input0, "placeholder", "Take out the trash");
      attr(input0, "accesskey", input0_accesskey_value = ctx[8]("t"));
      attr(div0, "class", "tasks-modal-section");
      attr(label1, "for", label1_for_value = "priority-" + ctx[0].priority);
      attr(div1, "class", "tasks-modal-section tasks-modal-priorities");
      attr(label2, "for", "recurrence");
      attr(label2, "class", "accesskey-first");
      attr(input1, "id", "description");
      attr(input1, "type", "text");
      attr(input1, "placeholder", "Try 'every 2 weeks on Thursday'.");
      attr(input1, "accesskey", input1_accesskey_value = ctx[8]("r"));
      html_tag.a = null;
      attr(label3, "for", "due");
      attr(label3, "class", "accesskey-first");
      attr(input2, "id", "due");
      attr(input2, "type", "text");
      attr(input2, "placeholder", datePlaceholder);
      attr(input2, "accesskey", input2_accesskey_value = ctx[8]("d"));
      html_tag_1.a = null;
      attr(label4, "for", "scheduled");
      attr(label4, "class", "accesskey-first");
      attr(input3, "id", "scheduled");
      attr(input3, "type", "text");
      attr(input3, "placeholder", datePlaceholder);
      attr(input3, "accesskey", input3_accesskey_value = ctx[8]("s"));
      html_tag_2.a = null;
      attr(label5, "for", "start");
      attr(input4, "id", "start");
      attr(input4, "type", "text");
      attr(input4, "placeholder", datePlaceholder);
      attr(input4, "accesskey", input4_accesskey_value = ctx[8]("a"));
      html_tag_3.a = null;
      attr(label6, "for", "forwardOnly");
      attr(input5, "id", "forwardOnly");
      attr(input5, "type", "checkbox");
      attr(input5, "class", "task-list-item-checkbox tasks-modal-checkbox");
      attr(input5, "accesskey", input5_accesskey_value = ctx[8]("f"));
      attr(div3, "class", "tasks-modal-section tasks-modal-dates");
      attr(label7, "for", "status");
      attr(input6, "id", "status");
      attr(input6, "type", "checkbox");
      attr(input6, "class", "task-list-item-checkbox tasks-modal-checkbox");
      input6.checked = input6_checked_value = ctx[0].status === "Done" /* DONE */;
      input6.disabled = true;
      attr(div6, "class", "tasks-modal-section tasks-modal-status");
      attr(button0, "type", "submit");
      attr(button0, "class", "mod-cta");
      attr(button1, "type", "button");
      attr(div7, "class", "tasks-modal-section tasks-modal-buttons");
      toggle_class(form, "with-accesskeys", ctx[1]);
      attr(div8, "class", "tasks-modal");
    },
    m(target, anchor) {
      insert(target, div8, anchor);
      append(div8, form);
      append(form, div0);
      append(div0, label0);
      append(div0, t3);
      append(div0, input0);
      set_input_value(input0, ctx[0].description);
      ctx[18](input0);
      append(form, t4);
      append(form, div1);
      append(div1, label1);
      append(label1, t5);
      append(div1, t6);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div1, null);
      }
      append(form, t7);
      append(form, div3);
      append(div3, label2);
      append(div3, t9);
      append(div3, input1);
      set_input_value(input1, ctx[0].recurrenceRule);
      append(div3, t10);
      append(div3, code0);
      append(code0, t11);
      append(code0, t12);
      html_tag.m(ctx[6], code0);
      append(div3, t13);
      append(div3, label3);
      append(div3, t15);
      append(div3, input2);
      set_input_value(input2, ctx[0].dueDate);
      append(div3, t16);
      append(div3, code1);
      append(code1, t17);
      append(code1, t18);
      html_tag_1.m(ctx[5], code1);
      append(div3, t19);
      append(div3, label4);
      append(div3, t21);
      append(div3, input3);
      set_input_value(input3, ctx[0].scheduledDate);
      append(div3, t22);
      append(div3, code2);
      append(code2, t23);
      append(code2, t24);
      html_tag_2.m(ctx[4], code2);
      append(div3, t25);
      append(div3, label5);
      append(div3, t29);
      append(div3, input4);
      set_input_value(input4, ctx[0].startDate);
      append(div3, t30);
      append(div3, code3);
      append(code3, t31);
      append(code3, t32);
      html_tag_3.m(ctx[3], code3);
      append(div3, t33);
      append(div3, div2);
      append(div2, label6);
      append(div2, t37);
      append(div2, input5);
      input5.checked = ctx[0].forwardOnly;
      append(form, t38);
      append(form, div6);
      append(div6, div4);
      append(div4, label7);
      append(div4, t40);
      append(div4, input6);
      append(div4, t41);
      append(div4, code4);
      append(code4, t42);
      append(div6, t43);
      append(div6, div5);
      append(div5, span3);
      append(div5, t45);
      append(div5, code5);
      code5.innerHTML = ctx[7];
      append(form, t46);
      append(form, div7);
      append(div7, button0);
      append(div7, t48);
      append(div7, button1);
      if (!mounted) {
        dispose = [
          listen(input0, "input", ctx[17]),
          listen(div1, "keyup", ctx[10]),
          listen(input1, "input", ctx[21]),
          listen(input2, "input", ctx[22]),
          listen(input3, "input", ctx[23]),
          listen(input4, "input", ctx[24]),
          listen(input5, "change", ctx[25]),
          listen(button1, "click", ctx[11]),
          listen(form, "submit", prevent_default(ctx[12]))
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & 256 && input0_accesskey_value !== (input0_accesskey_value = ctx2[8]("t"))) {
        attr(input0, "accesskey", input0_accesskey_value);
      }
      if (dirty[0] & 1 && input0.value !== ctx2[0].description) {
        set_input_value(input0, ctx2[0].description);
      }
      if (dirty[0] & 1 && label1_for_value !== (label1_for_value = "priority-" + ctx2[0].priority)) {
        attr(label1, "for", label1_for_value);
      }
      if (dirty[0] & 769) {
        each_value = ctx2[9];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div1, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty[0] & 256 && input1_accesskey_value !== (input1_accesskey_value = ctx2[8]("r"))) {
        attr(input1, "accesskey", input1_accesskey_value);
      }
      if (dirty[0] & 1 && input1.value !== ctx2[0].recurrenceRule) {
        set_input_value(input1, ctx2[0].recurrenceRule);
      }
      if (dirty[0] & 64)
        html_tag.p(ctx2[6]);
      if (dirty[0] & 256 && input2_accesskey_value !== (input2_accesskey_value = ctx2[8]("d"))) {
        attr(input2, "accesskey", input2_accesskey_value);
      }
      if (dirty[0] & 1 && input2.value !== ctx2[0].dueDate) {
        set_input_value(input2, ctx2[0].dueDate);
      }
      if (dirty[0] & 32)
        html_tag_1.p(ctx2[5]);
      if (dirty[0] & 256 && input3_accesskey_value !== (input3_accesskey_value = ctx2[8]("s"))) {
        attr(input3, "accesskey", input3_accesskey_value);
      }
      if (dirty[0] & 1 && input3.value !== ctx2[0].scheduledDate) {
        set_input_value(input3, ctx2[0].scheduledDate);
      }
      if (dirty[0] & 16)
        html_tag_2.p(ctx2[4]);
      if (dirty[0] & 256 && input4_accesskey_value !== (input4_accesskey_value = ctx2[8]("a"))) {
        attr(input4, "accesskey", input4_accesskey_value);
      }
      if (dirty[0] & 1 && input4.value !== ctx2[0].startDate) {
        set_input_value(input4, ctx2[0].startDate);
      }
      if (dirty[0] & 8)
        html_tag_3.p(ctx2[3]);
      if (dirty[0] & 256 && input5_accesskey_value !== (input5_accesskey_value = ctx2[8]("f"))) {
        attr(input5, "accesskey", input5_accesskey_value);
      }
      if (dirty[0] & 1) {
        input5.checked = ctx2[0].forwardOnly;
      }
      if (dirty[0] & 1 && input6_checked_value !== (input6_checked_value = ctx2[0].status === "Done" /* DONE */)) {
        input6.checked = input6_checked_value;
      }
      if (dirty[0] & 1 && t42_value !== (t42_value = ctx2[0].status + ""))
        set_data(t42, t42_value);
      if (dirty[0] & 128)
        code5.innerHTML = ctx2[7];
      ;
      if (dirty[0] & 2) {
        toggle_class(form, "with-accesskeys", ctx2[1]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div8);
      ctx[18](null);
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
var datePlaceholder = "Try 'Monday' or 'tomorrow', or [td|tm|yd|tw|nw|we] then space.";
function instance($$self, $$props, $$invalidate) {
  let accesskey;
  var _a, _b;
  let { task } = $$props;
  let { onSubmit } = $$props;
  let descriptionInput;
  let editableTask = {
    description: "",
    status: "Todo" /* TODO */,
    priority: "none",
    recurrenceRule: "",
    startDate: "",
    scheduledDate: "",
    dueDate: "",
    doneDate: "",
    forwardOnly: true
  };
  let parsedStartDate = "";
  let parsedScheduledDate = "";
  let parsedDueDate = "";
  let parsedRecurrence = "";
  let parsedDone = "";
  let addGlobalFilterOnSave = false;
  let withAccessKeys = true;
  const priorityOptions = [
    {
      value: "low",
      label: "Low",
      symbol: prioritySymbols.Low
    },
    {
      value: "none",
      label: "Normal",
      symbol: prioritySymbols.None
    },
    {
      value: "medium",
      label: "Medium",
      symbol: prioritySymbols.Medium
    },
    {
      value: "high",
      label: "High",
      symbol: prioritySymbols.High
    }
  ];
  function parseDate3(type, date, forwardDate = void 0) {
    if (!date) {
      return `<i>no ${type} date</i>`;
    }
    const parsed = chrono.parseDate(date, forwardDate, { forwardDate: forwardDate != void 0 });
    if (parsed !== null) {
      return window.moment(parsed).format("YYYY-MM-DD");
    }
    return `<i>invalid ${type} date</i>`;
  }
  onMount(() => {
    const { globalFilter, provideAccessKeys } = getSettings();
    $$invalidate(1, withAccessKeys = provideAccessKeys);
    const description = task.getDescriptionWithoutGlobalFilter();
    if (description != task.description || description.indexOf(globalFilter) == -1)
      addGlobalFilterOnSave = true;
    let priority = "none";
    if (task.priority === "4" /* Low */) {
      priority = "low";
    } else if (task.priority === "2" /* Medium */) {
      priority = "medium";
    } else if (task.priority === "1" /* High */) {
      priority = "high";
    }
    $$invalidate(0, editableTask = {
      description,
      status: task.status,
      priority,
      recurrenceRule: task.recurrence ? task.recurrence.toText() : "",
      startDate: task.startDate ? task.startDate.format("YYYY-MM-DD") : "",
      scheduledDate: task.scheduledDate ? task.scheduledDate.format("YYYY-MM-DD") : "",
      dueDate: task.dueDate ? task.dueDate.format("YYYY-MM-DD") : "",
      doneDate: task.doneDate ? task.doneDate.format("YYYY-MM-DD") : "",
      forwardOnly: true
    });
    setTimeout(
      () => {
        descriptionInput.focus();
      },
      10
    );
  });
  const _onPriorityKeyup = (event) => {
    if (event.key && !event.altKey && !event.ctrlKey) {
      const priorityOption = priorityOptions.find((option) => option.label.charAt(0).toLowerCase() == event.key);
      if (priorityOption) {
        $$invalidate(0, editableTask.priority = priorityOption.value, editableTask);
      }
    }
  };
  const _onClose = () => {
    onSubmit([]);
  };
  const _onSubmit = () => {
    const { globalFilter } = getSettings();
    let description = editableTask.description.trim();
    if (addGlobalFilterOnSave) {
      description = globalFilter + " " + description;
    }
    let startDate = null;
    const parsedStartDate2 = chrono.parseDate(editableTask.startDate, new Date(), { forwardDate: editableTask.forwardOnly });
    if (parsedStartDate2 !== null) {
      startDate = window.moment(parsedStartDate2);
    }
    let scheduledDate = null;
    const parsedScheduledDate2 = chrono.parseDate(editableTask.scheduledDate, new Date(), { forwardDate: editableTask.forwardOnly });
    if (parsedScheduledDate2 !== null) {
      scheduledDate = window.moment(parsedScheduledDate2);
    }
    let dueDate = null;
    const parsedDueDate2 = chrono.parseDate(editableTask.dueDate, new Date(), { forwardDate: editableTask.forwardOnly });
    if (parsedDueDate2 !== null) {
      dueDate = window.moment(parsedDueDate2);
    }
    let recurrence = null;
    if (editableTask.recurrenceRule) {
      recurrence = Recurrence.fromText({
        recurrenceRuleText: editableTask.recurrenceRule,
        startDate,
        scheduledDate,
        dueDate
      });
    }
    let parsedPriority;
    switch (editableTask.priority) {
      case "low":
        parsedPriority = "4" /* Low */;
        break;
      case "medium":
        parsedPriority = "2" /* Medium */;
        break;
      case "high":
        parsedPriority = "1" /* High */;
        break;
      default:
        parsedPriority = "3" /* None */;
    }
    const updatedTask = new Task(Object.assign(Object.assign({}, task), {
      description,
      status: editableTask.status,
      priority: parsedPriority,
      recurrence,
      startDate,
      scheduledDate,
      dueDate,
      doneDate: window.moment(editableTask.doneDate, "YYYY-MM-DD").isValid() ? window.moment(editableTask.doneDate, "YYYY-MM-DD") : null
    }));
    onSubmit([updatedTask]);
  };
  const $$binding_groups = [[]];
  function input0_input_handler() {
    editableTask.description = this.value;
    $$invalidate(0, editableTask);
  }
  function input0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      descriptionInput = $$value;
      $$invalidate(2, descriptionInput);
    });
  }
  function input_change_handler() {
    editableTask.priority = this.__value;
    $$invalidate(0, editableTask);
  }
  function input1_input_handler() {
    editableTask.recurrenceRule = this.value;
    $$invalidate(0, editableTask);
  }
  function input2_input_handler() {
    editableTask.dueDate = this.value;
    $$invalidate(0, editableTask);
  }
  function input3_input_handler() {
    editableTask.scheduledDate = this.value;
    $$invalidate(0, editableTask);
  }
  function input4_input_handler() {
    editableTask.startDate = this.value;
    $$invalidate(0, editableTask);
  }
  function input5_change_handler() {
    editableTask.forwardOnly = this.checked;
    $$invalidate(0, editableTask);
  }
  $$self.$$set = ($$props2) => {
    if ("task" in $$props2)
      $$invalidate(13, task = $$props2.task);
    if ("onSubmit" in $$props2)
      $$invalidate(14, onSubmit = $$props2.onSubmit);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & 2) {
      $:
        $$invalidate(8, accesskey = (key) => withAccessKeys ? key : null);
    }
    if ($$self.$$.dirty[0] & 1) {
      $: {
        $$invalidate(0, editableTask.startDate = doAutocomplete(editableTask.startDate), editableTask);
        $$invalidate(3, parsedStartDate = parseDate3("start", editableTask.startDate, editableTask.forwardOnly ? new Date() : void 0));
      }
    }
    if ($$self.$$.dirty[0] & 1) {
      $: {
        $$invalidate(0, editableTask.scheduledDate = doAutocomplete(editableTask.scheduledDate), editableTask);
        $$invalidate(4, parsedScheduledDate = parseDate3("scheduled", editableTask.scheduledDate, editableTask.forwardOnly ? new Date() : void 0));
      }
    }
    if ($$self.$$.dirty[0] & 1) {
      $: {
        $$invalidate(0, editableTask.dueDate = doAutocomplete(editableTask.dueDate), editableTask);
        $$invalidate(5, parsedDueDate = parseDate3("due", editableTask.dueDate, editableTask.forwardOnly ? new Date() : void 0));
      }
    }
    if ($$self.$$.dirty[0] & 98305) {
      $: {
        if (!editableTask.recurrenceRule) {
          $$invalidate(6, parsedRecurrence = "<i>not recurring</>");
        } else {
          $$invalidate(6, parsedRecurrence = $$invalidate(16, _b = $$invalidate(15, _a = Recurrence.fromText({
            recurrenceRuleText: editableTask.recurrenceRule,
            startDate: null,
            scheduledDate: null,
            dueDate: null
          })) === null || _a === void 0 ? void 0 : _a.toText()) !== null && _b !== void 0 ? _b : "<i>invalid recurrence rule</i>");
        }
      }
    }
    if ($$self.$$.dirty[0] & 1) {
      $: {
        $$invalidate(7, parsedDone = parseDate3("done", editableTask.doneDate));
      }
    }
  };
  return [
    editableTask,
    withAccessKeys,
    descriptionInput,
    parsedStartDate,
    parsedScheduledDate,
    parsedDueDate,
    parsedRecurrence,
    parsedDone,
    accesskey,
    priorityOptions,
    _onPriorityKeyup,
    _onClose,
    _onSubmit,
    task,
    onSubmit,
    _a,
    _b,
    input0_input_handler,
    input0_binding,
    input_change_handler,
    $$binding_groups,
    input1_input_handler,
    input2_input_handler,
    input3_input_handler,
    input4_input_handler,
    input5_change_handler
  ];
}
var EditTask = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { task: 13, onSubmit: 14 }, null, [-1, -1]);
  }
};
var EditTask_default = EditTask;

// src/TaskModal.ts
var TaskModal = class extends import_obsidian4.Modal {
  constructor({ app, task, onSubmit }) {
    super(app);
    this.task = task;
    this.onSubmit = (updatedTasks) => {
      updatedTasks.length && onSubmit(updatedTasks);
      this.close();
    };
  }
  onOpen() {
    this.titleEl.setText("Create or edit Task");
    const { contentEl } = this;
    new EditTask_default({
      target: contentEl,
      props: { task: this.task, onSubmit: this.onSubmit }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/Commands/CreateOrEditTaskParser.ts
var taskFromLine = ({ line, path }) => {
  var _a;
  const fallbackDate = DateFallback.fromPath(path);
  const task = Task.fromLine({
    line,
    path,
    sectionStart: 0,
    sectionIndex: 0,
    precedingHeader: null,
    fallbackDate
  });
  if (task !== null) {
    return task;
  }
  const nonTaskMatch = line.match(TaskRegularExpressions.nonTaskRegex);
  if (nonTaskMatch === null) {
    console.error("Tasks: Cannot create task on line:", line);
    return new Task({
      status: "Todo" /* TODO */,
      description: "",
      path,
      indentation: "",
      listMarker: "-",
      originalStatusCharacter: " ",
      priority: "3" /* None */,
      startDate: null,
      scheduledDate: null,
      dueDate: null,
      doneDate: null,
      recurrence: null,
      sectionStart: 0,
      sectionIndex: 0,
      precedingHeader: null,
      blockLink: "",
      tags: [],
      originalMarkdown: "",
      scheduledDateIsInferred: false
    });
  }
  const indentation = nonTaskMatch[1];
  const listMarker = "-";
  const statusString = (_a = nonTaskMatch[3]) != null ? _a : " ";
  const status = statusString === " " ? "Todo" /* TODO */ : "Done" /* DONE */;
  let description = nonTaskMatch[4];
  const blockLinkMatch = line.match(TaskRegularExpressions.blockLinkRegex);
  const blockLink = blockLinkMatch !== null ? blockLinkMatch[0] : "";
  if (blockLink !== "") {
    description = description.replace(TaskRegularExpressions.blockLinkRegex, "");
  }
  return new Task({
    status,
    description,
    path,
    indentation,
    listMarker,
    originalStatusCharacter: statusString,
    blockLink,
    priority: "3" /* None */,
    startDate: null,
    scheduledDate: null,
    dueDate: null,
    doneDate: null,
    recurrence: null,
    sectionStart: 0,
    sectionIndex: 0,
    precedingHeader: null,
    tags: [],
    originalMarkdown: "",
    scheduledDateIsInferred: false
  });
};

// src/Commands/CreateOrEdit.ts
var createOrEdit = (checking, editor, view, app) => {
  var _a;
  if (checking) {
    return view instanceof import_obsidian5.MarkdownView;
  }
  if (!(view instanceof import_obsidian5.MarkdownView)) {
    return;
  }
  const path = (_a = view.file) == null ? void 0 : _a.path;
  if (path === void 0) {
    return;
  }
  const cursorPosition = editor.getCursor();
  const lineNumber = cursorPosition.line;
  const line = editor.getLine(lineNumber);
  const task = taskFromLine({ line, path });
  const onSubmit = (updatedTasks) => {
    const serialized = DateFallback.removeInferredStatusIfNeeded(task, updatedTasks).map((task2) => task2.toFileLineString()).join("\n");
    editor.setLine(lineNumber, serialized);
  };
  const taskModal = new TaskModal({
    app,
    task,
    onSubmit
  });
  taskModal.open();
};

// src/Commands/ToggleDone.ts
var import_obsidian6 = require("obsidian");
var toggleDone = (checking, editor, view) => {
  var _a;
  if (checking) {
    if (!(view instanceof import_obsidian6.MarkdownView)) {
      return false;
    }
    return true;
  }
  if (!(view instanceof import_obsidian6.MarkdownView)) {
    return;
  }
  const path = (_a = view.file) == null ? void 0 : _a.path;
  if (path === void 0) {
    return;
  }
  const origCursorPos = editor.getCursor();
  const lineNumber = origCursorPos.line;
  const line = editor.getLine(lineNumber);
  const toggledLine = toggleLine(line, path);
  editor.setLine(lineNumber, toggledLine);
  editor.setCursor({
    line: origCursorPos.line,
    ch: calculateCursorOffset(origCursorPos.ch, line, toggledLine)
  });
};
var toggleLine = (line, path) => {
  let toggledLine = line;
  const task = Task.fromLine({
    line,
    path,
    sectionStart: 0,
    sectionIndex: 0,
    precedingHeader: null,
    fallbackDate: null
  });
  if (task !== null) {
    toggledLine = toggleTask(task);
  } else {
    const regexMatch = line.match(TaskRegularExpressions.taskRegex);
    if (regexMatch !== null) {
      const statusString = regexMatch[2].toLowerCase();
      const newStatusString = statusString === " " ? "x" : " ";
      toggledLine = line.replace(TaskRegularExpressions.taskRegex, `$1- [${newStatusString}] $3`);
    } else if (TaskRegularExpressions.listItemRegex.test(line)) {
      toggledLine = line.replace(TaskRegularExpressions.listItemRegex, "$1$2 [ ]");
    } else {
      toggledLine = line.replace(TaskRegularExpressions.indentationRegex, "$1- ");
    }
  }
  return toggledLine;
};
var toggleTask = (task) => {
  const toggledTasks = task.toggle();
  const serialized = toggledTasks.map((task2) => task2.toFileLineString()).join("\n");
  return serialized;
};
var calculateCursorOffset = (origCursorCh, line, toggledLine) => {
  let newLineLen = toggledLine.length;
  if (newLineLen <= line.length) {
    return origCursorCh >= toggledLine.length ? newLineLen : origCursorCh;
  }
  const doneDateLength = " \u2705 YYYY-MM-DD".length;
  if (toggledLine.match(TaskRegularExpressions.doneDateRegex) && newLineLen - line.length >= doneDateLength) {
    newLineLen -= doneDateLength;
  }
  if (newLineLen >= 2 * line.length && toggledLine.search(".+\n.+") !== -1) {
    return origCursorCh + newLineLen - line.length;
  }
  const firstListItemChar = toggledLine.search(/[-*]/);
  if (origCursorCh < firstListItemChar) {
    return origCursorCh;
  }
  return origCursorCh + newLineLen - line.length;
};

// src/Commands/index.ts
var Commands = class {
  get app() {
    return this.plugin.app;
  }
  constructor({ plugin }) {
    this.plugin = plugin;
    plugin.addCommand({
      id: "edit-task",
      name: "Create or edit task",
      icon: "pencil",
      editorCheckCallback: (checking, editor, view) => {
        return createOrEdit(checking, editor, view, this.app);
      }
    });
    plugin.addCommand({
      id: "toggle-done",
      name: "Toggle task done",
      icon: "check-in-circle",
      editorCheckCallback: toggleDone
    });
  }
};

// src/TasksEvents.ts
var TasksEvents = class {
  constructor({ obsidianEvents }) {
    this.obsidianEvents = obsidianEvents;
  }
  onCacheUpdate(handler) {
    return this.obsidianEvents.on("obsidian-tasks-plugin:cache-update" /* CacheUpdate */, handler);
  }
  triggerCacheUpdate(cacheData) {
    this.obsidianEvents.trigger("obsidian-tasks-plugin:cache-update" /* CacheUpdate */, cacheData);
  }
  onRequestCacheUpdate(handler) {
    return this.obsidianEvents.on("obsidian-tasks-plugin:request-cache-update" /* RequestCacheUpdate */, handler);
  }
  triggerRequestCacheUpdate(fn) {
    this.obsidianEvents.trigger("obsidian-tasks-plugin:request-cache-update" /* RequestCacheUpdate */, fn);
  }
  off(eventRef) {
    this.obsidianEvents.offref(eventRef);
  }
};

// src/InlineRenderer.ts
var InlineRenderer = class {
  constructor({ plugin }) {
    this.markdownPostProcessor = this._markdownPostProcessor.bind(this);
    plugin.registerMarkdownPostProcessor(this._markdownPostProcessor.bind(this));
  }
  _markdownPostProcessor(element2, context) {
    return __async(this, null, function* () {
      var _a;
      const { globalFilter } = getSettings();
      const renderedElements = element2.findAll(".task-list-item").filter((taskItem) => {
        var _a2;
        const linesText = (_a2 = taskItem.textContent) == null ? void 0 : _a2.split("\n");
        if (linesText === void 0) {
          return false;
        }
        let firstLineText = null;
        for (let i = 0; i < linesText.length; i = i + 1) {
          if (linesText[i] !== "") {
            firstLineText = linesText[i];
            break;
          }
        }
        if (firstLineText === null) {
          return false;
        }
        return firstLineText.includes(globalFilter);
      });
      if (renderedElements.length === 0) {
        return;
      }
      const path = context.sourcePath;
      const section = context.getSectionInfo(element2);
      if (section === null) {
        return;
      }
      const fileLines = section.text.split("\n");
      let sectionIndex = 0;
      const fileTasks = [];
      for (let lineNumber = section.lineStart; lineNumber <= section.lineEnd; lineNumber++) {
        const line = fileLines[lineNumber];
        if (line === void 0) {
          continue;
        }
        const task = Task.fromLine({
          line,
          path,
          sectionStart: section.lineStart,
          sectionIndex,
          precedingHeader: null,
          fallbackDate: null
        });
        if (task !== null) {
          fileTasks.push(task);
          sectionIndex++;
        }
      }
      for (let sectionIndex2 = 0; sectionIndex2 < renderedElements.length; sectionIndex2++) {
        const task = fileTasks[sectionIndex2];
        const renderedElement = renderedElements[sectionIndex2];
        if (task === void 0 || renderedElement === void 0) {
          continue;
        }
        const dataLine = (_a = renderedElement.getAttr("data-line")) != null ? _a : "0";
        const listIndex = Number.parseInt(dataLine, 10);
        const taskElement = yield task.toLi({
          parentUlElement: element2,
          listIndex
        });
        const renderedChildren = renderedElement.childNodes;
        for (let i = 0; i < renderedChildren.length; i = i + 1) {
          const renderedChild = renderedChildren[i];
          if (renderedChild.nodeName.toLowerCase() === "div") {
            taskElement.prepend(renderedChild);
          } else if (renderedChild.nodeName.toLowerCase() === "ul") {
            taskElement.append(renderedChild);
          }
        }
        const originalFootnotes = renderedElement.querySelectorAll("[data-footnote-id]");
        const newFootnotes = taskElement.querySelectorAll("[data-footnote-id]");
        if (originalFootnotes.length === newFootnotes.length) {
          for (let i = 0; i < originalFootnotes.length; i++) {
            newFootnotes[i].replaceWith(originalFootnotes[i]);
          }
        }
        renderedElement.replaceWith(taskElement);
      }
    });
  }
};

// src/LivePreviewExtension.ts
var import_view = require("@codemirror/view");
var import_obsidian7 = require("obsidian");
var newLivePreviewExtension = () => {
  return import_view.ViewPlugin.fromClass(LivePreviewExtension);
};
var LivePreviewExtension = class {
  constructor(view) {
    this.view = view;
    this.handleClickEvent = this.handleClickEvent.bind(this);
    this.view.dom.addEventListener("click", this.handleClickEvent);
  }
  destroy() {
    this.view.dom.removeEventListener("click", this.handleClickEvent);
  }
  handleClickEvent(event) {
    const { target } = event;
    if (!target || !(target instanceof HTMLInputElement) || target.type !== "checkbox") {
      return false;
    }
    const ancestor = target.closest("ul.plugin-tasks-query-result, div.callout-content");
    if (ancestor) {
      if (ancestor.matches("div.callout-content")) {
        const msg = 'obsidian-tasks-plugin warning: Tasks cannot add or remove completion dates or make the next copy of a recurring task for tasks written inside a callout when you click their checkboxes in Live Preview. \nIf you wanted Tasks to do these things, please undo your change, then either click the line of the task and use the "Toggle Task Done" command, or switch to Reading View to click the checkbox.';
        console.warn(msg);
        new import_obsidian7.Notice(msg, 45e3);
      }
      return false;
    }
    const { state } = this.view;
    const position = this.view.posAtDOM(target);
    const line = state.doc.lineAt(position);
    const task = Task.fromLine({
      line: line.text,
      path: "",
      sectionStart: 0,
      sectionIndex: 0,
      precedingHeader: null,
      fallbackDate: null
    });
    console.debug(`Live Preview Extension: toggle called. Position: ${position} Line: ${line.text}`);
    if (task === null) {
      return false;
    }
    event.preventDefault();
    const toggled = task.toggle();
    const toggledString = toggled.map((t) => t.toFileLineString()).join(state.lineBreak);
    const transaction = state.update({
      changes: {
        from: line.from,
        to: line.to,
        insert: toggledString
      }
    });
    this.view.dispatch(transaction);
    const desiredCheckedStatus = target.checked;
    setTimeout(() => {
      target.checked = desiredCheckedStatus;
    }, 1);
    return true;
  }
};

// src/QueryRenderer.ts
var import_obsidian8 = require("obsidian");

// src/Query/Matchers/IStringMatcher.ts
var IStringMatcher = class {
  matchesAnyOf(stringsToSearch) {
    return stringsToSearch.some((s) => this.matches(s));
  }
};

// src/Query/Matchers/SubstringMatcher.ts
var SubstringMatcher = class extends IStringMatcher {
  constructor(stringToFind) {
    super();
    this.stringToFind = stringToFind;
  }
  matches(stringToSearch) {
    return SubstringMatcher.stringIncludesCaseInsensitive(stringToSearch, this.stringToFind);
  }
  static stringIncludesCaseInsensitive(haystack, needle) {
    return haystack.toLocaleLowerCase().includes(needle.toLocaleLowerCase());
  }
};

// src/Query/Matchers/RegexMatcher.ts
var RegexMatcher = class extends IStringMatcher {
  constructor(regex) {
    super();
    this.regex = regex;
  }
  static validateAndConstruct(regexInput) {
    const regexPattern = /\/((?![*+?])(?:[^\r\n[/\\]|\\.|\[(?:[^\r\n\]\\]|\\.)*])+)\/((?:g(?:im?|mi?)?|i(?:gm?|mg?)?|m(?:gi?|ig?)?)?)/;
    const query = regexInput.match(regexPattern);
    if (query !== null) {
      const regExp = new RegExp(query[1], query[2]);
      return new RegexMatcher(regExp);
    } else {
      return null;
    }
  }
  matches(stringToSearch) {
    return stringToSearch.match(this.regex) !== null;
  }
};

// src/Query/Explain/Explanation.ts
var Explanation = class {
  constructor(description, children2 = [], symbol = "") {
    this.description = description;
    this.symbol = symbol;
    this.children = children2;
  }
  static booleanAnd(children2) {
    return this.combineOrCreateExplanation("All of", children2, "AND");
  }
  static booleanOr(children2) {
    return this.combineOrCreateExplanation("At least one of", children2, "OR");
  }
  static booleanNot(children2) {
    return new Explanation("None of", children2, "NOT");
  }
  static booleanXor(children2) {
    return new Explanation("Exactly one of", children2, "XOR");
  }
  asString(currentIndentation = "") {
    if (this.children.length == 0) {
      return currentIndentation + this.description;
    }
    let result = currentIndentation + `${this.symbol}`;
    if (this.children.length > 1) {
      result += ` (${this.description})`;
    }
    result += ":";
    const newIndentation = currentIndentation + "  ";
    for (let i = 0; i < this.children.length; i++) {
      result += `
${this.children[i].asString(newIndentation)}`;
    }
    return result;
  }
  static combineOrCreateExplanation(description, children2, symbol) {
    if (children2.length === 2) {
      const child0 = children2[0];
      const child1 = children2[1];
      if (child0.symbol === symbol && child1.symbol === "") {
        child0.children.push(child1);
        return child0;
      }
    }
    return new Explanation(description, children2, symbol);
  }
};

// src/Query/Filter/Field.ts
var Field = class {
  canCreateFilterForLine(line) {
    return Field.lineMatchesFilter(this.filterRegExp(), line);
  }
  static lineMatchesFilter(filter, line) {
    if (filter) {
      return filter.test(line);
    } else {
      return false;
    }
  }
  static getMatch(filterRegExp, line) {
    if (filterRegExp) {
      return line.match(filterRegExp);
    } else {
      return null;
    }
  }
};

// src/Query/Filter/Filter.ts
var Filter = class {
  constructor(instruction, filterFunction, explanation) {
    this.instruction = instruction;
    this.explanation = explanation;
    this.filterFunction = filterFunction;
  }
  explainFilterIndented(indent) {
    const explanation = this.explanation;
    const unindentedExplanation = explanation.asString();
    if (unindentedExplanation === this.instruction) {
      return `${indent}${this.instruction}
`;
    } else {
      return `${indent}${this.instruction} =>
${explanation.asString("  ")}
`;
    }
  }
};
var FilterOrErrorMessage = class {
  constructor(instruction) {
    this.instruction = instruction;
  }
  get filter() {
    return this._filter;
  }
  set filter(value) {
    this._filter = value;
  }
  get filterFunction() {
    if (this._filter) {
      return this._filter.filterFunction;
    } else {
      return void 0;
    }
  }
  static fromFilter(filter) {
    const result = new FilterOrErrorMessage(filter.instruction);
    result.filter = filter;
    return result;
  }
  static fromError(instruction, errorMessage) {
    const result = new FilterOrErrorMessage(instruction);
    result.error = errorMessage;
    return result;
  }
};

// src/Query/Filter/TextField.ts
var TextField = class extends Field {
  createFilterOrErrorMessage(line) {
    const match = Field.getMatch(this.filterRegExp(), line);
    if (match === null) {
      return FilterOrErrorMessage.fromError(line, `do not understand query filter (${this.fieldName()})`);
    }
    const [_, filterOperator, filterValue] = match;
    let matcher = null;
    if (filterOperator.includes("include")) {
      matcher = new SubstringMatcher(filterValue);
    } else if (filterOperator.includes("regex")) {
      matcher = RegexMatcher.validateAndConstruct(filterValue);
      if (matcher === null) {
        return FilterOrErrorMessage.fromError(
          line,
          `cannot parse regex (${this.fieldName()}); check your leading and trailing slashes for your query`
        );
      }
    }
    if (matcher === null) {
      return FilterOrErrorMessage.fromError(line, `do not understand query filter (${this.fieldName()})`);
    }
    const negate = filterOperator.match(/not/) !== null;
    const filter = new Filter(line, this.getFilter(matcher, negate), new Explanation(line));
    return FilterOrErrorMessage.fromFilter(filter);
  }
  static stringIncludesCaseInsensitive(haystack, needle) {
    return SubstringMatcher.stringIncludesCaseInsensitive(haystack, needle);
  }
  fieldPattern() {
    return this.fieldName();
  }
  filterOperatorPattern() {
    return "includes|does not include|regex matches|regex does not match";
  }
  filterRegExp() {
    return new RegExp(`^(?:${this.fieldPattern()}) (${this.filterOperatorPattern()}) (.*)`);
  }
  getFilter(matcher, negate) {
    return (task) => {
      const match = matcher.matches(this.value(task));
      return negate ? !match : match;
    };
  }
};

// src/Query/Filter/DescriptionField.ts
var DescriptionField = class extends TextField {
  fieldName() {
    return "description";
  }
  value(task) {
    const globalFilter = getSettings().globalFilter;
    return task.description.replace(globalFilter, "").trim();
  }
};

// src/Query/DateParser.ts
var chrono2 = __toESM(require_dist());
var DateParser = class {
  static parseDate(input, forwardDate = false) {
    return window.moment(
      chrono2.parseDate(input, void 0, {
        forwardDate
      })
    ).startOf("day");
  }
};

// src/Query/Filter/FilterInstruction.ts
var FilterInstruction = class {
  constructor(instruction, filter) {
    this._instruction = instruction;
    this._filter = filter;
  }
  canCreateFilterForLine(line) {
    return line == this._instruction;
  }
  createFilterOrErrorMessage(line) {
    const result = new FilterOrErrorMessage(line);
    if (line === this._instruction) {
      result.filter = new Filter(line, this._filter, new Explanation(line));
      return result;
    }
    result.error = `do not understand filter: ${line}`;
    return result;
  }
};

// src/Query/Filter/FilterInstructions.ts
var FilterInstructions = class {
  constructor() {
    this._filters = [];
  }
  add(instruction, filter) {
    this._filters.push(new FilterInstruction(instruction, filter));
  }
  canCreateFilterForLine(line) {
    for (const filter of this._filters) {
      if (filter.canCreateFilterForLine(line)) {
        return true;
      }
    }
    return false;
  }
  createFilterOrErrorMessage(line) {
    for (const filter of this._filters) {
      const x = filter.createFilterOrErrorMessage(line);
      if (x.error === void 0) {
        return x;
      }
    }
    const result = new FilterOrErrorMessage(line);
    result.error = `do not understand filter: ${line}`;
    return result;
  }
};

// src/Query/Filter/DateField.ts
var DateField = class extends Field {
  constructor() {
    super();
    this.filterInstructions = new FilterInstructions();
    this.filterInstructions.add(`has ${this.fieldName()} date`, (task) => this.date(task) !== null);
    this.filterInstructions.add(`no ${this.fieldName()} date`, (task) => this.date(task) === null);
    this.filterInstructions.add(`${this.fieldName()} date is invalid`, (task) => {
      const date = this.date(task);
      return date !== null && !date.isValid();
    });
  }
  canCreateFilterForLine(line) {
    if (this.filterInstructions.canCreateFilterForLine(line)) {
      return true;
    }
    return super.canCreateFilterForLine(line);
  }
  createFilterOrErrorMessage(line) {
    const filterResult = this.filterInstructions.createFilterOrErrorMessage(line);
    if (filterResult.filter !== void 0) {
      return filterResult;
    }
    const result = new FilterOrErrorMessage(line);
    const match = Field.getMatch(this.filterRegExp(), line);
    let filterFunction;
    if (match !== null) {
      const filterDate = DateParser.parseDate(match[2]);
      if (!filterDate.isValid()) {
        result.error = "do not understand " + this.fieldName() + " date";
      } else {
        let relative;
        if (match[1] === "before") {
          filterFunction = (task) => {
            const date = this.date(task);
            return date ? date.isBefore(filterDate) : this.filterResultIfFieldMissing();
          };
          relative = " " + match[1];
        } else if (match[1] === "after") {
          filterFunction = (task) => {
            const date = this.date(task);
            return date ? date.isAfter(filterDate) : this.filterResultIfFieldMissing();
          };
          relative = " " + match[1];
        } else {
          filterFunction = (task) => {
            const date = this.date(task);
            return date ? date.isSame(filterDate) : this.filterResultIfFieldMissing();
          };
          relative = " on";
        }
        const explanation = DateField.getExplanationString(
          this.fieldName(),
          relative,
          this.filterResultIfFieldMissing(),
          filterDate
        );
        result.filter = new Filter(line, filterFunction, new Explanation(explanation));
      }
    } else {
      result.error = "do not understand query filter (" + this.fieldName() + " date)";
    }
    return result;
  }
  static getExplanationString(fieldName, relationshipPrefixedWithSpace, filterResultIfFieldMissing, filterDate) {
    const actualDate = filterDate.format("YYYY-MM-DD (dddd Do MMMM YYYY)");
    let result = `${fieldName} date is${relationshipPrefixedWithSpace} ${actualDate}`;
    if (filterResultIfFieldMissing) {
      result += ` OR no ${fieldName} date`;
    }
    return result;
  }
};

// src/Query/Filter/DoneDateField.ts
var _DoneDateField = class extends DateField {
  filterRegExp() {
    return _DoneDateField.doneRegexp;
  }
  fieldName() {
    return "done";
  }
  date(task) {
    return task.doneDate;
  }
  filterResultIfFieldMissing() {
    return false;
  }
};
var DoneDateField = _DoneDateField;
DoneDateField.doneRegexp = /^done (before|after|on)? ?(.*)/;

// src/Query/Filter/DueDateField.ts
var _DueDateField = class extends DateField {
  filterRegExp() {
    return _DueDateField.dueRegexp;
  }
  fieldName() {
    return "due";
  }
  date(task) {
    return task.dueDate;
  }
  filterResultIfFieldMissing() {
    return false;
  }
};
var DueDateField = _DueDateField;
DueDateField.dueRegexp = /^due (before|after|on)? ?(.*)/;

// src/Query/Filter/FilterInstructionsBasedField.ts
var FilterInstructionsBasedField = class extends Field {
  constructor() {
    super(...arguments);
    this._filters = new FilterInstructions();
  }
  canCreateFilterForLine(line) {
    return this._filters.canCreateFilterForLine(line);
  }
  createFilterOrErrorMessage(line) {
    return this._filters.createFilterOrErrorMessage(line);
  }
  filterRegExp() {
    return null;
  }
};

// src/Query/Filter/ExcludeSubItemsField.ts
var ExcludeSubItemsField = class extends FilterInstructionsBasedField {
  constructor() {
    super();
    this._filters.add("exclude sub-items", (task) => {
      if (task.indentation === "")
        return true;
      const lastBlockquoteMark = task.indentation.lastIndexOf(">");
      if (lastBlockquoteMark === -1)
        return false;
      return /^ ?$/.test(task.indentation.slice(lastBlockquoteMark + 1));
    });
  }
  fieldName() {
    return "exclude";
  }
};

// src/Query/Filter/HeadingField.ts
var HeadingField = class extends TextField {
  fieldName() {
    return "heading";
  }
  value(task) {
    if (task.precedingHeader) {
      return task.precedingHeader;
    } else {
      return "";
    }
  }
};

// src/Query/Filter/PathField.ts
var PathField = class extends TextField {
  fieldName() {
    return "path";
  }
  value(task) {
    return task.path;
  }
};

// src/Query/Filter/PriorityField.ts
var _PriorityField = class extends Field {
  createFilterOrErrorMessage(line) {
    const result = new FilterOrErrorMessage(line);
    const priorityMatch = Field.getMatch(this.filterRegExp(), line);
    if (priorityMatch !== null) {
      const filterPriorityString = priorityMatch[5];
      let filterPriority = null;
      switch (filterPriorityString) {
        case "low":
          filterPriority = "4" /* Low */;
          break;
        case "none":
          filterPriority = "3" /* None */;
          break;
        case "medium":
          filterPriority = "2" /* Medium */;
          break;
        case "high":
          filterPriority = "1" /* High */;
          break;
      }
      if (filterPriority === null) {
        result.error = "do not understand priority";
        return result;
      }
      let explanation = line;
      let filter;
      switch (priorityMatch[3]) {
        case "above":
          filter = (task) => task.priority.localeCompare(filterPriority) < 0;
          break;
        case "below":
          filter = (task) => task.priority.localeCompare(filterPriority) > 0;
          break;
        case "not":
          filter = (task) => task.priority !== filterPriority;
          break;
        default:
          filter = (task) => task.priority === filterPriority;
          explanation = `${this.fieldName()} is ${filterPriorityString}`;
      }
      result.filter = new Filter(line, filter, new Explanation(explanation));
    } else {
      result.error = "do not understand query filter (priority)";
    }
    return result;
  }
  fieldName() {
    return "priority";
  }
  filterRegExp() {
    return _PriorityField.priorityRegexp;
  }
};
var PriorityField = _PriorityField;
PriorityField.priorityRegexp = /^priority(\s+is)?(\s+(above|below|not))?(\s+(low|none|medium|high))$/;

// src/Query/Filter/ScheduledDateField.ts
var _ScheduledDateField = class extends DateField {
  filterRegExp() {
    return _ScheduledDateField.scheduledRegexp;
  }
  fieldName() {
    return "scheduled";
  }
  date(task) {
    return task.scheduledDate;
  }
  filterResultIfFieldMissing() {
    return false;
  }
};
var ScheduledDateField = _ScheduledDateField;
ScheduledDateField.scheduledRegexp = /^scheduled (before|after|on)? ?(.*)/;

// src/Query/Filter/StartDateField.ts
var _StartDateField = class extends DateField {
  filterRegExp() {
    return _StartDateField.startRegexp;
  }
  fieldName() {
    return "start";
  }
  date(task) {
    return task.startDate;
  }
  filterResultIfFieldMissing() {
    return true;
  }
};
var StartDateField = _StartDateField;
StartDateField.startRegexp = /^starts (before|after|on)? ?(.*)/;

// src/Query/Filter/HappensDateField.ts
var _HappensDateField = class extends Field {
  constructor() {
    super();
    this.filterInstructions = new FilterInstructions();
    this.filterInstructions.add(
      _HappensDateField.instructionForFieldPresence,
      (task) => this.dates(task).some((date) => date !== null)
    );
    this.filterInstructions.add(
      _HappensDateField.instructionForFieldAbsence,
      (task) => !this.dates(task).some((date) => date !== null)
    );
  }
  canCreateFilterForLine(line) {
    if (this.filterInstructions.canCreateFilterForLine(line)) {
      return true;
    }
    return super.canCreateFilterForLine(line);
  }
  createFilterOrErrorMessage(line) {
    const filterResult = this.filterInstructions.createFilterOrErrorMessage(line);
    if (filterResult.filter !== void 0) {
      return filterResult;
    }
    const result = new FilterOrErrorMessage(line);
    const happensMatch = Field.getMatch(this.filterRegExp(), line);
    if (happensMatch !== null) {
      const filterDate = DateParser.parseDate(happensMatch[2]);
      if (!filterDate.isValid()) {
        result.error = "do not understand happens date";
      } else {
        let filterFunction;
        let relative;
        if (happensMatch[1] === "before") {
          filterFunction = (task) => {
            return this.dates(task).some((date) => date && date.isBefore(filterDate));
          };
          relative = " " + happensMatch[1];
        } else if (happensMatch[1] === "after") {
          filterFunction = (task) => {
            return this.dates(task).some((date) => date && date.isAfter(filterDate));
          };
          relative = " " + happensMatch[1];
        } else {
          filterFunction = (task) => {
            return this.dates(task).some((date) => date && date.isSame(filterDate));
          };
          relative = " on";
        }
        const explanation = DateField.getExplanationString(
          "due, start or scheduled",
          relative,
          false,
          filterDate
        );
        result.filter = new Filter(line, filterFunction, new Explanation(explanation));
      }
    } else {
      result.error = "do not understand query filter (happens date)";
    }
    return result;
  }
  earliestDate(task) {
    const happensDates = new _HappensDateField().dates(task);
    const sortedHappensDates = happensDates.sort(Sort.compareByDate);
    return sortedHappensDates[0];
  }
  filterRegExp() {
    return _HappensDateField.happensRegexp;
  }
  dates(task) {
    return Array.of(task.startDate, task.scheduledDate, task.dueDate);
  }
  fieldName() {
    return "happens";
  }
};
var HappensDateField = _HappensDateField;
HappensDateField.happensRegexp = /^happens (before|after|on)? ?(.*)/;
HappensDateField.instructionForFieldPresence = "has happens date";
HappensDateField.instructionForFieldAbsence = "no happens date";

// src/Query/Filter/RecurringField.ts
var RecurringField = class extends FilterInstructionsBasedField {
  constructor() {
    super();
    this._filters.add("is recurring", (task) => task.recurrence !== null);
    this._filters.add("is not recurring", (task) => task.recurrence === null);
  }
  fieldName() {
    return "recurring";
  }
};

// src/Query/Filter/StatusField.ts
var StatusField = class extends FilterInstructionsBasedField {
  constructor() {
    super();
    this._filters.add("done", (task) => task.status === "Done" /* DONE */);
    this._filters.add("not done", (task) => task.status !== "Done" /* DONE */);
  }
  fieldName() {
    return "status";
  }
};

// src/Query/Filter/MultiTextField.ts
var MultiTextField = class extends TextField {
  fieldNamePlural() {
    return this.fieldNameSingular() + "s";
  }
  fieldName() {
    return `${this.fieldNameSingular()}/${this.fieldNamePlural()}`;
  }
  fieldPattern() {
    return `${this.fieldNameSingular()}|${this.fieldNamePlural()}`;
  }
  filterOperatorPattern() {
    return `${super.filterOperatorPattern()}|include|do not include`;
  }
  value(task) {
    return this.values(task).join(", ");
  }
  getFilter(matcher, negate) {
    return (task) => {
      const match = matcher.matchesAnyOf(this.values(task));
      return negate ? !match : match;
    };
  }
};

// src/Query/Filter/TagsField.ts
var TagsField = class extends MultiTextField {
  fieldNameSingular() {
    return "tag";
  }
  values(task) {
    return task.tags;
  }
};

// src/Query/Filter/BooleanField.ts
var import_boon_js = __toESM(require_lib());
var BooleanField = class extends Field {
  constructor() {
    super(...arguments);
    this.basicBooleanRegexp = /(.*(AND|OR|XOR|NOT)\s*[("].*|\(.+\))/g;
    this.supportedOperators = ["AND", "OR", "XOR", "NOT"];
    this.subFields = {};
  }
  filterRegExp() {
    return this.basicBooleanRegexp;
  }
  createFilterOrErrorMessage(line) {
    return this.parseLine(line);
  }
  fieldName() {
    return "boolean query";
  }
  parseLine(line) {
    const result = new FilterOrErrorMessage(line);
    if (line.length === 0) {
      result.error = "empty line";
      return result;
    }
    const preprocessed = this.preprocessExpression(line);
    try {
      const postfixExpression = (0, import_boon_js.parse)(preprocessed);
      for (const token of postfixExpression) {
        if (token.name === "IDENTIFIER" && token.value) {
          const identifier = token.value.trim();
          if (!(identifier in this.subFields)) {
            const parsedField = parseFilter(identifier);
            if (parsedField === null) {
              result.error = `couldn't parse sub-expression '${identifier}'`;
              return result;
            }
            if (parsedField.error) {
              result.error = `couldn't parse sub-expression '${identifier}': ${parsedField.error}`;
              return result;
            } else if (parsedField.filter) {
              this.subFields[identifier] = parsedField.filter;
            }
          }
        } else if (token.name === "OPERATOR") {
          if (token.value == void 0) {
            result.error = "empty operator in boolean query";
            return result;
          }
          if (!this.supportedOperators.includes(token.value)) {
            result.error = `unknown boolean operator '${token.value}'`;
            return result;
          }
        }
      }
      const filterFunction = (task) => {
        return this.filterTaskWithParsedQuery(task, postfixExpression);
      };
      const explanation = this.constructExplanation(postfixExpression);
      result.filter = new Filter(line, filterFunction, explanation);
      return result;
    } catch (error) {
      const message = error instanceof Error ? error.message : "unknown error type";
      result.error = `malformed boolean query -- ${message} (check the documentation for guidelines)`;
      return result;
    }
    return result;
  }
  preprocessExpression(line) {
    return line.replace(/\(([^()]+)\)/g, '("$1")');
  }
  filterTaskWithParsedQuery(task, postfixExpression) {
    const toBool = (s) => {
      return s === "true";
    };
    const toString = (b) => {
      return b ? "true" : "false";
    };
    const booleanStack = [];
    for (const token of postfixExpression) {
      if (token.name === "IDENTIFIER") {
        if (token.value == null)
          throw Error("null token value");
        const filter = this.subFields[token.value.trim()];
        const result = filter.filterFunction(task);
        booleanStack.push(toString(result));
      } else if (token.name === "OPERATOR") {
        if (token.value === "NOT") {
          const arg1 = toBool(booleanStack.pop());
          booleanStack.push(toString(!arg1));
        } else if (token.value === "OR") {
          const arg1 = toBool(booleanStack.pop());
          const arg2 = toBool(booleanStack.pop());
          booleanStack.push(toString(arg1 || arg2));
        } else if (token.value === "AND") {
          const arg1 = toBool(booleanStack.pop());
          const arg2 = toBool(booleanStack.pop());
          booleanStack.push(toString(arg1 && arg2));
        } else if (token.value === "XOR") {
          const arg1 = toBool(booleanStack.pop());
          const arg2 = toBool(booleanStack.pop());
          booleanStack.push(toString(arg1 && !arg2 || !arg1 && arg2));
        } else {
          throw Error("Unsupported operator: " + token.value);
        }
      } else {
        throw Error("Unsupported token type: " + token);
      }
    }
    return toBool(booleanStack[0]);
  }
  constructExplanation(postfixExpression) {
    const explanationStack = [];
    for (const token of postfixExpression) {
      if (token.name === "IDENTIFIER") {
        if (token.value == null)
          throw Error("null token value");
        const filter = this.subFields[token.value.trim()];
        explanationStack.push(filter.explanation);
      } else if (token.name === "OPERATOR") {
        if (token.value === "NOT") {
          const arg1 = explanationStack.pop();
          explanationStack.push(Explanation.booleanNot([arg1]));
        } else if (token.value === "OR") {
          const arg2 = explanationStack.pop();
          const arg1 = explanationStack.pop();
          explanationStack.push(Explanation.booleanOr([arg1, arg2]));
        } else if (token.value === "AND") {
          const arg2 = explanationStack.pop();
          const arg1 = explanationStack.pop();
          explanationStack.push(Explanation.booleanAnd([arg1, arg2]));
        } else if (token.value === "XOR") {
          const arg2 = explanationStack.pop();
          const arg1 = explanationStack.pop();
          explanationStack.push(Explanation.booleanXor([arg1, arg2]));
        } else {
          throw Error("Unsupported operator: " + token.value);
        }
      } else {
        throw Error("Unsupported token type: " + token);
      }
    }
    return explanationStack[0];
  }
};

// src/Query/Filter/FilenameField.ts
var FilenameField = class extends TextField {
  fieldName() {
    return "filename";
  }
  value(task) {
    const filename = task.filename;
    if (filename === null) {
      return "";
    }
    return filename + ".md";
  }
};

// src/Query/FilterParser.ts
var fieldCreators = [
  () => new StatusField(),
  () => new RecurringField(),
  () => new PriorityField(),
  () => new HappensDateField(),
  () => new StartDateField(),
  () => new ScheduledDateField(),
  () => new DueDateField(),
  () => new DoneDateField(),
  () => new PathField(),
  () => new DescriptionField(),
  () => new TagsField(),
  () => new HeadingField(),
  () => new ExcludeSubItemsField(),
  () => new BooleanField(),
  () => new FilenameField()
];
function parseFilter(filterString) {
  for (const creator of fieldCreators) {
    const field = creator();
    if (field.canCreateFilterForLine(filterString))
      return field.createFilterOrErrorMessage(filterString);
  }
  return null;
}

// src/Query/GroupHeading.ts
var GroupHeading = class {
  constructor(nestingLevel, name) {
    this.nestingLevel = nestingLevel;
    this.name = name;
  }
};

// src/Query/GroupHeadings.ts
var GroupHeadings = class {
  constructor(groupedTasks) {
    this.lastHeadingAtLevel = new Array();
    const firstGroup = groupedTasks.keys().next().value;
    const groupCount = firstGroup.length;
    for (let i = 0; i < groupCount; i++) {
      this.lastHeadingAtLevel.push("");
    }
  }
  getHeadingsForTaskGroup(groupNames) {
    const headingsForGroup = new Array();
    for (let level = 0; level < groupNames.length; level++) {
      const group = groupNames[level];
      if (group != this.lastHeadingAtLevel[level]) {
        headingsForGroup.push(new GroupHeading(level, group));
        for (let j = level; j < groupNames.length; j++) {
          this.lastHeadingAtLevel[j] = "";
        }
        this.lastHeadingAtLevel[level] = group;
      }
    }
    return headingsForGroup;
  }
};

// src/Query/GroupingTreeNode.ts
var GroupingTreeNode = class {
  constructor(values) {
    this.children = /* @__PURE__ */ new Map();
    this.values = [];
    this.values = values;
  }
  generateAllPaths(pathSoFar = []) {
    const resultMap = /* @__PURE__ */ new Map();
    if (this.children.size == 0) {
      resultMap.set([...pathSoFar], this.values);
      return resultMap;
    }
    for (const [property, child] of this.children) {
      pathSoFar.push(property);
      const childResult = child.generateAllPaths(pathSoFar);
      childResult.forEach((value, key) => resultMap.set(key, value));
      pathSoFar.pop();
    }
    return resultMap;
  }
};

// src/Query/IntermediateTaskGroups.ts
var IntermediateTaskGroupsStorage = class extends Map {
};
var TaskGroupingTreeNode = class extends GroupingTreeNode {
};
var IntermediateTaskGroups = class {
  constructor(groupings, tasks) {
    this.groups = new IntermediateTaskGroupsStorage();
    const tree = this.buildGroupingTree(groupings, tasks);
    this.groups = tree.generateAllPaths();
    this.groups = this.getSortedGroups();
  }
  buildGroupingTree(groupings, tasks) {
    const root = new TaskGroupingTreeNode(tasks);
    let currentTreeLevel = [root];
    for (const grouping of groupings) {
      const nextTreeLevel = [];
      for (const currentTreeNode of currentTreeLevel) {
        for (const task of currentTreeNode.values) {
          const groupNames = Group.getGroupNamesForTask(grouping.property, task);
          for (const groupName of groupNames) {
            let child = currentTreeNode.children.get(groupName);
            if (child === void 0) {
              child = new TaskGroupingTreeNode([]);
              currentTreeNode.children.set(groupName, child);
              nextTreeLevel.push(child);
            }
            child.values.push(task);
          }
        }
      }
      currentTreeLevel = nextTreeLevel;
    }
    return root;
  }
  getSortedGroups() {
    return new IntermediateTaskGroupsStorage([...this.groups.entries()].sort());
  }
};

// src/Query/TaskGroup.ts
var TaskGroup = class {
  constructor(groups, groupHeadings, tasks) {
    this.groups = groups;
    this.groupHeadings = groupHeadings;
    this.tasks = tasks;
  }
  tasksAsStringOfLines() {
    let output = "";
    for (const task of this.tasks) {
      output += task.toFileLineString() + "\n";
    }
    return output;
  }
  toString() {
    let output = "\n";
    output += `Group names: [${this.groups}]
`;
    for (const heading of this.groupHeadings) {
      const headingPrefix = "#".repeat(4 + heading.nestingLevel);
      output += `${headingPrefix} ${heading.name}
`;
    }
    output += this.tasksAsStringOfLines();
    return output;
  }
};

// src/Query/TaskGroups.ts
var TaskGroups = class {
  constructor(groups, tasks) {
    this._groups = new Array();
    this._totalTaskCount = 0;
    this._totalTaskCount = tasks.length;
    const initialGroups = new IntermediateTaskGroups(groups, tasks);
    this.addTasks(initialGroups);
  }
  get groups() {
    return this._groups;
  }
  totalTasksCount() {
    return this._totalTaskCount;
  }
  toString() {
    let output = "";
    for (const taskGroup of this.groups) {
      output += taskGroup.toString();
      output += "\n---\n";
    }
    const totalTasksCount = this.totalTasksCount();
    output += `
${totalTasksCount} tasks
`;
    return output;
  }
  addTasks(initialGroups) {
    const grouper = new GroupHeadings(initialGroups.groups);
    for (const [groups, tasks] of initialGroups.groups) {
      const groupHeadings = grouper.getHeadingsForTaskGroup(groups);
      const taskGroup = new TaskGroup(groups, groupHeadings, tasks);
      this.add(taskGroup);
    }
  }
  add(taskGroup) {
    this._groups.push(taskGroup);
  }
};

// src/Query/Group.ts
var _Group = class {
  static by(grouping, tasks) {
    return new TaskGroups(grouping, tasks);
  }
  static getGroupNamesForTask(property, task) {
    const grouper = _Group.groupers[property];
    return grouper(task);
  }
  static escapeMarkdownCharacters(filename) {
    return filename.replace(/\\/g, "\\\\").replace(/_/g, "\\_");
  }
  static groupByPriority(task) {
    let priorityName = "ERROR";
    switch (task.priority) {
      case "1" /* High */:
        priorityName = "High";
        break;
      case "2" /* Medium */:
        priorityName = "Medium";
        break;
      case "3" /* None */:
        priorityName = "None";
        break;
      case "4" /* Low */:
        priorityName = "Low";
        break;
    }
    return [`Priority ${task.priority}: ${priorityName}`];
  }
  static groupByRecurrence(task) {
    if (task.recurrence !== null) {
      return [task.recurrence.toText()];
    } else {
      return ["None"];
    }
  }
  static groupByRecurring(task) {
    if (task.recurrence !== null) {
      return ["Recurring"];
    } else {
      return ["Not Recurring"];
    }
  }
  static groupByStartDate(task) {
    return [_Group.stringFromDate(task.startDate, "start")];
  }
  static groupByScheduledDate(task) {
    return [_Group.stringFromDate(task.scheduledDate, "scheduled")];
  }
  static groupByDueDate(task) {
    return [_Group.stringFromDate(task.dueDate, "due")];
  }
  static groupByDoneDate(task) {
    return [_Group.stringFromDate(task.doneDate, "done")];
  }
  static groupByHappensDate(task) {
    const earliestDateIfAny = new HappensDateField().earliestDate(task);
    return [_Group.stringFromDate(earliestDateIfAny, "happens")];
  }
  static stringFromDate(date, field) {
    if (date === null) {
      return "No " + field + " date";
    }
    return date.format(_Group.groupDateFormat);
  }
  static groupByPath(task) {
    return [_Group.escapeMarkdownCharacters(task.path.replace(".md", ""))];
  }
  static groupByFolder(task) {
    const path = task.path;
    const fileNameWithExtension = task.filename + ".md";
    const folder = path.substring(0, path.lastIndexOf(fileNameWithExtension));
    if (folder === "") {
      return ["/"];
    }
    return [_Group.escapeMarkdownCharacters(folder)];
  }
  static groupByFileName(task) {
    const filename = task.filename;
    if (filename === null) {
      return ["Unknown Location"];
    }
    return [_Group.escapeMarkdownCharacters(filename)];
  }
  static groupByRoot(task) {
    const path = task.path.replace(/\\/g, "/");
    const separatorIndex = path.indexOf("/");
    if (separatorIndex == -1) {
      return ["/"];
    }
    return [_Group.escapeMarkdownCharacters(path.substring(0, separatorIndex + 1))];
  }
  static groupByBacklink(task) {
    const linkText = task.getLinkText({ isFilenameUnique: true });
    if (linkText === null) {
      return ["Unknown Location"];
    }
    const filenameComponent = _Group.groupByFileName(task)[0];
    if (task.precedingHeader === null || task.precedingHeader.length === 0) {
      return [filenameComponent];
    }
    const headingComponent = _Group.groupByHeading(task)[0];
    if (filenameComponent === headingComponent) {
      return [filenameComponent];
    } else {
      return [`${filenameComponent} > ${headingComponent}`];
    }
  }
  static groupByStatus(task) {
    return [task.status];
  }
  static groupByHeading(task) {
    if (task.precedingHeader === null || task.precedingHeader.length === 0) {
      return ["(No heading)"];
    }
    return [task.precedingHeader];
  }
  static groupByTags(task) {
    if (task.tags.length == 0) {
      return ["(No tags)"];
    }
    return task.tags;
  }
};
var Group = _Group;
Group.groupDateFormat = "YYYY-MM-DD dddd";
Group.groupers = {
  backlink: _Group.groupByBacklink,
  done: _Group.groupByDoneDate,
  due: _Group.groupByDueDate,
  filename: _Group.groupByFileName,
  folder: _Group.groupByFolder,
  happens: _Group.groupByHappensDate,
  heading: _Group.groupByHeading,
  path: _Group.groupByPath,
  priority: _Group.groupByPriority,
  recurrence: _Group.groupByRecurrence,
  recurring: _Group.groupByRecurring,
  root: _Group.groupByRoot,
  scheduled: _Group.groupByScheduledDate,
  start: _Group.groupByStartDate,
  status: _Group.groupByStatus,
  tags: _Group.groupByTags
};

// src/Query/Query.ts
var Query = class {
  constructor({ source }) {
    this._limit = void 0;
    this._layoutOptions = new LayoutOptions();
    this._filters = [];
    this._error = void 0;
    this._sorting = [];
    this._grouping = [];
    this.sortByRegexp = /^sort by (urgency|status|priority|start|scheduled|due|done|path|description|tag)( reverse)?[\s]*(\d+)?/;
    this.groupByRegexp = /^group by (backlink|done|due|filename|folder|happens|heading|path|priority|recurrence|recurring|root|scheduled|start|status|tags)/;
    this.hideOptionsRegexp = /^(hide|show) (task count|backlink|priority|start date|scheduled date|done date|due date|recurrence rule|edit button|urgency)/;
    this.shortModeRegexp = /^short/;
    this.explainQueryRegexp = /^explain/;
    this.limitRegexp = /^limit (to )?(\d+)( tasks?)?/;
    this.commentRegexp = /^#.*/;
    this.source = source;
    source.split("\n").map((line) => line.trim()).forEach((line) => {
      switch (true) {
        case line === "":
          break;
        case this.shortModeRegexp.test(line):
          this._layoutOptions.shortMode = true;
          break;
        case this.explainQueryRegexp.test(line):
          this._layoutOptions.explainQuery = true;
          break;
        case this.limitRegexp.test(line):
          this.parseLimit({ line });
          break;
        case this.sortByRegexp.test(line):
          this.parseSortBy({ line });
          break;
        case this.groupByRegexp.test(line):
          this.parseGroupBy({ line });
          break;
        case this.hideOptionsRegexp.test(line):
          this.parseHideOptions({ line });
          break;
        case this.commentRegexp.test(line):
          break;
        case this.parseFilter(line):
          break;
        default:
          this._error = `do not understand query: ${line}`;
      }
    });
  }
  explainQuery() {
    return "Explanation of this Tasks code block query:\n\n" + this.explainQueryWithoutIntroduction();
  }
  explainQueryWithoutIntroduction() {
    let result = "";
    const { globalFilter } = getSettings();
    if (globalFilter.length !== 0) {
      result += `Only tasks containing the global filter '${globalFilter}'.

`;
    }
    const numberOfFilters = this.filters.length;
    if (numberOfFilters === 0) {
      result += "No filters supplied. All tasks will match the query.";
    } else {
      for (let i = 0; i < numberOfFilters; i++) {
        if (i > 0)
          result += "\n";
        result += this.filters[i].explainFilterIndented("");
      }
    }
    if (this._limit !== void 0) {
      result += `

At most ${this._limit} task`;
      if (this._limit !== 1) {
        result += "s";
      }
      result += ".\n";
    }
    return result;
  }
  get limit() {
    return this._limit;
  }
  get layoutOptions() {
    return this._layoutOptions;
  }
  get filters() {
    return this._filters;
  }
  get sorting() {
    return this._sorting;
  }
  get grouping() {
    return this._grouping;
  }
  get error() {
    return this._error;
  }
  applyQueryToTasks(tasks) {
    this.filters.forEach((filter) => {
      tasks = tasks.filter(filter.filterFunction);
    });
    const tasksSortedLimited = Sort.by(this, tasks).slice(0, this.limit);
    return Group.by(this.grouping, tasksSortedLimited);
  }
  parseHideOptions({ line }) {
    const hideOptionsMatch = line.match(this.hideOptionsRegexp);
    if (hideOptionsMatch !== null) {
      const hide = hideOptionsMatch[1] === "hide";
      const option = hideOptionsMatch[2];
      switch (option) {
        case "task count":
          this._layoutOptions.hideTaskCount = hide;
          break;
        case "backlink":
          this._layoutOptions.hideBacklinks = hide;
          break;
        case "priority":
          this._layoutOptions.hidePriority = hide;
          break;
        case "start date":
          this._layoutOptions.hideStartDate = hide;
          break;
        case "scheduled date":
          this._layoutOptions.hideScheduledDate = hide;
          break;
        case "due date":
          this._layoutOptions.hideDueDate = hide;
          break;
        case "done date":
          this._layoutOptions.hideDoneDate = hide;
          break;
        case "recurrence rule":
          this._layoutOptions.hideRecurrenceRule = hide;
          break;
        case "edit button":
          this._layoutOptions.hideEditButton = hide;
          break;
        case "urgency":
          this._layoutOptions.hideUrgency = hide;
          break;
        default:
          this._error = "do not understand hide/show option";
      }
    }
  }
  parseFilter(line) {
    const filterOrError = parseFilter(line);
    if (filterOrError != null) {
      if (filterOrError.filter)
        this._filters.push(filterOrError.filter);
      else
        this._error = filterOrError.error;
      return true;
    }
    return false;
  }
  parseLimit({ line }) {
    const limitMatch = line.match(this.limitRegexp);
    if (limitMatch !== null) {
      this._limit = Number.parseInt(limitMatch[2], 10);
    } else {
      this._error = "do not understand query limit";
    }
  }
  parseSortBy({ line }) {
    const fieldMatch = line.match(this.sortByRegexp);
    if (fieldMatch !== null) {
      this._sorting.push({
        property: fieldMatch[1],
        reverse: !!fieldMatch[2],
        propertyInstance: isNaN(+fieldMatch[3]) ? 1 : +fieldMatch[3]
      });
    } else {
      this._error = "do not understand query sorting";
    }
  }
  parseGroupBy({ line }) {
    const fieldMatch = line.match(this.groupByRegexp);
    if (fieldMatch !== null) {
      this._grouping.push({
        property: fieldMatch[1]
      });
    } else {
      this._error = "do not understand query grouping";
    }
  }
};

// src/QueryRenderer.ts
var QueryRenderer = class {
  constructor({ plugin, events }) {
    this.addQueryRenderChild = this._addQueryRenderChild.bind(this);
    this.app = plugin.app;
    this.events = events;
    plugin.registerMarkdownCodeBlockProcessor("tasks", this._addQueryRenderChild.bind(this));
  }
  _addQueryRenderChild(source, element2, context) {
    return __async(this, null, function* () {
      context.addChild(
        new QueryRenderChild({
          app: this.app,
          events: this.events,
          container: element2,
          source,
          filePath: context.sourcePath
        })
      );
    });
  }
};
var QueryRenderChild = class extends import_obsidian8.MarkdownRenderChild {
  constructor({
    app,
    events,
    container,
    source,
    filePath
  }) {
    super(container);
    this.app = app;
    this.events = events;
    this.source = source;
    this.filePath = filePath;
    switch (this.containerEl.className) {
      case "block-language-tasks":
        this.query = new Query({ source });
        this.queryType = "tasks";
        break;
      default:
        this.query = new Query({ source });
        this.queryType = "tasks";
        break;
    }
  }
  onload() {
    this.events.triggerRequestCacheUpdate(this.render.bind(this));
    this.renderEventRef = this.events.onCacheUpdate(this.render.bind(this));
    this.reloadQueryAtMidnight();
  }
  onunload() {
    if (this.renderEventRef !== void 0) {
      this.events.off(this.renderEventRef);
    }
    if (this.queryReloadTimeout !== void 0) {
      clearTimeout(this.queryReloadTimeout);
    }
  }
  reloadQueryAtMidnight() {
    const midnight = new Date();
    midnight.setHours(24, 0, 0, 0);
    const now = new Date();
    const millisecondsToMidnight = midnight.getTime() - now.getTime();
    this.queryReloadTimeout = setTimeout(() => {
      this.query = new Query({ source: this.source });
      this.events.triggerRequestCacheUpdate(this.render.bind(this));
      this.reloadQueryAtMidnight();
    }, millisecondsToMidnight + 1e3);
  }
  render(_0) {
    return __async(this, arguments, function* ({ tasks, state }) {
      var _a;
      const content = this.containerEl.createEl("div");
      if (state === "Warm" /* Warm */ && this.query.error === void 0) {
        console.debug(
          `Render ${this.queryType} called for a block in active file "${this.filePath}", to select from ${tasks.length} tasks: plugin state: ${state}`
        );
        if (this.query.layoutOptions.explainQuery) {
          this.createExplanation(content);
        }
        const tasksSortedLimitedGrouped = this.query.applyQueryToTasks(tasks);
        for (const group of tasksSortedLimitedGrouped.groups) {
          this.addGroupHeadings(content, group.groupHeadings);
          const { taskList } = yield this.createTasksList({
            tasks: group.tasks,
            content
          });
          content.appendChild(taskList);
        }
        const totalTasksCount = tasksSortedLimitedGrouped.totalTasksCount();
        console.debug(`${totalTasksCount} of ${tasks.length} tasks displayed in a block in "${this.filePath}"`);
        this.addTaskCount(content, totalTasksCount);
      } else if (this.query.error !== void 0) {
        content.setText(`Tasks query: ${this.query.error}`);
      } else {
        content.setText("Loading Tasks ...");
      }
      (_a = this.containerEl.firstChild) == null ? void 0 : _a.replaceWith(content);
    });
  }
  createExplanation(content) {
    const explanationAsString = this.query.explainQuery();
    const explanationsBlock = content.createEl("pre");
    explanationsBlock.addClasses(["plugin-tasks-query-explanation"]);
    explanationsBlock.setText(explanationAsString);
    content.appendChild(explanationsBlock);
  }
  createTasksList(_0) {
    return __async(this, arguments, function* ({
      tasks,
      content
    }) {
      const tasksCount = tasks.length;
      const taskList = content.createEl("ul");
      taskList.addClasses(["contains-task-list", "plugin-tasks-query-result"]);
      for (let i = 0; i < tasksCount; i++) {
        const task = tasks[i];
        const isFilenameUnique = this.isFilenameUnique({ task });
        const listItem = yield task.toLi({
          parentUlElement: taskList,
          listIndex: i,
          layoutOptions: this.query.layoutOptions,
          isFilenameUnique
        });
        const footnotes = listItem.querySelectorAll("[data-footnote-id]");
        footnotes.forEach((footnote) => footnote.remove());
        const shortMode = this.query.layoutOptions.shortMode;
        if (!this.query.layoutOptions.hideUrgency) {
          this.addUrgency(listItem, task);
        }
        if (!this.query.layoutOptions.hideBacklinks) {
          this.addBacklinks(listItem, task, shortMode, isFilenameUnique);
        }
        if (!this.query.layoutOptions.hideEditButton) {
          this.addEditButton(listItem, task);
        }
        taskList.appendChild(listItem);
      }
      return { taskList, tasksCount };
    });
  }
  addEditButton(listItem, task) {
    const editTaskPencil = listItem.createEl("a", {
      cls: "tasks-edit"
    });
    editTaskPencil.onClickEvent((event) => {
      event.preventDefault();
      const onSubmit = (updatedTasks) => {
        replaceTaskWithTasks({
          originalTask: task,
          newTasks: DateFallback.removeInferredStatusIfNeeded(task, updatedTasks)
        });
      };
      const taskModal = new TaskModal({
        app: this.app,
        task,
        onSubmit
      });
      taskModal.open();
    });
  }
  addUrgency(listItem, task) {
    const text2 = new Intl.NumberFormat().format(task.urgency);
    listItem.createSpan({ text: text2, cls: "tasks-urgency" });
  }
  addGroupHeadings(content, groupHeadings) {
    for (const heading of groupHeadings) {
      this.addGroupHeading(content, heading);
    }
  }
  addGroupHeading(content, group) {
    return __async(this, null, function* () {
      let header;
      if (group.nestingLevel === 0) {
        header = content.createEl("h4", {
          cls: "tasks-group-heading"
        });
      } else if (group.nestingLevel === 1) {
        header = content.createEl("h5", {
          cls: "tasks-group-heading"
        });
      } else {
        header = content.createEl("h6", {
          cls: "tasks-group-heading"
        });
      }
      yield import_obsidian8.MarkdownRenderer.renderMarkdown(group.name, header, this.filePath, this);
    });
  }
  addBacklinks(listItem, task, shortMode, isFilenameUnique) {
    var _a;
    const backLink = listItem.createSpan({ cls: "tasks-backlink" });
    if (!shortMode) {
      backLink.append(" (");
    }
    const link = backLink.createEl("a");
    link.href = task.path;
    link.setAttribute("data-href", task.path);
    link.rel = "noopener";
    link.target = "_blank";
    link.addClass("internal-link");
    if (shortMode) {
      link.addClass("internal-link-short-mode");
    }
    if (task.precedingHeader !== null) {
      const sanitisedHeading = task.precedingHeader.replace(/#/g, "");
      link.href = link.href + "#" + sanitisedHeading;
      link.setAttribute("data-href", link.getAttribute("data-href") + "#" + sanitisedHeading);
    }
    let linkText;
    if (shortMode) {
      linkText = " \u{1F517}";
    } else {
      linkText = (_a = task.getLinkText({ isFilenameUnique })) != null ? _a : "";
    }
    link.setText(linkText);
    if (!shortMode) {
      backLink.append(")");
    }
  }
  addTaskCount(content, tasksCount) {
    if (!this.query.layoutOptions.hideTaskCount) {
      content.createDiv({
        text: `${tasksCount} task${tasksCount !== 1 ? "s" : ""}`,
        cls: "tasks-count"
      });
    }
  }
  isFilenameUnique({ task }) {
    const filenameMatch = task.path.match(/([^/]*)\..+$/i);
    if (filenameMatch === null) {
      return void 0;
    }
    const filename = filenameMatch[1];
    const allFilesWithSameName = this.app.vault.getMarkdownFiles().filter((file) => {
      if (file.basename === filename) {
        return true;
      }
    });
    return allFilesWithSameName.length < 2;
  }
};

// src/Config/SettingsTab.ts
var import_obsidian9 = require("obsidian");
var _SettingsTab = class extends import_obsidian9.PluginSettingTab {
  constructor({ plugin }) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: "Tasks Settings" });
    containerEl.createEl("p", {
      cls: "tasks-setting-important",
      text: "Changing any settings requires a restart of obsidian."
    });
    containerEl.createEl("h4", { text: "Global filter Settings" });
    new import_obsidian9.Setting(containerEl).setName("Global task filter").setDesc(
      _SettingsTab.createFragmentWithHTML(
        '<p><b>Recommended: Leave empty if you want all checklist items in your vault to be tasks managed by this plugin.</b></p><p>Use a global filter if you want Tasks to only act on a subset of your "<code>- [ ]</code>" checklist items, so that a checklist item must include the specified string in its description in order to be considered a task.<p><p>For example, if you set the global filter to <code>#task</code>, the Tasks plugin will only handle checklist items tagged with <code>#task</code>.</br>Other checklist items will remain normal checklist items and not appear in queries or get a done date set.</p><p>See the <a href="https://obsidian-tasks-group.github.io/obsidian-tasks/getting-started/global-filter/">documentation</a>.</p>'
      )
    ).addText((text2) => {
      const settings2 = getSettings();
      text2.setPlaceholder("e.g. #task or TODO").setValue(settings2.globalFilter).onChange((value) => __async(this, null, function* () {
        updateSettings({ globalFilter: value });
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Remove global filter from description").setDesc(
      "Enabling this removes the string that you set as global filter from the task description when displaying a task."
    ).addToggle((toggle) => {
      const settings2 = getSettings();
      toggle.setValue(settings2.removeGlobalFilter).onChange((value) => __async(this, null, function* () {
        updateSettings({ removeGlobalFilter: value });
        yield this.plugin.saveSettings();
      }));
    });
    containerEl.createEl("h4", { text: "Date Settings" });
    new import_obsidian9.Setting(containerEl).setName("Set done date on every completed task").setDesc("Enabling this will add a timestamp \u2705 YYYY-MM-DD at the end when a task is toggled to done").addToggle((toggle) => {
      const settings2 = getSettings();
      toggle.setValue(settings2.setDoneDate).onChange((value) => __async(this, null, function* () {
        updateSettings({ setDoneDate: value });
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Use filename as Scheduled date for undated tasks").setDesc(
      _SettingsTab.createFragmentWithHTML(
        'Save time entering Scheduled (\u23F3) dates.</br>If this option is enabled, any undated tasks will be given a default Scheduled date extracted from their file name.</br>The date in the file name must be in one of <code>YYYY-MM-DD</code> or <code>YYYYMMDD</code> formats.</br>Undated tasks have none of Due (\u{1F4C5} ), Scheduled (\u23F3) and Start (\u{1F6EB}) dates.</br><p>See the <a href="https://obsidian-tasks-group.github.io/obsidian-tasks/getting-started/use-filename-as-default-date/">documentation</a>.</p>'
      )
    ).addToggle((toggle) => {
      const settings2 = getSettings();
      toggle.setValue(settings2.useFilenameAsScheduledDate).onChange((value) => __async(this, null, function* () {
        updateSettings({ useFilenameAsScheduledDate: value });
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Folders with default Scheduled dates").setDesc(
      "Leave empty if you want to use default Scheduled dates everywhere, or enter a comma-separated list of folders."
    ).addText((input) => __async(this, null, function* () {
      const settings2 = getSettings();
      yield this.plugin.saveSettings();
      input.setValue(_SettingsTab.renderFolderArray(settings2.filenameAsDateFolders)).onChange((value) => __async(this, null, function* () {
        const folders = _SettingsTab.parseCommaSeparatedFolders(value);
        updateSettings({ filenameAsDateFolders: folders });
        yield this.plugin.saveSettings();
      }));
    }));
    containerEl.createEl("h4", { text: "Auto-suggest Settings" });
    new import_obsidian9.Setting(containerEl).setName("Auto-suggest task content").setDesc("Enabling this will open an intelligent suggest menu while typing inside a recognized task line.").addToggle((toggle) => {
      const settings2 = getSettings();
      toggle.setValue(settings2.autoSuggestInEditor).onChange((value) => __async(this, null, function* () {
        updateSettings({ autoSuggestInEditor: value });
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Minimum match length for auto-suggest").setDesc(
      "If higher than 0, auto-suggest will be triggered only when the beginning of any supported keywords is recognized."
    ).addSlider((slider) => {
      const settings2 = getSettings();
      slider.setLimits(0, 3, 1).setValue(settings2.autoSuggestMinMatch).setDynamicTooltip().onChange((value) => __async(this, null, function* () {
        updateSettings({ autoSuggestMinMatch: value });
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Maximum number of auto-suggestions to show").setDesc(
      'How many suggestions should be shown when an auto-suggest menu pops up (including the "\u23CE" option).'
    ).addSlider((slider) => {
      const settings2 = getSettings();
      slider.setLimits(3, 12, 1).setValue(settings2.autoSuggestMaxItems).setDynamicTooltip().onChange((value) => __async(this, null, function* () {
        updateSettings({ autoSuggestMaxItems: value });
        yield this.plugin.saveSettings();
      }));
    });
    containerEl.createEl("h4", { text: "Dialog Settings" });
    new import_obsidian9.Setting(containerEl).setName("Provide access keys in dialogs").setDesc(
      "If the access keys (keyboard shortcuts) for various controls in dialog boxes conflict with system keyboard shortcuts or assistive technology functionality that is important for you, you may want to deactivate them here."
    ).addToggle((toggle) => {
      const settings2 = getSettings();
      toggle.setValue(settings2.provideAccessKeys).onChange((value) => __async(this, null, function* () {
        updateSettings({ provideAccessKeys: value });
        yield this.plugin.saveSettings();
      }));
    });
  }
  static parseCommaSeparatedFolders(input) {
    return input.split(",").map((folder) => folder.trim()).map((folder) => folder.replace(/^\/|\/$/g, "")).filter((folder) => folder !== "");
  }
  static renderFolderArray(folders) {
    return folders.join(",");
  }
};
var SettingsTab = _SettingsTab;
SettingsTab.createFragmentWithHTML = (html) => createFragment((documentFragment) => documentFragment.createDiv().innerHTML = html);

// src/Suggestor/EditorSuggestorPopup.ts
var import_obsidian10 = require("obsidian");

// src/Suggestor/Suggestor.ts
var datePrefixCharacters = `${startDateSymbol}${scheduledDateSymbol}${dueDateSymbol}`;
function buildSuggestions(line, cursorPos, settings2) {
  let suggestions = [];
  suggestions = suggestions.concat(addDatesSuggestions(line, cursorPos, settings2));
  suggestions = suggestions.concat(addRecurrenceSuggestions(line, cursorPos, settings2));
  const morePossibleSuggestions = getPossibleComponentSuggestions(line, settings2);
  const wordMatch = matchByPosition(line, /([a-zA-Z'_-]*)/g, cursorPos);
  let addedSuggestions = false;
  if (wordMatch && wordMatch.length > 0) {
    const wordUnderCursor = wordMatch[0];
    if (wordUnderCursor.length >= Math.max(1, settings2.autoSuggestMinMatch)) {
      const filteredSuggestions = morePossibleSuggestions.filter(
        (suggestInfo) => suggestInfo.displayText.toLowerCase().includes(wordUnderCursor.toLowerCase())
      );
      for (const filtered of filteredSuggestions) {
        suggestions.push({
          suggestionType: "match",
          displayText: filtered.displayText,
          appendText: filtered.appendText,
          insertAt: wordMatch.index,
          insertSkip: wordUnderCursor.length
        });
        addedSuggestions = true;
      }
    }
  }
  if (!addedSuggestions && settings2.autoSuggestMinMatch === 0)
    suggestions = suggestions.concat(morePossibleSuggestions);
  if (suggestions.length > 0 && !suggestions.some((value) => value.suggestionType === "match")) {
    suggestions.unshift({
      suggestionType: "empty",
      displayText: "\u23CE",
      appendText: "\n"
    });
  }
  suggestions = suggestions.slice(0, settings2.autoSuggestMaxItems);
  return suggestions;
}
function hasPriority(line) {
  if (Object.values(prioritySymbols).some((value) => value.length > 0 && line.includes(value)))
    return true;
}
function getPossibleComponentSuggestions(line, _settings) {
  const suggestions = [];
  if (!line.includes(dueDateSymbol))
    suggestions.push({
      displayText: `${dueDateSymbol} due date`,
      appendText: `${dueDateSymbol} `
    });
  if (!line.includes(startDateSymbol))
    suggestions.push({
      displayText: `${startDateSymbol} start date`,
      appendText: `${startDateSymbol} `
    });
  if (!line.includes(scheduledDateSymbol))
    suggestions.push({
      displayText: `${scheduledDateSymbol} scheduled date`,
      appendText: `${scheduledDateSymbol} `
    });
  if (!hasPriority(line)) {
    suggestions.push({
      displayText: `${prioritySymbols.High} high priority`,
      appendText: `${prioritySymbols.High} `
    });
    suggestions.push({
      displayText: `${prioritySymbols.Medium} medium priority`,
      appendText: `${prioritySymbols.Medium} `
    });
    suggestions.push({
      displayText: `${prioritySymbols.Low} low priority`,
      appendText: `${prioritySymbols.Low} `
    });
  }
  if (!line.includes(recurrenceSymbol))
    suggestions.push({
      displayText: `${recurrenceSymbol} recurring (repeat)`,
      appendText: `${recurrenceSymbol} `
    });
  return suggestions;
}
function addDatesSuggestions(line, cursorPos, settings2) {
  const genericSuggestions = [
    "today",
    "tomorrow",
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "next week",
    "next month",
    "next year"
  ];
  const results = [];
  const dateRegex = new RegExp(`([${datePrefixCharacters}])\\s*([0-9a-zA-Z ]*)`, "ug");
  const dateMatch = matchByPosition(line, dateRegex, cursorPos);
  if (dateMatch && dateMatch.length >= 2) {
    const datePrefix = dateMatch[1];
    const dateString = dateMatch[2];
    if (dateString.length < settings2.autoSuggestMinMatch) {
      return [];
    }
    const possibleDate = dateString && dateString.length > 1 ? DateParser.parseDate(doAutocomplete(dateString), true) : null;
    if (possibleDate && possibleDate.isValid()) {
      results.push({
        displayText: `${possibleDate.format(TaskRegularExpressions.dateFormat)}`,
        appendText: `${datePrefix} ${possibleDate.format(TaskRegularExpressions.dateFormat)} `,
        insertAt: dateMatch.index,
        insertSkip: dateMatch[0].length
      });
    }
    const minMatch = 1;
    const maxGenericSuggestions = 5;
    let genericMatches = genericSuggestions.filter(
      (value) => dateString && dateString.length >= minMatch && value.toLowerCase().includes(dateString.toLowerCase())
    ).slice(0, maxGenericSuggestions);
    if (genericMatches.length === 0) {
      genericMatches = genericSuggestions.slice(0, maxGenericSuggestions);
    }
    for (const match of genericMatches) {
      const parsedDate = DateParser.parseDate(match, true);
      const formattedDate = `${parsedDate.format(TaskRegularExpressions.dateFormat)}`;
      results.push({
        suggestionType: "match",
        displayText: `${match} (${formattedDate})`,
        appendText: `${datePrefix} ${formattedDate} `,
        insertAt: dateMatch.index,
        insertSkip: dateMatch[0].length
      });
    }
  }
  return results;
}
function addRecurrenceSuggestions(line, cursorPos, settings2) {
  var _a;
  const genericSuggestions = [
    "every",
    "every day",
    "every week",
    "every month",
    "every month on the",
    "every year",
    "every week on Sunday",
    "every week on Monday",
    "every week on Tuesday",
    "every week on Wednesday",
    "every week on Thursday",
    "every week on Friday",
    "every week on Saturday"
  ];
  const results = [];
  const recurrenceRegex = new RegExp(`(${recurrenceSymbol})\\s*([0-9a-zA-Z ]*)`, "ug");
  const recurrenceMatch = matchByPosition(line, recurrenceRegex, cursorPos);
  if (recurrenceMatch && recurrenceMatch.length >= 2) {
    const recurrencePrefix = recurrenceMatch[1];
    const recurrenceString = recurrenceMatch[2];
    if (recurrenceString.length < settings2.autoSuggestMinMatch)
      return [];
    if (recurrenceString.length > 0) {
      const parsedRecurrence = (_a = Recurrence.fromText({
        recurrenceRuleText: recurrenceString,
        startDate: null,
        scheduledDate: null,
        dueDate: null
      })) == null ? void 0 : _a.toText();
      if (parsedRecurrence) {
        const appendedText = `${recurrencePrefix} ${parsedRecurrence} `;
        results.push({
          suggestionType: "match",
          displayText: `\u2705 ${parsedRecurrence}`,
          appendText: appendedText,
          insertAt: recurrenceMatch.index,
          insertSkip: recurrenceMatch[0].length
        });
        if (recurrenceMatch[0] == appendedText)
          return [];
      }
    }
    const minMatch = 1;
    const maxGenericDateSuggestions = settings2.autoSuggestMaxItems / 2;
    let genericMatches = genericSuggestions.filter(
      (value) => recurrenceString && recurrenceString.length >= minMatch && value.toLowerCase().includes(recurrenceString.toLowerCase())
    ).slice(0, maxGenericDateSuggestions);
    if (genericMatches.length === 0 && recurrenceString.trim().length === 0) {
      genericMatches = genericSuggestions.slice(0, maxGenericDateSuggestions);
    }
    for (const match of genericMatches) {
      results.push({
        suggestionType: "match",
        displayText: `${match}`,
        appendText: `${recurrencePrefix} ${match} `,
        insertAt: recurrenceMatch.index,
        insertSkip: recurrenceMatch[0].length
      });
    }
  }
  return results;
}
function matchByPosition(s, r, position) {
  const matches = s.matchAll(r);
  for (const match of matches) {
    if ((match == null ? void 0 : match.index) && match.index <= position && position <= match.index + match[0].length)
      return match;
  }
  return [];
}

// src/Suggestor/EditorSuggestorPopup.ts
var EditorSuggestor = class extends import_obsidian10.EditorSuggest {
  constructor(app, settings2) {
    super(app);
    this.settings = settings2;
  }
  onTrigger(cursor, editor, _file) {
    if (!this.settings.autoSuggestInEditor)
      return null;
    const line = editor.getLine(cursor.line);
    if (line.contains(this.settings.globalFilter) && line.match(TaskRegularExpressions.taskRegex)) {
      return {
        start: { line: cursor.line, ch: 0 },
        end: {
          line: cursor.line,
          ch: line.length
        },
        query: line
      };
    }
    return null;
  }
  getSuggestions(context) {
    const line = context.query;
    const currentCursor = context.editor.getCursor();
    const suggestions = buildSuggestions(line, currentCursor.ch, this.settings);
    const suggestionsWithContext = [];
    for (const suggestion of suggestions)
      suggestionsWithContext.push(__spreadProps(__spreadValues({}, suggestion), { context }));
    return suggestionsWithContext;
  }
  renderSuggestion(value, el) {
    el.setText(value.displayText);
  }
  selectSuggestion(value, _evt) {
    var _a, _b, _c;
    const editor = value.context.editor;
    if (value.suggestionType === "empty") {
      this.close();
      const eventClone = new KeyboardEvent("keydown", {
        code: "Enter",
        key: "Enter"
      });
      (_b = (_a = editor == null ? void 0 : editor.cm) == null ? void 0 : _a.contentDOM) == null ? void 0 : _b.dispatchEvent(eventClone);
      return;
    }
    const currentCursor = value.context.editor.getCursor();
    const replaceFrom = {
      line: currentCursor.line,
      ch: (_c = value.insertAt) != null ? _c : currentCursor.ch
    };
    const replaceTo = value.insertSkip ? {
      line: currentCursor.line,
      ch: replaceFrom.ch + value.insertSkip
    } : void 0;
    value.context.editor.replaceRange(value.appendText, replaceFrom, replaceTo);
    value.context.editor.setCursor({
      line: currentCursor.line,
      ch: replaceFrom.ch + value.appendText.length
    });
  }
};

// src/main.ts
var TasksPlugin = class extends import_obsidian11.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log('loading plugin "tasks"');
      yield this.loadSettings();
      this.addSettingTab(new SettingsTab({ plugin: this }));
      initializeFile({
        metadataCache: this.app.metadataCache,
        vault: this.app.vault
      });
      const events = new TasksEvents({ obsidianEvents: this.app.workspace });
      this.cache = new Cache2({
        metadataCache: this.app.metadataCache,
        vault: this.app.vault,
        events
      });
      this.inlineRenderer = new InlineRenderer({ plugin: this });
      this.queryRenderer = new QueryRenderer({ plugin: this, events });
      this.registerEditorExtension(newLivePreviewExtension());
      this.registerEditorSuggest(new EditorSuggestor(this.app, getSettings()));
      new Commands({ plugin: this });
    });
  }
  onunload() {
    var _a;
    console.log('unloading plugin "tasks"');
    (_a = this.cache) == null ? void 0 : _a.unload();
  }
  loadSettings() {
    return __async(this, null, function* () {
      const newSettings = yield this.loadData();
      updateSettings(newSettings);
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(getSettings());
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmpzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvdXRpbHMvcGF0dGVybi50cyIsICJub2RlX21vZHVsZXMvZGF5anMvZGF5anMubWluLmpzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvY2FsY3VsYXRpb24veWVhcnMudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL2VuL2NvbnN0YW50cy50cyIsICJub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL3F1YXJ0ZXJPZlllYXIuanMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy91dGlscy9kYXlqcy50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL3RpbWV6b25lLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvcmVzdWx0cy50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2NvbW1vbi9wYXJzZXJzL0Fic3RyYWN0UGFyc2VyV2l0aFdvcmRCb3VuZGFyeS50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvZW4vcGFyc2Vycy9FTlRpbWVVbml0V2l0aGluRm9ybWF0UGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9lbi9wYXJzZXJzL0VOTW9udGhOYW1lTGl0dGxlRW5kaWFuUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9lbi9wYXJzZXJzL0VOTW9udGhOYW1lTWlkZGxlRW5kaWFuUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9lbi9wYXJzZXJzL0VOTW9udGhOYW1lUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9lbi9wYXJzZXJzL0VOQ2FzdWFsWWVhck1vbnRoRGF5UGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9lbi9wYXJzZXJzL0VOU2xhc2hNb250aEZvcm1hdFBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2NvbW1vbi9wYXJzZXJzL0Fic3RyYWN0VGltZUV4cHJlc3Npb25QYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL2VuL3BhcnNlcnMvRU5UaW1lRXhwcmVzc2lvblBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL3V0aWxzL3RpbWV1bml0cy50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvZW4vcGFyc2Vycy9FTlRpbWVVbml0QWdvRm9ybWF0UGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9lbi9wYXJzZXJzL0VOVGltZVVuaXRMYXRlckZvcm1hdFBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2NvbW1vbi9hYnN0cmFjdFJlZmluZXJzLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvY29tbW9uL3JlZmluZXJzL0Fic3RyYWN0TWVyZ2VEYXRlUmFuZ2VSZWZpbmVyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9lbi9yZWZpbmVycy9FTk1lcmdlRGF0ZVJhbmdlUmVmaW5lci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2NhbGN1bGF0aW9uL21lcmdpbmdDYWxjdWxhdGlvbi50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2NvbW1vbi9yZWZpbmVycy9BYnN0cmFjdE1lcmdlRGF0ZVRpbWVSZWZpbmVyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9lbi9yZWZpbmVycy9FTk1lcmdlRGF0ZVRpbWVSZWZpbmVyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvY29tbW9uL3JlZmluZXJzL0V4dHJhY3RUaW1lem9uZUFiYnJSZWZpbmVyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvY29tbW9uL3JlZmluZXJzL0V4dHJhY3RUaW1lem9uZU9mZnNldFJlZmluZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9jb21tb24vcmVmaW5lcnMvT3ZlcmxhcFJlbW92YWxSZWZpbmVyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvY29tbW9uL3JlZmluZXJzL0ZvcndhcmREYXRlUmVmaW5lci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2NvbW1vbi9yZWZpbmVycy9Vbmxpa2VseUZvcm1hdEZpbHRlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2NvbW1vbi9wYXJzZXJzL0lTT0Zvcm1hdFBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2NvbW1vbi9yZWZpbmVycy9NZXJnZVdlZWtkYXlDb21wb25lbnRSZWZpbmVyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvY29uZmlndXJhdGlvbnMudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9jb21tb24vY2FzdWFsUmVmZXJlbmNlcy50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvZW4vcGFyc2Vycy9FTkNhc3VhbERhdGVQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL2VuL3BhcnNlcnMvRU5DYXN1YWxUaW1lUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvY2FsY3VsYXRpb24vd2Vla3MudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL2VuL3BhcnNlcnMvRU5XZWVrZGF5UGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9lbi9wYXJzZXJzL0VOUmVsYXRpdmVEYXRlRm9ybWF0UGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvY2hyb25vLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvY29tbW9uL3BhcnNlcnMvU2xhc2hEYXRlRm9ybWF0UGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9lbi9wYXJzZXJzL0VOVGltZVVuaXRDYXN1YWxSZWxhdGl2ZUZvcm1hdFBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvZW4vcmVmaW5lcnMvRU5NZXJnZVJlbGF0aXZlRGF0ZVJlZmluZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL2VuL2luZGV4LnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9kZS9wYXJzZXJzL0RFVGltZUV4cHJlc3Npb25QYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL2RlL2NvbnN0YW50cy50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvZGUvcGFyc2Vycy9ERVdlZWtkYXlQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL2RlL3BhcnNlcnMvREVTcGVjaWZpY1RpbWVFeHByZXNzaW9uUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9kZS9yZWZpbmVycy9ERU1lcmdlRGF0ZVJhbmdlUmVmaW5lci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvZGUvcmVmaW5lcnMvREVNZXJnZURhdGVUaW1lUmVmaW5lci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvZGUvcGFyc2Vycy9ERUNhc3VhbFRpbWVQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL2RlL3BhcnNlcnMvREVDYXN1YWxEYXRlUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9kZS9wYXJzZXJzL0RFTW9udGhOYW1lTGl0dGxlRW5kaWFuUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9kZS9wYXJzZXJzL0RFVGltZVVuaXRSZWxhdGl2ZUZvcm1hdFBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvZGUvaW5kZXgudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL2ZyL3BhcnNlcnMvRlJDYXN1YWxEYXRlUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9mci9wYXJzZXJzL0ZSQ2FzdWFsVGltZVBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvZnIvcGFyc2Vycy9GUlRpbWVFeHByZXNzaW9uUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9mci9yZWZpbmVycy9GUk1lcmdlRGF0ZVRpbWVSZWZpbmVyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9mci9yZWZpbmVycy9GUk1lcmdlRGF0ZVJhbmdlUmVmaW5lci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvZnIvY29uc3RhbnRzLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9mci9wYXJzZXJzL0ZSV2Vla2RheVBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvZnIvcGFyc2Vycy9GUlNwZWNpZmljVGltZUV4cHJlc3Npb25QYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL2ZyL3BhcnNlcnMvRlJNb250aE5hbWVMaXR0bGVFbmRpYW5QYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL2ZyL3BhcnNlcnMvRlJUaW1lVW5pdEFnb0Zvcm1hdFBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvZnIvcGFyc2Vycy9GUlRpbWVVbml0V2l0aGluRm9ybWF0UGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9mci9wYXJzZXJzL0ZSVGltZVVuaXRSZWxhdGl2ZUZvcm1hdFBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvZnIvaW5kZXgudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL2phL2NvbnN0YW50cy50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvamEvcGFyc2Vycy9KUFN0YW5kYXJkUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9qYS9yZWZpbmVycy9KUE1lcmdlRGF0ZVJhbmdlUmVmaW5lci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvamEvcGFyc2Vycy9KUENhc3VhbERhdGVQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL2phL2luZGV4LnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9wdC9jb25zdGFudHMudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3B0L3BhcnNlcnMvUFRXZWVrZGF5UGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9wdC9wYXJzZXJzL1BUVGltZUV4cHJlc3Npb25QYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3B0L3JlZmluZXJzL1BUTWVyZ2VEYXRlVGltZVJlZmluZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3B0L3JlZmluZXJzL1BUTWVyZ2VEYXRlUmFuZ2VSZWZpbmVyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9wdC9wYXJzZXJzL1BUTW9udGhOYW1lTGl0dGxlRW5kaWFuUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9wdC9wYXJzZXJzL1BUQ2FzdWFsRGF0ZVBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvcHQvcGFyc2Vycy9QVENhc3VhbFRpbWVQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3B0L2luZGV4LnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9ubC9yZWZpbmVycy9OTE1lcmdlRGF0ZVJhbmdlUmVmaW5lci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvbmwvcmVmaW5lcnMvTkxNZXJnZURhdGVUaW1lUmVmaW5lci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvbmwvcGFyc2Vycy9OTENhc3VhbERhdGVQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL25sL3BhcnNlcnMvTkxDYXN1YWxUaW1lUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9ubC9jb25zdGFudHMudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL25sL3BhcnNlcnMvTkxUaW1lVW5pdFdpdGhpbkZvcm1hdFBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvbmwvcGFyc2Vycy9OTFdlZWtkYXlQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL25sL3BhcnNlcnMvTkxNb250aE5hbWVNaWRkbGVFbmRpYW5QYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL25sL3BhcnNlcnMvTkxNb250aE5hbWVQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL25sL3BhcnNlcnMvTkxTbGFzaE1vbnRoRm9ybWF0UGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9ubC9wYXJzZXJzL05MVGltZUV4cHJlc3Npb25QYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL25sL3BhcnNlcnMvTkxDYXN1YWxZZWFyTW9udGhEYXlQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL25sL3BhcnNlcnMvTkxDYXN1YWxEYXRlVGltZVBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvbmwvcGFyc2Vycy9OTFRpbWVVbml0Q2FzdWFsUmVsYXRpdmVGb3JtYXRQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL25sL3BhcnNlcnMvTkxSZWxhdGl2ZURhdGVGb3JtYXRQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL25sL3BhcnNlcnMvTkxUaW1lVW5pdEFnb0Zvcm1hdFBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvbmwvcGFyc2Vycy9OTFRpbWVVbml0TGF0ZXJGb3JtYXRQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL25sL2luZGV4LnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy96aC9oYW50L3BhcnNlcnMvWkhIYW50Q2FzdWFsRGF0ZVBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvemgvaGFudC9jb25zdGFudHMudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3poL2hhbnQvcGFyc2Vycy9aSEhhbnREYXRlUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy96aC9oYW50L3BhcnNlcnMvWkhIYW50RGVhZGxpbmVGb3JtYXRQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3poL2hhbnQvcGFyc2Vycy9aSEhhbnRSZWxhdGlvbldlZWtkYXlQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3poL2hhbnQvcGFyc2Vycy9aSEhhbnRUaW1lRXhwcmVzc2lvblBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvemgvaGFudC9wYXJzZXJzL1pISGFudFdlZWtkYXlQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3poL2hhbnQvcmVmaW5lcnMvWkhIYW50TWVyZ2VEYXRlUmFuZ2VSZWZpbmVyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy96aC9oYW50L3JlZmluZXJzL1pISGFudE1lcmdlRGF0ZVRpbWVSZWZpbmVyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy96aC9oYW50L2luZGV4LnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy96aC9oYW5zL3BhcnNlcnMvWkhIYW5zQ2FzdWFsRGF0ZVBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvemgvaGFucy9jb25zdGFudHMudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3poL2hhbnMvcGFyc2Vycy9aSEhhbnNEYXRlUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy96aC9oYW5zL3BhcnNlcnMvWkhIYW5zRGVhZGxpbmVGb3JtYXRQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3poL2hhbnMvcGFyc2Vycy9aSEhhbnNSZWxhdGlvbldlZWtkYXlQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3poL2hhbnMvcGFyc2Vycy9aSEhhbnNUaW1lRXhwcmVzc2lvblBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvemgvaGFucy9wYXJzZXJzL1pISGFuc1dlZWtkYXlQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3poL2hhbnMvcmVmaW5lcnMvWkhIYW5zTWVyZ2VEYXRlUmFuZ2VSZWZpbmVyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy96aC9oYW5zL3JlZmluZXJzL1pISGFuc01lcmdlRGF0ZVRpbWVSZWZpbmVyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy96aC9oYW5zL2luZGV4LnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy96aC9pbmRleC50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvcnUvY29uc3RhbnRzLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9ydS9wYXJzZXJzL1JVVGltZVVuaXRXaXRoaW5Gb3JtYXRQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3J1L3BhcnNlcnMvUlVNb250aE5hbWVMaXR0bGVFbmRpYW5QYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3J1L3BhcnNlcnMvUlVNb250aE5hbWVQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3J1L3BhcnNlcnMvUlVUaW1lRXhwcmVzc2lvblBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvcnUvcGFyc2Vycy9SVVRpbWVVbml0QWdvRm9ybWF0UGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9ydS9yZWZpbmVycy9SVU1lcmdlRGF0ZVJhbmdlUmVmaW5lci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvcnUvcmVmaW5lcnMvUlVNZXJnZURhdGVUaW1lUmVmaW5lci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvcnUvcGFyc2Vycy9SVUNhc3VhbERhdGVQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3J1L3BhcnNlcnMvUlVDYXN1YWxUaW1lUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvbG9jYWxlcy9ydS9wYXJzZXJzL1JVV2Vla2RheVBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvcnUvcGFyc2Vycy9SVVJlbGF0aXZlRGF0ZUZvcm1hdFBhcnNlci50cyIsICJub2RlX21vZHVsZXMvY2hyb25vLW5vZGUvc3JjL2xvY2FsZXMvcnUvcGFyc2Vycy9SVVRpbWVVbml0Q2FzdWFsUmVsYXRpdmVGb3JtYXRQYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL2Nocm9uby1ub2RlL3NyYy9sb2NhbGVzL3J1L2luZGV4LnRzIiwgIm5vZGVfbW9kdWxlcy9jaHJvbm8tbm9kZS9zcmMvaW5kZXgudHMiLCAibm9kZV9tb2R1bGVzL2Jvb24tanMvbGliL3R5cGVzLmpzIiwgIm5vZGVfbW9kdWxlcy9ib29uLWpzL2xpYi9wYXJzZS9jb25zdC5qcyIsICJub2RlX21vZHVsZXMvYm9vbi1qcy9saWIvbGV4L2NvbnN0LmpzIiwgIm5vZGVfbW9kdWxlcy9ib29uLWpzL2xpYi9sZXgvdXRpbHMuanMiLCAibm9kZV9tb2R1bGVzL2Jvb24tanMvbGliL2xleC9sZXguanMiLCAibm9kZV9tb2R1bGVzL2Jvb24tanMvbGliL3BhcnNlL3V0aWxzLmpzIiwgIm5vZGVfbW9kdWxlcy9ib29uLWpzL2xpYi9wYXJzZS9wYXJzZS5qcyIsICJub2RlX21vZHVsZXMvYm9vbi1qcy9saWIvZXZhbHVhdGUvdXRpbHMuanMiLCAibm9kZV9tb2R1bGVzL2Jvb24tanMvbGliL2V2YWx1YXRlL2NvbnN0LmpzIiwgIm5vZGVfbW9kdWxlcy9ib29uLWpzL2xpYi9ldmFsdWF0ZS9ldmFsdWF0ZS5qcyIsICJub2RlX21vZHVsZXMvYm9vbi1qcy9saWIvaW5kZXguanMiLCAic3JjL21haW4udHMiLCAic3JjL0NhY2hlLnRzIiwgIm5vZGVfbW9kdWxlcy9hc3luYy1tdXRleC9pbmRleC5tanMiLCAic3JjL1Rhc2sudHMiLCAic3JjL0ZpbGUudHMiLCAic3JjL0NvbmZpZy9GZWF0dXJlLnRzIiwgInNyYy9Db25maWcvU2V0dGluZ3MudHMiLCAic3JjL0xheW91dE9wdGlvbnMudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy93ZWVrZGF5LnRzIiwgIm5vZGVfbW9kdWxlcy9ycnVsZS9zcmMvaGVscGVycy50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2RhdGV1dGlsLnRzIiwgIm5vZGVfbW9kdWxlcy9ycnVsZS9zcmMvaXRlcnJlc3VsdC50cyIsICJub2RlX21vZHVsZXMvdHNsaWIvbW9kdWxlcy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2NhbGxiYWNraXRlcnJlc3VsdC50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL25scC9pMThuLnRzIiwgIm5vZGVfbW9kdWxlcy9ycnVsZS9zcmMvbmxwL3RvdGV4dC50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL25scC9wYXJzZXRleHQudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy90eXBlcy50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL25scC9pbmRleC50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2RhdGV0aW1lLnRzIiwgIm5vZGVfbW9kdWxlcy9ycnVsZS9zcmMvcGFyc2VvcHRpb25zLnRzIiwgIm5vZGVfbW9kdWxlcy9ycnVsZS9zcmMvcGFyc2VzdHJpbmcudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9kYXRld2l0aHpvbmUudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9vcHRpb25zdG9zdHJpbmcudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9jYWNoZS50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL21hc2tzLnRzIiwgIm5vZGVfbW9kdWxlcy9ycnVsZS9zcmMvaXRlcmluZm8veWVhcmluZm8udHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9pdGVyaW5mby9tb250aGluZm8udHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9pdGVyaW5mby9lYXN0ZXIudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9pdGVyaW5mby9pbmRleC50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2l0ZXIvcG9zbGlzdC50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2l0ZXIvaW5kZXgudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9ycnVsZS50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL2l0ZXJzZXQudHMiLCAibm9kZV9tb2R1bGVzL3JydWxlL3NyYy9ycnVsZXN0ci50cyIsICJub2RlX21vZHVsZXMvcnJ1bGUvc3JjL3JydWxlc2V0LnRzIiwgInNyYy9RdWVyeS9Tb3J0LnRzIiwgInNyYy9SZWN1cnJlbmNlLnRzIiwgInNyYy9VcmdlbmN5LnRzIiwgInNyYy9EYXRlRmFsbGJhY2sudHMiLCAic3JjL2xpYi9MYXp5LnRzIiwgInNyYy9Db21tYW5kcy9DcmVhdGVPckVkaXQudHMiLCAic3JjL1Rhc2tNb2RhbC50cyIsICJub2RlX21vZHVsZXMvc3ZlbHRlL2ludGVybmFsL2luZGV4Lm1qcyIsICJzcmMvdWkvRWRpdFRhc2suc3ZlbHRlIiwgInNyYy9EYXRlQWJicmV2aWF0aW9ucy50cyIsICJzcmMvQ29tbWFuZHMvQ3JlYXRlT3JFZGl0VGFza1BhcnNlci50cyIsICJzcmMvQ29tbWFuZHMvVG9nZ2xlRG9uZS50cyIsICJzcmMvQ29tbWFuZHMvaW5kZXgudHMiLCAic3JjL1Rhc2tzRXZlbnRzLnRzIiwgInNyYy9JbmxpbmVSZW5kZXJlci50cyIsICJzcmMvTGl2ZVByZXZpZXdFeHRlbnNpb24udHMiLCAic3JjL1F1ZXJ5UmVuZGVyZXIudHMiLCAic3JjL1F1ZXJ5L01hdGNoZXJzL0lTdHJpbmdNYXRjaGVyLnRzIiwgInNyYy9RdWVyeS9NYXRjaGVycy9TdWJzdHJpbmdNYXRjaGVyLnRzIiwgInNyYy9RdWVyeS9NYXRjaGVycy9SZWdleE1hdGNoZXIudHMiLCAic3JjL1F1ZXJ5L0V4cGxhaW4vRXhwbGFuYXRpb24udHMiLCAic3JjL1F1ZXJ5L0ZpbHRlci9GaWVsZC50cyIsICJzcmMvUXVlcnkvRmlsdGVyL0ZpbHRlci50cyIsICJzcmMvUXVlcnkvRmlsdGVyL1RleHRGaWVsZC50cyIsICJzcmMvUXVlcnkvRmlsdGVyL0Rlc2NyaXB0aW9uRmllbGQudHMiLCAic3JjL1F1ZXJ5L0RhdGVQYXJzZXIudHMiLCAic3JjL1F1ZXJ5L0ZpbHRlci9GaWx0ZXJJbnN0cnVjdGlvbi50cyIsICJzcmMvUXVlcnkvRmlsdGVyL0ZpbHRlckluc3RydWN0aW9ucy50cyIsICJzcmMvUXVlcnkvRmlsdGVyL0RhdGVGaWVsZC50cyIsICJzcmMvUXVlcnkvRmlsdGVyL0RvbmVEYXRlRmllbGQudHMiLCAic3JjL1F1ZXJ5L0ZpbHRlci9EdWVEYXRlRmllbGQudHMiLCAic3JjL1F1ZXJ5L0ZpbHRlci9GaWx0ZXJJbnN0cnVjdGlvbnNCYXNlZEZpZWxkLnRzIiwgInNyYy9RdWVyeS9GaWx0ZXIvRXhjbHVkZVN1Ykl0ZW1zRmllbGQudHMiLCAic3JjL1F1ZXJ5L0ZpbHRlci9IZWFkaW5nRmllbGQudHMiLCAic3JjL1F1ZXJ5L0ZpbHRlci9QYXRoRmllbGQudHMiLCAic3JjL1F1ZXJ5L0ZpbHRlci9Qcmlvcml0eUZpZWxkLnRzIiwgInNyYy9RdWVyeS9GaWx0ZXIvU2NoZWR1bGVkRGF0ZUZpZWxkLnRzIiwgInNyYy9RdWVyeS9GaWx0ZXIvU3RhcnREYXRlRmllbGQudHMiLCAic3JjL1F1ZXJ5L0ZpbHRlci9IYXBwZW5zRGF0ZUZpZWxkLnRzIiwgInNyYy9RdWVyeS9GaWx0ZXIvUmVjdXJyaW5nRmllbGQudHMiLCAic3JjL1F1ZXJ5L0ZpbHRlci9TdGF0dXNGaWVsZC50cyIsICJzcmMvUXVlcnkvRmlsdGVyL011bHRpVGV4dEZpZWxkLnRzIiwgInNyYy9RdWVyeS9GaWx0ZXIvVGFnc0ZpZWxkLnRzIiwgInNyYy9RdWVyeS9GaWx0ZXIvQm9vbGVhbkZpZWxkLnRzIiwgInNyYy9RdWVyeS9GaWx0ZXIvRmlsZW5hbWVGaWVsZC50cyIsICJzcmMvUXVlcnkvRmlsdGVyUGFyc2VyLnRzIiwgInNyYy9RdWVyeS9Hcm91cEhlYWRpbmcudHMiLCAic3JjL1F1ZXJ5L0dyb3VwSGVhZGluZ3MudHMiLCAic3JjL1F1ZXJ5L0dyb3VwaW5nVHJlZU5vZGUudHMiLCAic3JjL1F1ZXJ5L0ludGVybWVkaWF0ZVRhc2tHcm91cHMudHMiLCAic3JjL1F1ZXJ5L1Rhc2tHcm91cC50cyIsICJzcmMvUXVlcnkvVGFza0dyb3Vwcy50cyIsICJzcmMvUXVlcnkvR3JvdXAudHMiLCAic3JjL1F1ZXJ5L1F1ZXJ5LnRzIiwgInNyYy9Db25maWcvU2V0dGluZ3NUYWIudHMiLCAic3JjL1N1Z2dlc3Rvci9FZGl0b3JTdWdnZXN0b3JQb3B1cC50cyIsICJzcmMvU3VnZ2VzdG9yL1N1Z2dlc3Rvci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBnbG9iYWwsIGRlZmluZSwgU3lzdGVtLCBSZWZsZWN0LCBQcm9taXNlICovXHJcbnZhciBfX2V4dGVuZHM7XHJcbnZhciBfX2Fzc2lnbjtcclxudmFyIF9fcmVzdDtcclxudmFyIF9fZGVjb3JhdGU7XHJcbnZhciBfX3BhcmFtO1xyXG52YXIgX19tZXRhZGF0YTtcclxudmFyIF9fYXdhaXRlcjtcclxudmFyIF9fZ2VuZXJhdG9yO1xyXG52YXIgX19leHBvcnRTdGFyO1xyXG52YXIgX192YWx1ZXM7XHJcbnZhciBfX3JlYWQ7XHJcbnZhciBfX3NwcmVhZDtcclxudmFyIF9fc3ByZWFkQXJyYXlzO1xyXG52YXIgX19zcHJlYWRBcnJheTtcclxudmFyIF9fYXdhaXQ7XHJcbnZhciBfX2FzeW5jR2VuZXJhdG9yO1xyXG52YXIgX19hc3luY0RlbGVnYXRvcjtcclxudmFyIF9fYXN5bmNWYWx1ZXM7XHJcbnZhciBfX21ha2VUZW1wbGF0ZU9iamVjdDtcclxudmFyIF9faW1wb3J0U3RhcjtcclxudmFyIF9faW1wb3J0RGVmYXVsdDtcclxudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQ7XHJcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0O1xyXG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEluO1xyXG52YXIgX19jcmVhdGVCaW5kaW5nO1xyXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcclxuICAgIHZhciByb290ID0gdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHR5cGVvZiB0aGlzID09PSBcIm9iamVjdFwiID8gdGhpcyA6IHt9O1xyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgZGVmaW5lKFwidHNsaWJcIiwgW1wiZXhwb3J0c1wiXSwgZnVuY3Rpb24gKGV4cG9ydHMpIHsgZmFjdG9yeShjcmVhdGVFeHBvcnRlcihyb290LCBjcmVhdGVFeHBvcnRlcihleHBvcnRzKSkpOyB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgZmFjdG9yeShjcmVhdGVFeHBvcnRlcihyb290LCBjcmVhdGVFeHBvcnRlcihtb2R1bGUuZXhwb3J0cykpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZhY3RvcnkoY3JlYXRlRXhwb3J0ZXIocm9vdCkpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY3JlYXRlRXhwb3J0ZXIoZXhwb3J0cywgcHJldmlvdXMpIHtcclxuICAgICAgICBpZiAoZXhwb3J0cyAhPT0gcm9vdCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlkLCB2KSB7IHJldHVybiBleHBvcnRzW2lkXSA9IHByZXZpb3VzID8gcHJldmlvdXMoaWQsIHYpIDogdjsgfTtcclxuICAgIH1cclxufSlcclxuKGZ1bmN0aW9uIChleHBvcnRlcikge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuXHJcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcblxyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3Jlc3QgPSBmdW5jdGlvbiAocywgZSkge1xyXG4gICAgICAgIHZhciB0ID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fZGVjb3JhdGUgPSBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgICAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICAgICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgICAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3BhcmFtID0gZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX21ldGFkYXRhID0gZnVuY3Rpb24gKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgX19hd2FpdGVyID0gZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fZ2VuZXJhdG9yID0gZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgICAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgX19leHBvcnRTdGFyID0gZnVuY3Rpb24obSwgbykge1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxuICAgIH07XHJcblxyXG4gICAgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XHJcbiAgICAgICAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XHJcbiAgICB9KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICAgICAgb1trMl0gPSBtW2tdO1xyXG4gICAgfSk7XHJcblxyXG4gICAgX192YWx1ZXMgPSBmdW5jdGlvbiAobykge1xyXG4gICAgICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICAgICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICAgICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fcmVhZCA9IGZ1bmN0aW9uIChvLCBuKSB7XHJcbiAgICAgICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICAgICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqIEBkZXByZWNhdGVkICovXHJcbiAgICBfX3NwcmVhZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgICAgIHJldHVybiBhcjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqIEBkZXByZWNhdGVkICovXHJcbiAgICBfX3NwcmVhZEFycmF5cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgICAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fc3ByZWFkQXJyYXkgPSBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcclxuICAgICAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2F3YWl0ID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxuICAgIH07XHJcblxyXG4gICAgX19hc3luY0dlbmVyYXRvciA9IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgICAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICAgICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7ICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgICAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9fYXN5bmNEZWxlZ2F0b3IgPSBmdW5jdGlvbiAobykge1xyXG4gICAgICAgIHZhciBpLCBwO1xyXG4gICAgICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICAgICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX2FzeW5jVmFsdWVzID0gZnVuY3Rpb24gKG8pIHtcclxuICAgICAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICAgICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgICAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9fbWFrZVRlbXBsYXRlT2JqZWN0ID0gZnVuY3Rpb24gKGNvb2tlZCwgcmF3KSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgICAgICByZXR1cm4gY29va2VkO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG4gICAgfSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICAgICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2ltcG9ydFN0YXIgPSBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICAgICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgICAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICAgICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgX19pbXBvcnREZWZhdWx0ID0gZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgICAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgICAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgICAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICAgICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICAgICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fY2xhc3NQcml2YXRlRmllbGRJbiA9IGZ1bmN0aW9uIChzdGF0ZSwgcmVjZWl2ZXIpIHtcclxuICAgICAgICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRlcihcIl9fZXh0ZW5kc1wiLCBfX2V4dGVuZHMpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2Fzc2lnblwiLCBfX2Fzc2lnbik7XHJcbiAgICBleHBvcnRlcihcIl9fcmVzdFwiLCBfX3Jlc3QpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2RlY29yYXRlXCIsIF9fZGVjb3JhdGUpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3BhcmFtXCIsIF9fcGFyYW0pO1xyXG4gICAgZXhwb3J0ZXIoXCJfX21ldGFkYXRhXCIsIF9fbWV0YWRhdGEpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2F3YWl0ZXJcIiwgX19hd2FpdGVyKTtcclxuICAgIGV4cG9ydGVyKFwiX19nZW5lcmF0b3JcIiwgX19nZW5lcmF0b3IpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2V4cG9ydFN0YXJcIiwgX19leHBvcnRTdGFyKTtcclxuICAgIGV4cG9ydGVyKFwiX19jcmVhdGVCaW5kaW5nXCIsIF9fY3JlYXRlQmluZGluZyk7XHJcbiAgICBleHBvcnRlcihcIl9fdmFsdWVzXCIsIF9fdmFsdWVzKTtcclxuICAgIGV4cG9ydGVyKFwiX19yZWFkXCIsIF9fcmVhZCk7XHJcbiAgICBleHBvcnRlcihcIl9fc3ByZWFkXCIsIF9fc3ByZWFkKTtcclxuICAgIGV4cG9ydGVyKFwiX19zcHJlYWRBcnJheXNcIiwgX19zcHJlYWRBcnJheXMpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3NwcmVhZEFycmF5XCIsIF9fc3ByZWFkQXJyYXkpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2F3YWl0XCIsIF9fYXdhaXQpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2FzeW5jR2VuZXJhdG9yXCIsIF9fYXN5bmNHZW5lcmF0b3IpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2FzeW5jRGVsZWdhdG9yXCIsIF9fYXN5bmNEZWxlZ2F0b3IpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2FzeW5jVmFsdWVzXCIsIF9fYXN5bmNWYWx1ZXMpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX21ha2VUZW1wbGF0ZU9iamVjdFwiLCBfX21ha2VUZW1wbGF0ZU9iamVjdCk7XHJcbiAgICBleHBvcnRlcihcIl9faW1wb3J0U3RhclwiLCBfX2ltcG9ydFN0YXIpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2ltcG9ydERlZmF1bHRcIiwgX19pbXBvcnREZWZhdWx0KTtcclxuICAgIGV4cG9ydGVyKFwiX19jbGFzc1ByaXZhdGVGaWVsZEdldFwiLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KTtcclxuICAgIGV4cG9ydGVyKFwiX19jbGFzc1ByaXZhdGVGaWVsZFNldFwiLCBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KTtcclxuICAgIGV4cG9ydGVyKFwiX19jbGFzc1ByaXZhdGVGaWVsZEluXCIsIF9fY2xhc3NQcml2YXRlRmllbGRJbik7XHJcbn0pO1xyXG4iLCBudWxsLCAiIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6KHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczp0fHxzZWxmKS5kYXlqcz1lKCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9MWUzLGU9NmU0LG49MzZlNSxyPVwibWlsbGlzZWNvbmRcIixpPVwic2Vjb25kXCIscz1cIm1pbnV0ZVwiLHU9XCJob3VyXCIsYT1cImRheVwiLG89XCJ3ZWVrXCIsZj1cIm1vbnRoXCIsaD1cInF1YXJ0ZXJcIixjPVwieWVhclwiLGQ9XCJkYXRlXCIsJD1cIkludmFsaWQgRGF0ZVwiLGw9L14oXFxkezR9KVstL10/KFxcZHsxLDJ9KT9bLS9dPyhcXGR7MCwyfSlbVHRcXHNdKihcXGR7MSwyfSk/Oj8oXFxkezEsMn0pPzo/KFxcZHsxLDJ9KT9bLjpdPyhcXGQrKT8kLyx5PS9cXFsoW15cXF1dKyldfFl7MSw0fXxNezEsNH18RHsxLDJ9fGR7MSw0fXxIezEsMn18aHsxLDJ9fGF8QXxtezEsMn18c3sxLDJ9fFp7MSwyfXxTU1MvZyxNPXtuYW1lOlwiZW5cIix3ZWVrZGF5czpcIlN1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5XCIuc3BsaXQoXCJfXCIpLG1vbnRoczpcIkphbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXJcIi5zcGxpdChcIl9cIil9LG09ZnVuY3Rpb24odCxlLG4pe3ZhciByPVN0cmluZyh0KTtyZXR1cm4hcnx8ci5sZW5ndGg+PWU/dDpcIlwiK0FycmF5KGUrMS1yLmxlbmd0aCkuam9pbihuKSt0fSxnPXtzOm0sejpmdW5jdGlvbih0KXt2YXIgZT0tdC51dGNPZmZzZXQoKSxuPU1hdGguYWJzKGUpLHI9TWF0aC5mbG9vcihuLzYwKSxpPW4lNjA7cmV0dXJuKGU8PTA/XCIrXCI6XCItXCIpK20ociwyLFwiMFwiKStcIjpcIittKGksMixcIjBcIil9LG06ZnVuY3Rpb24gdChlLG4pe2lmKGUuZGF0ZSgpPG4uZGF0ZSgpKXJldHVybi10KG4sZSk7dmFyIHI9MTIqKG4ueWVhcigpLWUueWVhcigpKSsobi5tb250aCgpLWUubW9udGgoKSksaT1lLmNsb25lKCkuYWRkKHIsZikscz1uLWk8MCx1PWUuY2xvbmUoKS5hZGQocisocz8tMToxKSxmKTtyZXR1cm4rKC0ocisobi1pKS8ocz9pLXU6dS1pKSl8fDApfSxhOmZ1bmN0aW9uKHQpe3JldHVybiB0PDA/TWF0aC5jZWlsKHQpfHwwOk1hdGguZmxvb3IodCl9LHA6ZnVuY3Rpb24odCl7cmV0dXJue006Zix5OmMsdzpvLGQ6YSxEOmQsaDp1LG06cyxzOmksbXM6cixROmh9W3RdfHxTdHJpbmcodHx8XCJcIikudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9zJC8sXCJcIil9LHU6ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXR9fSxEPVwiZW5cIix2PXt9O3ZbRF09TTt2YXIgcD1mdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIF99LFM9ZnVuY3Rpb24odCxlLG4pe3ZhciByO2lmKCF0KXJldHVybiBEO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXZbdF0mJihyPXQpLGUmJih2W3RdPWUscj10KTtlbHNle3ZhciBpPXQubmFtZTt2W2ldPXQscj1pfXJldHVybiFuJiZyJiYoRD1yKSxyfHwhbiYmRH0sdz1mdW5jdGlvbih0LGUpe2lmKHAodCkpcmV0dXJuIHQuY2xvbmUoKTt2YXIgbj1cIm9iamVjdFwiPT10eXBlb2YgZT9lOnt9O3JldHVybiBuLmRhdGU9dCxuLmFyZ3M9YXJndW1lbnRzLG5ldyBfKG4pfSxPPWc7Ty5sPVMsTy5pPXAsTy53PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHcodCx7bG9jYWxlOmUuJEwsdXRjOmUuJHUseDplLiR4LCRvZmZzZXQ6ZS4kb2Zmc2V0fSl9O3ZhciBfPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gTSh0KXt0aGlzLiRMPVModC5sb2NhbGUsbnVsbCwhMCksdGhpcy5wYXJzZSh0KX12YXIgbT1NLnByb3RvdHlwZTtyZXR1cm4gbS5wYXJzZT1mdW5jdGlvbih0KXt0aGlzLiRkPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZGF0ZSxuPXQudXRjO2lmKG51bGw9PT1lKXJldHVybiBuZXcgRGF0ZShOYU4pO2lmKE8udShlKSlyZXR1cm4gbmV3IERhdGU7aWYoZSBpbnN0YW5jZW9mIERhdGUpcmV0dXJuIG5ldyBEYXRlKGUpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYhL1okL2kudGVzdChlKSl7dmFyIHI9ZS5tYXRjaChsKTtpZihyKXt2YXIgaT1yWzJdLTF8fDAscz0ocls3XXx8XCIwXCIpLnN1YnN0cmluZygwLDMpO3JldHVybiBuP25ldyBEYXRlKERhdGUuVVRDKHJbMV0saSxyWzNdfHwxLHJbNF18fDAscls1XXx8MCxyWzZdfHwwLHMpKTpuZXcgRGF0ZShyWzFdLGksclszXXx8MSxyWzRdfHwwLHJbNV18fDAscls2XXx8MCxzKX19cmV0dXJuIG5ldyBEYXRlKGUpfSh0KSx0aGlzLiR4PXQueHx8e30sdGhpcy5pbml0KCl9LG0uaW5pdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuJGQ7dGhpcy4keT10LmdldEZ1bGxZZWFyKCksdGhpcy4kTT10LmdldE1vbnRoKCksdGhpcy4kRD10LmdldERhdGUoKSx0aGlzLiRXPXQuZ2V0RGF5KCksdGhpcy4kSD10LmdldEhvdXJzKCksdGhpcy4kbT10LmdldE1pbnV0ZXMoKSx0aGlzLiRzPXQuZ2V0U2Vjb25kcygpLHRoaXMuJG1zPXQuZ2V0TWlsbGlzZWNvbmRzKCl9LG0uJHV0aWxzPWZ1bmN0aW9uKCl7cmV0dXJuIE99LG0uaXNWYWxpZD1mdW5jdGlvbigpe3JldHVybiEodGhpcy4kZC50b1N0cmluZygpPT09JCl9LG0uaXNTYW1lPWZ1bmN0aW9uKHQsZSl7dmFyIG49dyh0KTtyZXR1cm4gdGhpcy5zdGFydE9mKGUpPD1uJiZuPD10aGlzLmVuZE9mKGUpfSxtLmlzQWZ0ZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdyh0KTx0aGlzLnN0YXJ0T2YoZSl9LG0uaXNCZWZvcmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5lbmRPZihlKTx3KHQpfSxtLiRnPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gTy51KHQpP3RoaXNbZV06dGhpcy5zZXQobix0KX0sbS51bml4PWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkvMWUzKX0sbS52YWx1ZU9mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQuZ2V0VGltZSgpfSxtLnN0YXJ0T2Y9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLHI9ISFPLnUoZSl8fGUsaD1PLnAodCksJD1mdW5jdGlvbih0LGUpe3ZhciBpPU8udyhuLiR1P0RhdGUuVVRDKG4uJHksZSx0KTpuZXcgRGF0ZShuLiR5LGUsdCksbik7cmV0dXJuIHI/aTppLmVuZE9mKGEpfSxsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE8udyhuLnRvRGF0ZSgpW3RdLmFwcGx5KG4udG9EYXRlKFwic1wiKSwocj9bMCwwLDAsMF06WzIzLDU5LDU5LDk5OV0pLnNsaWNlKGUpKSxuKX0seT10aGlzLiRXLE09dGhpcy4kTSxtPXRoaXMuJEQsZz1cInNldFwiKyh0aGlzLiR1P1wiVVRDXCI6XCJcIik7c3dpdGNoKGgpe2Nhc2UgYzpyZXR1cm4gcj8kKDEsMCk6JCgzMSwxMSk7Y2FzZSBmOnJldHVybiByPyQoMSxNKTokKDAsTSsxKTtjYXNlIG86dmFyIEQ9dGhpcy4kbG9jYWxlKCkud2Vla1N0YXJ0fHwwLHY9KHk8RD95Kzc6eSktRDtyZXR1cm4gJChyP20tdjptKyg2LXYpLE0pO2Nhc2UgYTpjYXNlIGQ6cmV0dXJuIGwoZytcIkhvdXJzXCIsMCk7Y2FzZSB1OnJldHVybiBsKGcrXCJNaW51dGVzXCIsMSk7Y2FzZSBzOnJldHVybiBsKGcrXCJTZWNvbmRzXCIsMik7Y2FzZSBpOnJldHVybiBsKGcrXCJNaWxsaXNlY29uZHNcIiwzKTtkZWZhdWx0OnJldHVybiB0aGlzLmNsb25lKCl9fSxtLmVuZE9mPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnN0YXJ0T2YodCwhMSl9LG0uJHNldD1mdW5jdGlvbih0LGUpe3ZhciBuLG89Ty5wKHQpLGg9XCJzZXRcIisodGhpcy4kdT9cIlVUQ1wiOlwiXCIpLCQ9KG49e30sblthXT1oK1wiRGF0ZVwiLG5bZF09aCtcIkRhdGVcIixuW2ZdPWgrXCJNb250aFwiLG5bY109aCtcIkZ1bGxZZWFyXCIsblt1XT1oK1wiSG91cnNcIixuW3NdPWgrXCJNaW51dGVzXCIsbltpXT1oK1wiU2Vjb25kc1wiLG5bcl09aCtcIk1pbGxpc2Vjb25kc1wiLG4pW29dLGw9bz09PWE/dGhpcy4kRCsoZS10aGlzLiRXKTplO2lmKG89PT1mfHxvPT09Yyl7dmFyIHk9dGhpcy5jbG9uZSgpLnNldChkLDEpO3kuJGRbJF0obCkseS5pbml0KCksdGhpcy4kZD15LnNldChkLE1hdGgubWluKHRoaXMuJEQseS5kYXlzSW5Nb250aCgpKSkuJGR9ZWxzZSAkJiZ0aGlzLiRkWyRdKGwpO3JldHVybiB0aGlzLmluaXQoKSx0aGlzfSxtLnNldD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmNsb25lKCkuJHNldCh0LGUpfSxtLmdldD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpc1tPLnAodCldKCl9LG0uYWRkPWZ1bmN0aW9uKHIsaCl7dmFyIGQsJD10aGlzO3I9TnVtYmVyKHIpO3ZhciBsPU8ucChoKSx5PWZ1bmN0aW9uKHQpe3ZhciBlPXcoJCk7cmV0dXJuIE8udyhlLmRhdGUoZS5kYXRlKCkrTWF0aC5yb3VuZCh0KnIpKSwkKX07aWYobD09PWYpcmV0dXJuIHRoaXMuc2V0KGYsdGhpcy4kTStyKTtpZihsPT09YylyZXR1cm4gdGhpcy5zZXQoYyx0aGlzLiR5K3IpO2lmKGw9PT1hKXJldHVybiB5KDEpO2lmKGw9PT1vKXJldHVybiB5KDcpO3ZhciBNPShkPXt9LGRbc109ZSxkW3VdPW4sZFtpXT10LGQpW2xdfHwxLG09dGhpcy4kZC5nZXRUaW1lKCkrcipNO3JldHVybiBPLncobSx0aGlzKX0sbS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFkZCgtMSp0LGUpfSxtLmZvcm1hdD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49dGhpcy4kbG9jYWxlKCk7aWYoIXRoaXMuaXNWYWxpZCgpKXJldHVybiBuLmludmFsaWREYXRlfHwkO3ZhciByPXR8fFwiWVlZWS1NTS1ERFRISDptbTpzc1pcIixpPU8ueih0aGlzKSxzPXRoaXMuJEgsdT10aGlzLiRtLGE9dGhpcy4kTSxvPW4ud2Vla2RheXMsZj1uLm1vbnRocyxoPWZ1bmN0aW9uKHQsbixpLHMpe3JldHVybiB0JiYodFtuXXx8dChlLHIpKXx8aVtuXS5zdWJzdHIoMCxzKX0sYz1mdW5jdGlvbih0KXtyZXR1cm4gTy5zKHMlMTJ8fDEyLHQsXCIwXCIpfSxkPW4ubWVyaWRpZW18fGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10PDEyP1wiQU1cIjpcIlBNXCI7cmV0dXJuIG4/ci50b0xvd2VyQ2FzZSgpOnJ9LGw9e1lZOlN0cmluZyh0aGlzLiR5KS5zbGljZSgtMiksWVlZWTp0aGlzLiR5LE06YSsxLE1NOk8ucyhhKzEsMixcIjBcIiksTU1NOmgobi5tb250aHNTaG9ydCxhLGYsMyksTU1NTTpoKGYsYSksRDp0aGlzLiRELEREOk8ucyh0aGlzLiRELDIsXCIwXCIpLGQ6U3RyaW5nKHRoaXMuJFcpLGRkOmgobi53ZWVrZGF5c01pbix0aGlzLiRXLG8sMiksZGRkOmgobi53ZWVrZGF5c1Nob3J0LHRoaXMuJFcsbywzKSxkZGRkOm9bdGhpcy4kV10sSDpTdHJpbmcocyksSEg6Ty5zKHMsMixcIjBcIiksaDpjKDEpLGhoOmMoMiksYTpkKHMsdSwhMCksQTpkKHMsdSwhMSksbTpTdHJpbmcodSksbW06Ty5zKHUsMixcIjBcIiksczpTdHJpbmcodGhpcy4kcyksc3M6Ty5zKHRoaXMuJHMsMixcIjBcIiksU1NTOk8ucyh0aGlzLiRtcywzLFwiMFwiKSxaOml9O3JldHVybiByLnJlcGxhY2UoeSwoZnVuY3Rpb24odCxlKXtyZXR1cm4gZXx8bFt0XXx8aS5yZXBsYWNlKFwiOlwiLFwiXCIpfSkpfSxtLnV0Y09mZnNldD1mdW5jdGlvbigpe3JldHVybiAxNSotTWF0aC5yb3VuZCh0aGlzLiRkLmdldFRpbWV6b25lT2Zmc2V0KCkvMTUpfSxtLmRpZmY9ZnVuY3Rpb24ocixkLCQpe3ZhciBsLHk9Ty5wKGQpLE09dyhyKSxtPShNLnV0Y09mZnNldCgpLXRoaXMudXRjT2Zmc2V0KCkpKmUsZz10aGlzLU0sRD1PLm0odGhpcyxNKTtyZXR1cm4gRD0obD17fSxsW2NdPUQvMTIsbFtmXT1ELGxbaF09RC8zLGxbb109KGctbSkvNjA0OGU1LGxbYV09KGctbSkvODY0ZTUsbFt1XT1nL24sbFtzXT1nL2UsbFtpXT1nL3QsbClbeV18fGcsJD9EOk8uYShEKX0sbS5kYXlzSW5Nb250aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuZE9mKGYpLiREfSxtLiRsb2NhbGU9ZnVuY3Rpb24oKXtyZXR1cm4gdlt0aGlzLiRMXX0sbS5sb2NhbGU9ZnVuY3Rpb24odCxlKXtpZighdClyZXR1cm4gdGhpcy4kTDt2YXIgbj10aGlzLmNsb25lKCkscj1TKHQsZSwhMCk7cmV0dXJuIHImJihuLiRMPXIpLG59LG0uY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gTy53KHRoaXMuJGQsdGhpcyl9LG0udG9EYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKX0sbS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc1ZhbGlkKCk/dGhpcy50b0lTT1N0cmluZygpOm51bGx9LG0udG9JU09TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC50b0lTT1N0cmluZygpfSxtLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQudG9VVENTdHJpbmcoKX0sTX0oKSxiPV8ucHJvdG90eXBlO3JldHVybiB3LnByb3RvdHlwZT1iLFtbXCIkbXNcIixyXSxbXCIkc1wiLGldLFtcIiRtXCIsc10sW1wiJEhcIix1XSxbXCIkV1wiLGFdLFtcIiRNXCIsZl0sW1wiJHlcIixjXSxbXCIkRFwiLGRdXS5mb3JFYWNoKChmdW5jdGlvbih0KXtiW3RbMV1dPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLiRnKGUsdFswXSx0WzFdKX19KSksdy5leHRlbmQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC4kaXx8KHQoZSxfLHcpLHQuJGk9ITApLHd9LHcubG9jYWxlPVMsdy5pc0RheWpzPXAsdy51bml4PWZ1bmN0aW9uKHQpe3JldHVybiB3KDFlMyp0KX0sdy5lbj12W0RdLHcuTHM9dix3LnA9e30sd30pKTsiLCBudWxsLCBudWxsLCAiIWZ1bmN0aW9uKHQsbil7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9bigpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUobik6KHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczp0fHxzZWxmKS5kYXlqc19wbHVnaW5fcXVhcnRlck9mWWVhcj1uKCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9XCJtb250aFwiLG49XCJxdWFydGVyXCI7cmV0dXJuIGZ1bmN0aW9uKGUsaSl7dmFyIHI9aS5wcm90b3R5cGU7ci5xdWFydGVyPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLiR1dGlscygpLnUodCk/TWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkrMSkvMyk6dGhpcy5tb250aCh0aGlzLm1vbnRoKCklMyszKih0LTEpKX07dmFyIHM9ci5hZGQ7ci5hZGQ9ZnVuY3Rpb24oZSxpKXtyZXR1cm4gZT1OdW1iZXIoZSksdGhpcy4kdXRpbHMoKS5wKGkpPT09bj90aGlzLmFkZCgzKmUsdCk6cy5iaW5kKHRoaXMpKGUsaSl9O3ZhciB1PXIuc3RhcnRPZjtyLnN0YXJ0T2Y9ZnVuY3Rpb24oZSxpKXt2YXIgcj10aGlzLiR1dGlscygpLHM9ISFyLnUoaSl8fGk7aWYoci5wKGUpPT09bil7dmFyIG89dGhpcy5xdWFydGVyKCktMTtyZXR1cm4gcz90aGlzLm1vbnRoKDMqbykuc3RhcnRPZih0KS5zdGFydE9mKFwiZGF5XCIpOnRoaXMubW9udGgoMypvKzIpLmVuZE9mKHQpLmVuZE9mKFwiZGF5XCIpfXJldHVybiB1LmJpbmQodGhpcykoZSxpKX19fSkpOyIsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsICJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgT3BlcmF0b3JzO1xuKGZ1bmN0aW9uIChPcGVyYXRvcnMpIHtcbiAgICBPcGVyYXRvcnNbXCJBTkRcIl0gPSBcIkFORFwiO1xuICAgIE9wZXJhdG9yc1tcIk9SXCJdID0gXCJPUlwiO1xuICAgIE9wZXJhdG9yc1tcIlhPUlwiXSA9IFwiWE9SXCI7XG4gICAgT3BlcmF0b3JzW1wiTk9UXCJdID0gXCJOT1RcIjtcbn0pKE9wZXJhdG9ycyA9IGV4cG9ydHMuT3BlcmF0b3JzIHx8IChleHBvcnRzLk9wZXJhdG9ycyA9IHt9KSk7XG52YXIgU3RydWN0dXJhbENoYXJhY3RlcnM7XG4oZnVuY3Rpb24gKFN0cnVjdHVyYWxDaGFyYWN0ZXJzKSB7XG4gICAgU3RydWN0dXJhbENoYXJhY3RlcnNbXCJPUEVOX1BBUkVOVEhFU0lTXCJdID0gXCIoXCI7XG4gICAgU3RydWN0dXJhbENoYXJhY3RlcnNbXCJDTE9TRV9QQVJFTlRIRVNJU1wiXSA9IFwiKVwiO1xufSkoU3RydWN0dXJhbENoYXJhY3RlcnMgPSBleHBvcnRzLlN0cnVjdHVyYWxDaGFyYWN0ZXJzIHx8IChleHBvcnRzLlN0cnVjdHVyYWxDaGFyYWN0ZXJzID0ge30pKTtcbnZhciBUb2tlbnM7XG4oZnVuY3Rpb24gKFRva2Vucykge1xuICAgIFRva2Vuc1tcIklERU5USUZJRVJcIl0gPSBcIklERU5USUZJRVJcIjtcbiAgICBUb2tlbnNbXCJPUEVSQVRPUlwiXSA9IFwiT1BFUkFUT1JcIjtcbiAgICBUb2tlbnNbXCJTVFJVQ1RVUkFMX0NIQVJBQ1RFUlwiXSA9IFwiU1RSVUNUVVJBTF9DSEFSQUNURVJcIjtcbiAgICBUb2tlbnNbXCJFT0ZcIl0gPSBcIkVPRlwiO1xuICAgIFRva2Vuc1tcIkNPTU1FTlRcIl0gPSBcIkNPTU1FTlRcIjtcbn0pKFRva2VucyA9IGV4cG9ydHMuVG9rZW5zIHx8IChleHBvcnRzLlRva2VucyA9IHt9KSk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XG5leHBvcnRzLk9QRVJBVE9SX1BSRUNFREVOQ0UgPSB7XG4gICAgTk9UOiAwLFxuICAgIFhPUjogMSxcbiAgICBBTkQ6IDIsXG4gICAgT1I6IDNcbn07XG5leHBvcnRzLlZBTElEX1RPS0VOUyA9IHtcbiAgICBpZGVudGlmaWVyT25seTogW1xuICAgICAgICB7IG5hbWU6IHR5cGVzXzEuVG9rZW5zLklERU5USUZJRVIgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogdHlwZXNfMS5Ub2tlbnMuU1RSVUNUVVJBTF9DSEFSQUNURVIsXG4gICAgICAgICAgICB2YWx1ZTogdHlwZXNfMS5TdHJ1Y3R1cmFsQ2hhcmFjdGVycy5PUEVOX1BBUkVOVEhFU0lTXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBpZGVudGlmaWVyT3JOb3Q6IFtcbiAgICAgICAgeyBuYW1lOiB0eXBlc18xLlRva2Vucy5JREVOVElGSUVSIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IHR5cGVzXzEuVG9rZW5zLlNUUlVDVFVSQUxfQ0hBUkFDVEVSLFxuICAgICAgICAgICAgdmFsdWU6IHR5cGVzXzEuU3RydWN0dXJhbENoYXJhY3RlcnMuT1BFTl9QQVJFTlRIRVNJU1xuICAgICAgICB9LFxuICAgICAgICB7IG5hbWU6IHR5cGVzXzEuVG9rZW5zLk9QRVJBVE9SLCB2YWx1ZTogdHlwZXNfMS5PcGVyYXRvcnMuTk9UIH0sXG4gICAgXSxcbiAgICBiaW5hcnlPcGVyYXRvcjogW1xuICAgICAgICB7IG5hbWU6IHR5cGVzXzEuVG9rZW5zLk9QRVJBVE9SLCB2YWx1ZTogdHlwZXNfMS5PcGVyYXRvcnMuQU5EIH0sXG4gICAgICAgIHsgbmFtZTogdHlwZXNfMS5Ub2tlbnMuT1BFUkFUT1IsIHZhbHVlOiB0eXBlc18xLk9wZXJhdG9ycy5PUiB9LFxuICAgICAgICB7IG5hbWU6IHR5cGVzXzEuVG9rZW5zLk9QRVJBVE9SLCB2YWx1ZTogdHlwZXNfMS5PcGVyYXRvcnMuWE9SIH0sXG4gICAgXSxcbiAgICBiaW5hcnlPcGVyYXRvck9yQ2xvc2U6IFtcbiAgICAgICAgeyBuYW1lOiB0eXBlc18xLlRva2Vucy5PUEVSQVRPUiwgdmFsdWU6IHR5cGVzXzEuT3BlcmF0b3JzLkFORCB9LFxuICAgICAgICB7IG5hbWU6IHR5cGVzXzEuVG9rZW5zLk9QRVJBVE9SLCB2YWx1ZTogdHlwZXNfMS5PcGVyYXRvcnMuT1IgfSxcbiAgICAgICAgeyBuYW1lOiB0eXBlc18xLlRva2Vucy5PUEVSQVRPUiwgdmFsdWU6IHR5cGVzXzEuT3BlcmF0b3JzLlhPUiB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiB0eXBlc18xLlRva2Vucy5TVFJVQ1RVUkFMX0NIQVJBQ1RFUixcbiAgICAgICAgICAgIHZhbHVlOiB0eXBlc18xLlN0cnVjdHVyYWxDaGFyYWN0ZXJzLkNMT1NFX1BBUkVOVEhFU0lTXG4gICAgICAgIH0sXG4gICAgXVxufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi90eXBlc1wiKTtcbmV4cG9ydHMuU1RSVUNUVVJBTF9DSEFSQUNURVJTID0ge1xuICAgICcoJzogdHlwZXNfMS5TdHJ1Y3R1cmFsQ2hhcmFjdGVycy5PUEVOX1BBUkVOVEhFU0lTLFxuICAgICcpJzogdHlwZXNfMS5TdHJ1Y3R1cmFsQ2hhcmFjdGVycy5DTE9TRV9QQVJFTlRIRVNJU1xufTtcbmV4cG9ydHMuT1BFUkFUT1JTID0ge1xuICAgIEFORDogdHlwZXNfMS5PcGVyYXRvcnMuQU5ELFxuICAgIE9SOiB0eXBlc18xLk9wZXJhdG9ycy5PUixcbiAgICBYT1I6IHR5cGVzXzEuT3BlcmF0b3JzLlhPUixcbiAgICBOT1Q6IHR5cGVzXzEuT3BlcmF0b3JzLk5PVFxufTtcbmV4cG9ydHMuU0VQQVJBVE9SUyA9IG5ldyBTZXQoW1xuICAgIDB4MDAyMCxcbiAgICAweDAwMDksXG4gICAgMHgwMDBhLFxuICAgIDB4MDAwZCxcbl0ubWFwKGZ1bmN0aW9uIChzZXBhcmF0b3IpIHsgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KHNlcGFyYXRvcik7IH0pKTtcbmV4cG9ydHMuUVVPVEVEX0lERU5USUZJRVJfREVMSU1JVEVSID0gU3RyaW5nLmZyb21Db2RlUG9pbnQoMHgwMDIyKTtcbmV4cG9ydHMuQ09NTUVOVF9ERUxJTUlURVIgPSBTdHJpbmcuZnJvbUNvZGVQb2ludCgweDAwMjMpO1xuZXhwb3J0cy5FT0wgPSBTdHJpbmcuZnJvbUNvZGVQb2ludCgweDAwMGEpO1xuZXhwb3J0cy5FU0NBUEVfQ0hBUkFDVEVSID0gU3RyaW5nLmZyb21Db2RlUG9pbnQoMHgwMDVjKTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XG52YXIgY29uc3RfMSA9IHJlcXVpcmUoXCIuL2NvbnN0XCIpO1xuZXhwb3J0cy5jcmVhdGVSZXN1bHQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIHJlbWFpbmluZ1N0cmluZykgeyByZXR1cm4gKHtcbiAgICB0b2tlbjogX19hc3NpZ24oeyBuYW1lOiBuYW1lIH0sICh2YWx1ZSAhPT0gbnVsbCA/IHsgdmFsdWU6IHZhbHVlIH0gOiB7fSkpLFxuICAgIHJlbWFpbmluZ1N0cmluZzogcmVtYWluaW5nU3RyaW5nXG59KTsgfTtcbmV4cG9ydHMuZ2V0Q29tbWVudCA9IGZ1bmN0aW9uIChleHByZXNzaW9uKSB7XG4gICAgdmFyIHRva2VuRW5kID0gZXhwcmVzc2lvbi5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHByZXNzaW9uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBsZXR0ZXIgPSBleHByZXNzaW9uW2ldO1xuICAgICAgICBpZiAobGV0dGVyID09PSBjb25zdF8xLkVPTCkge1xuICAgICAgICAgICAgdG9rZW5FbmQgPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV4cG9ydHMuY3JlYXRlUmVzdWx0KHR5cGVzXzEuVG9rZW5zLkNPTU1FTlQsIGV4cHJlc3Npb24uc2xpY2UoMCwgdG9rZW5FbmQpLCBleHByZXNzaW9uLnNsaWNlKHRva2VuRW5kICsgMSkpO1xufTtcbmV4cG9ydHMuZ2V0UXVvdGVkSWRlbnRpZmllciA9IGZ1bmN0aW9uIChleHByZXNzaW9uKSB7XG4gICAgdmFyIGVzY2FwZVF1b3RhdGlvbiA9IGZhbHNlO1xuICAgIHZhciB2YWx1ZSA9ICcnO1xuICAgIHZhciB0b2tlbkVuZCA9IG51bGw7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHByZXNzaW9uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBjaGFyID0gZXhwcmVzc2lvbltpXTtcbiAgICAgICAgaWYgKHRva2VuRW5kID09PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoY2hhciA9PT0gY29uc3RfMS5RVU9URURfSURFTlRJRklFUl9ERUxJTUlURVIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXNjYXBlUXVvdGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoLTEpICsgY29uc3RfMS5RVU9URURfSURFTlRJRklFUl9ERUxJTUlURVI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbkVuZCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09IGNvbnN0XzEuRVNDQVBFX0NIQVJBQ1RFUikge1xuICAgICAgICAgICAgICAgICAgICBlc2NhcGVRdW90YXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlUXVvdGF0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKz0gY2hhcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICghY29uc3RfMS5TRVBBUkFUT1JTLmhhcyhjaGFyKSAmJiAhY29uc3RfMS5TVFJVQ1RVUkFMX0NIQVJBQ1RFUlNbY2hhcl0pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGNoYXJhY3RlcjogXCIgKyBjaGFyICsgXCIgRXhwZWN0ZWQgKSBjaGFyYWN0ZXIgb3Igc2VwYXJhdG9yXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRva2VuRW5kID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IGV4cGVjdGVkIFwiICsgY29uc3RfMS5RVU9URURfSURFTlRJRklFUl9ERUxJTUlURVIgKyBcIiBjaGFyYWN0ZXJcIik7XG4gICAgfVxuICAgIHJldHVybiBleHBvcnRzLmNyZWF0ZVJlc3VsdCh0eXBlc18xLlRva2Vucy5JREVOVElGSUVSLCB2YWx1ZSwgZXhwcmVzc2lvbi5zbGljZSh0b2tlbkVuZCArIDEpKTtcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XG52YXIgY29uc3RfMSA9IHJlcXVpcmUoXCIuL2NvbnN0XCIpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmV4cG9ydHMubGV4ID0gZnVuY3Rpb24gKGV4cHJlc3Npb24pIHtcbiAgICB2YXIgdG9rZW5TdGFydCA9IG51bGw7XG4gICAgdmFyIHRva2VuRW5kID0gbnVsbDtcbiAgICB2YXIgZGVsaW1pdGluZ0NoYXJhY3RlciA9IG51bGw7XG4gICAgLy8gTG9vcHMgdGhyb3VnaCBjaGFyYWN0ZXJzIGluIHRoZSBleHByZXNzaW9uIHVudGlsIHRoZSBuZXh0IHRva2VuIGlzIGZvdW5kXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHByZXNzaW9uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBjaGFyID0gZXhwcmVzc2lvbltpXTtcbiAgICAgICAgLy8gRmluZHMgdG9rZW0gc3RhcnQgYW5kIHJldHVybnMgaW1tZWRpYXRlbHkgcmV0dXJucyBhbnkgaWRlbnRpZmlhYmxlIHRva2Vuc1xuICAgICAgICBpZiAodG9rZW5TdGFydCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKCFjb25zdF8xLlNFUEFSQVRPUlMuaGFzKGNoYXIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0cnVjdHVyYWxDaGFyID0gY29uc3RfMS5TVFJVQ1RVUkFMX0NIQVJBQ1RFUlNbY2hhcl07XG4gICAgICAgICAgICAgICAgaWYgKHN0cnVjdHVyYWxDaGFyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0Q2hhciA9IGV4cHJlc3Npb25baSArIDFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RydWN0dXJhbENoYXIgPT09IHR5cGVzXzEuU3RydWN0dXJhbENoYXJhY3RlcnMuQ0xPU0VfUEFSRU5USEVTSVMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRDaGFyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhY29uc3RfMS5TRVBBUkFUT1JTLmhhcyhuZXh0Q2hhcikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRDaGFyICE9PSB0eXBlc18xLlN0cnVjdHVyYWxDaGFyYWN0ZXJzLkNMT1NFX1BBUkVOVEhFU0lTKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGNoYXJhY3RlcjogXCIgKyBuZXh0Q2hhciArIFwiLiBBIGNsb3NpbmcgcGFyZW50aGVzaXMgc2hvdWxkIGJlIGZvbGxvd2VkIGJ5IGFub3RoZXIgY2xvc2luZyBwYXJlbnRoZXNpcyBvciB3aGl0ZXNwYWNlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlsc18xLmNyZWF0ZVJlc3VsdCh0eXBlc18xLlRva2Vucy5TVFJVQ1RVUkFMX0NIQVJBQ1RFUiwgY29uc3RfMS5TVFJVQ1RVUkFMX0NIQVJBQ1RFUlNbY2hhcl0sIGV4cHJlc3Npb24uc2xpY2UoaSArIDEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gT25jZSBhIHF1b3RlZCBpZGVudGlmaWVyIGhhcyBiZWVuIGlkZW50aWZpZWQgaXQgaXMgcmV0cmlldmVkIGluIGEgc2VwYXJhdGUgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gY29uc3RfMS5RVU9URURfSURFTlRJRklFUl9ERUxJTUlURVIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHV0aWxzXzEuZ2V0UXVvdGVkSWRlbnRpZmllcihleHByZXNzaW9uLnNsaWNlKGkgKyAxKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE9uY2UgYSBjb21tZW50IGhhcyBiZWVuIGlkZW50aWZpZWQgaXQgaXMgcmV0cmlldmVkIGluIGEgc2VwYXJhdGUgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gY29uc3RfMS5DT01NRU5UX0RFTElNSVRFUikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXRpbHNfMS5nZXRDb21tZW50KGV4cHJlc3Npb24uc2xpY2UoaSArIDEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdG9rZW5TdGFydCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBCcmVha3Mgb24gdGhlIGVuZCBvZiB0aGUgdG9rZW4gYW5kIHRocm93cyBvbiBpbnZhbGlkIGNoYXJhY3RlcnNcbiAgICAgICAgICAgIGlmIChjb25zdF8xLlNFUEFSQVRPUlMuaGFzKGNoYXIpIHx8IGNvbnN0XzEuU1RSVUNUVVJBTF9DSEFSQUNURVJTW2NoYXJdKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5FbmQgPSBpO1xuICAgICAgICAgICAgICAgIGRlbGltaXRpbmdDaGFyYWN0ZXIgPSBjaGFyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09IGNvbnN0XzEuUVVPVEVEX0lERU5USUZJRVJfREVMSU1JVEVSIHx8XG4gICAgICAgICAgICAgICAgICAgIGNoYXIgPT09IGNvbnN0XzEuQ09NTUVOVF9ERUxJTUlURVIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBjaGFyYWN0ZXI6IFwiICsgY2hhcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFNlcGFyYXRlcyBvcGVyYXRvcnMgZnJvbSBpZGVudGlmaWVycyBhbmQgcmV0dXJucyB0aGUgY29ycmVjdCB0b2tlblxuICAgIGlmICh0b2tlblN0YXJ0ICE9PSBudWxsKSB7XG4gICAgICAgIHRva2VuRW5kID0gKHRva2VuRW5kICE9PSBudWxsICYmIHRva2VuRW5kICE9PSB2b2lkIDAgPyB0b2tlbkVuZCA6IGV4cHJlc3Npb24ubGVuZ3RoKTtcbiAgICAgICAgdmFyIHZhbHVlID0gZXhwcmVzc2lvbi5zbGljZSh0b2tlblN0YXJ0LCB0b2tlbkVuZCk7XG4gICAgICAgIHZhciByZW1haW5pbmdTdHJpbmcgPSBleHByZXNzaW9uLnNsaWNlKHRva2VuRW5kKTtcbiAgICAgICAgaWYgKGNvbnN0XzEuT1BFUkFUT1JTW3ZhbHVlXSkge1xuICAgICAgICAgICAgaWYgKGRlbGltaXRpbmdDaGFyYWN0ZXIgJiYgIWNvbnN0XzEuU0VQQVJBVE9SUy5oYXMoZGVsaW1pdGluZ0NoYXJhY3RlcikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGNoYXJhY3RlcjogXCIgKyBkZWxpbWl0aW5nQ2hhcmFjdGVyICsgXCIuIE9wZXJhdG9ycyBzaG91bGQgYmUgc2VwYXJhdGVkIHVzaW5nIHdoaXRlc3BhY2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdXRpbHNfMS5jcmVhdGVSZXN1bHQodHlwZXNfMS5Ub2tlbnMuT1BFUkFUT1IsIGNvbnN0XzEuT1BFUkFUT1JTW3ZhbHVlXSwgcmVtYWluaW5nU3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1dGlsc18xLmNyZWF0ZVJlc3VsdCh0eXBlc18xLlRva2Vucy5JREVOVElGSUVSLCB2YWx1ZSwgcmVtYWluaW5nU3RyaW5nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBJZiB0aGlzIGlzIHJlYWNoZWQgbm8gdG9rZW5zIHdlcmUgZm91bmQgc28gRU9GIGlzIHJldHVybmVkXG4gICAgcmV0dXJuIHV0aWxzXzEuY3JlYXRlUmVzdWx0KHR5cGVzXzEuVG9rZW5zLkVPRiwgbnVsbCwgJycpO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3NwcmVhZEFycmF5cyA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheXMpIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgICAgcltrXSA9IGFbal07XG4gICAgcmV0dXJuIHI7XG59O1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBsZXhfMSA9IHJlcXVpcmUoXCIuLi9sZXgvbGV4XCIpO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XG52YXIgY29uc3RfMSA9IHJlcXVpcmUoXCIuL2NvbnN0XCIpO1xuZXhwb3J0cy5uZXdUb2tlbkdlbmVyYXRvciA9IGZ1bmN0aW9uIChleHByZXNzaW9uKSB7XG4gICAgdmFyIHJlbWFpbmluZ0V4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsaWRUb2tlbnMsIGVuZElzVmFsaWQpIHtcbiAgICAgICAgaWYgKGVuZElzVmFsaWQgPT09IHZvaWQgMCkgeyBlbmRJc1ZhbGlkID0gZmFsc2U7IH1cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGxleF8xLmxleChyZW1haW5pbmdFeHByZXNzaW9uKSwgdG9rZW4gPSBfYS50b2tlbiwgcmVtYWluaW5nU3RyaW5nID0gX2EucmVtYWluaW5nU3RyaW5nO1xuICAgICAgICAgICAgcmVtYWluaW5nRXhwcmVzc2lvbiA9IHJlbWFpbmluZ1N0cmluZztcbiAgICAgICAgICAgIGlmICh0b2tlbi5uYW1lICE9PSB0eXBlc18xLlRva2Vucy5DT01NRU5UKSB7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy52YWxpZGF0ZVRva2VuKHRva2VuLCB2YWxpZFRva2VucywgZW5kSXNWYWxpZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn07XG5leHBvcnRzLmdldFZhbHVlID0gZnVuY3Rpb24gKGdldE5leHRUb2tlbiwgcGFyc2VyKSB7XG4gICAgdmFyIG5leHRUb2tlbiA9IGdldE5leHRUb2tlbihjb25zdF8xLlZBTElEX1RPS0VOUy5pZGVudGlmaWVyT3JOb3QpO1xuICAgIHZhciBuZWdhdGVkVmFsdWUgPSBuZXh0VG9rZW4udmFsdWUgPT09IHR5cGVzXzEuT3BlcmF0b3JzLk5PVDtcbiAgICBpZiAobmVnYXRlZFZhbHVlKSB7XG4gICAgICAgIG5leHRUb2tlbiA9IGdldE5leHRUb2tlbihjb25zdF8xLlZBTElEX1RPS0VOUy5pZGVudGlmaWVyT25seSk7XG4gICAgfVxuICAgIHZhciB2YWx1ZSA9IG5leHRUb2tlbi5uYW1lID09PSB0eXBlc18xLlRva2Vucy5TVFJVQ1RVUkFMX0NIQVJBQ1RFUlxuICAgICAgICA/IHBhcnNlcihnZXROZXh0VG9rZW4sIHRydWUpXG4gICAgICAgIDogW25leHRUb2tlbl07XG4gICAgcmV0dXJuIG5lZ2F0ZWRWYWx1ZVxuICAgICAgICA/IF9fc3ByZWFkQXJyYXlzKHZhbHVlLCBbeyBuYW1lOiB0eXBlc18xLlRva2Vucy5PUEVSQVRPUiwgdmFsdWU6IHR5cGVzXzEuT3BlcmF0b3JzLk5PVCB9XSkgOiB2YWx1ZTtcbn07XG5leHBvcnRzLnByZXZpb3VzT3BlcmF0b3JUYWtlc1ByZWNlZGVudCA9IGZ1bmN0aW9uIChwcmV2aW91c09wZXJhdG9yLCBuZXh0T3BlcmF0b3IpIHtcbiAgICByZXR1cm4gY29uc3RfMS5PUEVSQVRPUl9QUkVDRURFTkNFW3ByZXZpb3VzT3BlcmF0b3JdIDw9IGNvbnN0XzEuT1BFUkFUT1JfUFJFQ0VERU5DRVtuZXh0T3BlcmF0b3JdO1xufTtcbmV4cG9ydHMudmFsaWRhdGVUb2tlbiA9IGZ1bmN0aW9uICh0b2tlbiwgdmFsaWRUb2tlbnMsIGVuZElzVmFsaWQpIHtcbiAgICBpZiAoZW5kSXNWYWxpZCA9PT0gdm9pZCAwKSB7IGVuZElzVmFsaWQgPSBmYWxzZTsgfVxuICAgIGlmICh0b2tlbi5uYW1lID09PSB0eXBlc18xLlRva2Vucy5FT0YpIHtcbiAgICAgICAgaWYgKGVuZElzVmFsaWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb24nKTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwLCB2YWxpZFRva2Vuc18xID0gdmFsaWRUb2tlbnM7IF9pIDwgdmFsaWRUb2tlbnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHZhbGlkVG9rZW4gPSB2YWxpZFRva2Vuc18xW19pXTtcbiAgICAgICAgaWYgKHZhbGlkVG9rZW4ubmFtZSA9PT0gdG9rZW4ubmFtZSkge1xuICAgICAgICAgICAgaWYgKCF2YWxpZFRva2VuLnZhbHVlIHx8IHZhbGlkVG9rZW4udmFsdWUgPT09IHRva2VuLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgdG9rZW4nKTtcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19zcHJlYWRBcnJheXMgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXlzKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xuICAgIHJldHVybiByO1xufTtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi90eXBlc1wiKTtcbnZhciBjb25zdF8xID0gcmVxdWlyZShcIi4vY29uc3RcIik7XG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuLy8gUmV0dXJucyB0aGUgdG9rZW5zIHVzaW5nIHBvc3RmaXggbm90YXRpb25cbmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAoZXhwcmVzc2lvbikge1xuICAgIGlmICh0eXBlb2YgZXhwcmVzc2lvbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgc3RyaW5nIGJ1dCByZWNlaXZlZCBcIiArIHR5cGVvZiBleHByZXNzaW9uKTtcbiAgICB9XG4gICAgLy8gZ2V0TmV4dFRva2VuIGtlZXBzIHRyYWNrIG9mIHRoZSByZW1haW5pbmcgZXhwcmVzc2lvblxuICAgIC8vIGFuZCByZXR1cm4gdGhlIG5leHQgdG9rZW4gZWFjaCB0aW1lIGl0IGlzIGNhbGxlZFxuICAgIHZhciBnZXROZXh0VG9rZW4gPSB1dGlsc18xLm5ld1Rva2VuR2VuZXJhdG9yKGV4cHJlc3Npb24pO1xuICAgIHJldHVybiBwYXJzZUludGVybmFsKGdldE5leHRUb2tlbik7XG59O1xuLy8gcGFyc2VJbnRlcm5hbCB3aWxsIHJlY3Vyc2Ugb3ZlciBicmFja2V0ZWQgZXhwcmVzc2lvbnNcbnZhciBwYXJzZUludGVybmFsID0gZnVuY3Rpb24gKGdldE5leHRUb2tlbiwgbmVzdGVkKSB7XG4gICAgaWYgKG5lc3RlZCA9PT0gdm9pZCAwKSB7IG5lc3RlZCA9IGZhbHNlOyB9XG4gICAgLy8gVGhpcyBpbml0aWFsaXNlcyB0aGUgb3V0cHV0IHdpdGggZXZlcnl0aGluZyB1cCB0aGUgZmlyc3QgdW5uZXN0ZWQgb3BlcmF0b3JcbiAgICB2YXIgb3V0cHV0ID0gX19zcHJlYWRBcnJheXModXRpbHNfMS5nZXRWYWx1ZShnZXROZXh0VG9rZW4sIHBhcnNlSW50ZXJuYWwpKTtcbiAgICB2YXIgb3BlcmF0b3JzID0gW107XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHZhbGlkVG9rZW5zID0gbmVzdGVkXG4gICAgICAgICAgICA/IGNvbnN0XzEuVkFMSURfVE9LRU5TLmJpbmFyeU9wZXJhdG9yT3JDbG9zZVxuICAgICAgICAgICAgOiBjb25zdF8xLlZBTElEX1RPS0VOUy5iaW5hcnlPcGVyYXRvcjtcbiAgICAgICAgLy8gUmV0cmlldmVzIHRoZSBuZXh0IFRva2VuXG4gICAgICAgIHZhciBuZXh0VG9rZW4gPSBnZXROZXh0VG9rZW4odmFsaWRUb2tlbnMsICFuZXN0ZWQpO1xuICAgICAgICBpZiAobmV4dFRva2VuLm5hbWUgPT09IHR5cGVzXzEuVG9rZW5zLkVPRiB8fCAvLyBJZiB0aGUgZW5kIG9mIGZpbGUgaXMgZm91bmQgaGVyZSB0aGVuIHJldHVybiB3aGF0IHdlIGhhdmVcbiAgICAgICAgICAgIG5leHRUb2tlbi5uYW1lID09PSB0eXBlc18xLlRva2Vucy5TVFJVQ1RVUkFMX0NIQVJBQ1RFUiAvLyBUaGUgZXhwcmVzc2lvbiB3aWxsIGJlIHJldHVybmVkIGFuZCBpbmNvcnBvcmF0ZWQgaW50byB0aGUgZmluYWwgZXhwcmVzc2lvblxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBfX3NwcmVhZEFycmF5cyhvdXRwdXQsIF9fc3ByZWFkQXJyYXlzKG9wZXJhdG9ycykucmV2ZXJzZSgpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJbiBwb3N0Zml4IG5vdGF0aW9uIG9wZXJhdG9yIG9yZGVyIGlzIGRldGVybWluZWQgYnkgcHJlY2VkZW5jZVxuICAgICAgICB3aGlsZSAob3BlcmF0b3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzT3BlcmF0b3IgPSBvcGVyYXRvcnNbb3BlcmF0b3JzLmxlbmd0aCAtIDFdIHx8IG51bGw7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNPcGVyYXRvciAmJlxuICAgICAgICAgICAgICAgIHV0aWxzXzEucHJldmlvdXNPcGVyYXRvclRha2VzUHJlY2VkZW50KHByZXZpb3VzT3BlcmF0b3IudmFsdWUsIG5leHRUb2tlbi52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBfX3NwcmVhZEFycmF5cyhvdXRwdXQsIFtwcmV2aW91c09wZXJhdG9yXSk7XG4gICAgICAgICAgICAgICAgb3BlcmF0b3JzID0gb3BlcmF0b3JzLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBuZXcgb3BlcmF0b3IgaXMgbm93IGFkZGVkIHRvIHRoZSBzdGFja1xuICAgICAgICBvcGVyYXRvcnMgPSBfX3NwcmVhZEFycmF5cyhvcGVyYXRvcnMsIFtuZXh0VG9rZW5dKTtcbiAgICAgICAgLy8gT25jZSB0aGlzIGlzIGRvbmUgd2UgY2FuIGdldCBldmVyeXRoaW5nIHVudGlsIHRoZSBuZXh0IHVubmVzdGVkXG4gICAgICAgIC8vIG9wZXJhdG9yIGFuZCBhZGQgaXQgdG8gdGhlIG91dHB1dFxuICAgICAgICBvdXRwdXQgPSBfX3NwcmVhZEFycmF5cyhvdXRwdXQsIHV0aWxzXzEuZ2V0VmFsdWUoZ2V0TmV4dFRva2VuLCBwYXJzZUludGVybmFsKSk7XG4gICAgfVxufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi90eXBlc1wiKTtcbmV4cG9ydHMuYW5kVXRpbCA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCkgeyByZXR1cm4gbGVmdCAmJiByaWdodDsgfTtcbmV4cG9ydHMub3JVdGlsID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0KSB7IHJldHVybiBsZWZ0IHx8IHJpZ2h0OyB9O1xuZXhwb3J0cy54b3JVdGlsID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0KSB7IHJldHVybiAhKGxlZnQgPT09IHJpZ2h0KTsgfTtcbmV4cG9ydHMubm90VXRpbCA9IGZ1bmN0aW9uIChpZGVudGlmaWVyKSB7IHJldHVybiAhaWRlbnRpZmllcjsgfTtcbmV4cG9ydHMuaXNJZGVudGlmaWVyID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIG5hbWUgPSBfYS5uYW1lLCB2YWx1ZSA9IF9hLnZhbHVlO1xuICAgIHJldHVybiBuYW1lID09PSB0eXBlc18xLlRva2Vucy5JREVOVElGSUVSICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG59O1xuZXhwb3J0cy5pc09wZXJhdG9yID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIG5hbWUgPSBfYS5uYW1lLCB2YWx1ZSA9IF9hLnZhbHVlO1xuICAgIHJldHVybiBuYW1lID09PSB0eXBlc18xLlRva2Vucy5PUEVSQVRPUiAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufTtcbmV4cG9ydHMudGhyb3dJbnZhbGlkRXhwcmVzc2lvbiA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgcG9zdGZpeCBleHByZXNzaW9uOiBcIiArIG1lc3NhZ2UpO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfYTtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi90eXBlc1wiKTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5leHBvcnRzLk9QRVJBVE9SX01BUCA9IChfYSA9IHt9LFxuICAgIF9hW3R5cGVzXzEuT3BlcmF0b3JzLkFORF0gPSB1dGlsc18xLmFuZFV0aWwsXG4gICAgX2FbdHlwZXNfMS5PcGVyYXRvcnMuT1JdID0gdXRpbHNfMS5vclV0aWwsXG4gICAgX2FbdHlwZXNfMS5PcGVyYXRvcnMuWE9SXSA9IHV0aWxzXzEueG9yVXRpbCxcbiAgICBfYSk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19zcHJlYWRBcnJheXMgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXlzKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xuICAgIHJldHVybiByO1xufTtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgcGFyc2VfMSA9IHJlcXVpcmUoXCIuLi9wYXJzZS9wYXJzZVwiKTtcbnZhciB0eXBlc18xID0gcmVxdWlyZShcIi4uL3R5cGVzXCIpO1xudmFyIGNvbnN0XzEgPSByZXF1aXJlKFwiLi9jb25zdFwiKTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5leHBvcnRzLmdldEV2YWx1YXRvciA9IGZ1bmN0aW9uIChleHByZXNzaW9uKSB7XG4gICAgdmFyIHBhcnNlZEV4cHJlc3Npb24gPSBwYXJzZV8xLnBhcnNlKGV4cHJlc3Npb24pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoYm9vbGVhbk1hcCkgeyByZXR1cm4gZXhwb3J0cy5ldmFsdWF0ZShwYXJzZWRFeHByZXNzaW9uLCBib29sZWFuTWFwKTsgfTtcbn07XG5leHBvcnRzLmV2YWx1YXRlID0gZnVuY3Rpb24gKGV4cHJlc3Npb24sIGJvb2xlYW5NYXApIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwcmVzc2lvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGV4cHJlc3Npb24gKyBcIiBzaG91bGQgYmUgYW4gYXJyYXkuIGV2YWx1YXRlIHRha2VzIGluIGEgcGFyc2VkIGV4cHJlc3Npb24uIFVzZSBpbiBjb21iaW5hdGlvbiB3aXRoIHBhcnNlIG9yIHVzZSBnZXRFdmFsdWF0b3JcIik7XG4gICAgfVxuICAgIC8vIFJlc29sdmVzIGVhY2ggaWRlbnRpZmllciBhbmQgYWRkcyBpdCB0byBhIHN0YWNrXG4gICAgLy8gV2hlbiBvcGVyYXRvciBpcyBmb3VuZCBpdCBvcGVyYXRlcyBvbiB0aGUgdG9wIHZhbHVlKHMpXG4gICAgLy8gb24gdGhlIHN0YWNrLCByZW1vdmVzIHRoZW0gYW5kIHJlcGxhY2VzIHRoZW0gd2l0aCB0aGVcbiAgICAvLyByZXN1bHRcbiAgICB2YXIgZXZhbHVhdGVkRXhwcmVzc2lvbiA9IGV4cHJlc3Npb24ucmVkdWNlKGZ1bmN0aW9uIChzdGFjaywgdG9rZW4sIGkpIHtcbiAgICAgICAgaWYgKCEodG9rZW4gJiYgKHV0aWxzXzEuaXNJZGVudGlmaWVyKHRva2VuKSB8fCB1dGlsc18xLmlzT3BlcmF0b3IodG9rZW4pKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdG9rZW46IFwiICsgdG9rZW4gKyBcIi4gRm91bmQgaW4gcGFyc2VkIGV4cHJlc3Npb24gYXQgaW5kZXggXCIgKyBpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4ubmFtZSA9PT0gdHlwZXNfMS5Ub2tlbnMuSURFTlRJRklFUikge1xuICAgICAgICAgICAgcmV0dXJuIF9fc3ByZWFkQXJyYXlzKHN0YWNrLCBbQm9vbGVhbihib29sZWFuTWFwW3Rva2VuLnZhbHVlXSldKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2Vjb25kTGFzdEl0ZW0gPSBzdGFja1tzdGFjay5sZW5ndGggLSAyXTtcbiAgICAgICAgdmFyIGxhc3RJdGVtID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0b2tlbi52YWx1ZSA9PT0gdHlwZXNfMS5PcGVyYXRvcnMuTk9UKSB7XG4gICAgICAgICAgICBpZiAobGFzdEl0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHV0aWxzXzEudGhyb3dJbnZhbGlkRXhwcmVzc2lvbignbWlzc2luZyBpZGVudGlmaWVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX19zcHJlYWRBcnJheXMoc3RhY2suc2xpY2UoMCwgLTEpLCBbdXRpbHNfMS5ub3RVdGlsKGxhc3RJdGVtKV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0SXRlbSA9PT0gdW5kZWZpbmVkIHx8IHNlY29uZExhc3RJdGVtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHV0aWxzXzEudGhyb3dJbnZhbGlkRXhwcmVzc2lvbignbWlzc2luZyBpZGVudGlmaWVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wZXJhdG9yVXRpbCA9IGNvbnN0XzEuT1BFUkFUT1JfTUFQW3Rva2VuLnZhbHVlXTtcbiAgICAgICAgaWYgKCFvcGVyYXRvclV0aWwpIHtcbiAgICAgICAgICAgIHV0aWxzXzEudGhyb3dJbnZhbGlkRXhwcmVzc2lvbigndW5rbm93biBvcGVyYXRvcicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfX3NwcmVhZEFycmF5cyhzdGFjay5zbGljZSgwLCAtMiksIFtvcGVyYXRvclV0aWwoc2Vjb25kTGFzdEl0ZW0sIGxhc3RJdGVtKV0pO1xuICAgIH0sIFtdKTtcbiAgICBpZiAoZXZhbHVhdGVkRXhwcmVzc2lvbi5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgdXRpbHNfMS50aHJvd0ludmFsaWRFeHByZXNzaW9uKCd0b28gbWFueSBpZGVudGlmaWVycyBhZnRlciBldmFsdWF0aW9uJyk7XG4gICAgfVxuICAgIHJldHVybiBldmFsdWF0ZWRFeHByZXNzaW9uWzBdO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgZXZhbHVhdGVfMSA9IHJlcXVpcmUoXCIuL2V2YWx1YXRlL2V2YWx1YXRlXCIpO1xuZXhwb3J0cy5nZXRFdmFsdWF0b3IgPSBldmFsdWF0ZV8xLmdldEV2YWx1YXRvcjtcbmV4cG9ydHMuZXZhbHVhdGUgPSBldmFsdWF0ZV8xLmV2YWx1YXRlO1xudmFyIHBhcnNlXzEgPSByZXF1aXJlKFwiLi9wYXJzZS9wYXJzZVwiKTtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZV8xLnBhcnNlO1xuIiwgImltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcblxuaW1wb3J0IHsgQ2FjaGUgfSBmcm9tICcuL0NhY2hlJztcbmltcG9ydCB7IENvbW1hbmRzIH0gZnJvbSAnLi9Db21tYW5kcyc7XG5pbXBvcnQgeyBUYXNrc0V2ZW50cyB9IGZyb20gJy4vVGFza3NFdmVudHMnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUZpbGUgfSBmcm9tICcuL0ZpbGUnO1xuaW1wb3J0IHsgSW5saW5lUmVuZGVyZXIgfSBmcm9tICcuL0lubGluZVJlbmRlcmVyJztcbmltcG9ydCB7IG5ld0xpdmVQcmV2aWV3RXh0ZW5zaW9uIH0gZnJvbSAnLi9MaXZlUHJldmlld0V4dGVuc2lvbic7XG5pbXBvcnQgeyBRdWVyeVJlbmRlcmVyIH0gZnJvbSAnLi9RdWVyeVJlbmRlcmVyJztcbmltcG9ydCB7IGdldFNldHRpbmdzLCB1cGRhdGVTZXR0aW5ncyB9IGZyb20gJy4vQ29uZmlnL1NldHRpbmdzJztcbmltcG9ydCB7IFNldHRpbmdzVGFiIH0gZnJvbSAnLi9Db25maWcvU2V0dGluZ3NUYWInO1xuaW1wb3J0IHsgRWRpdG9yU3VnZ2VzdG9yIH0gZnJvbSAnLi9TdWdnZXN0b3IvRWRpdG9yU3VnZ2VzdG9yUG9wdXAnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYXNrc1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gICAgcHJpdmF0ZSBjYWNoZTogQ2FjaGUgfCB1bmRlZmluZWQ7XG4gICAgcHVibGljIGlubGluZVJlbmRlcmVyOiBJbmxpbmVSZW5kZXJlciB8IHVuZGVmaW5lZDtcbiAgICBwdWJsaWMgcXVlcnlSZW5kZXJlcjogUXVlcnlSZW5kZXJlciB8IHVuZGVmaW5lZDtcblxuICAgIGFzeW5jIG9ubG9hZCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2xvYWRpbmcgcGx1Z2luIFwidGFza3NcIicpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgU2V0dGluZ3NUYWIoeyBwbHVnaW46IHRoaXMgfSkpO1xuXG4gICAgICAgIGluaXRpYWxpemVGaWxlKHtcbiAgICAgICAgICAgIG1ldGFkYXRhQ2FjaGU6IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUsXG4gICAgICAgICAgICB2YXVsdDogdGhpcy5hcHAudmF1bHQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGV2ZW50cyA9IG5ldyBUYXNrc0V2ZW50cyh7IG9ic2lkaWFuRXZlbnRzOiB0aGlzLmFwcC53b3Jrc3BhY2UgfSk7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgQ2FjaGUoe1xuICAgICAgICAgICAgbWV0YWRhdGFDYWNoZTogdGhpcy5hcHAubWV0YWRhdGFDYWNoZSxcbiAgICAgICAgICAgIHZhdWx0OiB0aGlzLmFwcC52YXVsdCxcbiAgICAgICAgICAgIGV2ZW50cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW5saW5lUmVuZGVyZXIgPSBuZXcgSW5saW5lUmVuZGVyZXIoeyBwbHVnaW46IHRoaXMgfSk7XG4gICAgICAgIHRoaXMucXVlcnlSZW5kZXJlciA9IG5ldyBRdWVyeVJlbmRlcmVyKHsgcGx1Z2luOiB0aGlzLCBldmVudHMgfSk7XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlckVkaXRvckV4dGVuc2lvbihuZXdMaXZlUHJldmlld0V4dGVuc2lvbigpKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckVkaXRvclN1Z2dlc3QobmV3IEVkaXRvclN1Z2dlc3Rvcih0aGlzLmFwcCwgZ2V0U2V0dGluZ3MoKSkpO1xuICAgICAgICBuZXcgQ29tbWFuZHMoeyBwbHVnaW46IHRoaXMgfSk7XG4gICAgfVxuXG4gICAgb251bmxvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCd1bmxvYWRpbmcgcGx1Z2luIFwidGFza3NcIicpO1xuICAgICAgICB0aGlzLmNhY2hlPy51bmxvYWQoKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgICAgIGNvbnN0IG5ld1NldHRpbmdzID0gYXdhaXQgdGhpcy5sb2FkRGF0YSgpO1xuICAgICAgICB1cGRhdGVTZXR0aW5ncyhuZXdTZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKGdldFNldHRpbmdzKCkpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBNZXRhZGF0YUNhY2hlLCBUQWJzdHJhY3RGaWxlLCBURmlsZSwgVmF1bHQgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgdHlwZSB7IENhY2hlZE1ldGFkYXRhLCBFdmVudFJlZiB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB0eXBlIHsgSGVhZGluZ0NhY2hlLCBMaXN0SXRlbUNhY2hlLCBTZWN0aW9uQ2FjaGUgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBNdXRleCB9IGZyb20gJ2FzeW5jLW11dGV4JztcblxuaW1wb3J0IHsgVGFzayB9IGZyb20gJy4vVGFzayc7XG5pbXBvcnQgdHlwZSB7IFRhc2tzRXZlbnRzIH0gZnJvbSAnLi9UYXNrc0V2ZW50cyc7XG5pbXBvcnQgeyBEYXRlRmFsbGJhY2sgfSBmcm9tICcuL0RhdGVGYWxsYmFjayc7XG5pbXBvcnQgeyBnZXRTZXR0aW5ncyB9IGZyb20gJy4vQ29uZmlnL1NldHRpbmdzJztcbmltcG9ydCB7IExhenkgfSBmcm9tICcuL2xpYi9MYXp5JztcblxuZXhwb3J0IGVudW0gU3RhdGUge1xuICAgIENvbGQgPSAnQ29sZCcsXG4gICAgSW5pdGlhbGl6aW5nID0gJ0luaXRpYWxpemluZycsXG4gICAgV2FybSA9ICdXYXJtJyxcbn1cblxuZXhwb3J0IGNsYXNzIENhY2hlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1ldGFkYXRhQ2FjaGU6IE1ldGFkYXRhQ2FjaGU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBtZXRhZGF0YUNhY2hlRXZlbnRSZWZlcmVuY2VzOiBFdmVudFJlZltdO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdmF1bHQ6IFZhdWx0O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdmF1bHRFdmVudFJlZmVyZW5jZXM6IEV2ZW50UmVmW107XG4gICAgcHJpdmF0ZSByZWFkb25seSBldmVudHM6IFRhc2tzRXZlbnRzO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRzRXZlbnRSZWZlcmVuY2VzOiBFdmVudFJlZltdO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSB0YXNrc011dGV4OiBNdXRleDtcbiAgICBwcml2YXRlIHN0YXRlOiBTdGF0ZTtcbiAgICBwcml2YXRlIHRhc2tzOiBUYXNrW107XG5cbiAgICAvKipcbiAgICAgKiBXZSBjYW5ub3Qga25vdyBpZiB0aGlzIGNsYXNzIHdpbGwgYmUgaW5zdGFudGlhdGVkIGJlY2F1c2Ugb2JzaWRpYW4gc3RhcnRlZFxuICAgICAqIG9yIGJlY2F1c2UgdGhlIHBsdWdpbiB3YXMgYWN0aXZhdGVkIGxhdGVyLiBUaGlzIG1lYW5zIHdlIGhhdmUgdG8gbG9hZCB0aGVcbiAgICAgKiB3aG9sZSB2YXVsdCBvbmNlIGFmdGVyIHRoZSBmaXJzdCBtZXRhZGF0YSBjYWNoZSByZXNvbHZlIHRvIGVuc3VyZSB0aGF0IHdlXG4gICAgICogbG9hZCB0aGUgZW50aXJlIHZhdWx0IGluIGNhc2Ugb2JzaWRpYW4gaXMgc3RhcnRpbmcgdXAuIEluIHRoZSBjYXNlIG9mXG4gICAgICogb2JzaWRpYW4gc3RhcnRpbmcsIHRoZSB0YXNrIGNhY2hlJ3MgaW5pdGlhbCBsb2FkIHdvdWxkIGVuZCB1cCB3aXRoIDAgdGFza3MsXG4gICAgICogYXMgdGhlIG1ldGFkYXRhIGNhY2hlIHdvdWxkIHN0aWxsIGJlIGVtcHR5LlxuICAgICAqL1xuICAgIHByaXZhdGUgbG9hZGVkQWZ0ZXJGaXJzdFJlc29sdmU6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcih7IG1ldGFkYXRhQ2FjaGUsIHZhdWx0LCBldmVudHMgfTogeyBtZXRhZGF0YUNhY2hlOiBNZXRhZGF0YUNhY2hlOyB2YXVsdDogVmF1bHQ7IGV2ZW50czogVGFza3NFdmVudHMgfSkge1xuICAgICAgICB0aGlzLm1ldGFkYXRhQ2FjaGUgPSBtZXRhZGF0YUNhY2hlO1xuICAgICAgICB0aGlzLm1ldGFkYXRhQ2FjaGVFdmVudFJlZmVyZW5jZXMgPSBbXTtcbiAgICAgICAgdGhpcy52YXVsdCA9IHZhdWx0O1xuICAgICAgICB0aGlzLnZhdWx0RXZlbnRSZWZlcmVuY2VzID0gW107XG4gICAgICAgIHRoaXMuZXZlbnRzID0gZXZlbnRzO1xuICAgICAgICB0aGlzLmV2ZW50c0V2ZW50UmVmZXJlbmNlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMudGFza3NNdXRleCA9IG5ldyBNdXRleCgpO1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQ29sZDtcbiAgICAgICAgdGhpcy50YXNrcyA9IFtdO1xuXG4gICAgICAgIHRoaXMubG9hZGVkQWZ0ZXJGaXJzdFJlc29sdmUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnN1YnNjcmliZVRvQ2FjaGUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVUb1ZhdWx0KCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9FdmVudHMoKTtcblxuICAgICAgICB0aGlzLmxvYWRWYXVsdCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyB1bmxvYWQoKTogdm9pZCB7XG4gICAgICAgIGZvciAoY29uc3QgZXZlbnRSZWZlcmVuY2Ugb2YgdGhpcy5tZXRhZGF0YUNhY2hlRXZlbnRSZWZlcmVuY2VzKSB7XG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhQ2FjaGUub2ZmcmVmKGV2ZW50UmVmZXJlbmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgZXZlbnRSZWZlcmVuY2Ugb2YgdGhpcy52YXVsdEV2ZW50UmVmZXJlbmNlcykge1xuICAgICAgICAgICAgdGhpcy52YXVsdC5vZmZyZWYoZXZlbnRSZWZlcmVuY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBldmVudFJlZmVyZW5jZSBvZiB0aGlzLmV2ZW50c0V2ZW50UmVmZXJlbmNlcykge1xuICAgICAgICAgICAgdGhpcy5ldmVudHMub2ZmKGV2ZW50UmVmZXJlbmNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUYXNrcygpOiBUYXNrW10ge1xuICAgICAgICByZXR1cm4gdGhpcy50YXNrcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U3RhdGUoKTogU3RhdGUge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG5vdGlmeVN1YnNjcmliZXJzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmV2ZW50cy50cmlnZ2VyQ2FjaGVVcGRhdGUoe1xuICAgICAgICAgICAgdGFza3M6IHRoaXMudGFza3MsXG4gICAgICAgICAgICBzdGF0ZTogdGhpcy5zdGF0ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVUb0NhY2hlKCk6IHZvaWQge1xuICAgICAgICBjb25zdCByZXNvbHZlZEV2ZW50ZVJlZmVyZW5jZSA9IHRoaXMubWV0YWRhdGFDYWNoZS5vbigncmVzb2x2ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAvLyBSZXNvbHZlZCBmaXJlcyBvbiBldmVyeSBjaGFuZ2UuXG4gICAgICAgICAgICAvLyBXZSBvbmx5IHdhbnQgdG8gaW5pdGlhbGl6ZSBpZiB3ZSBoYXZlbid0IGFscmVhZHkuXG4gICAgICAgICAgICBpZiAoIXRoaXMubG9hZGVkQWZ0ZXJGaXJzdFJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRlZEFmdGVyRmlyc3RSZXNvbHZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRWYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YUNhY2hlRXZlbnRSZWZlcmVuY2VzLnB1c2gocmVzb2x2ZWRFdmVudGVSZWZlcmVuY2UpO1xuXG4gICAgICAgIC8vIERvZXMgbm90IGZpcmUgd2hlbiBzdGFydGluZyB1cCBvYnNpZGlhbiBhbmQgb25seSB3b3JrcyBmb3IgY2hhbmdlcy5cbiAgICAgICAgY29uc3QgY2hhbmdlZEV2ZW50UmVmZXJlbmNlID0gdGhpcy5tZXRhZGF0YUNhY2hlLm9uKCdjaGFuZ2VkJywgKGZpbGU6IFRGaWxlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRhc2tzTXV0ZXgucnVuRXhjbHVzaXZlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4RmlsZShmaWxlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YUNhY2hlRXZlbnRSZWZlcmVuY2VzLnB1c2goY2hhbmdlZEV2ZW50UmVmZXJlbmNlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN1YnNjcmliZVRvVmF1bHQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgdXNlRmlsZW5hbWVBc1NjaGVkdWxlZERhdGUgfSA9IGdldFNldHRpbmdzKCk7XG5cbiAgICAgICAgY29uc3QgY3JlYXRlZEV2ZW50UmVmZXJlbmNlID0gdGhpcy52YXVsdC5vbignY3JlYXRlJywgKGZpbGU6IFRBYnN0cmFjdEZpbGUpID0+IHtcbiAgICAgICAgICAgIGlmICghKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudGFza3NNdXRleC5ydW5FeGNsdXNpdmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZXhGaWxlKGZpbGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnZhdWx0RXZlbnRSZWZlcmVuY2VzLnB1c2goY3JlYXRlZEV2ZW50UmVmZXJlbmNlKTtcblxuICAgICAgICBjb25zdCBkZWxldGVkRXZlbnRSZWZlcmVuY2UgPSB0aGlzLnZhdWx0Lm9uKCdkZWxldGUnLCAoZmlsZTogVEFic3RyYWN0RmlsZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCEoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50YXNrc011dGV4LnJ1bkV4Y2x1c2l2ZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXNrcyA9IHRoaXMudGFza3MuZmlsdGVyKCh0YXNrOiBUYXNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXNrLnBhdGggIT09IGZpbGUucGF0aDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy52YXVsdEV2ZW50UmVmZXJlbmNlcy5wdXNoKGRlbGV0ZWRFdmVudFJlZmVyZW5jZSk7XG5cbiAgICAgICAgY29uc3QgcmVuYW1lZEV2ZW50UmVmZXJlbmNlID0gdGhpcy52YXVsdC5vbigncmVuYW1lJywgKGZpbGU6IFRBYnN0cmFjdEZpbGUsIG9sZFBhdGg6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKCEoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50YXNrc011dGV4LnJ1bkV4Y2x1c2l2ZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmFsbGJhY2tEYXRlID0gbmV3IExhenkoKCkgPT4gRGF0ZUZhbGxiYWNrLmZyb21QYXRoKGZpbGUucGF0aCkpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50YXNrcyA9IHRoaXMudGFza3MubWFwKCh0YXNrOiBUYXNrKTogVGFzayA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXNrLnBhdGggPT09IG9sZFBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXNlRmlsZW5hbWVBc1NjaGVkdWxlZERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRhc2soeyAuLi50YXNrLCBwYXRoOiBmaWxlLnBhdGggfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBEYXRlRmFsbGJhY2sudXBkYXRlVGFza1BhdGgodGFzaywgZmlsZS5wYXRoLCBmYWxsYmFja0RhdGUudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhc2s7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy52YXVsdEV2ZW50UmVmZXJlbmNlcy5wdXNoKHJlbmFtZWRFdmVudFJlZmVyZW5jZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVUb0V2ZW50cygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdFJlZmVyZW5jZSA9IHRoaXMuZXZlbnRzLm9uUmVxdWVzdENhY2hlVXBkYXRlKChoYW5kbGVyKSA9PiB7XG4gICAgICAgICAgICBoYW5kbGVyKHsgdGFza3M6IHRoaXMudGFza3MsIHN0YXRlOiB0aGlzLnN0YXRlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ldmVudHNFdmVudFJlZmVyZW5jZXMucHVzaChyZXF1ZXN0UmVmZXJlbmNlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRWYXVsdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFza3NNdXRleC5ydW5FeGNsdXNpdmUoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkluaXRpYWxpemluZztcbiAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgIHRoaXMudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLm1hcCgoZmlsZTogVEZpbGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhGaWxlKGZpbGUpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5XYXJtO1xuICAgICAgICAgICAgLy8gTm90aWZ5IHRoYXQgdGhlIGNhY2hlIGlzIG5vdyB3YXJtOlxuICAgICAgICAgICAgdGhpcy5ub3RpZnlTdWJzY3JpYmVycygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGluZGV4RmlsZShmaWxlOiBURmlsZSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBmaWxlQ2FjaGUgPSB0aGlzLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuICAgICAgICBpZiAoZmlsZUNhY2hlID09PSBudWxsIHx8IGZpbGVDYWNoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvbGRUYXNrcyA9IHRoaXMudGFza3MuZmlsdGVyKCh0YXNrOiBUYXNrKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGFzay5wYXRoID09PSBmaWxlLnBhdGg7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGxpc3RJdGVtcyA9IGZpbGVDYWNoZS5saXN0SXRlbXM7XG4gICAgICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gbGlzdCBpdGVtcyBjYWNoZSwgdGhlcmUgYXJlIG5vIHRhc2tzLlxuICAgICAgICAvLyBTdGlsbCBjb250aW51ZSB0byBub3RpZnkgd2F0Y2hlcnMgb2YgcmVtb3ZhbC5cblxuICAgICAgICBsZXQgbmV3VGFza3M6IFRhc2tbXSA9IFtdO1xuICAgICAgICBpZiAobGlzdEl0ZW1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIE9ubHkgcmVhZCB0aGUgZmlsZSBhbmQgcHJvY2VzcyBmb3IgdGFza3MgaWYgdGhlcmUgYXJlIGxpc3QgaXRlbXMuXG4gICAgICAgICAgICBjb25zdCBmaWxlQ29udGVudCA9IGF3YWl0IHRoaXMudmF1bHQuY2FjaGVkUmVhZChmaWxlKTtcbiAgICAgICAgICAgIG5ld1Rhc2tzID0gQ2FjaGUuZ2V0VGFza3NGcm9tRmlsZUNvbnRlbnQoZmlsZUNvbnRlbnQsIGxpc3RJdGVtcywgZmlsZUNhY2hlLCBmaWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBjaGFuZ2VzIGluIGFueSBvZiB0aGUgdGFza3MsIHRoZXJlJ3NcbiAgICAgICAgLy8gbm90aGluZyB0byBkbywgc28ganVzdCByZXR1cm4uXG4gICAgICAgIGlmIChUYXNrLnRhc2tzTGlzdHNJZGVudGljYWwob2xkVGFza3MsIG5ld1Rhc2tzKSkge1xuICAgICAgICAgICAgLy8gVGhpcyBjb2RlIGtlcHQgZm9yIG5vdywgdG8gYWxsb3cgZm9yIGRlYnVnZ2luZyBkdXJpbmcgZGV2ZWxvcG1lbnQuXG4gICAgICAgICAgICAvLyBJdCBpcyB0b28gdmVyYm9zZSB0byByZWxlYXNlIHRvIHVzZXJzLlxuICAgICAgICAgICAgLy8gaWYgKHRoaXMuZ2V0U3RhdGUoKSA9PSBTdGF0ZS5XYXJtKSB7XG4gICAgICAgICAgICAvLyAgICAgY29uc29sZS5kZWJ1ZyhgVGFza3MgdW5jaGFuZ2VkIGluICR7ZmlsZS5wYXRofWApO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZ2V0U3RhdGUoKSA9PSBTdGF0ZS5XYXJtKSB7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKFxuICAgICAgICAgICAgICAgIGBBdCBsZWFzdCBvbmUgdGFzaywgaXRzIGxpbmUgbnVtYmVyIG9yIGl0cyBoZWFkaW5nIGhhcyBjaGFuZ2VkIGluICR7ZmlsZS5wYXRofTogdHJpZ2dlcmluZyBhIHJlZnJlc2ggb2YgYWxsIGFjdGl2ZSBUYXNrcyBibG9ja3MgaW4gTGl2ZSBQcmV2aWV3IGFuZCBSZWFkaW5nIG1vZGUgdmlld3MuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgYWxsIHRhc2tzIGZyb20gdGhpcyBmaWxlIGZyb20gdGhlIGNhY2hlIGJlZm9yZVxuICAgICAgICAvLyBhZGRpbmcgdGhlIG9uZXMgdGhhdCBhcmUgY3VycmVudGx5IGluIHRoZSBmaWxlLlxuICAgICAgICB0aGlzLnRhc2tzID0gdGhpcy50YXNrcy5maWx0ZXIoKHRhc2s6IFRhc2spID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0YXNrLnBhdGggIT09IGZpbGUucGF0aDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy50YXNrcy5wdXNoKC4uLm5ld1Rhc2tzKTtcblxuICAgICAgICAvLyBBbGwgdXBkYXRlZCwgaW5mb3JtIG91ciBzdWJzY3JpYmVycy5cbiAgICAgICAgdGhpcy5ub3RpZnlTdWJzY3JpYmVycygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdldFRhc2tzRnJvbUZpbGVDb250ZW50KFxuICAgICAgICBmaWxlQ29udGVudDogc3RyaW5nLFxuICAgICAgICBsaXN0SXRlbXM6IExpc3RJdGVtQ2FjaGVbXSxcbiAgICAgICAgZmlsZUNhY2hlOiBDYWNoZWRNZXRhZGF0YSxcbiAgICAgICAgZmlsZTogVEZpbGUsXG4gICAgKTogVGFza1tdIHtcbiAgICAgICAgY29uc3QgdGFza3M6IFRhc2tbXSA9IFtdO1xuICAgICAgICBjb25zdCBmaWxlTGluZXMgPSBmaWxlQ29udGVudC5zcGxpdCgnXFxuJyk7XG5cbiAgICAgICAgLy8gTGF6aWx5IHN0b3JlIGRhdGUgZXh0cmFjdGVkIGZyb20gZmlsZW5hbWUgdG8gYXZvaWQgcGFyc2luZyBtb3JlIHRoYW4gbmVlZGVkXG4gICAgICAgIGNvbnN0IGRhdGVGcm9tRmlsZU5hbWUgPSBuZXcgTGF6eSgoKSA9PiBEYXRlRmFsbGJhY2suZnJvbVBhdGgoZmlsZS5wYXRoKSk7XG5cbiAgICAgICAgLy8gV2Ugd2FudCB0byBzdG9yZSBzZWN0aW9uIGluZm9ybWF0aW9uIHdpdGggZXZlcnkgdGFzayBzb1xuICAgICAgICAvLyB0aGF0IHdlIGNhbiB1c2UgdGhhdCB3aGVuIHdlIHBvc3QgcHJvY2VzcyB0aGUgbWFya2Rvd25cbiAgICAgICAgLy8gcmVuZGVyZWQgbGlzdHMuXG4gICAgICAgIGxldCBjdXJyZW50U2VjdGlvbjogU2VjdGlvbkNhY2hlIHwgbnVsbCA9IG51bGw7XG4gICAgICAgIGxldCBzZWN0aW9uSW5kZXggPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGxpc3RJdGVtIG9mIGxpc3RJdGVtcykge1xuICAgICAgICAgICAgaWYgKGxpc3RJdGVtLnRhc2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U2VjdGlvbiA9PT0gbnVsbCB8fCBjdXJyZW50U2VjdGlvbi5wb3NpdGlvbi5lbmQubGluZSA8IGxpc3RJdGVtLnBvc2l0aW9uLnN0YXJ0LmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2Ugd2VudCBwYXN0IHRoZSBjdXJyZW50IHNlY3Rpb24gKG9yIHRoaXMgaXMgdGhlIGZpcnN0IHRhc2spLlxuICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBzZWN0aW9uIHRoYXQgaXMgcmVsZXZhbnQgZm9yIHRoaXMgdGFzayBhbmQgdGhlIGZvbGxvd2luZyBvZiB0aGUgc2FtZSBzZWN0aW9uLlxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2VjdGlvbiA9IENhY2hlLmdldFNlY3Rpb24obGlzdEl0ZW0ucG9zaXRpb24uc3RhcnQubGluZSwgZmlsZUNhY2hlLnNlY3Rpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbkluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2Fubm90IHByb2Nlc3MgYSB0YXNrIHdpdGhvdXQgYSBzZWN0aW9uLlxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gZmlsZUxpbmVzW2xpc3RJdGVtLnBvc2l0aW9uLnN0YXJ0LmxpbmVdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2sgPSBUYXNrLmZyb21MaW5lKHtcbiAgICAgICAgICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogZmlsZS5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uU3RhcnQ6IGN1cnJlbnRTZWN0aW9uLnBvc2l0aW9uLnN0YXJ0LmxpbmUsXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb25JbmRleCxcbiAgICAgICAgICAgICAgICAgICAgcHJlY2VkaW5nSGVhZGVyOiBDYWNoZS5nZXRQcmVjZWRpbmdIZWFkZXIobGlzdEl0ZW0ucG9zaXRpb24uc3RhcnQubGluZSwgZmlsZUNhY2hlLmhlYWRpbmdzKSxcbiAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tEYXRlOiBkYXRlRnJvbUZpbGVOYW1lLnZhbHVlLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRhc2sgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbkluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIHRhc2tzLnB1c2godGFzayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhc2tzO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdldFNlY3Rpb24obGluZU51bWJlclRhc2s6IG51bWJlciwgc2VjdGlvbnM6IFNlY3Rpb25DYWNoZVtdIHwgdW5kZWZpbmVkKTogU2VjdGlvbkNhY2hlIHwgbnVsbCB7XG4gICAgICAgIGlmIChzZWN0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3Qgc2VjdGlvbiBvZiBzZWN0aW9ucykge1xuICAgICAgICAgICAgaWYgKHNlY3Rpb24ucG9zaXRpb24uc3RhcnQubGluZSA8PSBsaW5lTnVtYmVyVGFzayAmJiBzZWN0aW9uLnBvc2l0aW9uLmVuZC5saW5lID49IGxpbmVOdW1iZXJUYXNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlY3Rpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBnZXRQcmVjZWRpbmdIZWFkZXIobGluZU51bWJlclRhc2s6IG51bWJlciwgaGVhZGluZ3M6IEhlYWRpbmdDYWNoZVtdIHwgdW5kZWZpbmVkKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIGlmIChoZWFkaW5ncyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwcmVjZWRpbmdIZWFkZXI6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gICAgICAgIGZvciAoY29uc3QgaGVhZGluZyBvZiBoZWFkaW5ncykge1xuICAgICAgICAgICAgaWYgKGhlYWRpbmcucG9zaXRpb24uc3RhcnQubGluZSA+IGxpbmVOdW1iZXJUYXNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZWNlZGluZ0hlYWRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZWNlZGluZ0hlYWRlciA9IGhlYWRpbmcuaGVhZGluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJlY2VkaW5nSGVhZGVyO1xuICAgIH1cbn1cbiIsICJjb25zdCBFX1RJTUVPVVQgPSBuZXcgRXJyb3IoJ3RpbWVvdXQgd2hpbGUgd2FpdGluZyBmb3IgbXV0ZXggdG8gYmVjb21lIGF2YWlsYWJsZScpO1xuY29uc3QgRV9BTFJFQURZX0xPQ0tFRCA9IG5ldyBFcnJvcignbXV0ZXggYWxyZWFkeSBsb2NrZWQnKTtcbmNvbnN0IEVfQ0FOQ0VMRUQgPSBuZXcgRXJyb3IoJ3JlcXVlc3QgZm9yIGxvY2sgY2FuY2VsZWQnKTtcblxudmFyIF9fYXdhaXRlciQyID0gKHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5jbGFzcyBTZW1hcGhvcmUge1xuICAgIGNvbnN0cnVjdG9yKF9tYXhDb25jdXJyZW5jeSwgX2NhbmNlbEVycm9yID0gRV9DQU5DRUxFRCkge1xuICAgICAgICB0aGlzLl9tYXhDb25jdXJyZW5jeSA9IF9tYXhDb25jdXJyZW5jeTtcbiAgICAgICAgdGhpcy5fY2FuY2VsRXJyb3IgPSBfY2FuY2VsRXJyb3I7XG4gICAgICAgIHRoaXMuX3F1ZXVlID0gW107XG4gICAgICAgIHRoaXMuX3dhaXRlcnMgPSBbXTtcbiAgICAgICAgaWYgKF9tYXhDb25jdXJyZW5jeSA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NlbWFwaG9yZSBtdXN0IGJlIGluaXRpYWxpemVkIHRvIGEgcG9zaXRpdmUgdmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92YWx1ZSA9IF9tYXhDb25jdXJyZW5jeTtcbiAgICB9XG4gICAgYWNxdWlyZSgpIHtcbiAgICAgICAgY29uc3QgbG9ja2VkID0gdGhpcy5pc0xvY2tlZCgpO1xuICAgICAgICBjb25zdCB0aWNrZXRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gdGhpcy5fcXVldWUucHVzaCh7IHJlc29sdmUsIHJlamVjdCB9KSk7XG4gICAgICAgIGlmICghbG9ja2VkKVxuICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2goKTtcbiAgICAgICAgcmV0dXJuIHRpY2tldFByb21pc2U7XG4gICAgfVxuICAgIHJ1bkV4Y2x1c2l2ZShjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyJDIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBbdmFsdWUsIHJlbGVhc2VdID0geWllbGQgdGhpcy5hY3F1aXJlKCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCBjYWxsYmFjayh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICByZWxlYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB3YWl0Rm9yVW5sb2NrKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyJDIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNMb2NrZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHdhaXRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHRoaXMuX3dhaXRlcnMucHVzaCh7IHJlc29sdmUgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHdhaXRQcm9taXNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaXNMb2NrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZSA8PSAwO1xuICAgIH1cbiAgICAvKiogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiAwLjMuMCwgd2lsbCBiZSByZW1vdmVkIGluIDAuNC4wLiBVc2UgcnVuRXhjbHVzaXZlIGluc3RlYWQuICovXG4gICAgcmVsZWFzZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX21heENvbmN1cnJlbmN5ID4gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0aGlzIG1ldGhvZCBpcyB1bmF2YWlsYWJsZSBvbiBzZW1hcGhvcmVzIHdpdGggY29uY3VycmVuY3kgPiAxOyB1c2UgdGhlIHNjb3BlZCByZWxlYXNlIHJldHVybmVkIGJ5IGFjcXVpcmUgaW5zdGVhZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50UmVsZWFzZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbGVhc2VyID0gdGhpcy5fY3VycmVudFJlbGVhc2VyO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJlbGVhc2VyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmVsZWFzZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIHRoaXMuX3F1ZXVlLmZvckVhY2goKHRpY2tldCkgPT4gdGlja2V0LnJlamVjdCh0aGlzLl9jYW5jZWxFcnJvcikpO1xuICAgICAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuICAgIH1cbiAgICBfZGlzcGF0Y2goKSB7XG4gICAgICAgIGNvbnN0IG5leHRUaWNrZXQgPSB0aGlzLl9xdWV1ZS5zaGlmdCgpO1xuICAgICAgICBpZiAoIW5leHRUaWNrZXQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxldCByZWxlYXNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9jdXJyZW50UmVsZWFzZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVsZWFzZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgcmVsZWFzZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUrKztcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVXYWl0ZXJzKCk7XG4gICAgICAgICAgICB0aGlzLl9kaXNwYXRjaCgpO1xuICAgICAgICB9O1xuICAgICAgICBuZXh0VGlja2V0LnJlc29sdmUoW3RoaXMuX3ZhbHVlLS0sIHRoaXMuX2N1cnJlbnRSZWxlYXNlcl0pO1xuICAgIH1cbiAgICBfcmVzb2x2ZVdhaXRlcnMoKSB7XG4gICAgICAgIHRoaXMuX3dhaXRlcnMuZm9yRWFjaCgod2FpdGVyKSA9PiB3YWl0ZXIucmVzb2x2ZSgpKTtcbiAgICAgICAgdGhpcy5fd2FpdGVycyA9IFtdO1xuICAgIH1cbn1cblxudmFyIF9fYXdhaXRlciQxID0gKHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5jbGFzcyBNdXRleCB7XG4gICAgY29uc3RydWN0b3IoY2FuY2VsRXJyb3IpIHtcbiAgICAgICAgdGhpcy5fc2VtYXBob3JlID0gbmV3IFNlbWFwaG9yZSgxLCBjYW5jZWxFcnJvcik7XG4gICAgfVxuICAgIGFjcXVpcmUoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIkMSh0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IFssIHJlbGVhc2VyXSA9IHlpZWxkIHRoaXMuX3NlbWFwaG9yZS5hY3F1aXJlKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVsZWFzZXI7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBydW5FeGNsdXNpdmUoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbWFwaG9yZS5ydW5FeGNsdXNpdmUoKCkgPT4gY2FsbGJhY2soKSk7XG4gICAgfVxuICAgIGlzTG9ja2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VtYXBob3JlLmlzTG9ja2VkKCk7XG4gICAgfVxuICAgIHdhaXRGb3JVbmxvY2soKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZW1hcGhvcmUud2FpdEZvclVubG9jaygpO1xuICAgIH1cbiAgICAvKiogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiAwLjMuMCwgd2lsbCBiZSByZW1vdmVkIGluIDAuNC4wLiBVc2UgcnVuRXhjbHVzaXZlIGluc3RlYWQuICovXG4gICAgcmVsZWFzZSgpIHtcbiAgICAgICAgdGhpcy5fc2VtYXBob3JlLnJlbGVhc2UoKTtcbiAgICB9XG4gICAgY2FuY2VsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VtYXBob3JlLmNhbmNlbCgpO1xuICAgIH1cbn1cblxudmFyIF9fYXdhaXRlciA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbmZ1bmN0aW9uIHdpdGhUaW1lb3V0KHN5bmMsIHRpbWVvdXQsIHRpbWVvdXRFcnJvciA9IEVfVElNRU9VVCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFjcXVpcmU6ICgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGxldCBpc1RpbWVvdXQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZSA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlzVGltZW91dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHRpbWVvdXRFcnJvcik7XG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlja2V0ID0geWllbGQgc3luYy5hY3F1aXJlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWxlYXNlID0gQXJyYXkuaXNBcnJheSh0aWNrZXQpID8gdGlja2V0WzFdIDogdGlja2V0O1xuICAgICAgICAgICAgICAgICAgICByZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aWNrZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKSxcbiAgICAgICAgcnVuRXhjbHVzaXZlKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGxldCByZWxlYXNlID0gKCkgPT4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpY2tldCA9IHlpZWxkIHRoaXMuYWNxdWlyZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aWNrZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWxlYXNlID0gdGlja2V0WzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkIGNhbGxiYWNrKHRpY2tldFswXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWxlYXNlID0gdGlja2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbGVhc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgaW4gMC4zLjAsIHdpbGwgYmUgcmVtb3ZlZCBpbiAwLjQuMC4gVXNlIHJ1bkV4Y2x1c2l2ZSBpbnN0ZWFkLiAqL1xuICAgICAgICByZWxlYXNlKCkge1xuICAgICAgICAgICAgc3luYy5yZWxlYXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbmNlbCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW5jLmNhbmNlbCgpO1xuICAgICAgICB9LFxuICAgICAgICB3YWl0Rm9yVW5sb2NrOiAoKSA9PiBzeW5jLndhaXRGb3JVbmxvY2soKSxcbiAgICAgICAgaXNMb2NrZWQ6ICgpID0+IHN5bmMuaXNMb2NrZWQoKSxcbiAgICB9O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpc25lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbmZ1bmN0aW9uIHRyeUFjcXVpcmUoc3luYywgYWxyZWFkeUFjcXVpcmVkRXJyb3IgPSBFX0FMUkVBRFlfTE9DS0VEKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICByZXR1cm4gd2l0aFRpbWVvdXQoc3luYywgMCwgYWxyZWFkeUFjcXVpcmVkRXJyb3IpO1xufVxuXG5leHBvcnQgeyBFX0FMUkVBRFlfTE9DS0VELCBFX0NBTkNFTEVELCBFX1RJTUVPVVQsIE11dGV4LCBTZW1hcGhvcmUsIHRyeUFjcXVpcmUsIHdpdGhUaW1lb3V0IH07XG4iLCAiaW1wb3J0IHR5cGUgeyBNb21lbnQgfSBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBNYXJrZG93blJlbmRlcmVyIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgcmVwbGFjZVRhc2tXaXRoVGFza3MgfSBmcm9tICcuL0ZpbGUnO1xuaW1wb3J0IHsgTGF5b3V0T3B0aW9ucyB9IGZyb20gJy4vTGF5b3V0T3B0aW9ucyc7XG5pbXBvcnQgeyBSZWN1cnJlbmNlIH0gZnJvbSAnLi9SZWN1cnJlbmNlJztcbmltcG9ydCB7IGdldFNldHRpbmdzIH0gZnJvbSAnLi9Db25maWcvU2V0dGluZ3MnO1xuaW1wb3J0IHsgVXJnZW5jeSB9IGZyb20gJy4vVXJnZW5jeSc7XG5pbXBvcnQgeyBTb3J0IH0gZnJvbSAnLi9RdWVyeS9Tb3J0JztcbmltcG9ydCB7IERhdGVGYWxsYmFjayB9IGZyb20gJy4vRGF0ZUZhbGxiYWNrJztcblxuLyoqXG4gKiBDb2xsZWN0aW9uIG9mIHN0YXR1cyB0eXBlcyBzdXBwb3J0ZWQgYnkgdGhlIHBsdWdpbi5cbiAqIFRPRE86IE1ha2UgdGhpcyBhIGNsYXNzIHNvIGl0IGNhbiBzdXBwb3J0IG90aGVyIHR5cGVzIGFuZCBlYXNpZXIgbWFwcGluZyB0byBzdGF0dXMgY2hhcmFjdGVyLlxuICogQGV4cG9ydFxuICogQGVudW0ge251bWJlcn1cbiAqL1xuZXhwb3J0IGVudW0gU3RhdHVzIHtcbiAgICBUT0RPID0gJ1RvZG8nLFxuICAgIERPTkUgPSAnRG9uZScsXG59XG5cbi8qKlxuICogV2hlbiBzb3J0aW5nLCBtYWtlIHN1cmUgbG93IGFsd2F5cyBjb21lcyBhZnRlciBub25lLiBUaGlzIHdheSBhbnkgdGFza3Mgd2l0aCBsb3cgd2lsbCBiZSBiZWxvdyBhbnkgZXhpdGluZ1xuICogdGFza3MgdGhhdCBoYXZlIG5vIHByaW9yaXR5IHdoaWNoIHdvdWxkIGJlIHRoZSBkZWZhdWx0LlxuICpcbiAqIEBleHBvcnRcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBlbnVtIFByaW9yaXR5IHtcbiAgICBIaWdoID0gJzEnLFxuICAgIE1lZGl1bSA9ICcyJyxcbiAgICBOb25lID0gJzMnLFxuICAgIExvdyA9ICc0Jyxcbn1cblxuZXhwb3J0IGNvbnN0IHByaW9yaXR5U3ltYm9scyA9IHtcbiAgICBIaWdoOiAnXHUyM0VCJyxcbiAgICBNZWRpdW06ICdcdUQ4M0RcdUREM0MnLFxuICAgIExvdzogJ1x1RDgzRFx1REQzRCcsXG4gICAgTm9uZTogJycsXG59O1xuXG5leHBvcnQgY29uc3QgcmVjdXJyZW5jZVN5bWJvbCA9ICdcdUQ4M0RcdUREMDEnO1xuZXhwb3J0IGNvbnN0IHN0YXJ0RGF0ZVN5bWJvbCA9ICdcdUQ4M0RcdURFRUInO1xuZXhwb3J0IGNvbnN0IHNjaGVkdWxlZERhdGVTeW1ib2wgPSAnXHUyM0YzJztcbmV4cG9ydCBjb25zdCBkdWVEYXRlU3ltYm9sID0gJ1x1RDgzRFx1RENDNSc7XG5leHBvcnQgY29uc3QgZG9uZURhdGVTeW1ib2wgPSAnXHUyNzA1JztcblxuZXhwb3J0IGNsYXNzIFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMge1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgZGF0ZUZvcm1hdCA9ICdZWVlZLU1NLUREJztcblxuICAgIC8vIE1hdGNoZXMgaW5kZW50YXRpb24gYmVmb3JlIGEgbGlzdCBtYXJrZXIgKGluY2x1ZGluZyA+IGZvciBwb3RlbnRpYWxseSBuZXN0ZWQgYmxvY2txdW90ZXMgb3IgT2JzaWRpYW4gY2FsbG91dHMpXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBpbmRlbnRhdGlvblJlZ2V4ID0gL14oW1xcc1xcdD5dKikvO1xuXG4gICAgLy8gTWF0Y2hlcyAoYnV0IGRvZXMgbm90IHNhdmUpIC0gb3IgKiBsaXN0IG1hcmtlcnMsIG9yIG51bWJlcmVkIGxpc3QgbWFya2VycyAoZWcgMS4pXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBsaXN0TWFya2VyUmVnZXggPSAvKD86Wy0qXXxbMC05XStcXC4pLztcblxuICAgIC8vIE1hdGNoZXMgYSBjaGVja2JveCBhbmQgc2F2ZXMgdGhlIHN0YXR1cyBjaGFyYWN0ZXIgaW5zaWRlXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBjaGVja2JveFJlZ2V4ID0gL1xcWyguKVxcXS91O1xuXG4gICAgLy8gTWF0Y2hlcyB0aGUgcmVzdCBvZiB0aGUgdGFzayBhZnRlciB0aGUgY2hlY2tib3guXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBhZnRlckNoZWNrYm94UmVnZXggPSAvICooLiopL3U7XG5cbiAgICAvLyBNYWluIHJlZ2V4IGZvciBwYXJzaW5nIGEgbGluZS4gSXQgbWF0Y2hlcyB0aGUgZm9sbG93aW5nOlxuICAgIC8vIC0gSW5kZW50YXRpb25cbiAgICAvLyAtIFN0YXR1cyBjaGFyYWN0ZXJcbiAgICAvLyAtIFJlc3Qgb2YgdGFzayBhZnRlciBjaGVja2JveCBtYXJrZG93blxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgdGFza1JlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgVGFza1JlZ3VsYXJFeHByZXNzaW9ucy5pbmRlbnRhdGlvblJlZ2V4LnNvdXJjZSArXG4gICAgICAgICAgICBUYXNrUmVndWxhckV4cHJlc3Npb25zLmxpc3RNYXJrZXJSZWdleC5zb3VyY2UgK1xuICAgICAgICAgICAgJyArJyArXG4gICAgICAgICAgICBUYXNrUmVndWxhckV4cHJlc3Npb25zLmNoZWNrYm94UmVnZXguc291cmNlICtcbiAgICAgICAgICAgIFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuYWZ0ZXJDaGVja2JveFJlZ2V4LnNvdXJjZSxcbiAgICAgICAgJ3UnLFxuICAgICk7XG5cbiAgICAvLyBVc2VkIHdpdGggdGhlIFwiQ3JlYXRlIG9yIEVkaXQgVGFza1wiIGNvbW1hbmQgdG8gcGFyc2UgaW5kZW50YXRpb24gYW5kIHN0YXR1cyBpZiBwcmVzZW50XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBub25UYXNrUmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICBUYXNrUmVndWxhckV4cHJlc3Npb25zLmluZGVudGF0aW9uUmVnZXguc291cmNlICtcbiAgICAgICAgICAgIFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMubGlzdE1hcmtlclJlZ2V4LnNvdXJjZSArXG4gICAgICAgICAgICAnPyAqKCcgK1xuICAgICAgICAgICAgVGFza1JlZ3VsYXJFeHByZXNzaW9ucy5jaGVja2JveFJlZ2V4LnNvdXJjZSArXG4gICAgICAgICAgICAnKT8nICtcbiAgICAgICAgICAgIFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuYWZ0ZXJDaGVja2JveFJlZ2V4LnNvdXJjZSxcbiAgICAgICAgJ3UnLFxuICAgICk7XG5cbiAgICAvLyBVc2VkIHdpdGggXCJUb2dnbGUgRG9uZVwiIGNvbW1hbmQgdG8gZGV0ZWN0IGEgbGlzdCBpdGVtIHRoYXQgY2FuIGdldCBhIGNoZWNrYm94IGFkZGVkIHRvIGl0LlxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgbGlzdEl0ZW1SZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgIFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuaW5kZW50YXRpb25SZWdleC5zb3VyY2UgKyAnKCcgKyBUYXNrUmVndWxhckV4cHJlc3Npb25zLmxpc3RNYXJrZXJSZWdleC5zb3VyY2UgKyAnKScsXG4gICAgKTtcblxuICAgIC8vIE1hdGNoIG9uIGJsb2NrIGxpbmsgYXQgZW5kLlxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgYmxvY2tMaW5rUmVnZXggPSAvIFxcXlthLXpBLVowLTktXSskL3U7XG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIHJlZ2V4J3MgZW5kIHdpdGggYCRgIGJlY2F1c2UgdGhleSB3aWxsIGJlIG1hdGNoZWQgYW5kXG4gICAgLy8gcmVtb3ZlZCBmcm9tIHRoZSBlbmQgdW50aWwgbm9uZSBhcmUgbGVmdC5cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHByaW9yaXR5UmVnZXggPSAvKFtcdTIzRUJcdUQ4M0RcdUREM0NcdUQ4M0RcdUREM0RdKSQvdTtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHN0YXJ0RGF0ZVJlZ2V4ID0gL1x1RDgzRFx1REVFQiAqKFxcZHs0fS1cXGR7Mn0tXFxkezJ9KSQvdTtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHNjaGVkdWxlZERhdGVSZWdleCA9IC9bXHUyM0YzXHUyMzFCXSAqKFxcZHs0fS1cXGR7Mn0tXFxkezJ9KSQvdTtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGR1ZURhdGVSZWdleCA9IC9bXHVEODNEXHVEQ0M1XHVEODNEXHVEQ0M2XHVEODNEXHVEREQzXSAqKFxcZHs0fS1cXGR7Mn0tXFxkezJ9KSQvdTtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGRvbmVEYXRlUmVnZXggPSAvXHUyNzA1ICooXFxkezR9LVxcZHsyfS1cXGR7Mn0pJC91O1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgcmVjdXJyZW5jZVJlZ2V4ID0gL1x1RDgzRFx1REQwMSA/KFthLXpBLVowLTksICFdKykkL2l1O1xuXG4gICAgLy8gUmVnZXggdG8gbWF0Y2ggYWxsIGhhc2ggdGFncywgYmFzaWNhbGx5IGhhc2ggZm9sbG93ZWQgYnkgYW55dGhpbmcgYnV0IHRoZSBjaGFyYWN0ZXJzIGluIHRoZSBuZWdhdGlvbi5cbiAgICAvLyBUbyBlbnN1cmUgVVJMcyBhcmUgbm90IGNhdWdodCBpdCBpcyBsb29raW5nIG9mIGJlZ2lubmluZyBvZiBzdHJpbmcgdGFnIGFuZCBhbnlcbiAgICAvLyB0YWcgdGhhdCBoYXMgYSBzcGFjZSBpbiBmcm9udCBvZiBpdC4gQW55ICMgdGhhdCBoYXMgYSBjaGFyYWN0ZXIgaW4gZnJvbnRcbiAgICAvLyBvZiBpdCB3aWxsIGJlIGlnbm9yZWQuXG4gICAgLy8gRVhBTVBMRTpcbiAgICAvLyBkZXNjcmlwdGlvbjogJyNkb2cgI2NhciBodHRwOi8vd3d3L2RkZCNlcmUgI2hvdXNlJ1xuICAgIC8vIG1hdGNoZXM6ICNkb2csICNjYXIsICNob3VzZVxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgaGFzaFRhZ3MgPSAvKF58XFxzKSNbXiAhQCMkJV4mKigpLC4/XCI6e318PD5dKi9nO1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgaGFzaFRhZ3NGcm9tRW5kID0gbmV3IFJlZ0V4cCh0aGlzLmhhc2hUYWdzLnNvdXJjZSArICckJyk7XG59XG5cbi8qKlxuICogVGFzayBlbmNhcHN1bGF0ZXMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIE1hcmtEb3duIHRhc2sgYWxvbmcgd2l0aFxuICogdGhlIGV4dGVuc2lvbnMgcHJvdmlkZWQgYnkgdGhpcyBwbHVnaW4uIFRoaXMgaXMgdXNlZCB0byBwYXJzZSBhbmRcbiAqIGdlbmVyYXRlIHRoZSBtYXJrZG93biB0YXNrIGZvciBhbGwgdXBkYXRlcyBhbmQgcmVwbGFjZW1lbnRzLlxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBUYXNrXG4gKi9cbmV4cG9ydCBjbGFzcyBUYXNrIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RhdHVzOiBTdGF0dXM7XG4gICAgcHVibGljIHJlYWRvbmx5IGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHBhdGg6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW5kZW50YXRpb246IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgbGlzdE1hcmtlcjogc3RyaW5nO1xuICAgIC8qKiBMaW5lIG51bWJlciB3aGVyZSB0aGUgc2VjdGlvbiBzdGFydHMgdGhhdCBjb250YWlucyB0aGlzIHRhc2suICovXG4gICAgcHVibGljIHJlYWRvbmx5IHNlY3Rpb25TdGFydDogbnVtYmVyO1xuICAgIC8qKiBUaGUgaW5kZXggb2YgdGhlIG50aCB0YXNrIGluIGl0cyBzZWN0aW9uLiAqL1xuICAgIHB1YmxpYyByZWFkb25seSBzZWN0aW9uSW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgb3JpZ2luYWwgY2hhcmFjdGVyIGZyb20gd2l0aGluIGBbXWAgaW4gdGhlIGRvY3VtZW50LlxuICAgICAqIFJlcXVpcmVkIHRvIGJlIGFkZGVkIHRvIHRoZSBMSSB0aGUgc2FtZSB3YXkgb2JzaWRpYW4gZG9lcyBhcyBhIGBkYXRhLXRhc2tgIGF0dHJpYnV0ZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgb3JpZ2luYWxTdGF0dXNDaGFyYWN0ZXI6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJlY2VkaW5nSGVhZGVyOiBzdHJpbmcgfCBudWxsO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHRhZ3M6IHN0cmluZ1tdO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHByaW9yaXR5OiBQcmlvcml0eTtcblxuICAgIHB1YmxpYyByZWFkb25seSBzdGFydERhdGU6IE1vbWVudCB8IG51bGw7XG4gICAgcHVibGljIHJlYWRvbmx5IHNjaGVkdWxlZERhdGU6IE1vbWVudCB8IG51bGw7XG4gICAgcHVibGljIHJlYWRvbmx5IGR1ZURhdGU6IE1vbWVudCB8IG51bGw7XG4gICAgcHVibGljIHJlYWRvbmx5IGRvbmVEYXRlOiBNb21lbnQgfCBudWxsO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHJlY3VycmVuY2U6IFJlY3VycmVuY2UgfCBudWxsO1xuICAgIC8qKiBUaGUgYmxvY2tMaW5rIGlzIGEgXCJeXCIgYW5ub3RhdGlvbiBhZnRlciB0aGUgZGF0ZXMvcmVjdXJyZW5jZSBydWxlcy4gKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYmxvY2tMaW5rOiBzdHJpbmc7XG5cbiAgICAvKiogVGhlIG9yaWdpbmFsIGxpbmUgcmVhZCBmcm9tIGZpbGUuXG4gICAgICpcbiAgICAgKiBXaWxsIGJlIGVtcHR5IGlmIFRhc2sgd2FzIGNyZWF0ZWQgcHJvZ3JhbW1hdGljYWxseVxuICAgICAqIChmb3IgZXhhbXBsZSwgYnkgQ3JlYXRlIG9yIEVkaXQgVGFzaywgb3IgaW4gdGVzdHMsIGluY2x1ZGluZyB2aWEge0BsaW5rIFRhc2tCdWlsZGVyfSkuICovXG4gICAgcHVibGljIHJlYWRvbmx5IG9yaWdpbmFsTWFya2Rvd246IHN0cmluZztcblxuICAgIHB1YmxpYyByZWFkb25seSBzY2hlZHVsZWREYXRlSXNJbmZlcnJlZDogYm9vbGVhbjtcblxuICAgIHByaXZhdGUgX3VyZ2VuY3k6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBzdGF0dXMsXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICBwYXRoLFxuICAgICAgICBpbmRlbnRhdGlvbixcbiAgICAgICAgbGlzdE1hcmtlcixcbiAgICAgICAgc2VjdGlvblN0YXJ0LFxuICAgICAgICBzZWN0aW9uSW5kZXgsXG4gICAgICAgIG9yaWdpbmFsU3RhdHVzQ2hhcmFjdGVyLFxuICAgICAgICBwcmVjZWRpbmdIZWFkZXIsXG4gICAgICAgIHByaW9yaXR5LFxuICAgICAgICBzdGFydERhdGUsXG4gICAgICAgIHNjaGVkdWxlZERhdGUsXG4gICAgICAgIGR1ZURhdGUsXG4gICAgICAgIGRvbmVEYXRlLFxuICAgICAgICByZWN1cnJlbmNlLFxuICAgICAgICBibG9ja0xpbmssXG4gICAgICAgIHRhZ3MsXG4gICAgICAgIG9yaWdpbmFsTWFya2Rvd24sXG4gICAgICAgIHNjaGVkdWxlZERhdGVJc0luZmVycmVkLFxuICAgIH06IHtcbiAgICAgICAgc3RhdHVzOiBTdGF0dXM7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgICAgIHBhdGg6IHN0cmluZztcbiAgICAgICAgaW5kZW50YXRpb246IHN0cmluZztcbiAgICAgICAgbGlzdE1hcmtlcjogc3RyaW5nO1xuICAgICAgICBzZWN0aW9uU3RhcnQ6IG51bWJlcjtcbiAgICAgICAgc2VjdGlvbkluZGV4OiBudW1iZXI7XG4gICAgICAgIG9yaWdpbmFsU3RhdHVzQ2hhcmFjdGVyOiBzdHJpbmc7XG4gICAgICAgIHByZWNlZGluZ0hlYWRlcjogc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgcHJpb3JpdHk6IFByaW9yaXR5O1xuICAgICAgICBzdGFydERhdGU6IG1vbWVudC5Nb21lbnQgfCBudWxsO1xuICAgICAgICBzY2hlZHVsZWREYXRlOiBtb21lbnQuTW9tZW50IHwgbnVsbDtcbiAgICAgICAgZHVlRGF0ZTogbW9tZW50Lk1vbWVudCB8IG51bGw7XG4gICAgICAgIGRvbmVEYXRlOiBtb21lbnQuTW9tZW50IHwgbnVsbDtcbiAgICAgICAgcmVjdXJyZW5jZTogUmVjdXJyZW5jZSB8IG51bGw7XG4gICAgICAgIGJsb2NrTGluazogc3RyaW5nO1xuICAgICAgICB0YWdzOiBzdHJpbmdbXSB8IFtdO1xuICAgICAgICBvcmlnaW5hbE1hcmtkb3duOiBzdHJpbmc7XG4gICAgICAgIHNjaGVkdWxlZERhdGVJc0luZmVycmVkOiBib29sZWFuO1xuICAgIH0pIHtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgICAgdGhpcy5pbmRlbnRhdGlvbiA9IGluZGVudGF0aW9uO1xuICAgICAgICB0aGlzLmxpc3RNYXJrZXIgPSBsaXN0TWFya2VyO1xuICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHNlY3Rpb25TdGFydDtcbiAgICAgICAgdGhpcy5zZWN0aW9uSW5kZXggPSBzZWN0aW9uSW5kZXg7XG4gICAgICAgIHRoaXMub3JpZ2luYWxTdGF0dXNDaGFyYWN0ZXIgPSBvcmlnaW5hbFN0YXR1c0NoYXJhY3RlcjtcbiAgICAgICAgdGhpcy5wcmVjZWRpbmdIZWFkZXIgPSBwcmVjZWRpbmdIZWFkZXI7XG5cbiAgICAgICAgdGhpcy50YWdzID0gdGFncztcblxuICAgICAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG5cbiAgICAgICAgdGhpcy5zdGFydERhdGUgPSBzdGFydERhdGU7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVkRGF0ZSA9IHNjaGVkdWxlZERhdGU7XG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XG4gICAgICAgIHRoaXMuZG9uZURhdGUgPSBkb25lRGF0ZTtcblxuICAgICAgICB0aGlzLnJlY3VycmVuY2UgPSByZWN1cnJlbmNlO1xuICAgICAgICB0aGlzLmJsb2NrTGluayA9IGJsb2NrTGluaztcbiAgICAgICAgdGhpcy5vcmlnaW5hbE1hcmtkb3duID0gb3JpZ2luYWxNYXJrZG93bjtcblxuICAgICAgICB0aGlzLnNjaGVkdWxlZERhdGVJc0luZmVycmVkID0gc2NoZWR1bGVkRGF0ZUlzSW5mZXJyZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGFrZXMgdGhlIGdpdmVuIGxpbmUgZnJvbSBhIG9ic2lkaWFuIG5vdGUgYW5kIHJldHVybnMgYSBUYXNrIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGluZSAtIFRoZSBmdWxsIGxpbmUgaW4gdGhlIG5vdGUgdG8gcGFyc2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBQYXRoIHRvIHRoZSBub3RlIGluIG9ic2lkaWFuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZWN0aW9uU3RhcnQgLSBMaW5lIG51bWJlciB3aGVyZSB0aGUgc2VjdGlvbiBzdGFydHMgdGhhdCBjb250YWlucyB0aGlzIHRhc2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNlY3Rpb25JbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgbnRoIHRhc2sgaW4gaXRzIHNlY3Rpb24uXG4gICAgICogQHBhcmFtIHsoc3RyaW5nIHwgbnVsbCl9IHByZWNlZGluZ0hlYWRlciAtIFRoZSBoZWFkZXIgYmVmb3JlIHRoaXMgdGFzay5cbiAgICAgKiBAcGFyYW0geyhNb21lbnQgfCBudWxsKX0gZmFsbGJhY2tEYXRlIC0gVGhlIGRhdGUgdG8gdXNlIGFzIHRoZSBzY2hlZHVsZWQgZGF0ZSBpZiBubyBvdGhlciBkYXRlIGlzIHNldFxuICAgICAqIEByZXR1cm4geyp9ICB7KFRhc2sgfCBudWxsKX1cbiAgICAgKiBAbWVtYmVyb2YgVGFza1xuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbUxpbmUoe1xuICAgICAgICBsaW5lLFxuICAgICAgICBwYXRoLFxuICAgICAgICBzZWN0aW9uU3RhcnQsXG4gICAgICAgIHNlY3Rpb25JbmRleCxcbiAgICAgICAgcHJlY2VkaW5nSGVhZGVyLFxuICAgICAgICBmYWxsYmFja0RhdGUsXG4gICAgfToge1xuICAgICAgICBsaW5lOiBzdHJpbmc7XG4gICAgICAgIHBhdGg6IHN0cmluZztcbiAgICAgICAgc2VjdGlvblN0YXJ0OiBudW1iZXI7XG4gICAgICAgIHNlY3Rpb25JbmRleDogbnVtYmVyO1xuICAgICAgICBwcmVjZWRpbmdIZWFkZXI6IHN0cmluZyB8IG51bGw7XG4gICAgICAgIGZhbGxiYWNrRGF0ZTogTW9tZW50IHwgbnVsbDtcbiAgICB9KTogVGFzayB8IG51bGwge1xuICAgICAgICAvLyBDaGVjayB0aGUgbGluZSB0byBzZWUgaWYgaXQgaXMgYSBtYXJrZG93biB0YXNrLlxuICAgICAgICBjb25zdCByZWdleE1hdGNoID0gbGluZS5tYXRjaChUYXNrUmVndWxhckV4cHJlc3Npb25zLnRhc2tSZWdleCk7XG4gICAgICAgIGlmIChyZWdleE1hdGNoID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1hdGNoWzNdIGluY2x1ZGVzIHRoZSB3aG9sZSBib2R5IG9mIHRoZSB0YXNrIGFmdGVyIHRoZSBicmFja2V0cy5cbiAgICAgICAgY29uc3QgYm9keSA9IHJlZ2V4TWF0Y2hbM10udHJpbSgpO1xuXG4gICAgICAgIC8vIHJldHVybiBpZiB0YXNrIGRvZXMgbm90IGhhdmUgdGhlIGdsb2JhbCBmaWx0ZXIuIERvIHRoaXMgYmVmb3JlIHByb2Nlc3NpbmdcbiAgICAgICAgLy8gcmVzdCBvZiBtYXRjaCB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLlxuICAgICAgICBjb25zdCB7IGdsb2JhbEZpbHRlciB9ID0gZ2V0U2V0dGluZ3MoKTtcbiAgICAgICAgaWYgKCFib2R5LmluY2x1ZGVzKGdsb2JhbEZpbHRlcikpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRlc2NyaXB0aW9uID0gYm9keTtcbiAgICAgICAgY29uc3QgaW5kZW50YXRpb24gPSByZWdleE1hdGNoWzFdO1xuICAgICAgICBjb25zdCBsaXN0TWFya2VyID0gJy0nO1xuXG4gICAgICAgIC8vIEdldCB0aGUgc3RhdHVzIG9mIHRoZSB0YXNrLCBvbmx5IHRvZG8gYW5kIGRvbmUgc3VwcG9ydGVkLlxuICAgICAgICAvLyBCdXQgY3VzdG9tIG9uZXMgYXJlIHJldGFpbmVkIGFuZCBkaXNwbGF5ZWQgYXMtaXMuXG4gICAgICAgIGNvbnN0IHN0YXR1c1N0cmluZyA9IHJlZ2V4TWF0Y2hbMl07XG4gICAgICAgIGxldCBzdGF0dXM6IFN0YXR1cztcbiAgICAgICAgc3dpdGNoIChzdGF0dXNTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgJyAnOlxuICAgICAgICAgICAgICAgIHN0YXR1cyA9IFN0YXR1cy5UT0RPO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBzdGF0dXMgPSBTdGF0dXMuRE9ORTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1hdGNoIGZvciBibG9jayBsaW5rIGFuZCByZW1vdmUgaWYgZm91bmQuIEFsd2F5cyBleHBlY3RlZCB0byBiZVxuICAgICAgICAvLyBhdCB0aGUgZW5kIG9mIHRoZSBsaW5lLlxuICAgICAgICBjb25zdCBibG9ja0xpbmtNYXRjaCA9IGRlc2NyaXB0aW9uLm1hdGNoKFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuYmxvY2tMaW5rUmVnZXgpO1xuICAgICAgICBjb25zdCBibG9ja0xpbmsgPSBibG9ja0xpbmtNYXRjaCAhPT0gbnVsbCA/IGJsb2NrTGlua01hdGNoWzBdIDogJyc7XG5cbiAgICAgICAgaWYgKGJsb2NrTGluayAhPT0gJycpIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24ucmVwbGFjZShUYXNrUmVndWxhckV4cHJlc3Npb25zLmJsb2NrTGlua1JlZ2V4LCAnJykudHJpbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gS2VlcCBtYXRjaGluZyBhbmQgcmVtb3Zpbmcgc3BlY2lhbCBzdHJpbmdzIGZyb20gdGhlIGVuZCBvZiB0aGVcbiAgICAgICAgLy8gZGVzY3JpcHRpb24gaW4gYW55IG9yZGVyLiBUaGUgbG9vcCBzaG91bGQgb25seSBydW4gb25jZSBpZiB0aGVcbiAgICAgICAgLy8gc3RyaW5ncyBhcmUgaW4gdGhlIGV4cGVjdGVkIG9yZGVyIGFmdGVyIHRoZSBkZXNjcmlwdGlvbi5cbiAgICAgICAgbGV0IG1hdGNoZWQ6IGJvb2xlYW47XG4gICAgICAgIGxldCBwcmlvcml0eTogUHJpb3JpdHkgPSBQcmlvcml0eS5Ob25lO1xuICAgICAgICBsZXQgc3RhcnREYXRlOiBNb21lbnQgfCBudWxsID0gbnVsbDtcbiAgICAgICAgbGV0IHNjaGVkdWxlZERhdGU6IE1vbWVudCB8IG51bGwgPSBudWxsO1xuICAgICAgICBsZXQgc2NoZWR1bGVkRGF0ZUlzSW5mZXJyZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGR1ZURhdGU6IE1vbWVudCB8IG51bGwgPSBudWxsO1xuICAgICAgICBsZXQgZG9uZURhdGU6IE1vbWVudCB8IG51bGwgPSBudWxsO1xuICAgICAgICBsZXQgcmVjdXJyZW5jZVJ1bGU6IHN0cmluZyA9ICcnO1xuICAgICAgICBsZXQgcmVjdXJyZW5jZTogUmVjdXJyZW5jZSB8IG51bGwgPSBudWxsO1xuICAgICAgICBsZXQgdGFnczogYW55ID0gW107XG4gICAgICAgIC8vIFRhZ3MgdGhhdCBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBlbmQgd2hpbGUgcGFyc2luZywgYnV0IHdlIHdhbnQgdG8gYWRkIHRoZW0gYmFjayBmb3IgYmVpbmcgcGFydCBvZiB0aGUgZGVzY3JpcHRpb24uXG4gICAgICAgIC8vIEluIHRoZSBvcmlnaW5hbCB0YXNrIGRlc2NyaXB0aW9uIHRoZXkgYXJlIHBvc3NpYmx5IG1peGVkIHdpdGggb3RoZXIgY29tcG9uZW50c1xuICAgICAgICAvLyAoZS5nLiAjdGFnMSA8ZHVlIGRhdGU+ICN0YWcyKSwgdGhleSBkbyBub3QgaGF2ZSB0byBhbGwgdHJhaWwgYWxsIHRhc2sgY29tcG9uZW50cyxcbiAgICAgICAgLy8gYnV0IGV2ZW50dWFsbHkgd2Ugd2FudCB0byBwYXN0ZSB0aGVtIGJhY2sgdG8gdGhlIHRhc2sgZGVzY3JpcHRpb24gYXQgdGhlIGVuZFxuICAgICAgICBsZXQgdHJhaWxpbmdUYWdzID0gJyc7XG4gICAgICAgIC8vIEFkZCBhIFwibWF4IHJ1bnNcIiBmYWlsc2FmZSB0byBuZXZlciBlbmQgaW4gYW4gZW5kbGVzcyBsb29wOlxuICAgICAgICBjb25zdCBtYXhSdW5zID0gMjA7XG4gICAgICAgIGxldCBydW5zID0gMDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgbWF0Y2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgcHJpb3JpdHlNYXRjaCA9IGRlc2NyaXB0aW9uLm1hdGNoKFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMucHJpb3JpdHlSZWdleCk7XG4gICAgICAgICAgICBpZiAocHJpb3JpdHlNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAocHJpb3JpdHlNYXRjaFsxXSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIHByaW9yaXR5U3ltYm9scy5Mb3c6XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmlvcml0eSA9IFByaW9yaXR5LkxvdztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIHByaW9yaXR5U3ltYm9scy5NZWRpdW06XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmlvcml0eSA9IFByaW9yaXR5Lk1lZGl1bTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIHByaW9yaXR5U3ltYm9scy5IaWdoOlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHkgPSBQcmlvcml0eS5IaWdoO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi5yZXBsYWNlKFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMucHJpb3JpdHlSZWdleCwgJycpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBtYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZG9uZURhdGVNYXRjaCA9IGRlc2NyaXB0aW9uLm1hdGNoKFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuZG9uZURhdGVSZWdleCk7XG4gICAgICAgICAgICBpZiAoZG9uZURhdGVNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRvbmVEYXRlID0gd2luZG93Lm1vbWVudChkb25lRGF0ZU1hdGNoWzFdLCBUYXNrUmVndWxhckV4cHJlc3Npb25zLmRhdGVGb3JtYXQpO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24ucmVwbGFjZShUYXNrUmVndWxhckV4cHJlc3Npb25zLmRvbmVEYXRlUmVnZXgsICcnKS50cmltKCk7XG4gICAgICAgICAgICAgICAgbWF0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGR1ZURhdGVNYXRjaCA9IGRlc2NyaXB0aW9uLm1hdGNoKFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuZHVlRGF0ZVJlZ2V4KTtcbiAgICAgICAgICAgIGlmIChkdWVEYXRlTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkdWVEYXRlID0gd2luZG93Lm1vbWVudChkdWVEYXRlTWF0Y2hbMV0sIFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuZGF0ZUZvcm1hdCk7XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi5yZXBsYWNlKFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuZHVlRGF0ZVJlZ2V4LCAnJykudHJpbSgpO1xuICAgICAgICAgICAgICAgIG1hdGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzY2hlZHVsZWREYXRlTWF0Y2ggPSBkZXNjcmlwdGlvbi5tYXRjaChUYXNrUmVndWxhckV4cHJlc3Npb25zLnNjaGVkdWxlZERhdGVSZWdleCk7XG4gICAgICAgICAgICBpZiAoc2NoZWR1bGVkRGF0ZU1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVkRGF0ZSA9IHdpbmRvdy5tb21lbnQoc2NoZWR1bGVkRGF0ZU1hdGNoWzFdLCBUYXNrUmVndWxhckV4cHJlc3Npb25zLmRhdGVGb3JtYXQpO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24ucmVwbGFjZShUYXNrUmVndWxhckV4cHJlc3Npb25zLnNjaGVkdWxlZERhdGVSZWdleCwgJycpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBtYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc3RhcnREYXRlTWF0Y2ggPSBkZXNjcmlwdGlvbi5tYXRjaChUYXNrUmVndWxhckV4cHJlc3Npb25zLnN0YXJ0RGF0ZVJlZ2V4KTtcbiAgICAgICAgICAgIGlmIChzdGFydERhdGVNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IHdpbmRvdy5tb21lbnQoc3RhcnREYXRlTWF0Y2hbMV0sIFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuZGF0ZUZvcm1hdCk7XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi5yZXBsYWNlKFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuc3RhcnREYXRlUmVnZXgsICcnKS50cmltKCk7XG4gICAgICAgICAgICAgICAgbWF0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHJlY3VycmVuY2VNYXRjaCA9IGRlc2NyaXB0aW9uLm1hdGNoKFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMucmVjdXJyZW5jZVJlZ2V4KTtcbiAgICAgICAgICAgIGlmIChyZWN1cnJlbmNlTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBTYXZlIHRoZSByZWN1cnJlbmNlIHJ1bGUsIGJ1dCAqZG8gbm90IHBhcnNlIGl0IHlldCouXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRpbmcgdGhlIFJlY3VycmVuY2Ugb2JqZWN0IHJlcXVpcmVzIGEgcmVmZXJlbmNlIGRhdGUgKGUuZy4gYSBkdWUgZGF0ZSksXG4gICAgICAgICAgICAgICAgLy8gYW5kIGl0IG1pZ2h0IGFwcGVhciBpbiB0aGUgbmV4dCAoZWFybGllciBpbiB0aGUgbGluZSkgdG9rZW5zIHRvIHBhcnNlXG4gICAgICAgICAgICAgICAgcmVjdXJyZW5jZVJ1bGUgPSByZWN1cnJlbmNlTWF0Y2hbMV0udHJpbSgpO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24ucmVwbGFjZShUYXNrUmVndWxhckV4cHJlc3Npb25zLnJlY3VycmVuY2VSZWdleCwgJycpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBtYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWF0Y2ggdGFncyBmcm9tIHRoZSBlbmQgdG8gYWxsb3cgdXNlcnMgdG8gbWl4IHRoZSB2YXJpb3VzIHRhc2sgY29tcG9uZW50cyB3aXRoXG4gICAgICAgICAgICAvLyB0YWdzLiBUaGVzZSB0YWdzIHdpbGwgYmUgYWRkZWQgYmFjayB0byB0aGUgZGVzY3JpcHRpb24gYmVsb3dcbiAgICAgICAgICAgIGNvbnN0IHRhZ3NNYXRjaCA9IGRlc2NyaXB0aW9uLm1hdGNoKFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuaGFzaFRhZ3NGcm9tRW5kKTtcbiAgICAgICAgICAgIGlmICh0YWdzTWF0Y2ggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24ucmVwbGFjZShUYXNrUmVndWxhckV4cHJlc3Npb25zLmhhc2hUYWdzRnJvbUVuZCwgJycpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBtYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YWdOYW1lID0gdGFnc01hdGNoWzBdLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAvLyBBZGRpbmcgdG8gdGhlIGxlZnQgYmVjYXVzZSB0aGUgbWF0Y2hpbmcgaXMgZG9uZSByaWdodC10by1sZWZ0XG4gICAgICAgICAgICAgICAgdHJhaWxpbmdUYWdzID0gdHJhaWxpbmdUYWdzLmxlbmd0aCA+IDAgPyBbdGFnTmFtZSwgdHJhaWxpbmdUYWdzXS5qb2luKCcgJykgOiB0YWdOYW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBydW5zKys7XG4gICAgICAgIH0gd2hpbGUgKG1hdGNoZWQgJiYgcnVucyA8PSBtYXhSdW5zKTtcblxuICAgICAgICAvLyBOb3cgdGhhdCB3ZSBoYXZlIGFsbCB0aGUgdGFzayBkZXRhaWxzLCBwYXJzZSB0aGUgcmVjdXJyZW5jZSBydWxlIGlmIHdlIGZvdW5kIGFueVxuICAgICAgICBpZiAocmVjdXJyZW5jZVJ1bGUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmVjdXJyZW5jZSA9IFJlY3VycmVuY2UuZnJvbVRleHQoe1xuICAgICAgICAgICAgICAgIHJlY3VycmVuY2VSdWxlVGV4dDogcmVjdXJyZW5jZVJ1bGUsXG4gICAgICAgICAgICAgICAgc3RhcnREYXRlLFxuICAgICAgICAgICAgICAgIHNjaGVkdWxlZERhdGUsXG4gICAgICAgICAgICAgICAgZHVlRGF0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5mZXIgdGhlIHNjaGVkdWxlZCBkYXRlIGZyb20gdGhlIGZpbGUgbmFtZSBpZiBub3Qgc2V0IGV4cGxpY2l0bHlcbiAgICAgICAgaWYgKERhdGVGYWxsYmFjay5jYW5BcHBseUZhbGxiYWNrKHsgc3RhcnREYXRlLCBzY2hlZHVsZWREYXRlLCBkdWVEYXRlIH0pICYmIGZhbGxiYWNrRGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc2NoZWR1bGVkRGF0ZSA9IGZhbGxiYWNrRGF0ZTtcbiAgICAgICAgICAgIHNjaGVkdWxlZERhdGVJc0luZmVycmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBiYWNrIGFueSB0cmFpbGluZyB0YWdzIHRvIHRoZSBkZXNjcmlwdGlvbi4gV2UgcmVtb3ZlZCB0aGVtIHNvIHdlIGNhbiBwYXJzZSB0aGUgcmVzdCBvZiB0aGVcbiAgICAgICAgLy8gY29tcG9uZW50cyBidXQgbm93IHdlIHdhbnQgdGhlbSBiYWNrLlxuICAgICAgICAvLyBUaGUgZ29hbCBpcyBmb3IgYSB0YXNrIG9mIHRoZW0gZm9ybSAnRG8gc29tZXRoaW5nICN0YWcxIChkdWUpIHRvbW9ycm93ICN0YWcyIChzdGFydCkgdG9kYXknXG4gICAgICAgIC8vIHRvIGFjdHVhbGx5IGhhdmUgdGhlIGRlc2NyaXB0aW9uICdEbyBzb21ldGhpbmcgI3RhZzEgI3RhZzInXG4gICAgICAgIGlmICh0cmFpbGluZ1RhZ3MubGVuZ3RoID4gMCkgZGVzY3JpcHRpb24gKz0gJyAnICsgdHJhaWxpbmdUYWdzO1xuXG4gICAgICAgIC8vIFRhZ3MgYXJlIGZvdW5kIGluIHRoZSBzdHJpbmcgYW5kIHB1bGxlZCBvdXQgYnV0IG5vdCByZW1vdmVkLFxuICAgICAgICAvLyBzbyB3aGVuIHJldHVybmluZyB0aGUgZW50aXJlIHRhc2sgaXQgd2lsbCBtYXRjaCB3aGF0IHRoZSB1c2VyXG4gICAgICAgIC8vIGVudGVyZWQuXG4gICAgICAgIC8vIFRoZSBnbG9iYWwgZmlsdGVyIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBjb2xsZWN0aW9uLlxuICAgICAgICBjb25zdCBoYXNoVGFnTWF0Y2ggPSBkZXNjcmlwdGlvbi5tYXRjaChUYXNrUmVndWxhckV4cHJlc3Npb25zLmhhc2hUYWdzKTtcbiAgICAgICAgaWYgKGhhc2hUYWdNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGFncyA9IGhhc2hUYWdNYXRjaC5maWx0ZXIoKHRhZykgPT4gdGFnICE9PSBnbG9iYWxGaWx0ZXIpLm1hcCgodGFnKSA9PiB0YWcudHJpbSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgVGFzayh7XG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICBpbmRlbnRhdGlvbixcbiAgICAgICAgICAgIGxpc3RNYXJrZXIsXG4gICAgICAgICAgICBzZWN0aW9uU3RhcnQsXG4gICAgICAgICAgICBzZWN0aW9uSW5kZXgsXG4gICAgICAgICAgICBvcmlnaW5hbFN0YXR1c0NoYXJhY3Rlcjogc3RhdHVzU3RyaW5nLFxuICAgICAgICAgICAgcHJlY2VkaW5nSGVhZGVyLFxuICAgICAgICAgICAgcHJpb3JpdHksXG4gICAgICAgICAgICBzdGFydERhdGUsXG4gICAgICAgICAgICBzY2hlZHVsZWREYXRlLFxuICAgICAgICAgICAgZHVlRGF0ZSxcbiAgICAgICAgICAgIGRvbmVEYXRlLFxuICAgICAgICAgICAgcmVjdXJyZW5jZSxcbiAgICAgICAgICAgIGJsb2NrTGluayxcbiAgICAgICAgICAgIHRhZ3MsXG4gICAgICAgICAgICBvcmlnaW5hbE1hcmtkb3duOiBsaW5lLFxuICAgICAgICAgICAgc2NoZWR1bGVkRGF0ZUlzSW5mZXJyZWQsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyB0b0xpKHtcbiAgICAgICAgcGFyZW50VWxFbGVtZW50LFxuICAgICAgICBsaXN0SW5kZXgsXG4gICAgICAgIGxheW91dE9wdGlvbnMsXG4gICAgICAgIGlzRmlsZW5hbWVVbmlxdWUsXG4gICAgfToge1xuICAgICAgICBwYXJlbnRVbEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgICAgICAvKiogVGhlIG50aCBpdGVtIGluIHRoaXMgbGlzdCAoaW5jbHVkaW5nIG5vbi10YXNrcykuICovXG4gICAgICAgIGxpc3RJbmRleDogbnVtYmVyO1xuICAgICAgICBsYXlvdXRPcHRpb25zPzogTGF5b3V0T3B0aW9ucztcbiAgICAgICAgaXNGaWxlbmFtZVVuaXF1ZT86IGJvb2xlYW47XG4gICAgfSk6IFByb21pc2U8SFRNTExJRWxlbWVudD4ge1xuICAgICAgICBjb25zdCBsaTogSFRNTExJRWxlbWVudCA9IHBhcmVudFVsRWxlbWVudC5jcmVhdGVFbCgnbGknKTtcbiAgICAgICAgbGkuYWRkQ2xhc3NlcyhbJ3Rhc2stbGlzdC1pdGVtJywgJ3BsdWdpbi10YXNrcy1saXN0LWl0ZW0nXSk7XG5cbiAgICAgICAgbGV0IHRhc2tBc1N0cmluZyA9IHRoaXMudG9TdHJpbmcobGF5b3V0T3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHsgZ2xvYmFsRmlsdGVyLCByZW1vdmVHbG9iYWxGaWx0ZXIgfSA9IGdldFNldHRpbmdzKCk7XG4gICAgICAgIGlmIChyZW1vdmVHbG9iYWxGaWx0ZXIpIHtcbiAgICAgICAgICAgIHRhc2tBc1N0cmluZyA9IHRhc2tBc1N0cmluZy5yZXBsYWNlKGdsb2JhbEZpbHRlciwgJycpLnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRleHRTcGFuID0gbGkuY3JlYXRlU3BhbigpO1xuICAgICAgICB0ZXh0U3Bhbi5hZGRDbGFzcygndGFza3MtbGlzdC10ZXh0Jyk7XG5cbiAgICAgICAgYXdhaXQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bih0YXNrQXNTdHJpbmcsIHRleHRTcGFuLCB0aGlzLnBhdGgsIG51bGwgYXMgdW5rbm93biBhcyBDb21wb25lbnQpO1xuXG4gICAgICAgIC8vIElmIHRoZSB0YXNrIGlzIGEgYmxvY2sgcXVvdGUsIHRoZSBibG9jayBxdW90ZSB3cmFwcyB0aGUgcC10YWcgdGhhdCBjb250YWlucyB0aGUgY29udGVudC5cbiAgICAgICAgLy8gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHVud3JhcCB0aGUgcC10YWcgKmluc2lkZSogdGhlIHN1cnJvdW5kaW5nIGJsb2NrIHF1b3RlLlxuICAgICAgICAvLyBPdGhlcndpc2UsIHdlIHVud3JhcCB0aGUgcC10YWcgYXMgYSBkaXJlY3QgZGVzY2VuZGFudCBvZiB0aGUgdGV4dFNwYW4uXG4gICAgICAgIGNvbnN0IGJsb2NrUXVvdGUgPSB0ZXh0U3Bhbi5xdWVyeVNlbGVjdG9yKCdibG9ja3F1b3RlJyk7XG4gICAgICAgIGNvbnN0IGRpcmVjdFBhcmVudE9mUFRhZyA9IGJsb2NrUXVvdGUgPz8gdGV4dFNwYW47XG5cbiAgICAgICAgLy8gVW53cmFwIHRoZSBwLXRhZyB0aGF0IHdhcyBjcmVhdGVkIGJ5IHRoZSBNYXJrZG93blJlbmRlcmVyOlxuICAgICAgICBjb25zdCBwRWxlbWVudCA9IGRpcmVjdFBhcmVudE9mUFRhZy5xdWVyeVNlbGVjdG9yKCdwJyk7XG4gICAgICAgIGlmIChwRWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgd2hpbGUgKHBFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBkaXJlY3RQYXJlbnRPZlBUYWcuaW5zZXJ0QmVmb3JlKHBFbGVtZW50LmZpcnN0Q2hpbGQsIHBFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIGFuIGVtcHR5IHRyYWlsaW5nIHAtdGFnIHRoYXQgdGhlIE1hcmtkb3duUmVuZGVyZXIgYXBwZW5kcyB3aGVuIHRoZXJlIGlzIGEgYmxvY2sgbGluazpcbiAgICAgICAgdGV4dFNwYW4uZmluZEFsbCgncCcpLmZvckVhY2goKHBFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXBFbGVtZW50Lmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgICAgICAgIHBFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBSZW1vdmUgdGhlIGZvb3Rub3RlIHRoYXQgdGhlIE1hcmtkb3duUmVuZGVyZXIgYXBwZW5kcyB3aGVuIHRoZXJlIGlzIGEgZm9vdG5vdGUgaW4gdGhlIHRhc2s6XG4gICAgICAgIHRleHRTcGFuLmZpbmRBbGwoJy5mb290bm90ZXMnKS5mb3JFYWNoKChmb290bm90ZUVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGZvb3Rub3RlRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgY2hlY2tib3ggPSBsaS5jcmVhdGVFbCgnaW5wdXQnKTtcbiAgICAgICAgY2hlY2tib3guYWRkQ2xhc3MoJ3Rhc2stbGlzdC1pdGVtLWNoZWNrYm94Jyk7XG4gICAgICAgIGNoZWNrYm94LnR5cGUgPSAnY2hlY2tib3gnO1xuICAgICAgICBpZiAodGhpcy5zdGF0dXMgIT09IFN0YXR1cy5UT0RPKSB7XG4gICAgICAgICAgICBjaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGxpLmFkZENsYXNzKCdpcy1jaGVja2VkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tib3gub25DbGlja0V2ZW50KChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIEl0IGlzIHJlcXVpcmVkIHRvIHN0b3AgcHJvcGFnYXRpb24gc28gdGhhdCBvYnNpZGlhbiB3b24ndCB3cml0ZSB0aGUgZmlsZSB3aXRoIHRoZVxuICAgICAgICAgICAgLy8gY2hlY2tib3ggKHVuKWNoZWNrZWQuIE9ic2lkaWFuIHdvdWxkIHdyaXRlIGFmdGVyIHVzIGFuZCBvdmVyd3JpdGUgb3VyIGNoYW5nZS5cbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICAvLyBTaG91bGQgYmUgcmUtcmVuZGVyZWQgYXMgZW5hYmxlZCBhZnRlciB1cGRhdGUgaW4gZmlsZS5cbiAgICAgICAgICAgIGNoZWNrYm94LmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IHRvZ2dsZWRUYXNrcyA9IHRoaXMudG9nZ2xlKCk7XG4gICAgICAgICAgICByZXBsYWNlVGFza1dpdGhUYXNrcyh7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxUYXNrOiB0aGlzLFxuICAgICAgICAgICAgICAgIG5ld1Rhc2tzOiB0b2dnbGVkVGFza3MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGkucHJlcGVuZChjaGVja2JveCk7XG5cbiAgICAgICAgLy8gU2V0IHRoZXNlIHRvIGJlIGNvbXBhdGlibGUgd2l0aCBzdG9jayBvYnNpZGlhbiBsaXN0czpcbiAgICAgICAgbGkuc2V0QXR0cignZGF0YS10YXNrJywgdGhpcy5vcmlnaW5hbFN0YXR1c0NoYXJhY3Rlci50cmltKCkpOyAvLyBUcmltIHRvIGVuc3VyZSBlbXB0eSBhdHRyaWJ1dGUgZm9yIHNwYWNlLiBTYW1lIHdheSBhcyBvYnNpZGlhbi5cbiAgICAgICAgbGkuc2V0QXR0cignZGF0YS1saW5lJywgbGlzdEluZGV4KTtcbiAgICAgICAgY2hlY2tib3guc2V0QXR0cignZGF0YS1saW5lJywgbGlzdEluZGV4KTtcblxuICAgICAgICBpZiAobGF5b3V0T3B0aW9ucz8uc2hvcnRNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmFkZFRvb2x0aXAoeyBlbGVtZW50OiB0ZXh0U3BhbiwgaXNGaWxlbmFtZVVuaXF1ZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsaTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtMYXlvdXRPcHRpb25zfSBbbGF5b3V0T3B0aW9uc11cbiAgICAgKiBAcmV0dXJuIHsqfSAge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgVGFza1xuICAgICAqL1xuICAgIHB1YmxpYyB0b1N0cmluZyhsYXlvdXRPcHRpb25zPzogTGF5b3V0T3B0aW9ucyk6IHN0cmluZyB7XG4gICAgICAgIGxheW91dE9wdGlvbnMgPSBsYXlvdXRPcHRpb25zID8/IG5ldyBMYXlvdXRPcHRpb25zKCk7XG4gICAgICAgIGxldCB0YXNrU3RyaW5nID0gdGhpcy5kZXNjcmlwdGlvbjtcblxuICAgICAgICBpZiAoIWxheW91dE9wdGlvbnMuaGlkZVByaW9yaXR5KSB7XG4gICAgICAgICAgICBsZXQgcHJpb3JpdHk6IHN0cmluZyA9ICcnO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcmlvcml0eSA9PT0gUHJpb3JpdHkuSGlnaCkge1xuICAgICAgICAgICAgICAgIHByaW9yaXR5ID0gJyAnICsgcHJpb3JpdHlTeW1ib2xzLkhpZ2g7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJpb3JpdHkgPT09IFByaW9yaXR5Lk1lZGl1bSkge1xuICAgICAgICAgICAgICAgIHByaW9yaXR5ID0gJyAnICsgcHJpb3JpdHlTeW1ib2xzLk1lZGl1bTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmlvcml0eSA9PT0gUHJpb3JpdHkuTG93KSB7XG4gICAgICAgICAgICAgICAgcHJpb3JpdHkgPSAnICcgKyBwcmlvcml0eVN5bWJvbHMuTG93O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0YXNrU3RyaW5nICs9IHByaW9yaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFsYXlvdXRPcHRpb25zLmhpZGVSZWN1cnJlbmNlUnVsZSAmJiB0aGlzLnJlY3VycmVuY2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY3VycmVuY2VSdWxlOiBzdHJpbmcgPSBsYXlvdXRPcHRpb25zLnNob3J0TW9kZVxuICAgICAgICAgICAgICAgID8gJyAnICsgcmVjdXJyZW5jZVN5bWJvbFxuICAgICAgICAgICAgICAgIDogYCAke3JlY3VycmVuY2VTeW1ib2x9ICR7dGhpcy5yZWN1cnJlbmNlLnRvVGV4dCgpfWA7XG4gICAgICAgICAgICB0YXNrU3RyaW5nICs9IHJlY3VycmVuY2VSdWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFsYXlvdXRPcHRpb25zLmhpZGVTdGFydERhdGUgJiYgdGhpcy5zdGFydERhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0RGF0ZTogc3RyaW5nID0gbGF5b3V0T3B0aW9ucy5zaG9ydE1vZGVcbiAgICAgICAgICAgICAgICA/ICcgJyArIHN0YXJ0RGF0ZVN5bWJvbFxuICAgICAgICAgICAgICAgIDogYCAke3N0YXJ0RGF0ZVN5bWJvbH0gJHt0aGlzLnN0YXJ0RGF0ZS5mb3JtYXQoVGFza1JlZ3VsYXJFeHByZXNzaW9ucy5kYXRlRm9ybWF0KX1gO1xuICAgICAgICAgICAgdGFza1N0cmluZyArPSBzdGFydERhdGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWxheW91dE9wdGlvbnMuaGlkZVNjaGVkdWxlZERhdGUgJiYgdGhpcy5zY2hlZHVsZWREYXRlICYmICF0aGlzLnNjaGVkdWxlZERhdGVJc0luZmVycmVkKSB7XG4gICAgICAgICAgICBjb25zdCBzY2hlZHVsZWREYXRlOiBzdHJpbmcgPSBsYXlvdXRPcHRpb25zLnNob3J0TW9kZVxuICAgICAgICAgICAgICAgID8gJyAnICsgc2NoZWR1bGVkRGF0ZVN5bWJvbFxuICAgICAgICAgICAgICAgIDogYCAke3NjaGVkdWxlZERhdGVTeW1ib2x9ICR7dGhpcy5zY2hlZHVsZWREYXRlLmZvcm1hdChUYXNrUmVndWxhckV4cHJlc3Npb25zLmRhdGVGb3JtYXQpfWA7XG4gICAgICAgICAgICB0YXNrU3RyaW5nICs9IHNjaGVkdWxlZERhdGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWxheW91dE9wdGlvbnMuaGlkZUR1ZURhdGUgJiYgdGhpcy5kdWVEYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBkdWVEYXRlOiBzdHJpbmcgPSBsYXlvdXRPcHRpb25zLnNob3J0TW9kZVxuICAgICAgICAgICAgICAgID8gJyAnICsgZHVlRGF0ZVN5bWJvbFxuICAgICAgICAgICAgICAgIDogYCAke2R1ZURhdGVTeW1ib2x9ICR7dGhpcy5kdWVEYXRlLmZvcm1hdChUYXNrUmVndWxhckV4cHJlc3Npb25zLmRhdGVGb3JtYXQpfWA7XG4gICAgICAgICAgICB0YXNrU3RyaW5nICs9IGR1ZURhdGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWxheW91dE9wdGlvbnMuaGlkZURvbmVEYXRlICYmIHRoaXMuZG9uZURhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRvbmVEYXRlOiBzdHJpbmcgPSBsYXlvdXRPcHRpb25zLnNob3J0TW9kZVxuICAgICAgICAgICAgICAgID8gJyAnICsgZG9uZURhdGVTeW1ib2xcbiAgICAgICAgICAgICAgICA6IGAgJHtkb25lRGF0ZVN5bWJvbH0gJHt0aGlzLmRvbmVEYXRlLmZvcm1hdChUYXNrUmVndWxhckV4cHJlc3Npb25zLmRhdGVGb3JtYXQpfWA7XG4gICAgICAgICAgICB0YXNrU3RyaW5nICs9IGRvbmVEYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYmxvY2tMaW5rOiBzdHJpbmcgPSB0aGlzLmJsb2NrTGluayA/PyAnJztcbiAgICAgICAgdGFza1N0cmluZyArPSBibG9ja0xpbms7XG5cbiAgICAgICAgcmV0dXJuIHRhc2tTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgVGFzayBhcyBhIGxpc3QgaXRlbSB3aXRoIGEgY2hlY2tib3guXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHsqfSAge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgVGFza1xuICAgICAqL1xuICAgIHB1YmxpYyB0b0ZpbGVMaW5lU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmluZGVudGF0aW9ufSR7dGhpcy5saXN0TWFya2VyfSBbJHt0aGlzLm9yaWdpbmFsU3RhdHVzQ2hhcmFjdGVyfV0gJHt0aGlzLnRvU3RyaW5nKCl9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoaXMgdGFzayBhbmQgcmV0dXJucyB0aGUgcmVzdWx0aW5nIHRhc2tzLlxuICAgICAqXG4gICAgICogVG9nZ2xpbmcgY2FuIHJlc3VsdCBpbiBtb3JlIHRoYW4gb25lIHJldHVybmVkIHRhc2sgaW4gdGhlIGNhc2Ugb2ZcbiAgICAgKiByZWN1cnJlbmNlLiBJZiBpdCBpcyBhIHJlY3VycmluZyB0YXNrLCB0aGUgdG9nZ2xlZCB0YXNrIHdpbGwgYmUgcmV0dXJuZWRcbiAgICAgKiB0b2dldGhlciB3aXRoIHRoZSBuZXh0IG9jY3VycmVuY2UgaW4gdGhlIG9yZGVyIGBbbmV4dCwgdG9nZ2xlZF1gLiBJZiB0aGVcbiAgICAgKiB0YXNrIGlzIG5vdCByZWN1cnJpbmcsIGl0IHdpbGwgcmV0dXJuIGBbdG9nZ2xlZF1gLlxuICAgICAqL1xuICAgIHB1YmxpYyB0b2dnbGUoKTogVGFza1tdIHtcbiAgICAgICAgY29uc3QgbmV3U3RhdHVzOiBTdGF0dXMgPSB0aGlzLnN0YXR1cyA9PT0gU3RhdHVzLlRPRE8gPyBTdGF0dXMuRE9ORSA6IFN0YXR1cy5UT0RPO1xuXG4gICAgICAgIGxldCBuZXdEb25lRGF0ZSA9IG51bGw7XG5cbiAgICAgICAgbGV0IG5leHRPY2N1cnJlbmNlOiB7XG4gICAgICAgICAgICBzdGFydERhdGU6IE1vbWVudCB8IG51bGw7XG4gICAgICAgICAgICBzY2hlZHVsZWREYXRlOiBNb21lbnQgfCBudWxsO1xuICAgICAgICAgICAgZHVlRGF0ZTogTW9tZW50IHwgbnVsbDtcbiAgICAgICAgfSB8IG51bGwgPSBudWxsO1xuXG4gICAgICAgIGlmIChuZXdTdGF0dXMgIT09IFN0YXR1cy5UT0RPKSB7XG4gICAgICAgICAgICAvLyBTZXQgZG9uZSBkYXRlIG9ubHkgaWYgc2V0dGluZyB2YWx1ZSBpcyB0cnVlXG4gICAgICAgICAgICBjb25zdCB7IHNldERvbmVEYXRlIH0gPSBnZXRTZXR0aW5ncygpO1xuICAgICAgICAgICAgaWYgKHNldERvbmVEYXRlKSB7XG4gICAgICAgICAgICAgICAgbmV3RG9uZURhdGUgPSB3aW5kb3cubW9tZW50KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoaXMgdGFzayBpcyBubyBsb25nZXIgdG9kbywgd2UgbmVlZCB0byBjaGVjayBpZiBpdCBpcyByZWN1cnJpbmc6XG4gICAgICAgICAgICBpZiAodGhpcy5yZWN1cnJlbmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV4dE9jY3VycmVuY2UgPSB0aGlzLnJlY3VycmVuY2UubmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdG9nZ2xlZFRhc2sgPSBuZXcgVGFzayh7XG4gICAgICAgICAgICAuLi50aGlzLFxuICAgICAgICAgICAgc3RhdHVzOiBuZXdTdGF0dXMsXG4gICAgICAgICAgICBkb25lRGF0ZTogbmV3RG9uZURhdGUsXG4gICAgICAgICAgICBvcmlnaW5hbFN0YXR1c0NoYXJhY3RlcjogbmV3U3RhdHVzID09PSBTdGF0dXMuRE9ORSA/ICd4JyA6ICcgJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbmV3VGFza3M6IFRhc2tbXSA9IFtdO1xuXG4gICAgICAgIGlmIChuZXh0T2NjdXJyZW5jZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgbmV4dFRhc2sgPSBuZXcgVGFzayh7XG4gICAgICAgICAgICAgICAgLi4udGhpcyxcbiAgICAgICAgICAgICAgICAuLi5uZXh0T2NjdXJyZW5jZSxcbiAgICAgICAgICAgICAgICAvLyBOZXcgb2NjdXJyZW5jZXMgY2Fubm90IGhhdmUgdGhlIHNhbWUgYmxvY2sgbGluay5cbiAgICAgICAgICAgICAgICAvLyBBbmQgcmFuZG9tIGJsb2NrIGxpbmtzIGRvbid0IGhlbHAuXG4gICAgICAgICAgICAgICAgYmxvY2tMaW5rOiAnJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbmV3VGFza3MucHVzaChuZXh0VGFzayk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXcml0ZSBuZXh0IG9jY3VycmVuY2UgYmVmb3JlIHByZXZpb3VzIG9jY3VycmVuY2UuXG4gICAgICAgIG5ld1Rhc2tzLnB1c2godG9nZ2xlZFRhc2spO1xuXG4gICAgICAgIHJldHVybiBuZXdUYXNrcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHVyZ2VuY3koKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMuX3VyZ2VuY3kgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3VyZ2VuY3kgPSBVcmdlbmN5LmNhbGN1bGF0ZSh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl91cmdlbmN5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgbmFtZSBvZiB0aGUgZmlsZSBjb250YWluaW5nIHRoZSB0YXNrLCB3aXRoIHRoZSAubWQgZXh0ZW5zaW9uIHJlbW92ZWQuXG4gICAgICovXG4gICAgcHVibGljIGdldCBmaWxlbmFtZSgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgY29uc3QgZmlsZU5hbWVNYXRjaCA9IHRoaXMucGF0aC5tYXRjaCgvKFteL10rKVxcLm1kJC8pO1xuICAgICAgICBpZiAoZmlsZU5hbWVNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbGVOYW1lTWF0Y2hbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRleHQgdGhhdCBzaG91bGQgYmUgZGlzcGxheWVkIHRvIHRoZSB1c2VyIHdoZW4gbGlua2luZyB0byB0aGUgb3JpZ2luIG9mIHRoZSB0YXNrXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaXNGaWxlbmFtZVVuaXF1ZSB7Ym9vbGVhbnxudWxsfSBXaGV0aGVyIHRoZSBuYW1lIG9mIHRoZSBmaWxlIHRoYXQgY29udGFpbnMgdGhlIHRhc2sgaXMgdW5pcXVlIGluIHRoZSB2YXVsdC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBpdCBpcyB1bmRlZmluZWQsIHRoZSBvdXRjb21lIHdpbGwgYmUgdGhlIHNhbWUgYXMgd2l0aCBhIHVuaXF1ZSBmaWxlIG5hbWU6IHRoZSBmaWxlIG5hbWUgb25seS5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBzZXQgdG8gYHRydWVgLCB0aGUgZnVsbCBwYXRoIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICovXG4gICAgcHVibGljIGdldExpbmtUZXh0KHsgaXNGaWxlbmFtZVVuaXF1ZSB9OiB7IGlzRmlsZW5hbWVVbmlxdWU6IGJvb2xlYW4gfCB1bmRlZmluZWQgfSk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICBsZXQgbGlua1RleHQ6IHN0cmluZyB8IG51bGw7XG4gICAgICAgIGlmIChpc0ZpbGVuYW1lVW5pcXVlKSB7XG4gICAgICAgICAgICBsaW5rVGV4dCA9IHRoaXMuZmlsZW5hbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBBIHNsYXNoIGF0IHRoZSBiZWdpbm5pbmcgaW5kaWNhdGVzIHRoaXMgaXMgYSBwYXRoLCBub3QgYSBmaWxlbmFtZS5cbiAgICAgICAgICAgIGxpbmtUZXh0ID0gJy8nICsgdGhpcy5wYXRoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpbmtUZXh0ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgdGhpcyB3b3VsZG4ndCBwcm92aWRlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYW5kIG9ubHkgdGFrZSB1cCBzcGFjZS5cbiAgICAgICAgaWYgKHRoaXMucHJlY2VkaW5nSGVhZGVyICE9PSBudWxsICYmIHRoaXMucHJlY2VkaW5nSGVhZGVyICE9PSBsaW5rVGV4dCkge1xuICAgICAgICAgICAgbGlua1RleHQgPSBsaW5rVGV4dCArICcgPiAnICsgdGhpcy5wcmVjZWRpbmdIZWFkZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGlua1RleHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZSB0d28gbGlzdHMgb2YgVGFzayBvYmplY3RzLCBhbmQgcmVwb3J0IHdoZXRoZXIgdGhlaXJcbiAgICAgKiB0YXNrcyBhcmUgaWRlbnRpY2FsIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgICAqXG4gICAgICogVGhpcyBjYW4gYmUgdXNlZnVsIGZvciBvcHRpbWlzaW5nIGNvZGUgaWYgaXQgaXMgZ3VhcmFudGVlZCB0aGF0XG4gICAgICogdGhlcmUgYXJlIG5vIHBvc3NpYmxlIGRpZmZlcmVuY2VzIGluIHRoZSB0YXNrcyBpbiBhIGZpbGVcbiAgICAgKiBhZnRlciBhbiBlZGl0LCBmb3IgZXhhbXBsZS5cbiAgICAgKlxuICAgICAqIElmIGFueSBmaWVsZCBpcyBkaWZmZXJlbnQgaW4gYW55IHRhc2ssIGl0IHdpbGwgcmV0dXJuIGZhbHNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9sZFRhc2tzXG4gICAgICogQHBhcmFtIG5ld1Rhc2tzXG4gICAgICovXG4gICAgc3RhdGljIHRhc2tzTGlzdHNJZGVudGljYWwob2xkVGFza3M6IFRhc2tbXSwgbmV3VGFza3M6IFRhc2tbXSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAob2xkVGFza3MubGVuZ3RoICE9PSBuZXdUYXNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2xkVGFza3MuZXZlcnkoKG9sZFRhc2ssIGluZGV4KSA9PiBvbGRUYXNrLmlkZW50aWNhbFRvKG5ld1Rhc2tzW2luZGV4XSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmUgYWxsIHRoZSBmaWVsZHMgaW4gYW5vdGhlciBUYXNrLCB0byBkZXRlY3QgYW55IGRpZmZlcmVuY2VzIGZyb20gdGhpcyBvbmUuXG4gICAgICpcbiAgICAgKiBJZiBhbnkgZmllbGQgaXMgZGlmZmVyZW50IGluIGFueSB3YXksIGl0IHdpbGwgcmV0dXJuIGZhbHNlLlxuICAgICAqXG4gICAgICogVGhpcyBpcyB1c2VkIGluIHNvbWUgb3B0aW1pc2F0aW9ucywgdG8gYXZvaWQgd29yayBpZiBhbiBlZGl0IHRvIGZpbGVcbiAgICAgKiBkb2VzIG5vdCBjaGFuZ2UgYW55IHRhc2tzLCBzbyBpdCBpcyB2aXRhbCB0aGF0IGl0cyBkZWZpbml0aW9uXG4gICAgICogb2YgaWRlbnRpY2FsIGlzIHZlcnkgc3RyaWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyXG4gICAgICovXG4gICAgcHVibGljIGlkZW50aWNhbFRvKG90aGVyOiBUYXNrKSB7XG4gICAgICAgIC8vIEJhc2VkIG9uIGlkZWFzIGZyb20ga29hbGEuIEFxdWFDYXQgYW5kIGphdmFsZW50IGluIERpc2NvcmQ6XG4gICAgICAgIC8vIGh0dHBzOi8vZGlzY29yZC5jb20vY2hhbm5lbHMvNjg2MDUzNzA4MjYxMjI4NTc3Lzg0MDI4NjI2NDk2NDAyMjMwMi85OTY3MzUyMDAzODgxODYxODJcbiAgICAgICAgLy8gYW5kIGxhdGVyLlxuICAgICAgICAvL1xuICAgICAgICAvLyBOb3RlOiBzZWN0aW9uU3RhcnQgY2hhbmdlcyBldmVyeSB0aW1lIGEgbGluZSBpcyBhZGRlZCBvciBkZWxldGVkIGJlZm9yZVxuICAgICAgICAvLyAgICAgICBhbnkgb2YgdGhlIHRhc2tzIGluIGEgZmlsZS4gVGhpcyBkb2VzIG1lYW4gdGhhdCByZWRyYXdpbmcgb2YgdGFza3MgYmxvY2tzXG4gICAgICAgIC8vICAgICAgIGhhcHBlbnMgbW9yZSBvZnRlbiB0aGFuIGlzIGlkZWFsLlxuICAgICAgICBsZXQgYXJnczogQXJyYXk8a2V5b2YgVGFzaz4gPSBbXG4gICAgICAgICAgICAnc3RhdHVzJyxcbiAgICAgICAgICAgICdkZXNjcmlwdGlvbicsXG4gICAgICAgICAgICAncGF0aCcsXG4gICAgICAgICAgICAnaW5kZW50YXRpb24nLFxuICAgICAgICAgICAgJ2xpc3RNYXJrZXInLFxuICAgICAgICAgICAgJ3NlY3Rpb25TdGFydCcsXG4gICAgICAgICAgICAnc2VjdGlvbkluZGV4JyxcbiAgICAgICAgICAgICdvcmlnaW5hbFN0YXR1c0NoYXJhY3RlcicsXG4gICAgICAgICAgICAncHJlY2VkaW5nSGVhZGVyJyxcbiAgICAgICAgICAgICdwcmlvcml0eScsXG4gICAgICAgICAgICAnYmxvY2tMaW5rJyxcbiAgICAgICAgICAgICdzY2hlZHVsZWREYXRlSXNJbmZlcnJlZCcsXG4gICAgICAgIF07XG4gICAgICAgIGZvciAoY29uc3QgZWwgb2YgYXJncykge1xuICAgICAgICAgICAgaWYgKHRoaXNbZWxdICE9PSBvdGhlcltlbF0pIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbXBhcmUgdGFnc1xuICAgICAgICBpZiAodGhpcy50YWdzLmxlbmd0aCAhPT0gb3RoZXIudGFncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUYWdzIGFyZSB0aGUgc2FtZSBvbmx5IGlmIHRoZSB2YWx1ZXMgYXJlIGluIHRoZSBzYW1lIG9yZGVyXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICF0aGlzLnRhZ3MuZXZlcnkoZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgPT09IG90aGVyLnRhZ3NbaW5kZXhdO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb21wYXJlIERhdGUgZmllbGRzXG4gICAgICAgIGFyZ3MgPSBbJ3N0YXJ0RGF0ZScsICdzY2hlZHVsZWREYXRlJywgJ2R1ZURhdGUnLCAnZG9uZURhdGUnXTtcbiAgICAgICAgZm9yIChjb25zdCBlbCBvZiBhcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlMSA9IHRoaXNbZWxdIGFzIE1vbWVudCB8IG51bGw7XG4gICAgICAgICAgICBjb25zdCBkYXRlMiA9IG90aGVyW2VsXSBhcyBNb21lbnQgfCBudWxsO1xuICAgICAgICAgICAgaWYgKFNvcnQuY29tcGFyZUJ5RGF0ZShkYXRlMSwgZGF0ZTIpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVjdXJyZW5jZTEgPSB0aGlzLnJlY3VycmVuY2U7XG4gICAgICAgIGNvbnN0IHJlY3VycmVuY2UyID0gb3RoZXIucmVjdXJyZW5jZTtcbiAgICAgICAgaWYgKHJlY3VycmVuY2UxID09PSBudWxsICYmIHJlY3VycmVuY2UyICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAocmVjdXJyZW5jZTEgIT09IG51bGwgJiYgcmVjdXJyZW5jZTIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWN1cnJlbmNlMSAmJiByZWN1cnJlbmNlMiAmJiAhcmVjdXJyZW5jZTEuaWRlbnRpY2FsVG8ocmVjdXJyZW5jZTIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZFRvb2x0aXAoe1xuICAgICAgICBlbGVtZW50LFxuICAgICAgICBpc0ZpbGVuYW1lVW5pcXVlLFxuICAgIH06IHtcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgICAgIGlzRmlsZW5hbWVVbmlxdWU6IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gICAgfSk6IHZvaWQge1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0b29sdGlwID0gZWxlbWVudC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgIHRvb2x0aXAuYWRkQ2xhc3NlcyhbJ3Rvb2x0aXAnLCAnbW9kLXJpZ2h0J10pO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5yZWN1cnJlbmNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdXJyZW5jZURpdiA9IHRvb2x0aXAuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICAgICAgcmVjdXJyZW5jZURpdi5zZXRUZXh0KGAke3JlY3VycmVuY2VTeW1ib2x9ICR7dGhpcy5yZWN1cnJlbmNlLnRvVGV4dCgpfWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5zdGFydERhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydERhdGVEaXYgPSB0b29sdGlwLmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZURpdi5zZXRUZXh0KFxuICAgICAgICAgICAgICAgICAgICBUYXNrLnRvVG9vbHRpcERhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmlmaWVyOiBzdGFydERhdGVTeW1ib2wsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiB0aGlzLnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuc2NoZWR1bGVkRGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjaGVkdWxlZERhdGVEaXYgPSB0b29sdGlwLmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIHNjaGVkdWxlZERhdGVEaXYuc2V0VGV4dChcbiAgICAgICAgICAgICAgICAgICAgVGFzay50b1Rvb2x0aXBEYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25pZmllcjogc2NoZWR1bGVkRGF0ZVN5bWJvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IHRoaXMuc2NoZWR1bGVkRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZHVlRGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGR1ZURhdGVEaXYgPSB0b29sdGlwLmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIGR1ZURhdGVEaXYuc2V0VGV4dChcbiAgICAgICAgICAgICAgICAgICAgVGFzay50b1Rvb2x0aXBEYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25pZmllcjogZHVlRGF0ZVN5bWJvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IHRoaXMuZHVlRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZG9uZURhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkb25lRGF0ZURpdiA9IHRvb2x0aXAuY3JlYXRlRGl2KCk7XG4gICAgICAgICAgICAgICAgZG9uZURhdGVEaXYuc2V0VGV4dChcbiAgICAgICAgICAgICAgICAgICAgVGFzay50b1Rvb2x0aXBEYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25pZmllcjogZG9uZURhdGVTeW1ib2wsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiB0aGlzLmRvbmVEYXRlLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBsaW5rVGV4dCA9IHRoaXMuZ2V0TGlua1RleHQoeyBpc0ZpbGVuYW1lVW5pcXVlIH0pO1xuICAgICAgICAgICAgaWYgKGxpbmtUZXh0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFja2xpbmtEaXYgPSB0b29sdGlwLmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIGJhY2tsaW5rRGl2LnNldFRleHQoYFx1RDgzRFx1REQxNyAke2xpbmtUZXh0fWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyB0b1Rvb2x0aXBEYXRlKHsgc2lnbmlmaWVyLCBkYXRlIH06IHsgc2lnbmlmaWVyOiBzdHJpbmc7IGRhdGU6IE1vbWVudCB9KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke3NpZ25pZmllcn0gJHtkYXRlLmZvcm1hdChUYXNrUmVndWxhckV4cHJlc3Npb25zLmRhdGVGb3JtYXQpfSAoJHtkYXRlLmZyb20oXG4gICAgICAgICAgICB3aW5kb3cubW9tZW50KCkuc3RhcnRPZignZGF5JyksXG4gICAgICAgICl9KWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlIGEgc3RyaW5nIHNvIGl0IGNhbiBiZSB1c2VkIGFzIHBhcnQgb2YgYSBSZWdFeHAgbGl0ZXJhbGx5LlxuICAgICAqIFRha2VuIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZS9SZWd1bGFyX0V4cHJlc3Npb25zI2VzY2FwaW5nXG4gICAgICovXG4gICAgcHJpdmF0ZSBlc2NhcGVSZWdFeHAoczogc3RyaW5nKSB7XG4gICAgICAgIC8vIE5PVEU6ID0gaXMgbm90IGVzY2FwZWQsIGFzIGRvaW5nIHNvIGdpdmVzIGVycm9yOlxuICAgICAgICAvLyAgICAgICAgIEludmFsaWQgcmVndWxhciBleHByZXNzaW9uOiAvKF58XFxzKWhlbGxvXFw9d29ybGQoJHxcXHMpLzogSW52YWxpZCBlc2NhcGVcbiAgICAgICAgLy8gTk9URTogISBpcyBub3QgZXNjYXBlZCwgYXMgZG9pbmcgc28gZ2l2ZXMgZXJyb3I6XG4gICAgICAgIC8vICAgICAgICAgSW52YWxpZCByZWd1bGFyIGV4cHJlc3Npb246IC8oXnxcXHMpaGVsbG9cXCF3b3JsZCgkfFxccykvOiBJbnZhbGlkIGVzY2FwZVxuICAgICAgICAvLyBOT1RFOiA6IGlzIG5vdCBlc2NhcGVkLCBhcyBkb2luZyBzbyBnaXZlcyBlcnJvcjpcbiAgICAgICAgLy8gICAgICAgICBJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbjogLyhefFxccyloZWxsb1xcOndvcmxkKCR8XFxzKS86IEludmFsaWQgZXNjYXBlXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEV4cGxhbmF0aW9uIGZyb20gQEFubmFLb3JuZmVsZFNpbXBzb24gaW46XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9lc203L29ic2lkaWFuLXRhc2tzL3B1bGwvMTgjaXNzdWVjb21tZW50LTExOTYxMTU0MDdcbiAgICAgICAgLy8gRnJvbSB3aGF0IEkgY2FuIHRlbGwsIHRoZSB0aHJlZSBtaXNzaW5nIGNoYXJhY3RlcnMgZnJvbSB0aGUgb3JpZ2luYWwgcmVnZXggLSA6ICEgPVxuICAgICAgICAvLyBhcmUgYWxsIG9ubHkgY29uc2lkZXJlZCB0byBoYXZlIHNwZWNpYWwgbWVhbmluZ3MgaWYgdGhleSBkaXJlY3RseSBmb2xsb3dcbiAgICAgICAgLy8gYSA/IChhbGwgMykgb3IgYSA/PCAoISBhbmQgPSkuXG4gICAgICAgIC8vIFNvIHRoZW9yZXRpY2FsbHkgaWYgdGhlID8gYXJlIGFsbCBlc2NhcGVkLCB0aG9zZSB0aHJlZSBjaGFyYWN0ZXJzIGRvIG5vdCBoYXZlIHRvIGJlLlxuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC8oWy4qKz9eJHt9KCl8W1xcXS9cXFxcXSkvZywgJ1xcXFwkMScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlYXJjaCBmb3IgdGhlIGdsb2JhbCBmaWx0ZXIgZm9yIHRoZSBwdXJwb3NlIG9mIHJlbW92aW5nIGl0IGZyb20gdGhlIGRlc2NyaXB0aW9uLCBidXQgZG8gc28gb25seVxuICAgICAqIGlmIGl0IGlzIGEgc2VwYXJhdGUgd29yZCAocHJlY2VkaW5nIHRoZSBiZWdpbm5pbmcgb2YgbGluZSBvciBhIHNwYWNlIGFuZCBmb2xsb3dlZCBieSB0aGUgZW5kIG9mIGxpbmVcbiAgICAgKiBvciBhIHNwYWNlKSwgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRvIGN1dC1vZmYgbmVzdGVkIHRhZ3MgbGlrZSAjdGFzay9zdWJ0YWcuXG4gICAgICogSWYgdGhlIGdsb2JhbCBmaWx0ZXIgZXhpc3RzIGFzIHBhcnQgb2YgYSBuZXN0ZWQgdGFnLCB3ZSBrZWVwIGl0IHVudG91Y2hlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RGVzY3JpcHRpb25XaXRob3V0R2xvYmFsRmlsdGVyKCkge1xuICAgICAgICBjb25zdCB7IGdsb2JhbEZpbHRlciB9ID0gZ2V0U2V0dGluZ3MoKTtcbiAgICAgICAgbGV0IGRlc2NyaXB0aW9uID0gdGhpcy5kZXNjcmlwdGlvbjtcbiAgICAgICAgaWYgKGdsb2JhbEZpbHRlci5sZW5ndGggPT09IDApIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAgICAgLy8gVGhpcyBtYXRjaGVzIHRoZSBnbG9iYWwgZmlsdGVyIChhZnRlciBlc2NhcGluZyBpdCkgb25seSB3aGVuIGl0J3MgYSBjb21wbGV0ZSB3b3JkXG4gICAgICAgIGNvbnN0IGdsb2JhbEZpbHRlclJlZ2V4ID0gUmVnRXhwKCcoXnxcXFxccyknICsgdGhpcy5lc2NhcGVSZWdFeHAoZ2xvYmFsRmlsdGVyKSArICcoJHxcXFxccyknLCAndWcnKTtcbiAgICAgICAgaWYgKHRoaXMuZGVzY3JpcHRpb24uc2VhcmNoKGdsb2JhbEZpbHRlclJlZ2V4KSA+IC0xKSB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uLnJlcGxhY2UoZ2xvYmFsRmlsdGVyUmVnZXgsICckMSQyJykucmVwbGFjZSgnICAnLCAnICcpLnRyaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgfVxufVxuIiwgImltcG9ydCB7IE1ldGFkYXRhQ2FjaGUsIFRGaWxlLCBWYXVsdCB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB0eXBlIHsgTGlzdEl0ZW1DYWNoZSB9IGZyb20gJ29ic2lkaWFuJztcblxuaW1wb3J0IHsgZ2V0U2V0dGluZ3MgfSBmcm9tICcuL0NvbmZpZy9TZXR0aW5ncyc7XG5pbXBvcnQgdHlwZSB7IFRhc2sgfSBmcm9tICcuL1Rhc2snO1xuXG5sZXQgbWV0YWRhdGFDYWNoZTogTWV0YWRhdGFDYWNoZSB8IHVuZGVmaW5lZDtcbmxldCB2YXVsdDogVmF1bHQgfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplRmlsZSA9ICh7XG4gICAgbWV0YWRhdGFDYWNoZTogbmV3TWV0YWRhdGFDYWNoZSxcbiAgICB2YXVsdDogbmV3VmF1bHQsXG59OiB7XG4gICAgbWV0YWRhdGFDYWNoZTogTWV0YWRhdGFDYWNoZTtcbiAgICB2YXVsdDogVmF1bHQ7XG59KSA9PiB7XG4gICAgbWV0YWRhdGFDYWNoZSA9IG5ld01ldGFkYXRhQ2FjaGU7XG4gICAgdmF1bHQgPSBuZXdWYXVsdDtcbn07XG5cbi8qKlxuICogUmVwbGFjZXMgdGhlIG9yaWdpbmFsIHRhc2sgd2l0aCBvbmUgb3IgbW9yZSBuZXcgdGFza3MuXG4gKlxuICogSWYgeW91IHBhc3MgbW9yZSB0aGFuIG9uZSByZXBsYWNlbWVudCB0YXNrLCBhbGwgc3Vic2VxdWVudCB0YXNrcyBpbiB0aGUgc2FtZVxuICogc2VjdGlvbiBtdXN0IGJlIHJlLXJlbmRlcmVkLCBhcyB0aGVpciBzZWN0aW9uIGluZGV4ZXMgY2hhbmdlLiBBc3N1bWluZyB0aGF0XG4gKiB0aGlzIGlzIGRvbmUgZmFzdGVyIHRoYW4gdXNlciBpbnRlcmFjdGlvbiBpbiBwcmFjdGljZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlcGxhY2VUYXNrV2l0aFRhc2tzID0gYXN5bmMgKHtcbiAgICBvcmlnaW5hbFRhc2ssXG4gICAgbmV3VGFza3MsXG59OiB7XG4gICAgb3JpZ2luYWxUYXNrOiBUYXNrO1xuICAgIG5ld1Rhc2tzOiBUYXNrIHwgVGFza1tdO1xufSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGlmICh2YXVsdCA9PT0gdW5kZWZpbmVkIHx8IG1ldGFkYXRhQ2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdUYXNrczogY2Fubm90IHVzZSBGaWxlIGJlZm9yZSBpbml0aWFsaXppbmcgaXQuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobmV3VGFza3MpKSB7XG4gICAgICAgIG5ld1Rhc2tzID0gW25ld1Rhc2tzXTtcbiAgICB9XG5cbiAgICB0cnlSZXBldGl0aXZlKHtcbiAgICAgICAgb3JpZ2luYWxUYXNrLFxuICAgICAgICBuZXdUYXNrcyxcbiAgICAgICAgdmF1bHQsXG4gICAgICAgIG1ldGFkYXRhQ2FjaGUsXG4gICAgICAgIHByZXZpb3VzVHJpZXM6IDAsXG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFRoaXMgaXMgYSB3b3JrYXJvdW5kIHRvIHJlLXRyeSB3aGVuIHRoZSByZXR1cm5lZCBmaWxlIGNhY2hlIGlzIGB1bmRlZmluZWRgLlxuICogUmV0cnlpbmcgYWZ0ZXIgYSB3aGlsZSBtYXkgcmV0dXJuIGEgdmFsaWQgZmlsZSBjYWNoZS5cbiAqIFJlcG9ydGVkIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9vYnNpZGlhbi10YXNrcy1ncm91cC9vYnNpZGlhbi10YXNrcy9pc3N1ZXMvODdcbiAqL1xuY29uc3QgdHJ5UmVwZXRpdGl2ZSA9IGFzeW5jICh7XG4gICAgb3JpZ2luYWxUYXNrLFxuICAgIG5ld1Rhc2tzLFxuICAgIHZhdWx0LFxuICAgIG1ldGFkYXRhQ2FjaGUsXG4gICAgcHJldmlvdXNUcmllcyxcbn06IHtcbiAgICBvcmlnaW5hbFRhc2s6IFRhc2s7XG4gICAgbmV3VGFza3M6IFRhc2tbXTtcbiAgICB2YXVsdDogVmF1bHQ7XG4gICAgbWV0YWRhdGFDYWNoZTogTWV0YWRhdGFDYWNoZTtcbiAgICBwcmV2aW91c1RyaWVzOiBudW1iZXI7XG59KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgcmV0cnkgPSAoKSA9PiB7XG4gICAgICAgIGlmIChwcmV2aW91c1RyaWVzID4gMTApIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Rhc2tzOiBUb28gbWFueSByZXRyaWVzLiBGaWxlIHVwZGF0ZSBub3QgcG9zc2libGUgLi4uJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0aW1lb3V0ID0gTWF0aC5taW4oTWF0aC5wb3coMTAsIHByZXZpb3VzVHJpZXMpLCAxMDApOyAvLyAxLCAxMCwgMTAwLCAxMDAsIDEwMCwgLi4uXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdHJ5UmVwZXRpdGl2ZSh7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxUYXNrLFxuICAgICAgICAgICAgICAgIG5ld1Rhc2tzLFxuICAgICAgICAgICAgICAgIHZhdWx0LFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhQ2FjaGUsXG4gICAgICAgICAgICAgICAgcHJldmlvdXNUcmllczogcHJldmlvdXNUcmllcyArIDEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGZpbGUgPSB2YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgob3JpZ2luYWxUYXNrLnBhdGgpO1xuICAgIGlmICghKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBUYXNrczogTm8gZmlsZSBmb3VuZCBmb3IgdGFzayAke29yaWdpbmFsVGFzay5kZXNjcmlwdGlvbn0uIFJldHJ5aW5nIC4uLmApO1xuICAgICAgICByZXR1cm4gcmV0cnkoKTtcbiAgICB9XG5cbiAgICBpZiAoZmlsZS5leHRlbnNpb24gIT09ICdtZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignVGFza3M6IE9ubHkgc3VwcG9ydGluZyBmaWxlcyB3aXRoIHRoZSAubWQgZmlsZSBleHRlbnNpb24uJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBmaWxlQ2FjaGUgPSBtZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICBpZiAoZmlsZUNhY2hlID09IHVuZGVmaW5lZCB8fCBmaWxlQ2FjaGUgPT09IG51bGwpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBUYXNrczogTm8gZmlsZSBjYWNoZSBmb3VuZCBmb3IgZmlsZSAke2ZpbGUucGF0aH0uIFJldHJ5aW5nIC4uLmApO1xuICAgICAgICByZXR1cm4gcmV0cnkoKTtcbiAgICB9XG5cbiAgICBjb25zdCBsaXN0SXRlbXNDYWNoZSA9IGZpbGVDYWNoZS5saXN0SXRlbXM7XG4gICAgaWYgKGxpc3RJdGVtc0NhY2hlID09PSB1bmRlZmluZWQgfHwgbGlzdEl0ZW1zQ2FjaGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgVGFza3M6IE5vIGxpc3QgaXRlbXMgZm91bmQgaW4gZmlsZSBjYWNoZSBvZiAke2ZpbGUucGF0aH0uIFJldHJ5aW5nIC4uLmApO1xuICAgICAgICByZXR1cm4gcmV0cnkoKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWxlQ29udGVudCA9IGF3YWl0IHZhdWx0LnJlYWQoZmlsZSk7XG4gICAgY29uc3QgZmlsZUxpbmVzID0gZmlsZUNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuXG4gICAgY29uc3QgeyBnbG9iYWxGaWx0ZXIgfSA9IGdldFNldHRpbmdzKCk7XG4gICAgbGV0IGxpc3RJdGVtOiBMaXN0SXRlbUNhY2hlIHwgdW5kZWZpbmVkO1xuICAgIGxldCBzZWN0aW9uSW5kZXggPSAwO1xuICAgIGZvciAoY29uc3QgbGlzdEl0ZW1DYWNoZSBvZiBsaXN0SXRlbXNDYWNoZSkge1xuICAgICAgICBpZiAobGlzdEl0ZW1DYWNoZS5wb3NpdGlvbi5zdGFydC5saW5lIDwgb3JpZ2luYWxUYXNrLnNlY3Rpb25TdGFydCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdEl0ZW1DYWNoZS50YXNrID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGluZSA9IGZpbGVMaW5lc1tsaXN0SXRlbUNhY2hlLnBvc2l0aW9uLnN0YXJ0LmxpbmVdO1xuXG4gICAgICAgIGlmIChsaW5lLmluY2x1ZGVzKGdsb2JhbEZpbHRlcikpIHtcbiAgICAgICAgICAgIGlmIChzZWN0aW9uSW5kZXggPT09IG9yaWdpbmFsVGFzay5zZWN0aW9uSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBsaXN0SXRlbSA9IGxpc3RJdGVtQ2FjaGU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlY3Rpb25JbmRleCsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChsaXN0SXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Rhc2tzOiBjb3VsZCBub3QgZmluZCB0YXNrIHRvIHRvZ2dsZSBpbiB0aGUgZmlsZS4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHVwZGF0ZWRGaWxlTGluZXMgPSBbXG4gICAgICAgIC4uLmZpbGVMaW5lcy5zbGljZSgwLCBsaXN0SXRlbS5wb3NpdGlvbi5zdGFydC5saW5lKSxcbiAgICAgICAgLi4ubmV3VGFza3MubWFwKCh0YXNrOiBUYXNrKSA9PiB0YXNrLnRvRmlsZUxpbmVTdHJpbmcoKSksXG4gICAgICAgIC4uLmZpbGVMaW5lcy5zbGljZShsaXN0SXRlbS5wb3NpdGlvbi5zdGFydC5saW5lICsgMSksIC8vIE9ubHkgc3VwcG9ydHMgc2luZ2xlLWxpbmUgdGFza3MuXG4gICAgXTtcblxuICAgIGF3YWl0IHZhdWx0Lm1vZGlmeShmaWxlLCB1cGRhdGVkRmlsZUxpbmVzLmpvaW4oJ1xcbicpKTtcbn07XG4iLCAiaW1wb3J0IGZlYXR1cmVzSnNvbiBmcm9tICcuL2ZlYXR1cmVDb25maWd1cmF0aW9uLmpzb24nO1xuXG5leHBvcnQgdHlwZSBGZWF0dXJlRmxhZyA9IHtcbiAgICBbaW50ZXJuYWxOYW1lOiBzdHJpbmddOiBib29sZWFuO1xufTtcblxuLyoqXG4gKiBUaGUgRmVhdHVyZSBjbGFzcyB0cmFja3MgYWxsIHRoZSBwb3NzaWJsZSBmZWF0dXJlcyB0aGF0IHVzZXJzIGNhbiBlbmFibGVkIHRoYXQgYXJlIGluIGRldmVsb3BtZW50LiBUaGlzIGFsbG93c1xuICogbmV3IGZlYXR1cmVzIHRvIGJlIGFkZGVkIHRvIHRoZSBwbGF0Zm9ybSBidXQgbm90IGVuYWJsZWQgYnkgZGVmYXVsdC4gVGhpcyByZWR1Y2VzIHRoZSBjb21wbGljYXRpb25zIHdoZW4gaXRcbiAqIGNvbWVzIHRvIGFkZGluZyBuZXcgZmVhdHVyZXMgYW5kIGEgbGFyZ2UgY2FzY2FkZSBvZiBkZXBlbmRlbnQgYnJhbmNoZXMuXG4gKlxuICogV2hlbiB5b3UgYWRkIGEgbmV3IGZlYXR1cmUgeW91IG5lZWQgdG8gYWRkIGl0IHRvIHRoZSBmZWF0dXJlQ29uZmlndXJhdGlvbi5qc29uIGZpbGUuIEl0IHRoZW4gbmVlZHMgdG8gYmUgYWRkZWQgdG9cbiAqIHNldHRpbmdzIHNvIGEgdXNlciBjYW4gZW5hYmxlIGl0LiBJZiB5b3Ugd2FudCBpdCBoaWRkZW4geW91IHdpbGwgbmVlZCB0byBtYW51YWxseSB1cGRhdGUgdGhlIGRhdGEuanNvbiBmaWxlLiBJbiB0aGVcbiAqIHBsdWdpbiBmb2xkZXIuXG4gKlxuICogQHNpbmNlIDIwMjItMDUtMjlcbiAqL1xuZXhwb3J0IGNsYXNzIEZlYXR1cmUge1xuICAgIHByaXZhdGUgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBpbnRlcm5hbE5hbWU6IHN0cmluZyxcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGluZGV4OiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgZGlzcGxheU5hbWU6IHN0cmluZyxcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGVuYWJsZWRCeURlZmF1bHQ6IGJvb2xlYW4sXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBzdGFibGU6IGJvb2xlYW4sXG4gICAgKSB7fVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdCBvZiBhbGwgYXZhaWxhYmxlIGZlYXR1cmVzLlxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQHN0YXRpY1xuICAgICAqIEB0eXBlIHtGZWF0dXJlW119XG4gICAgICogQG1lbWJlcm9mIEZlYXR1cmVcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IHZhbHVlcygpOiBGZWF0dXJlW10ge1xuICAgICAgICBsZXQgYXZhaWxhYmxlRmVhdHVyZXM6IEZlYXR1cmVbXSA9IFtdO1xuXG4gICAgICAgIGZlYXR1cmVzSnNvbi5mb3JFYWNoKChmZWF0dXJlKSA9PiB7XG4gICAgICAgICAgICBhdmFpbGFibGVGZWF0dXJlcyA9IFtcbiAgICAgICAgICAgICAgICAuLi5hdmFpbGFibGVGZWF0dXJlcyxcbiAgICAgICAgICAgICAgICBuZXcgRmVhdHVyZShcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5pbnRlcm5hbE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuZGlzcGxheU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuZW5hYmxlZEJ5RGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zdGFibGUsXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYXZhaWxhYmxlRmVhdHVyZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZW5hYmxlZCBzdGF0ZSBvZiB0aGUgZmVhdHVyZS5cbiAgICAgKlxuICAgICAqIEByZWFkb25seVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAdHlwZSB7RmVhdHVyZUZsYWd9XG4gICAgICogQG1lbWJlcm9mIEZlYXR1cmVcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IHNldHRpbmdzRmxhZ3MoKTogRmVhdHVyZUZsYWcge1xuICAgICAgICBjb25zdCBmZWF0dXJlRmxhZ3M6IHsgW2ludGVybmFsTmFtZTogc3RyaW5nXTogYm9vbGVhbiB9ID0ge307XG5cbiAgICAgICAgRmVhdHVyZS52YWx1ZXMuZm9yRWFjaCgoZmVhdHVyZSkgPT4ge1xuICAgICAgICAgICAgZmVhdHVyZUZsYWdzW2ZlYXR1cmUuaW50ZXJuYWxOYW1lXSA9IGZlYXR1cmUuZW5hYmxlZEJ5RGVmYXVsdDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmZWF0dXJlRmxhZ3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBuYW1lIHRvIGl0cyBjb3JyZXNwb25kaW5nIGRlZmF1bHQgRmVhdHVyZSBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIHRoZSBuYW1lIHRvIGNvbnZlcnQgdG8gRmVhdHVyZVxuICAgICAqIEB0aHJvd3MgUmFuZ2VFcnJvciwgaWYgYSBzdHJpbmcgdGhhdCBoYXMgbm8gY29ycmVzcG9uZGluZyBGZWF0dXJlIHZhbHVlIHdhcyBwYXNzZWQuXG4gICAgICogQHJldHVybnMgdGhlIG1hdGNoaW5nIEZlYXR1cmVcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVN0cmluZyhuYW1lOiBzdHJpbmcpOiBGZWF0dXJlIHtcbiAgICAgICAgZm9yIChjb25zdCBmZWF0dXJlIG9mIEZlYXR1cmUudmFsdWVzKSB7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gZmVhdHVyZS5pbnRlcm5hbE5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmVhdHVyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgICAgICAgYElsbGVnYWwgYXJndW1lbnQgcGFzc2VkIHRvIGZyb21TdHJpbmcoKTogJHtuYW1lfSBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIGFueSBhdmFpbGFibGUgRmVhdHVyZSAke1xuICAgICAgICAgICAgICAgICh0aGlzIGFzIGFueSkucHJvdG90eXBlLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgICAgICAgIH1gLFxuICAgICAgICApO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBGZWF0dXJlIH0gZnJvbSAnLi9GZWF0dXJlJztcbmltcG9ydCB0eXBlIHsgRmVhdHVyZUZsYWcgfSBmcm9tICcuL0ZlYXR1cmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNldHRpbmdzIHtcbiAgICBnbG9iYWxGaWx0ZXI6IHN0cmluZztcbiAgICByZW1vdmVHbG9iYWxGaWx0ZXI6IGJvb2xlYW47XG4gICAgc2V0RG9uZURhdGU6IGJvb2xlYW47XG4gICAgYXV0b1N1Z2dlc3RJbkVkaXRvcjogYm9vbGVhbjtcbiAgICBhdXRvU3VnZ2VzdE1pbk1hdGNoOiBudW1iZXI7XG4gICAgYXV0b1N1Z2dlc3RNYXhJdGVtczogbnVtYmVyO1xuICAgIHByb3ZpZGVBY2Nlc3NLZXlzOiBib29sZWFuO1xuICAgIHVzZUZpbGVuYW1lQXNTY2hlZHVsZWREYXRlOiBib29sZWFuO1xuICAgIGZpbGVuYW1lQXNEYXRlRm9sZGVyczogc3RyaW5nW107XG5cbiAgICAvLyBDb2xsZWN0aW9uIG9mIGZlYXR1cmUgZmxhZyBJRHMgYW5kIHRoZWlyIHN0YXRlLlxuICAgIGZlYXR1cmVzOiBGZWF0dXJlRmxhZztcbn1cblxuY29uc3QgZGVmYXVsdFNldHRpbmdzOiBTZXR0aW5ncyA9IHtcbiAgICBnbG9iYWxGaWx0ZXI6ICcnLFxuICAgIHJlbW92ZUdsb2JhbEZpbHRlcjogZmFsc2UsXG4gICAgc2V0RG9uZURhdGU6IHRydWUsXG4gICAgYXV0b1N1Z2dlc3RJbkVkaXRvcjogdHJ1ZSxcbiAgICBhdXRvU3VnZ2VzdE1pbk1hdGNoOiAwLFxuICAgIGF1dG9TdWdnZXN0TWF4SXRlbXM6IDYsXG4gICAgcHJvdmlkZUFjY2Vzc0tleXM6IHRydWUsXG4gICAgdXNlRmlsZW5hbWVBc1NjaGVkdWxlZERhdGU6IGZhbHNlLFxuICAgIGZpbGVuYW1lQXNEYXRlRm9sZGVyczogW10sXG4gICAgZmVhdHVyZXM6IEZlYXR1cmUuc2V0dGluZ3NGbGFncyxcbn07XG5cbmxldCBzZXR0aW5nczogU2V0dGluZ3MgPSB7IC4uLmRlZmF1bHRTZXR0aW5ncyB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgc2V0dGluZ3MgYXMgYSBvYmplY3QsIGl0IHdpbGwgYWxzbyBjaGVjayBhbmRcbiAqIHVwZGF0ZSB0aGUgZmxhZ3MgdG8gbWFrZSBzdXJlIHRoZXkgYXJlIGFsbCBzaG93biBpbiB0aGUgZGF0YS5qc29uXG4gKiBmaWxlLiBFeHBvc3VyZSB2aWEgdGhlIHNldHRpbmdzIFVJIGlzIG9wdGlvbmFsLlxuICpcbiAqIEBleHBvcnRcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGZlYXR1cmUgaXMgZW5hYmxlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFNldHRpbmdzID0gKCk6IFNldHRpbmdzID0+IHtcbiAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlcmUgaXMgYSBuZXcgZmxhZyBhbmQgaWYgc28gYWRkIGl0IHRvIHRoZSB1c2VycyBzZXR0aW5ncy5cbiAgICBmb3IgKGNvbnN0IGZsYWcgaW4gRmVhdHVyZS5zZXR0aW5nc0ZsYWdzKSB7XG4gICAgICAgIGlmIChzZXR0aW5ncy5mZWF0dXJlc1tmbGFnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5mZWF0dXJlc1tmbGFnXSA9IEZlYXR1cmUuc2V0dGluZ3NGbGFnc1tmbGFnXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IC4uLnNldHRpbmdzIH07XG59O1xuXG5leHBvcnQgY29uc3QgdXBkYXRlU2V0dGluZ3MgPSAobmV3U2V0dGluZ3M6IFBhcnRpYWw8U2V0dGluZ3M+KTogU2V0dGluZ3MgPT4ge1xuICAgIHNldHRpbmdzID0geyAuLi5zZXR0aW5ncywgLi4ubmV3U2V0dGluZ3MgfTtcblxuICAgIHJldHVybiBnZXRTZXR0aW5ncygpO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlc2V0U2V0dGluZ3MgPSAoKTogU2V0dGluZ3MgPT4ge1xuICAgIHJldHVybiB1cGRhdGVTZXR0aW5ncyhkZWZhdWx0U2V0dGluZ3MpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbmFibGVkIHN0YXRlIG9mIHRoZSBmZWF0dXJlIGZyb20gc2V0dGluZ3MuXG4gKlxuICogQGV4cG9ydFxuICogQHBhcmFtIGludGVybmFsTmFtZSB0aGUgaW50ZXJuYWwgbmFtZSBvZiB0aGUgZmVhdHVyZS5cbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGZlYXR1cmUgaXMgZW5hYmxlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzRmVhdHVyZUVuYWJsZWQgPSAoaW50ZXJuYWxOYW1lOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgICByZXR1cm4gc2V0dGluZ3MuZmVhdHVyZXNbaW50ZXJuYWxOYW1lXSA/PyBmYWxzZTtcbn07XG5cbi8qKlxuICogZW5hYmxlcyB0b2dnbGluZyB0aGUgZmVhdHVyZSBhbmQgcmV0dXJuaW5nIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gd2l0aCBzdGF0ZS5cbiAqXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0gaW50ZXJuYWxOYW1lIHRoZSBpbnRlcm5hbCBuYW1lIG9mIHRoZSBmZWF0dXJlLlxuICogQHBhcmFtIGVuYWJsZWQgdGhlIGV4cGVjdGVkIHN0YXRlIG9mIHRoZSBmZWF0dXJlLlxuICogQHJldHVybnMgdGhlIGZlYXR1cmVzIHdpdGggdGhlIHNwZWNpZmllZCBmZWF0dXJlIHRvZ2dsZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB0b2dnbGVGZWF0dXJlID0gKGludGVybmFsTmFtZTogc3RyaW5nLCBlbmFibGVkOiBib29sZWFuKTogRmVhdHVyZUZsYWcgPT4ge1xuICAgIHNldHRpbmdzLmZlYXR1cmVzW2ludGVybmFsTmFtZV0gPSBlbmFibGVkO1xuICAgIHJldHVybiBzZXR0aW5ncy5mZWF0dXJlcztcbn07XG4iLCAiZXhwb3J0IGNsYXNzIExheW91dE9wdGlvbnMge1xuICAgIGhpZGVUYXNrQ291bnQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBoaWRlQmFja2xpbmtzOiBib29sZWFuID0gZmFsc2U7XG4gICAgaGlkZVByaW9yaXR5OiBib29sZWFuID0gZmFsc2U7XG4gICAgaGlkZVN0YXJ0RGF0ZTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGhpZGVTY2hlZHVsZWREYXRlOiBib29sZWFuID0gZmFsc2U7XG4gICAgaGlkZURvbmVEYXRlOiBib29sZWFuID0gZmFsc2U7XG4gICAgaGlkZUR1ZURhdGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBoaWRlUmVjdXJyZW5jZVJ1bGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBoaWRlRWRpdEJ1dHRvbjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGhpZGVVcmdlbmN5OiBib29sZWFuID0gdHJ1ZTtcbiAgICBzaG9ydE1vZGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBleHBsYWluUXVlcnk6IGJvb2xlYW4gPSBmYWxzZTtcbn1cbiIsIG51bGwsIG51bGwsIG51bGwsIG51bGwsICJpbXBvcnQgdHNsaWIgZnJvbSAnLi4vdHNsaWIuanMnO1xyXG5jb25zdCB7XHJcbiAgICBfX2V4dGVuZHMsXHJcbiAgICBfX2Fzc2lnbixcclxuICAgIF9fcmVzdCxcclxuICAgIF9fZGVjb3JhdGUsXHJcbiAgICBfX3BhcmFtLFxyXG4gICAgX19tZXRhZGF0YSxcclxuICAgIF9fYXdhaXRlcixcclxuICAgIF9fZ2VuZXJhdG9yLFxyXG4gICAgX19leHBvcnRTdGFyLFxyXG4gICAgX19jcmVhdGVCaW5kaW5nLFxyXG4gICAgX192YWx1ZXMsXHJcbiAgICBfX3JlYWQsXHJcbiAgICBfX3NwcmVhZCxcclxuICAgIF9fc3ByZWFkQXJyYXlzLFxyXG4gICAgX19zcHJlYWRBcnJheSxcclxuICAgIF9fYXdhaXQsXHJcbiAgICBfX2FzeW5jR2VuZXJhdG9yLFxyXG4gICAgX19hc3luY0RlbGVnYXRvcixcclxuICAgIF9fYXN5bmNWYWx1ZXMsXHJcbiAgICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcclxuICAgIF9faW1wb3J0U3RhcixcclxuICAgIF9faW1wb3J0RGVmYXVsdCxcclxuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0LFxyXG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEluLFxyXG59ID0gdHNsaWI7XHJcbmV4cG9ydCB7XHJcbiAgICBfX2V4dGVuZHMsXHJcbiAgICBfX2Fzc2lnbixcclxuICAgIF9fcmVzdCxcclxuICAgIF9fZGVjb3JhdGUsXHJcbiAgICBfX3BhcmFtLFxyXG4gICAgX19tZXRhZGF0YSxcclxuICAgIF9fYXdhaXRlcixcclxuICAgIF9fZ2VuZXJhdG9yLFxyXG4gICAgX19leHBvcnRTdGFyLFxyXG4gICAgX19jcmVhdGVCaW5kaW5nLFxyXG4gICAgX192YWx1ZXMsXHJcbiAgICBfX3JlYWQsXHJcbiAgICBfX3NwcmVhZCxcclxuICAgIF9fc3ByZWFkQXJyYXlzLFxyXG4gICAgX19zcHJlYWRBcnJheSxcclxuICAgIF9fYXdhaXQsXHJcbiAgICBfX2FzeW5jR2VuZXJhdG9yLFxyXG4gICAgX19hc3luY0RlbGVnYXRvcixcclxuICAgIF9fYXN5bmNWYWx1ZXMsXHJcbiAgICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcclxuICAgIF9faW1wb3J0U3RhcixcclxuICAgIF9faW1wb3J0RGVmYXVsdCxcclxuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0LFxyXG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEluLFxyXG59O1xyXG4iLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCAiaW1wb3J0IHR5cGUgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgdHlwZSB7IFRhc2sgfSBmcm9tICcuLi9UYXNrJztcbmltcG9ydCB7IGdldFNldHRpbmdzIH0gZnJvbSAnLi4vQ29uZmlnL1NldHRpbmdzJztcbmltcG9ydCB0eXBlIHsgUXVlcnksIFNvcnRpbmdQcm9wZXJ0eSB9IGZyb20gJy4vUXVlcnknO1xuXG50eXBlIENvbXBhcmF0b3IgPSAoYTogVGFzaywgYjogVGFzaykgPT4gbnVtYmVyO1xuXG5leHBvcnQgY2xhc3MgU29ydCB7XG4gICAgc3RhdGljIHRhZ1Byb3BlcnR5SW5zdGFuY2U6IG51bWJlciA9IDE7XG5cbiAgICBwdWJsaWMgc3RhdGljIGJ5KHF1ZXJ5OiBQaWNrPFF1ZXJ5LCAnc29ydGluZyc+LCB0YXNrczogVGFza1tdKTogVGFza1tdIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdENvbXBhcmF0b3JzOiBDb21wYXJhdG9yW10gPSBbXG4gICAgICAgICAgICBTb3J0LmNvbXBhcmVCeVVyZ2VuY3ksXG4gICAgICAgICAgICBTb3J0LmNvbXBhcmVCeVN0YXR1cyxcbiAgICAgICAgICAgIFNvcnQuY29tcGFyZUJ5RHVlRGF0ZSxcbiAgICAgICAgICAgIFNvcnQuY29tcGFyZUJ5UHJpb3JpdHksXG4gICAgICAgICAgICBTb3J0LmNvbXBhcmVCeVBhdGgsXG4gICAgICAgIF07XG5cbiAgICAgICAgY29uc3QgdXNlckNvbXBhcmF0b3JzOiBDb21wYXJhdG9yW10gPSBbXTtcblxuICAgICAgICBmb3IgKGNvbnN0IHsgcHJvcGVydHksIHJldmVyc2UsIHByb3BlcnR5SW5zdGFuY2UgfSBvZiBxdWVyeS5zb3J0aW5nKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wYXJhdG9yID0gU29ydC5jb21wYXJhdG9yc1twcm9wZXJ0eV07XG4gICAgICAgICAgICB1c2VyQ29tcGFyYXRvcnMucHVzaChyZXZlcnNlID8gU29ydC5tYWtlUmV2ZXJzZWRDb21wYXJhdG9yKGNvbXBhcmF0b3IpIDogY29tcGFyYXRvcik7XG4gICAgICAgICAgICBpZiAocHJvcGVydHkgPT09ICd0YWcnKSB7XG4gICAgICAgICAgICAgICAgU29ydC50YWdQcm9wZXJ0eUluc3RhbmNlID0gcHJvcGVydHlJbnN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXNrcy5zb3J0KFNvcnQubWFrZUNvbXBvc2l0ZUNvbXBhcmF0b3IoWy4uLnVzZXJDb21wYXJhdG9ycywgLi4uZGVmYXVsdENvbXBhcmF0b3JzXSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNvbXBhcmF0b3JzOiBSZWNvcmQ8U29ydGluZ1Byb3BlcnR5LCBDb21wYXJhdG9yPiA9IHtcbiAgICAgICAgdXJnZW5jeTogU29ydC5jb21wYXJlQnlVcmdlbmN5LFxuICAgICAgICBkZXNjcmlwdGlvbjogU29ydC5jb21wYXJlQnlEZXNjcmlwdGlvbixcbiAgICAgICAgcHJpb3JpdHk6IFNvcnQuY29tcGFyZUJ5UHJpb3JpdHksXG4gICAgICAgIHN0YXJ0OiBTb3J0LmNvbXBhcmVCeVN0YXJ0RGF0ZSxcbiAgICAgICAgc2NoZWR1bGVkOiBTb3J0LmNvbXBhcmVCeVNjaGVkdWxlZERhdGUsXG4gICAgICAgIGR1ZTogU29ydC5jb21wYXJlQnlEdWVEYXRlLFxuICAgICAgICBkb25lOiBTb3J0LmNvbXBhcmVCeURvbmVEYXRlLFxuICAgICAgICBwYXRoOiBTb3J0LmNvbXBhcmVCeVBhdGgsXG4gICAgICAgIHN0YXR1czogU29ydC5jb21wYXJlQnlTdGF0dXMsXG4gICAgICAgIHRhZzogU29ydC5jb21wYXJlQnlUYWcsXG4gICAgfTtcblxuICAgIHByaXZhdGUgc3RhdGljIG1ha2VSZXZlcnNlZENvbXBhcmF0b3IoY29tcGFyYXRvcjogQ29tcGFyYXRvcik6IENvbXBhcmF0b3Ige1xuICAgICAgICByZXR1cm4gKGEsIGIpID0+IChjb21wYXJhdG9yKGEsIGIpICogLTEpIGFzIC0xIHwgMCB8IDE7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgbWFrZUNvbXBvc2l0ZUNvbXBhcmF0b3IoY29tcGFyYXRvcnM6IENvbXBhcmF0b3JbXSk6IENvbXBhcmF0b3Ige1xuICAgICAgICByZXR1cm4gKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY29tcGFyYXRvciBvZiBjb21wYXJhdG9ycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmF0b3IoYSwgYik7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNvbXBhcmVCeVVyZ2VuY3koYTogVGFzaywgYjogVGFzayk6IG51bWJlciB7XG4gICAgICAgIC8vIEhpZ2hlciB1cmdlbmN5IHNob3VsZCBiZSBzb3J0ZWQgZWFybGllci5cbiAgICAgICAgcmV0dXJuIGIudXJnZW5jeSAtIGEudXJnZW5jeTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBjb21wYXJlQnlTdGF0dXMoYTogVGFzaywgYjogVGFzayk6IC0xIHwgMCB8IDEge1xuICAgICAgICBpZiAoYS5zdGF0dXMgPCBiLnN0YXR1cykge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH0gZWxzZSBpZiAoYS5zdGF0dXMgPiBiLnN0YXR1cykge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBjb21wYXJlQnlQcmlvcml0eShhOiBUYXNrLCBiOiBUYXNrKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkubG9jYWxlQ29tcGFyZShiLnByaW9yaXR5KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBjb21wYXJlQnlTdGFydERhdGUoYTogVGFzaywgYjogVGFzayk6IC0xIHwgMCB8IDEge1xuICAgICAgICByZXR1cm4gU29ydC5jb21wYXJlQnlEYXRlKGEuc3RhcnREYXRlLCBiLnN0YXJ0RGF0ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgY29tcGFyZUJ5U2NoZWR1bGVkRGF0ZShhOiBUYXNrLCBiOiBUYXNrKTogLTEgfCAwIHwgMSB7XG4gICAgICAgIHJldHVybiBTb3J0LmNvbXBhcmVCeURhdGUoYS5zY2hlZHVsZWREYXRlLCBiLnNjaGVkdWxlZERhdGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNvbXBhcmVCeUR1ZURhdGUoYTogVGFzaywgYjogVGFzayk6IC0xIHwgMCB8IDEge1xuICAgICAgICByZXR1cm4gU29ydC5jb21wYXJlQnlEYXRlKGEuZHVlRGF0ZSwgYi5kdWVEYXRlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBjb21wYXJlQnlEb25lRGF0ZShhOiBUYXNrLCBiOiBUYXNrKTogLTEgfCAwIHwgMSB7XG4gICAgICAgIHJldHVybiBTb3J0LmNvbXBhcmVCeURhdGUoYS5kb25lRGF0ZSwgYi5kb25lRGF0ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgY29tcGFyZUJ5VGFnKGE6IFRhc2ssIGI6IFRhc2spOiAtMSB8IDAgfCAxIHtcbiAgICAgICAgLy8gSWYgbm8gdGFncyB0aGVuIGFzc3VtZSB0aGV5IGFyZSBlcXVhbC5cbiAgICAgICAgaWYgKGEudGFncy5sZW5ndGggPT09IDAgJiYgYi50YWdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSBpZiAoYS50YWdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gYSBpcyBsZXNzIHRoYW4gYlxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH0gZWxzZSBpZiAoYi50YWdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gYiBpcyBsZXNzIHRoYW4gYVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXJyYXlzIHN0YXJ0IGF0IDAgYnV0IHRoZSB1c2VycyBzcGVjaWZ5IGEgdGFnIHN0YXJ0aW5nIGF0IDEuXG4gICAgICAgIGNvbnN0IHRhZ0luc3RhbmNlVG9Tb3J0QnkgPSBTb3J0LnRhZ1Byb3BlcnR5SW5zdGFuY2UgLSAxO1xuXG4gICAgICAgIGlmIChhLnRhZ3MubGVuZ3RoIDwgU29ydC50YWdQcm9wZXJ0eUluc3RhbmNlICYmIGIudGFncy5sZW5ndGggPj0gU29ydC50YWdQcm9wZXJ0eUluc3RhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSBlbHNlIGlmIChiLnRhZ3MubGVuZ3RoIDwgU29ydC50YWdQcm9wZXJ0eUluc3RhbmNlICYmIGEudGFncy5sZW5ndGggPj0gU29ydC50YWdQcm9wZXJ0eUluc3RhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoYS50YWdzLmxlbmd0aCA8IFNvcnQudGFnUHJvcGVydHlJbnN0YW5jZSAmJiBiLnRhZ3MubGVuZ3RoIDwgU29ydC50YWdQcm9wZXJ0eUluc3RhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhLnRhZ3NbdGFnSW5zdGFuY2VUb1NvcnRCeV0gPCBiLnRhZ3NbdGFnSW5zdGFuY2VUb1NvcnRCeV0pIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChhLnRhZ3NbdGFnSW5zdGFuY2VUb1NvcnRCeV0gPiBiLnRhZ3NbdGFnSW5zdGFuY2VUb1NvcnRCeV0pIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNvbXBhcmVCeURhdGUoYTogbW9tZW50Lk1vbWVudCB8IG51bGwsIGI6IG1vbWVudC5Nb21lbnQgfCBudWxsKTogLTEgfCAwIHwgMSB7XG4gICAgICAgIGlmIChhICE9PSBudWxsICYmIGIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChhID09PSBudWxsICYmIGIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9IGVsc2UgaWYgKGEgIT09IG51bGwgJiYgYiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGEuaXNWYWxpZCgpICYmICFiLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWEuaXNWYWxpZCgpICYmIGIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhLmlzQWZ0ZXIoYikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYS5pc0JlZm9yZShiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNvbXBhcmVCeVBhdGgoYTogVGFzaywgYjogVGFzayk6IC0xIHwgMCB8IDEge1xuICAgICAgICBpZiAoYS5wYXRoIDwgYi5wYXRoKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoYS5wYXRoID4gYi5wYXRoKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZSB0aGUgZGVzY3JpcHRpb24gYnkgaG93IGl0IGlzIHJlbmRlcmVkIGluIG1hcmtkb3duLlxuICAgICAqXG4gICAgICogRG9lcyBub3QgdXNlIHRoZSBNYXJrZG93blJlbmRlcmVyLCBidXQgdHJpZXMgdG8gbWF0Y2ggcmVnZXhlcyBpbnN0ZWFkXG4gICAgICogaW4gb3JkZXIgdG8gYmUgc2ltcGxlciwgZmFzdGVyLCBhbmQgbm90IGFzeW5jLlxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIGNvbXBhcmVCeURlc2NyaXB0aW9uKGE6IFRhc2ssIGI6IFRhc2spIHtcbiAgICAgICAgcmV0dXJuIFNvcnQuY2xlYW5EZXNjcmlwdGlvbihhLmRlc2NyaXB0aW9uKS5sb2NhbGVDb21wYXJlKFNvcnQuY2xlYW5EZXNjcmlwdGlvbihiLmRlc2NyaXB0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBgKmAsIGA9YCwgYW5kIGBbYCBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGRlc2NyaXB0aW9uLlxuICAgICAqXG4gICAgICogV2lsbCByZW1vdmUgdGhlbSBvbmx5IGlmIHRoZXkgYXJlIGNsb3NpbmcuXG4gICAgICogUHJvcGVybHkgcmVhZHMgbGlua3MgW1tsaWtlIHRoaXN8b25lXV0gKG5vdGUgcGlwZSkuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgY2xlYW5EZXNjcmlwdGlvbihkZXNjcmlwdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgZ2xvYmFsRmlsdGVyID0gZ2V0U2V0dGluZ3MoKS5nbG9iYWxGaWx0ZXI7XG4gICAgICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24ucmVwbGFjZShnbG9iYWxGaWx0ZXIsICcnKS50cmltKCk7XG5cbiAgICAgICAgY29uc3Qgc3RhcnRzV2l0aExpbmtSZWdleCA9IC9eXFxbXFxbPyhbXlxcXV0qKVxcXS87XG4gICAgICAgIGNvbnN0IGxpbmtSZWdleE1hdGNoID0gZGVzY3JpcHRpb24ubWF0Y2goc3RhcnRzV2l0aExpbmtSZWdleCk7XG4gICAgICAgIGlmIChsaW5rUmVnZXhNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgaW5uZXJMaW5rVGV4dCA9IGxpbmtSZWdleE1hdGNoWzFdO1xuICAgICAgICAgICAgLy8gRm9yIGEgbGluaywgd2UgaGF2ZSB0byBjaGVjayB3aGV0aGVyIGl0IGhhcyBhbm90aGVyIHZpc2libGUgbmFtZSBzZXQuXG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSBgW1t0aGlzIGlzIHRoZSBsaW5rfGJ1dCB0aGlzIGlzIGFjdHVhbGx5IHNob3duXV1gLlxuICAgICAgICAgICAgZGVzY3JpcHRpb24gPVxuICAgICAgICAgICAgICAgIGlubmVyTGlua1RleHQuc3Vic3RyaW5nKGlubmVyTGlua1RleHQuaW5kZXhPZignfCcpICsgMSkgKyBkZXNjcmlwdGlvbi5yZXBsYWNlKHN0YXJ0c1dpdGhMaW5rUmVnZXgsICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YXJ0c1dpdGhJdGFsaWNPckJvbGRSZWdleCA9IC9eXFwqXFwqPyhbXipdKilcXCovO1xuICAgICAgICBjb25zdCBpdGFsaWNCb2xkUmVnZXhNYXRjaCA9IGRlc2NyaXB0aW9uLm1hdGNoKHN0YXJ0c1dpdGhJdGFsaWNPckJvbGRSZWdleCk7XG4gICAgICAgIGlmIChpdGFsaWNCb2xkUmVnZXhNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgaW5uZXJJdGFsaWNCb2xkVGV4dCA9IGl0YWxpY0JvbGRSZWdleE1hdGNoWzFdO1xuICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBpbm5lckl0YWxpY0JvbGRUZXh0ICsgZGVzY3JpcHRpb24ucmVwbGFjZShzdGFydHNXaXRoTGlua1JlZ2V4LCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGFydHNXaXRoSGlnaGxpZ2h0UmVnZXggPSAvXj09PyhbXj1dKik9PS87XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodFJlZ2V4TWF0Y2ggPSBkZXNjcmlwdGlvbi5tYXRjaChzdGFydHNXaXRoSGlnaGxpZ2h0UmVnZXgpO1xuICAgICAgICBpZiAoaGlnaGxpZ2h0UmVnZXhNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgaW5uZXJIaWdobGlnaHRzVGV4dCA9IGhpZ2hsaWdodFJlZ2V4TWF0Y2hbMV07XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGlubmVySGlnaGxpZ2h0c1RleHQgKyBkZXNjcmlwdGlvbi5yZXBsYWNlKHN0YXJ0c1dpdGhIaWdobGlnaHRSZWdleCwgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7IE1vbWVudCB9IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBSUnVsZSB9IGZyb20gJ3JydWxlJztcbmltcG9ydCB7IFNvcnQgfSBmcm9tICcuL1F1ZXJ5L1NvcnQnO1xuXG5leHBvcnQgY2xhc3MgUmVjdXJyZW5jZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBycnVsZTogUlJ1bGU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBiYXNlT25Ub2RheTogYm9vbGVhbjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0YXJ0RGF0ZTogTW9tZW50IHwgbnVsbDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNjaGVkdWxlZERhdGU6IE1vbWVudCB8IG51bGw7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkdWVEYXRlOiBNb21lbnQgfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlZmVyZW5jZSBkYXRlIGlzIHVzZWQgdG8gY2FsY3VsYXRlIGZ1dHVyZSBvY2N1cnJlbmNlcy5cbiAgICAgKlxuICAgICAqIEZ1dHVyZSBvY2N1cnJlbmNlcyB3aWxsIHJlY3VyIGJhc2VkIG9uIHRoZSByZWZlcmVuY2UgZGF0ZS5cbiAgICAgKiBUaGUgcmVmZXJlbmNlIGRhdGUgaXMgdGhlIGR1ZSBkYXRlLCBpZiBpdCBpcyBnaXZlbi5cbiAgICAgKiBPdGhlcndpc2UgdGhlIHNjaGVkdWxlZCBkYXRlLCBpZiBpdCBpcyBnaXZlbi4gQW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogUmVjdXJyZW5jZSBvZiBhbGwgZGF0ZXMgd2lsbCBiZSBrZXB0IHJlbGF0aXZlIHRvIHRoZSByZWZlcmVuY2UgZGF0ZS5cbiAgICAgKiBGb3IgZXhhbXBsZTogaWYgdGhlIGR1ZSBkYXRlIGFuZCB0aGUgc3RhcnQgZGF0ZSBhcmUgZ2l2ZW4sIHRoZSBkdWUgZGF0ZVxuICAgICAqIGlzIHRoZSByZWZlcmVuY2UgZGF0ZS4gRnV0dXJlIG9jY3VycmVuY2VzIHdpbGwgaGF2ZSBhIHN0YXJ0IGRhdGUgd2l0aCB0aGVcbiAgICAgKiBzYW1lIHJlbGF0aXZlIGRpc3RhbmNlIHRvIHRoZSBkdWUgZGF0ZSBhcyB0aGUgb3JpZ2luYWwgdGFzay4gRm9yIGV4YW1wbGVcbiAgICAgKiBcInN0YXJ0cyBvbmUgd2VlayBiZWZvcmUgaXQgaXMgZHVlXCIuXG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSByZWZlcmVuY2VEYXRlOiBNb21lbnQgfCBudWxsO1xuXG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBycnVsZSxcbiAgICAgICAgYmFzZU9uVG9kYXksXG4gICAgICAgIHJlZmVyZW5jZURhdGUsXG4gICAgICAgIHN0YXJ0RGF0ZSxcbiAgICAgICAgc2NoZWR1bGVkRGF0ZSxcbiAgICAgICAgZHVlRGF0ZSxcbiAgICB9OiB7XG4gICAgICAgIHJydWxlOiBSUnVsZTtcbiAgICAgICAgYmFzZU9uVG9kYXk6IGJvb2xlYW47XG4gICAgICAgIHJlZmVyZW5jZURhdGU6IE1vbWVudCB8IG51bGw7XG4gICAgICAgIHN0YXJ0RGF0ZTogTW9tZW50IHwgbnVsbDtcbiAgICAgICAgc2NoZWR1bGVkRGF0ZTogTW9tZW50IHwgbnVsbDtcbiAgICAgICAgZHVlRGF0ZTogTW9tZW50IHwgbnVsbDtcbiAgICB9KSB7XG4gICAgICAgIHRoaXMucnJ1bGUgPSBycnVsZTtcbiAgICAgICAgdGhpcy5iYXNlT25Ub2RheSA9IGJhc2VPblRvZGF5O1xuICAgICAgICB0aGlzLnJlZmVyZW5jZURhdGUgPSByZWZlcmVuY2VEYXRlO1xuICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IHN0YXJ0RGF0ZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZWREYXRlID0gc2NoZWR1bGVkRGF0ZTtcbiAgICAgICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGZyb21UZXh0KHtcbiAgICAgICAgcmVjdXJyZW5jZVJ1bGVUZXh0LFxuICAgICAgICBzdGFydERhdGUsXG4gICAgICAgIHNjaGVkdWxlZERhdGUsXG4gICAgICAgIGR1ZURhdGUsXG4gICAgfToge1xuICAgICAgICByZWN1cnJlbmNlUnVsZVRleHQ6IHN0cmluZztcbiAgICAgICAgc3RhcnREYXRlOiBNb21lbnQgfCBudWxsO1xuICAgICAgICBzY2hlZHVsZWREYXRlOiBNb21lbnQgfCBudWxsO1xuICAgICAgICBkdWVEYXRlOiBNb21lbnQgfCBudWxsO1xuICAgIH0pOiBSZWN1cnJlbmNlIHwgbnVsbCB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IHJlY3VycmVuY2VSdWxlVGV4dC5tYXRjaCgvXihbYS16QS1aMC05LCAhXSs/KSggd2hlbiBkb25lKT8kL2kpO1xuICAgICAgICAgICAgaWYgKG1hdGNoID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaXNvbGF0ZWRSdWxlVGV4dCA9IG1hdGNoWzFdLnRyaW0oKTtcbiAgICAgICAgICAgIGNvbnN0IGJhc2VPblRvZGF5ID0gbWF0Y2hbMl0gIT09IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IFJSdWxlLnBhcnNlVGV4dChpc29sYXRlZFJ1bGVUZXh0KTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gUGljayB0aGUgcmVmZXJlbmNlIGRhdGUgZm9yIHJlY3VycmVuY2UgYmFzZWQgb24gaW1wb3J0YW5jZS5cbiAgICAgICAgICAgICAgICAvLyBBc3N1bWluZyBkdWUgZGF0ZSBoYXMgdGhlIGhpZ2hlc3QgcHJpb3JpdHkuXG4gICAgICAgICAgICAgICAgbGV0IHJlZmVyZW5jZURhdGU6IE1vbWVudCB8IG51bGwgPSBudWxsO1xuICAgICAgICAgICAgICAgIC8vIENsb25lIHRoZSBtb21lbnQgb2JqZWN0cy5cbiAgICAgICAgICAgICAgICBpZiAoZHVlRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2VEYXRlID0gd2luZG93Lm1vbWVudChkdWVEYXRlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNjaGVkdWxlZERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlRGF0ZSA9IHdpbmRvdy5tb21lbnQoc2NoZWR1bGVkRGF0ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFydERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlRGF0ZSA9IHdpbmRvdy5tb21lbnQoc3RhcnREYXRlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWJhc2VPblRvZGF5ICYmIHJlZmVyZW5jZURhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5kdHN0YXJ0ID0gd2luZG93Lm1vbWVudChyZWZlcmVuY2VEYXRlKS5zdGFydE9mKCdkYXknKS51dGModHJ1ZSkudG9EYXRlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5kdHN0YXJ0ID0gd2luZG93Lm1vbWVudCgpLnN0YXJ0T2YoJ2RheScpLnV0Yyh0cnVlKS50b0RhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBycnVsZSA9IG5ldyBSUnVsZShvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlY3VycmVuY2Uoe1xuICAgICAgICAgICAgICAgICAgICBycnVsZSxcbiAgICAgICAgICAgICAgICAgICAgYmFzZU9uVG9kYXksXG4gICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZURhdGUsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVkRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgZHVlRGF0ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIENvdWxkIG5vdCByZWFkIHJlY3VycmVuY2UgcnVsZS4gVXNlciBwb3NzaWJseSBub3QgZG9uZSB0eXBpbmcuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9UZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIGxldCB0ZXh0ID0gdGhpcy5ycnVsZS50b1RleHQoKTtcbiAgICAgICAgaWYgKHRoaXMuYmFzZU9uVG9kYXkpIHtcbiAgICAgICAgICAgIHRleHQgKz0gJyB3aGVuIGRvbmUnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZGF0ZXMgb2YgdGhlIG5leHQgb2NjdXJyZW5jZSBvciBudWxsIGlmIHRoZXJlIGlzIG5vIG5leHQgb2NjdXJyZW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgbmV4dCgpOiB7XG4gICAgICAgIHN0YXJ0RGF0ZTogTW9tZW50IHwgbnVsbDtcbiAgICAgICAgc2NoZWR1bGVkRGF0ZTogTW9tZW50IHwgbnVsbDtcbiAgICAgICAgZHVlRGF0ZTogTW9tZW50IHwgbnVsbDtcbiAgICB9IHwgbnVsbCB7XG4gICAgICAgIGxldCBuZXh0OiBEYXRlO1xuICAgICAgICBpZiAodGhpcy5iYXNlT25Ub2RheSkge1xuICAgICAgICAgICAgLy8gVGhlIG5leHQgb2NjdXJyZW5jZSBzaG91bGQgaGFwcGVuIGJhc2VkIG9mZiB0aGUgY3VycmVudCBkYXRlLlxuICAgICAgICAgICAgY29uc3QgdG9kYXkgPSB3aW5kb3cubW9tZW50KCk7XG4gICAgICAgICAgICBjb25zdCBydWxlQmFzZWRPblRvZGF5ID0gbmV3IFJSdWxlKHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLnJydWxlLm9yaWdPcHRpb25zLFxuICAgICAgICAgICAgICAgIGR0c3RhcnQ6IHRvZGF5LnN0YXJ0T2YoJ2RheScpLnV0Yyh0cnVlKS50b0RhdGUoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbmV4dCA9IHRoaXMubmV4dEFmdGVyKHRvZGF5LmVuZE9mKCdkYXknKSwgcnVsZUJhc2VkT25Ub2RheSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGUgbmV4dCBvY2N1cnJlbmNlIHNob3VsZCBoYXBwZW4gYmFzZWQgb24gdGhlIG9yaWdpbmFsIHJlZmVyZW5jZVxuICAgICAgICAgICAgLy8gZGF0ZSBpZiBwb3NzaWJsZS4gT3RoZXJ3aXNlLCBiYXNlIGl0IG9uIHRvZGF5IGlmIHdlIGRvIG5vdCBoYXZlIGFcbiAgICAgICAgICAgIC8vIHJlZmVyZW5jZSBkYXRlLlxuICAgICAgICAgICAgY29uc3QgYWZ0ZXIgPSB3aW5kb3dcbiAgICAgICAgICAgICAgICAvLyBSZWZlcmVuY2UgZGF0ZSBjYW4gYmUgYHVuZGVmaW5lZGAgdG8gbWVhbiBcInRvZGF5XCIuXG4gICAgICAgICAgICAgICAgLy8gTW9tZW50IG9ubHkgYWNjZXB0cyBgdW5kZWZpbmVkYCwgbm90IGBudWxsYC5cbiAgICAgICAgICAgICAgICAubW9tZW50KHRoaXMucmVmZXJlbmNlRGF0ZSA/PyB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgLmVuZE9mKCdkYXknKTtcblxuICAgICAgICAgICAgbmV4dCA9IHRoaXMubmV4dEFmdGVyKGFmdGVyLCB0aGlzLnJydWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBLZWVwIHRoZSByZWxhdGl2ZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBkYXRlIGFuZFxuICAgICAgICAgICAgLy8gc3RhcnQvc2NoZWR1bGVkL2R1ZS5cbiAgICAgICAgICAgIGxldCBzdGFydERhdGU6IE1vbWVudCB8IG51bGwgPSBudWxsO1xuICAgICAgICAgICAgbGV0IHNjaGVkdWxlZERhdGU6IE1vbWVudCB8IG51bGwgPSBudWxsO1xuICAgICAgICAgICAgbGV0IGR1ZURhdGU6IE1vbWVudCB8IG51bGwgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBPbmx5IGlmIGEgcmVmZXJlbmNlIGRhdGUgaXMgZ2l2ZW4uIEEgcmVmZXJlbmNlIGRhdGUgd2lsbCBleGlzdCBpZiBhdFxuICAgICAgICAgICAgLy8gbGVhc3Qgb25lIG9mIHRoZSBvdGhlciBkYXRlcyBpcyBzZXQuXG4gICAgICAgICAgICBpZiAodGhpcy5yZWZlcmVuY2VEYXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnREYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsRGlmZmVyZW5jZSA9IHdpbmRvdy5tb21lbnQuZHVyYXRpb24odGhpcy5zdGFydERhdGUuZGlmZih0aGlzLnJlZmVyZW5jZURhdGUpKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDbG9uaW5nIHNvIHRoYXQgb3JpZ2luYWwgd29uJ3QgYmUgbWFuaXB1bGF0ZWQ6XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IHdpbmRvdy5tb21lbnQobmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJvdW5kaW5nIGRheXMgdG8gaGFuZGxlIGNyb3NzIGRheWxpZ2h0LXNhdmluZ3MtdGltZSByZWN1cnJlbmNlcy5cbiAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlLmFkZChNYXRoLnJvdW5kKG9yaWdpbmFsRGlmZmVyZW5jZS5hc0RheXMoKSksICdkYXlzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjaGVkdWxlZERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxEaWZmZXJlbmNlID0gd2luZG93Lm1vbWVudC5kdXJhdGlvbih0aGlzLnNjaGVkdWxlZERhdGUuZGlmZih0aGlzLnJlZmVyZW5jZURhdGUpKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDbG9uaW5nIHNvIHRoYXQgb3JpZ2luYWwgd29uJ3QgYmUgbWFuaXB1bGF0ZWQ6XG4gICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlZERhdGUgPSB3aW5kb3cubW9tZW50KG5leHQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBSb3VuZGluZyBkYXlzIHRvIGhhbmRsZSBjcm9zcyBkYXlsaWdodC1zYXZpbmdzLXRpbWUgcmVjdXJyZW5jZXMuXG4gICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlZERhdGUuYWRkKE1hdGgucm91bmQob3JpZ2luYWxEaWZmZXJlbmNlLmFzRGF5cygpKSwgJ2RheXMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZHVlRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbERpZmZlcmVuY2UgPSB3aW5kb3cubW9tZW50LmR1cmF0aW9uKHRoaXMuZHVlRGF0ZS5kaWZmKHRoaXMucmVmZXJlbmNlRGF0ZSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENsb25pbmcgc28gdGhhdCBvcmlnaW5hbCB3b24ndCBiZSBtYW5pcHVsYXRlZDpcbiAgICAgICAgICAgICAgICAgICAgZHVlRGF0ZSA9IHdpbmRvdy5tb21lbnQobmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJvdW5kaW5nIGRheXMgdG8gaGFuZGxlIGNyb3NzIGRheWxpZ2h0LXNhdmluZ3MtdGltZSByZWN1cnJlbmNlcy5cbiAgICAgICAgICAgICAgICAgICAgZHVlRGF0ZS5hZGQoTWF0aC5yb3VuZChvcmlnaW5hbERpZmZlcmVuY2UuYXNEYXlzKCkpLCAnZGF5cycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdGFydERhdGUsXG4gICAgICAgICAgICAgICAgc2NoZWR1bGVkRGF0ZSxcbiAgICAgICAgICAgICAgICBkdWVEYXRlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBpZGVudGljYWxUbyhvdGhlcjogUmVjdXJyZW5jZSkge1xuICAgICAgICBpZiAodGhpcy5iYXNlT25Ub2RheSAhPT0gb3RoZXIuYmFzZU9uVG9kYXkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbXBhcmUgRGF0ZSBmaWVsZHNcbiAgICAgICAgaWYgKFNvcnQuY29tcGFyZUJ5RGF0ZSh0aGlzLnN0YXJ0RGF0ZSwgb3RoZXIuc3RhcnREYXRlKSAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChTb3J0LmNvbXBhcmVCeURhdGUodGhpcy5zY2hlZHVsZWREYXRlLCBvdGhlci5zY2hlZHVsZWREYXRlKSAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChTb3J0LmNvbXBhcmVCeURhdGUodGhpcy5kdWVEYXRlLCBvdGhlci5kdWVEYXRlKSAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudG9UZXh0KCkgPT09IG90aGVyLnRvVGV4dCgpOyAvLyB0aGlzIGFsc28gY2hlY2tzIGJhc2VPblRvZGF5XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbmV4dEFmdGVyIHJldHVybnMgdGhlIG5leHQgb2NjdXJyZW5jZSdzIGRhdGUgYWZ0ZXIgYGFmdGVyYCwgYmFzZWQgb24gdGhlIGdpdmVuIHJydWxlLlxuICAgICAqXG4gICAgICogVGhlIGNvbW1vbiBjYXNlIGlzIHRoYXQgYHJydWxlLmFmdGVyYCBjYWxjdWxhdGVzIHRoZSBuZXh0IGRhdGUgYW5kIGl0XG4gICAgICogY2FuIGJlIHVzZWQgYXMgaXMuXG4gICAgICpcbiAgICAgKiBJbiB0aGUgc3BlY2lhbCBjYXNlcyBvZiBtb250aGx5IGFuZCB5ZWFybHkgcmVjdXJyZW5jZXMsIHRoZXJlIGV4aXN0cyBhblxuICAgICAqIGVkZ2UgY2FzZSB3aGVyZSBhbiBvY2N1cnJlbmNlIGFmdGVyIHRoZSBnaXZlbiBudW1iZXIgb2YgbW9udGhzIG9yIHllYXJzXG4gICAgICogaXMgbm90IHBvc3NpYmxlLiBGb3IgZXhhbXBsZTogQSB0YXNrIGlzIGR1ZSBvbiAyMDIyLTAxLTMxIGFuZCBoYXMgYVxuICAgICAqIHJlY3VycmVuY2Ugb2YgYGV2ZXJ5IG1vbnRoYC4gV2hlbiBtYXJraW5nIHRoZSB0YXNrIGFzIGRvbmUsIHRoZSBuZXh0XG4gICAgICogb2NjdXJyZW5jZSB3aWxsIGhhcHBlbiBvbiAyMDIyLTAzLTMxLiBUaGUgcmVhc29uIGJlaW5nIHRoYXQgRmVicnVhcnlcbiAgICAgKiBkb2VzIG5vdCBoYXZlIDMxIGRheXMsIHlldCBSUnVsZSBzZXRzIGBieW1vbnRoZGF5YCB0byBgMzFgIGZvciBsYWNrIG9mXG4gICAgICogaGF2aW5nIGEgYmV0dGVyIGFsdGVybmF0aXZlLlxuICAgICAqXG4gICAgICogSW4gb3JkZXIgdG8gZml4IHRoaXMsIGBhZnRlcmAgd2lsbCBtb3ZlIGludG8gdGhlIHBhc3QgZGF5IGJ5IGRheS4gRWFjaFxuICAgICAqIGRheSwgdGhlIG5leHQgb2NjdXJyZW5jZSBpcyBjaGVja2VkIHRvIGJlIGFmdGVyIHRoZSBnaXZlbiBudW1iZXIgb2ZcbiAgICAgKiBtb250aHMgb3IgeWVhcnMuIEJ5IG1vdmluZyBgYWZ0ZXJgIGludG8gdGhlIHBhc3QgZGF5IGJ5IGRheSwgaXQgd2lsbFxuICAgICAqIGV2ZW50dWFsbHkgY2FsY3VsYXRlIHRoZSBuZXh0IG9jY3VycmVuY2UgYmFzZWQgb24gYDIwMjItMDEtMjhgLCBlbmRpbmcgdXBcbiAgICAgKiBpbiBGZWJydWFyeSBhcyB0aGUgdXNlciB3b3VsZCBleHBlY3QuXG4gICAgICovXG4gICAgcHJpdmF0ZSBuZXh0QWZ0ZXIoYWZ0ZXI6IE1vbWVudCwgcnJ1bGU6IFJSdWxlKTogRGF0ZSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gcmVtb3ZlIHRoZSB0aW1lem9uZSwgYXMgcnJ1bGUgZG9lcyBub3QgcmVnYXJkIHRpbWV6b25lcyBhbmQgYWx3YXlzXG4gICAgICAgIC8vIGNhbGN1bGF0ZXMgaW4gVVRDLlxuICAgICAgICAvLyBUaGUgdGltZXpvbmUgaXMgYWRkZWQgYWdhaW4gYmVmb3JlIHJldHVybmluZyB0aGUgbmV4dCBkYXRlLlxuICAgICAgICBhZnRlci51dGModHJ1ZSk7XG4gICAgICAgIGxldCBuZXh0ID0gd2luZG93Lm1vbWVudChycnVsZS5hZnRlcihhZnRlci50b0RhdGUoKSkpO1xuXG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSBtb250aGx5IHJlY3VycmVuY2UsIHRyZWF0IGl0IHNwZWNpYWwuXG4gICAgICAgIGNvbnN0IGFzVGV4dCA9IHRoaXMudG9UZXh0KCk7XG4gICAgICAgIGNvbnN0IG1vbnRoTWF0Y2ggPSBhc1RleHQubWF0Y2goL2V2ZXJ5KCBcXGQrKT8gbW9udGgocyk/KC4qKT8vKTtcbiAgICAgICAgaWYgKG1vbnRoTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIC4uLiB1bmxlc3MgdGhlIHJ1bGUgZml4ZXMgdGhlIGRhdGUsIHN1Y2ggYXMgJ2V2ZXJ5IG1vbnRoIG9uIHRoZSAzMXN0J1xuICAgICAgICAgICAgaWYgKCFhc1RleHQuaW5jbHVkZXMoJyBvbiAnKSkge1xuICAgICAgICAgICAgICAgIG5leHQgPSBSZWN1cnJlbmNlLm5leHRBZnRlck1vbnRocyhhZnRlciwgbmV4dCwgcnJ1bGUsIG1vbnRoTWF0Y2hbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHllYXJseSByZWN1cnJlbmNlLCB0cmVhdCBpdCBzcGVjaWFsLlxuICAgICAgICBjb25zdCB5ZWFyTWF0Y2ggPSBhc1RleHQubWF0Y2goL2V2ZXJ5KCBcXGQrKT8geWVhcihzKT8oLiopPy8pO1xuICAgICAgICBpZiAoeWVhck1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBuZXh0ID0gUmVjdXJyZW5jZS5uZXh0QWZ0ZXJZZWFycyhhZnRlciwgbmV4dCwgcnJ1bGUsIHllYXJNYXRjaFsxXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIZXJlIHdlIGFkZCB0aGUgdGltZXpvbmUgYWdhaW4gdGhhdCB3ZSByZW1vdmVkIGluIHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBtZXRob2QuXG4gICAgICAgIHJldHVybiBSZWN1cnJlbmNlLmFkZFRpbWV6b25lKG5leHQpLnRvRGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG5leHRBZnRlck1vbnRocyBjYWxjdWxhdGVzIHRoZSBuZXh0IGRhdGUgYWZ0ZXIgYHNraXBwaW5nTW9udGhzYCBtb250aHMuXG4gICAgICpcbiAgICAgKiBgc2tpcHBpbmdNb250aHNgIGRlZmF1bHRzIHRvIGAxYCBpZiB1bmRlZmluZWQuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgbmV4dEFmdGVyTW9udGhzKFxuICAgICAgICBhZnRlcjogTW9tZW50LFxuICAgICAgICBuZXh0OiBNb21lbnQsXG4gICAgICAgIHJydWxlOiBSUnVsZSxcbiAgICAgICAgc2tpcHBpbmdNb250aHM6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICApOiBNb21lbnQge1xuICAgICAgICAvLyBQYXJzZSBgc2tpcHBpbmdNb250aHNgLCBpZiBpdCBleGlzdHMuXG4gICAgICAgIGxldCBwYXJzZWRTa2lwcGluZ01vbnRoczogTnVtYmVyID0gMTtcbiAgICAgICAgaWYgKHNraXBwaW5nTW9udGhzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBhcnNlZFNraXBwaW5nTW9udGhzID0gTnVtYmVyLnBhcnNlSW50KHNraXBwaW5nTW9udGhzLnRyaW0oKSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2hpbGUgd2Ugc2tpcCB0aGUgd3JvbmcgbnVtYmVyIG9mIG1vbnRocywgbW92ZSBgYWZ0ZXJgIG9uZSBkYXkgaW50byB0aGUgcGFzdC5cbiAgICAgICAgd2hpbGUgKFJlY3VycmVuY2UuaXNTa2lwcGluZ1Rvb01hbnlNb250aHMoYWZ0ZXIsIG5leHQsIHBhcnNlZFNraXBwaW5nTW9udGhzKSkge1xuICAgICAgICAgICAgLy8gVGhlIG5leHQgbGluZSBhbHRlcnMgYGFmdGVyYCB0byBiZSBvbmUgZGF5IGVhcmxpZXIuXG4gICAgICAgICAgICAvLyBUaGVuIHJldHVybnMgYG5leHRgIGJhc2VkIG9uIHRoYXQuXG4gICAgICAgICAgICBuZXh0ID0gUmVjdXJyZW5jZS5mcm9tT25lRGF5RWFybGllcihhZnRlciwgcnJ1bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaXNTa2lwcGluZ1Rvb01hbnlNb250aHMgcmV0dXJucyB0cnVlIGlmIGBuZXh0YCBpcyBtb3JlIHRoYW4gYHNraXBwaW5nTW9udGhzYCBtb250aHMgYWZ0ZXIgYGFmdGVyYC5cbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBpc1NraXBwaW5nVG9vTWFueU1vbnRocyhhZnRlcjogTW9tZW50LCBuZXh0OiBNb21lbnQsIHNraXBwaW5nTW9udGhzOiBOdW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGRpZmZNb250aHMgPSBuZXh0Lm1vbnRoKCkgLSBhZnRlci5tb250aCgpO1xuXG4gICAgICAgIC8vIE1heWJlIHNvbWUgeWVhcnMgaGF2ZSBwYXNzZWQ/XG4gICAgICAgIGNvbnN0IGRpZmZZZWFycyA9IG5leHQueWVhcigpIC0gYWZ0ZXIueWVhcigpO1xuICAgICAgICBkaWZmTW9udGhzICs9IGRpZmZZZWFycyAqIDEyO1xuXG4gICAgICAgIHJldHVybiBkaWZmTW9udGhzID4gc2tpcHBpbmdNb250aHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbmV4dEFmdGVyWWVhcnMgY2FsY3VsYXRlcyB0aGUgbmV4dCBkYXRlIGFmdGVyIGBza2lwcGluZ1llYXJzYCB5ZWFycy5cbiAgICAgKlxuICAgICAqIGBza2lwcGluZ1llYXJzYCBkZWZhdWx0cyB0byBgMWAgaWYgdW5kZWZpbmVkLlxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIG5leHRBZnRlclllYXJzKFxuICAgICAgICBhZnRlcjogTW9tZW50LFxuICAgICAgICBuZXh0OiBNb21lbnQsXG4gICAgICAgIHJydWxlOiBSUnVsZSxcbiAgICAgICAgc2tpcHBpbmdZZWFyczogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgICk6IE1vbWVudCB7XG4gICAgICAgIC8vIFBhcnNlIGBza2lwcGluZ1llYXJzYCwgaWYgaXQgZXhpc3RzLlxuICAgICAgICBsZXQgcGFyc2VkU2tpcHBpbmdZZWFyczogTnVtYmVyID0gMTtcbiAgICAgICAgaWYgKHNraXBwaW5nWWVhcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFyc2VkU2tpcHBpbmdZZWFycyA9IE51bWJlci5wYXJzZUludChza2lwcGluZ1llYXJzLnRyaW0oKSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2hpbGUgd2Ugc2tpcCB0aGUgd3JvbmcgbnVtYmVyIG9mIHllYXJzLCBtb3ZlIGBhZnRlcmAgb25lIGRheSBpbnRvIHRoZSBwYXN0LlxuICAgICAgICB3aGlsZSAoUmVjdXJyZW5jZS5pc1NraXBwaW5nVG9vTWFueVllYXJzKGFmdGVyLCBuZXh0LCBwYXJzZWRTa2lwcGluZ1llYXJzKSkge1xuICAgICAgICAgICAgLy8gVGhlIG5leHQgbGluZSBhbHRlcnMgYGFmdGVyYCB0byBiZSBvbmUgZGF5IGVhcmxpZXIuXG4gICAgICAgICAgICAvLyBUaGVuIHJldHVybnMgYG5leHRgIGJhc2VkIG9uIHRoYXQuXG4gICAgICAgICAgICBuZXh0ID0gUmVjdXJyZW5jZS5mcm9tT25lRGF5RWFybGllcihhZnRlciwgcnJ1bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaXNTa2lwcGluZ1Rvb01hbnlZZWFycyByZXR1cm5zIHRydWUgaWYgYG5leHRgIGlzIG1vcmUgdGhhbiBgc2tpcHBpbmdZZWFyc2AgeWVhcnMgYWZ0ZXIgYGFmdGVyYC5cbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBpc1NraXBwaW5nVG9vTWFueVllYXJzKGFmdGVyOiBNb21lbnQsIG5leHQ6IE1vbWVudCwgc2tpcHBpbmdZZWFyczogTnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGRpZmYgPSBuZXh0LnllYXIoKSAtIGFmdGVyLnllYXIoKTtcblxuICAgICAgICByZXR1cm4gZGlmZiA+IHNraXBwaW5nWWVhcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZnJvbU9uZURheUVhcmxpZXIgcmV0dXJucyB0aGUgbmV4dCBvY2N1cnJlbmNlIGFmdGVyIG1vdmluZyBgYWZ0ZXJgIG9uZSBkYXkgaW50byB0aGUgcGFzdC5cbiAgICAgKlxuICAgICAqIFdBUk5JTkc6IFRoaXMgbWV0aG9kIG1hbmlwdWxhdGVzIHRoZSBnaXZlbiBpbnN0YW5jZSBvZiBgYWZ0ZXJgLlxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIGZyb21PbmVEYXlFYXJsaWVyKGFmdGVyOiBNb21lbnQsIHJydWxlOiBSUnVsZSk6IE1vbWVudCB7XG4gICAgICAgIGFmdGVyLnN1YnRyYWN0KDEsICdkYXlzJykuZW5kT2YoJ2RheScpO1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBycnVsZS5vcmlnT3B0aW9ucztcbiAgICAgICAgb3B0aW9ucy5kdHN0YXJ0ID0gYWZ0ZXIuc3RhcnRPZignZGF5JykudG9EYXRlKCk7XG4gICAgICAgIHJydWxlID0gbmV3IFJSdWxlKG9wdGlvbnMpO1xuXG4gICAgICAgIGNvbnN0IG5leHQgPSB3aW5kb3cubW9tZW50KHJydWxlLmFmdGVyKGFmdGVyLnRvRGF0ZSgpKSk7XG5cbiAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgYWRkVGltZXpvbmUoZGF0ZTogTW9tZW50KTogTW9tZW50IHtcbiAgICAgICAgY29uc3QgbG9jYWxUaW1lWm9uZSA9IHdpbmRvdy5tb21lbnQudXRjKGRhdGUpLmxvY2FsKHRydWUpO1xuXG4gICAgICAgIHJldHVybiBsb2NhbFRpbWVab25lLnN0YXJ0T2YoJ2RheScpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7IFRhc2sgfSBmcm9tICcuL1Rhc2snO1xuXG5leHBvcnQgY2xhc3MgVXJnZW5jeSB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgZHVlQ29lZmZpY2llbnQgPSAxMi4wO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IHNjaGVkdWxlZENvZWZmaWNpZW50ID0gNS4wO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IHN0YXJ0ZWRDb2VmZmljaWVudCA9IC0zLjA7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgcHJpb3JpdHlDb2VmZmljaWVudCA9IDYuMDtcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IG1pbGxpU2Vjb25kc1BlckRheSA9IDEwMDAgKiA2MCAqIDYwICogMjQ7XG5cbiAgICBwdWJsaWMgc3RhdGljIGNhbGN1bGF0ZSh0YXNrOiBUYXNrKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IHVyZ2VuY3kgPSAwLjA7XG5cbiAgICAgICAgaWYgKHRhc2suZHVlRGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gTWFwIGEgcmFuZ2Ugb2YgMjEgZGF5cyB0byB0aGUgdmFsdWUgMC4yIC0gMS4wXG4gICAgICAgICAgICBjb25zdCBkYXlzT3ZlcmR1ZSA9IE1hdGgucm91bmQod2luZG93Lm1vbWVudCgpLmRpZmYodGFzay5kdWVEYXRlKSAvIFVyZ2VuY3kubWlsbGlTZWNvbmRzUGVyRGF5KTtcblxuICAgICAgICAgICAgbGV0IGR1ZU11bHRpcGxpZXI6IG51bWJlcjtcbiAgICAgICAgICAgIGlmIChkYXlzT3ZlcmR1ZSA+PSA3LjApIHtcbiAgICAgICAgICAgICAgICBkdWVNdWx0aXBsaWVyID0gMS4wOyAvLyA8IDEgd2sgYWdvXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRheXNPdmVyZHVlID49IC0xNC4wKSB7XG4gICAgICAgICAgICAgICAgLy8gRHVlIGJldHdlZW4gNyBkYXlzICgrNykgYWdvIGFuZCBpbiAxNCBkYXlzICgtMTQpXG4gICAgICAgICAgICAgICAgZHVlTXVsdGlwbGllciA9ICgoZGF5c092ZXJkdWUgKyAxNC4wKSAqIDAuOCkgLyAyMS4wICsgMC4yO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkdWVNdWx0aXBsaWVyID0gMC4yOyAvLyA+IDIgd2tzXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVyZ2VuY3kgKz0gZHVlTXVsdGlwbGllciAqIFVyZ2VuY3kuZHVlQ29lZmZpY2llbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFzay5zY2hlZHVsZWREYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAod2luZG93Lm1vbWVudCgpLmlzU2FtZU9yQWZ0ZXIodGFzay5zY2hlZHVsZWREYXRlKSkge1xuICAgICAgICAgICAgICAgIHVyZ2VuY3kgKz0gMSAqIFVyZ2VuY3kuc2NoZWR1bGVkQ29lZmZpY2llbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFzay5zdGFydERhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cubW9tZW50KCkuaXNCZWZvcmUodGFzay5zdGFydERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdXJnZW5jeSArPSAxICogVXJnZW5jeS5zdGFydGVkQ29lZmZpY2llbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHRhc2sucHJpb3JpdHkpIHtcbiAgICAgICAgICAgIC8vIEhpZ2hcbiAgICAgICAgICAgIGNhc2UgJzEnOlxuICAgICAgICAgICAgICAgIHVyZ2VuY3kgKz0gMS4wICogVXJnZW5jeS5wcmlvcml0eUNvZWZmaWNpZW50O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy8gTWVkaXVtXG4gICAgICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgICAgICB1cmdlbmN5ICs9IDAuNjUgKiBVcmdlbmN5LnByaW9yaXR5Q29lZmZpY2llbnQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBOb25lXG4gICAgICAgICAgICBjYXNlICczJzpcbiAgICAgICAgICAgICAgICB1cmdlbmN5ICs9IDAuMzI1ICogVXJnZW5jeS5wcmlvcml0eUNvZWZmaWNpZW50O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVyZ2VuY3k7XG4gICAgfVxufVxuIiwgImltcG9ydCB0eXBlIHsgTW9tZW50IH0gZnJvbSAnbW9tZW50L21vbWVudCc7XG5pbXBvcnQgeyBnZXRTZXR0aW5ncyB9IGZyb20gJy4vQ29uZmlnL1NldHRpbmdzJztcbmltcG9ydCB7IFRhc2sgfSBmcm9tICcuL1Rhc2snO1xuXG4vKipcbiAqIEltcGxlbWVudCBkYXRlIGZyb20gcGF0aCBkZXRlY3Rpb25cbiAqL1xuZXhwb3J0IGNsYXNzIERhdGVGYWxsYmFjayB7XG4gICAgLyoqXG4gICAgICogQXR0ZW1wdCB0byBwYXJzZSB0aGUgZmlsZW5hbWUgdG8gZXh0cmFjdCBhIGRhdGUgdGFraW5nIHVzZXIgc2V0dGluZ3MgaW50byBhY2NvdW50LiBJZiBkYXRlIGluZmVyZW5jZSBpcyBub3RcbiAgICAgKiBlbmFibGVkIHBhcnNpbmcgaXMgYnlwYXNzZWQgYW5kIG51bGwgaXMgcmV0dXJuZWQuXG4gICAgICogQHBhcmFtIHBhdGggdGhlIGZ1bGwgcGF0aCBvZiB0aGUgZmlsZVxuICAgICAqIEByZXR1cm4gYSBNb21lbnQgb3IgbnVsbCBpZiBubyBkYXRlIHdhcyBmb3VuZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb21QYXRoKHBhdGg6IHN0cmluZyk6IE1vbWVudCB8IG51bGwge1xuICAgICAgICBjb25zdCB7IHVzZUZpbGVuYW1lQXNTY2hlZHVsZWREYXRlLCBmaWxlbmFtZUFzRGF0ZUZvbGRlcnMgfSA9IGdldFNldHRpbmdzKCk7XG5cbiAgICAgICAgaWYgKCF1c2VGaWxlbmFtZUFzU2NoZWR1bGVkRGF0ZSkge1xuICAgICAgICAgICAgLy8gZmVhdHVyZSBpcyBkaXNhYmxlZFxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMubWF0Y2hlc0FueUZvbGRlcihmaWxlbmFtZUFzRGF0ZUZvbGRlcnMsIHBhdGgpKSB7XG4gICAgICAgICAgICAvLyBmaWxlIGlzIG5vdCBpbiBhbnkgZm9sZGVyIG9yIHN1YmZvbGRlciB0aGF0IHdhcyBzZWxlY3RlZCBmb3IgZGF0ZSBpbmZlcmVuY2VcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFjdERhdGVGcm9tUGF0aChwYXRoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBtYXRjaGVzQW55Rm9sZGVyKGZvbGRlcnM6IHN0cmluZ1tdLCBwYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGZvbGRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBubyBjb25zdHJhaW50cyBvbiBtYXRjaGluZyBmb2xkZXJzXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZvbGRlcnMgbmV2ZXIgZW5kIHdpdGggYSAnLycsIGFuZCBwYXRocyBjb250YWluIGF0IGxlYXN0IG9uIHNsYXNoIChzZXBhcmF0aW5nIHRoZSBmb2xkZXIgZnJvbSB0aGVcbiAgICAgICAgLy8gZmlsZW5hbWUpXG4gICAgICAgIHJldHVybiBmb2xkZXJzLnNvbWUoKGZvbGRlcikgPT4gcGF0aC5zdGFydHNXaXRoKGZvbGRlciArICcvJykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGV4dHJhY3REYXRlRnJvbVBhdGgocGF0aDogc3RyaW5nKTogTW9tZW50IHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IGZpcnN0UG9zID0gTWF0aC5tYXgoMCwgcGF0aC5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgICAgIGNvbnN0IGxhc3RQb3MgPSBwYXRoLmxhc3RJbmRleE9mKCcuJyk7XG5cbiAgICAgICAgY29uc3QgYmFzZW5hbWUgPSBwYXRoLnN1YnN0cmluZyhmaXJzdFBvcywgbGFzdFBvcyk7XG5cbiAgICAgICAgbGV0IGRhdGVNYXRjaCA9IC8oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KS8uZXhlYyhiYXNlbmFtZSk7XG4gICAgICAgIGlmICghZGF0ZU1hdGNoKSBkYXRlTWF0Y2ggPSAvKFxcZHs0fSkoXFxkezJ9KShcXGR7Mn0pLy5leGVjKGJhc2VuYW1lKTtcblxuICAgICAgICBpZiAoZGF0ZU1hdGNoKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gd2luZG93Lm1vbWVudChbcGFyc2VJbnQoZGF0ZU1hdGNoWzFdKSwgcGFyc2VJbnQoZGF0ZU1hdGNoWzJdKSAtIDEsIHBhcnNlSW50KGRhdGVNYXRjaFszXSldKTtcbiAgICAgICAgICAgIGlmIChkYXRlLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRydWUgaWZmIGEgZmFsbGJhY2sgY2FuIGJlIHNldFxuICAgICAqKi9cbiAgICBwdWJsaWMgc3RhdGljIGNhbkFwcGx5RmFsbGJhY2soe1xuICAgICAgICBzdGFydERhdGUsXG4gICAgICAgIHNjaGVkdWxlZERhdGUsXG4gICAgICAgIGR1ZURhdGUsXG4gICAgfToge1xuICAgICAgICBzdGFydERhdGU6IE1vbWVudCB8IG51bGw7XG4gICAgICAgIHNjaGVkdWxlZERhdGU6IE1vbWVudCB8IG51bGw7XG4gICAgICAgIGR1ZURhdGU6IE1vbWVudCB8IG51bGw7XG4gICAgfSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gc3RhcnREYXRlID09PSBudWxsICYmIGR1ZURhdGUgPT09IG51bGwgJiYgc2NoZWR1bGVkRGF0ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnQgdGhlIGxvZ2ljIHRvIHVwZGF0ZSB0aGUgZmllbGRzIHJlbGF0ZWQgdG8gZGF0ZSBmYWxsYmFjayBvZiBhIHRhc2sgd2hlbiBpdHMgZmlsZSBoYXMgbW92ZWRcbiAgICAgKiBAcGFyYW0gdGFzayAgICAgICAgIC0gdGFzayB0byB1cGRhdGVcbiAgICAgKiBAcGFyYW0gbmV3UGF0aCAgICAgIC0gbmV3IGxvY2F0aW9uXG4gICAgICogQHBhcmFtIGZhbGxiYWNrRGF0ZSAtIGZhbGxiYWNrIGRhdGUgZnJvbSBuZXcgbG9jYXRpb24sIGZvciBlZmZpY2llbmN5LiBDYW4gYmUgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgdXBkYXRlVGFza1BhdGgodGFzazogVGFzaywgbmV3UGF0aDogc3RyaW5nLCBmYWxsYmFja0RhdGU6IE1vbWVudCB8IG51bGwpOiBUYXNrIHtcbiAgICAgICAgLy8gaW5pdGlhbGl6ZSB3aXRoIHZhbHVlcyBmcm9tIGJlZm9yZSB0aGUgcGF0aCB3YXMgY2hhbmdlZFxuICAgICAgICBsZXQgc2NoZWR1bGVkRGF0ZSA9IHRhc2suc2NoZWR1bGVkRGF0ZTtcbiAgICAgICAgbGV0IHNjaGVkdWxlZERhdGVJc0luZmVycmVkID0gdGFzay5zY2hlZHVsZWREYXRlSXNJbmZlcnJlZDtcblxuICAgICAgICBpZiAoZmFsbGJhY2tEYXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmV3IHBhdGggZG9lc24ndCBjb250YWluIGEgZGF0ZS4uLlxuXG4gICAgICAgICAgICBpZiAoc2NoZWR1bGVkRGF0ZUlzSW5mZXJyZWQpIHtcbiAgICAgICAgICAgICAgICAvLyAuLi5idXQgdGhlIHByZXZpb3VzIHBhdGggaGFkIG9uZSA6IHJlbW92ZSBpbmZlcnJlZCBkYXRlIGZyb20gVGFza1xuICAgICAgICAgICAgICAgIHNjaGVkdWxlZERhdGVJc0luZmVycmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVkRGF0ZSA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIC4uLmFuZCB0aGUgb2xkIHBhdGggZGlkbid0IGNvbnRhaW4gYW55IGVpdGhlciA6XG4gICAgICAgICAgICAgICAgLy8gZG8gbm90aGluZywgYW5kIGtlZXAgYW55IGV4cGxpY2l0bHkgc2V0IHNjaGVkdWxlZCBkYXRlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGUgbmV3IHBhdGggY29udGFpbnMgYSBkYXRlLi4uXG5cbiAgICAgICAgICAgIGlmIChzY2hlZHVsZWREYXRlSXNJbmZlcnJlZCkge1xuICAgICAgICAgICAgICAgIC8vIC4uLmFuZCB3ZSB1c2VkIHRoZSBmYWxsYmFjayBkYXRlIGZyb20gdGhlIHByZXZpb3VzIHBhdGggOlxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgc2NoZWR1bGVkIGRhdGUgZnJvbSB0aGUgbmV3IHBhdGhcbiAgICAgICAgICAgICAgICBzY2hlZHVsZWREYXRlID0gZmFsbGJhY2tEYXRlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNhbkFwcGx5RmFsbGJhY2sodGFzaykpIHtcbiAgICAgICAgICAgICAgICAvLyAuLi5hbmQgdGhlIHRhc2sgaXMgY2FuZGlkYXRlIHRvIGRhdGUgZmFsbGJhY2tcbiAgICAgICAgICAgICAgICAvLyBzZXN0IHRoZSBzY2hlZHVsZWQgZGF0ZSBmcm9tIHRoZSBuZXcgcGF0aFxuICAgICAgICAgICAgICAgIHNjaGVkdWxlZERhdGUgPSBmYWxsYmFja0RhdGU7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVkRGF0ZUlzSW5mZXJyZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBwcmVzZXJ2ZSBleGlzdGluZyBkYXRlcywgaW5jbHVkaW5nIGV4cGxpY2l0IHNjaGVkdWxlZERhdGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgVGFzayh7XG4gICAgICAgICAgICAuLi50YXNrLFxuICAgICAgICAgICAgcGF0aDogbmV3UGF0aCxcbiAgICAgICAgICAgIHNjaGVkdWxlZERhdGUsXG4gICAgICAgICAgICBzY2hlZHVsZWREYXRlSXNJbmZlcnJlZCxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIGFuIGFycmF5IG9mIHVwZGF0ZWQgdGFza3MgdG8gcmVtb3ZlIHRoZSBpbmZlcnJlZCBzY2hlZHVsZWQgZGF0ZSBzdGF0dXMgaWYgdGhlIHNjaGVkdWxlZCBkYXRlIGhhcyBiZWVuXG4gICAgICogbW9kaWZpZWQgYXMgY29tcGFyZWQgdG8gdGhlIG9yaWdpbmFsIGRhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlbW92ZUluZmVycmVkU3RhdHVzSWZOZWVkZWQob3JpZ2luYWxUYXNrOiBUYXNrLCB1cGRhdGVkVGFza3M6IFRhc2tbXSk6IFRhc2tbXSB7XG4gICAgICAgIGNvbnN0IGluZmVycmVkU2NoZWR1bGVkRGF0ZSA9IG9yaWdpbmFsVGFzay5zY2hlZHVsZWREYXRlSXNJbmZlcnJlZCA/IG9yaWdpbmFsVGFzay5zY2hlZHVsZWREYXRlIDogbnVsbDtcblxuICAgICAgICByZXR1cm4gdXBkYXRlZFRhc2tzLm1hcCgodGFzazogVGFzaykgPT4ge1xuICAgICAgICAgICAgaWYgKGluZmVycmVkU2NoZWR1bGVkRGF0ZSAhPT0gbnVsbCAmJiAhaW5mZXJyZWRTY2hlZHVsZWREYXRlLmlzU2FtZSh0YXNrLnNjaGVkdWxlZERhdGUsICdkYXknKSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIGEgZmFsbGJhY2sgZGF0ZSB3YXMgdXNlZCBiZWZvcmUgbW9kaWZpY2F0aW9uLCBhbmQgdGhlIHNjaGVkdWxlZCBkYXRlIHdhcyBtb2RpZmllZCwgd2UgaGF2ZSB0byBtYXJrXG4gICAgICAgICAgICAgICAgLy8gdGhlIHNjaGVkdWxlZCBkYXRlIGFzIG5vdCBpbmZlcnJlZCBhbnltb3JlLlxuICAgICAgICAgICAgICAgIHRhc2sgPSBuZXcgVGFzayh7IC4uLnRhc2ssIHNjaGVkdWxlZERhdGVJc0luZmVycmVkOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRhc2s7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsICIvKipcbiAqIExhenkgbG9hZGVkIHZhcmlhYmxlIDogZmV0Y2hpbmcgdGhlIHZhbHVlIGlzIHBvc3Rwb25lZCB1bnRpbCB0aGUgZmlyc3QgZ2V0KClcbiAqL1xuZXhwb3J0IGNsYXNzIExhenk8VD4ge1xuICAgIHByaXZhdGUgX3ZhbHVlOiBUIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgbGF6eSBvYmplY3RcbiAgICAgKiBAcGFyYW0gZmV0Y2ggYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGEgdmFsdWVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZldGNoOiAoKSA9PiBUKSB7fVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIGxhenkgdmFsdWUsIGNhbGxpbmcgdGhlIGZldGNoIGZ1bmN0aW9uIHRoZSBmaXJzdCB0aW1lLlxuICAgICAqL1xuICAgIGdldCB2YWx1ZSgpOiBUIHtcbiAgICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5mZXRjaCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBWaWV3IH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgVGFza01vZGFsIH0gZnJvbSAnLi4vVGFza01vZGFsJztcbmltcG9ydCB0eXBlIHsgVGFzayB9IGZyb20gJy4uL1Rhc2snO1xuaW1wb3J0IHsgRGF0ZUZhbGxiYWNrIH0gZnJvbSAnLi4vRGF0ZUZhbGxiYWNrJztcbmltcG9ydCB7IHRhc2tGcm9tTGluZSB9IGZyb20gJy4vQ3JlYXRlT3JFZGl0VGFza1BhcnNlcic7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVPckVkaXQgPSAoY2hlY2tpbmc6IGJvb2xlYW4sIGVkaXRvcjogRWRpdG9yLCB2aWV3OiBWaWV3LCBhcHA6IEFwcCkgPT4ge1xuICAgIGlmIChjaGVja2luZykge1xuICAgICAgICByZXR1cm4gdmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldztcbiAgICB9XG5cbiAgICBpZiAoISh2aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3KSkge1xuICAgICAgICAvLyBTaG91bGQgbmV2ZXIgaGFwcGVuIGR1ZSB0byBjaGVjayBhYm92ZS5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhdGggPSB2aWV3LmZpbGU/LnBhdGg7XG4gICAgaWYgKHBhdGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY3Vyc29yUG9zaXRpb24gPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG4gICAgY29uc3QgbGluZU51bWJlciA9IGN1cnNvclBvc2l0aW9uLmxpbmU7XG4gICAgY29uc3QgbGluZSA9IGVkaXRvci5nZXRMaW5lKGxpbmVOdW1iZXIpO1xuICAgIGNvbnN0IHRhc2sgPSB0YXNrRnJvbUxpbmUoeyBsaW5lLCBwYXRoIH0pO1xuXG4gICAgY29uc3Qgb25TdWJtaXQgPSAodXBkYXRlZFRhc2tzOiBUYXNrW10pOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IERhdGVGYWxsYmFjay5yZW1vdmVJbmZlcnJlZFN0YXR1c0lmTmVlZGVkKHRhc2ssIHVwZGF0ZWRUYXNrcylcbiAgICAgICAgICAgIC5tYXAoKHRhc2s6IFRhc2spID0+IHRhc2sudG9GaWxlTGluZVN0cmluZygpKVxuICAgICAgICAgICAgLmpvaW4oJ1xcbicpO1xuICAgICAgICBlZGl0b3Iuc2V0TGluZShsaW5lTnVtYmVyLCBzZXJpYWxpemVkKTtcbiAgICB9O1xuXG4gICAgLy8gTmVlZCB0byBjcmVhdGUgYSBuZXcgaW5zdGFuY2UgZXZlcnkgdGltZSwgYXMgY3Vyc29yL3Rhc2sgY2FuIGNoYW5nZS5cbiAgICBjb25zdCB0YXNrTW9kYWwgPSBuZXcgVGFza01vZGFsKHtcbiAgICAgICAgYXBwLFxuICAgICAgICB0YXNrLFxuICAgICAgICBvblN1Ym1pdCxcbiAgICB9KTtcbiAgICB0YXNrTW9kYWwub3BlbigpO1xufTtcbiIsICJpbXBvcnQgeyBBcHAsIE1vZGFsIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IEVkaXRUYXNrIGZyb20gJy4vdWkvRWRpdFRhc2suc3ZlbHRlJztcbmltcG9ydCB0eXBlIHsgVGFzayB9IGZyb20gJy4vVGFzayc7XG5cbmV4cG9ydCBjbGFzcyBUYXNrTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgcHVibGljIHJlYWRvbmx5IHRhc2s6IFRhc2s7XG4gICAgcHVibGljIHJlYWRvbmx5IG9uU3VibWl0OiAodXBkYXRlZFRhc2tzOiBUYXNrW10pID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3Rvcih7IGFwcCwgdGFzaywgb25TdWJtaXQgfTogeyBhcHA6IEFwcDsgdGFzazogVGFzazsgb25TdWJtaXQ6ICh1cGRhdGVkVGFza3M6IFRhc2tbXSkgPT4gdm9pZCB9KSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG5cbiAgICAgICAgdGhpcy50YXNrID0gdGFzaztcbiAgICAgICAgdGhpcy5vblN1Ym1pdCA9ICh1cGRhdGVkVGFza3M6IFRhc2tbXSkgPT4ge1xuICAgICAgICAgICAgdXBkYXRlZFRhc2tzLmxlbmd0aCAmJiBvblN1Ym1pdCh1cGRhdGVkVGFza3MpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBvbk9wZW4oKTogdm9pZCB7XG4gICAgICAgIHRoaXMudGl0bGVFbC5zZXRUZXh0KCdDcmVhdGUgb3IgZWRpdCBUYXNrJyk7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBuZXcgRWRpdFRhc2soe1xuICAgICAgICAgICAgdGFyZ2V0OiBjb250ZW50RWwsXG4gICAgICAgICAgICBwcm9wczogeyB0YXNrOiB0aGlzLnRhc2ssIG9uU3VibWl0OiB0aGlzLm9uU3VibWl0IH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbkNsb3NlKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG4gICAgfVxufVxuIiwgImZ1bmN0aW9uIG5vb3AoKSB7IH1cbmNvbnN0IGlkZW50aXR5ID0geCA9PiB4O1xuZnVuY3Rpb24gYXNzaWduKHRhciwgc3JjKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZvciAoY29uc3QgayBpbiBzcmMpXG4gICAgICAgIHRhcltrXSA9IHNyY1trXTtcbiAgICByZXR1cm4gdGFyO1xufVxuZnVuY3Rpb24gaXNfcHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gYWRkX2xvY2F0aW9uKGVsZW1lbnQsIGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhcikge1xuICAgIGVsZW1lbnQuX19zdmVsdGVfbWV0YSA9IHtcbiAgICAgICAgbG9jOiB7IGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhciB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJ1bihmbikge1xuICAgIHJldHVybiBmbigpO1xufVxuZnVuY3Rpb24gYmxhbmtfb2JqZWN0KCkge1xuICAgIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuZnVuY3Rpb24gcnVuX2FsbChmbnMpIHtcbiAgICBmbnMuZm9yRWFjaChydW4pO1xufVxuZnVuY3Rpb24gaXNfZnVuY3Rpb24odGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gc2FmZV9ub3RfZXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhICE9IGEgPyBiID09IGIgOiBhICE9PSBiIHx8ICgoYSAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHx8IHR5cGVvZiBhID09PSAnZnVuY3Rpb24nKTtcbn1cbmxldCBzcmNfdXJsX2VxdWFsX2FuY2hvcjtcbmZ1bmN0aW9uIHNyY191cmxfZXF1YWwoZWxlbWVudF9zcmMsIHVybCkge1xuICAgIGlmICghc3JjX3VybF9lcXVhbF9hbmNob3IpIHtcbiAgICAgICAgc3JjX3VybF9lcXVhbF9hbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgfVxuICAgIHNyY191cmxfZXF1YWxfYW5jaG9yLmhyZWYgPSB1cmw7XG4gICAgcmV0dXJuIGVsZW1lbnRfc3JjID09PSBzcmNfdXJsX2VxdWFsX2FuY2hvci5ocmVmO1xufVxuZnVuY3Rpb24gbm90X2VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYjtcbn1cbmZ1bmN0aW9uIGlzX2VtcHR5KG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3N0b3JlKHN0b3JlLCBuYW1lKSB7XG4gICAgaWYgKHN0b3JlICE9IG51bGwgJiYgdHlwZW9mIHN0b3JlLnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCcke25hbWV9JyBpcyBub3QgYSBzdG9yZSB3aXRoIGEgJ3N1YnNjcmliZScgbWV0aG9kYCk7XG4gICAgfVxufVxuZnVuY3Rpb24gc3Vic2NyaWJlKHN0b3JlLCAuLi5jYWxsYmFja3MpIHtcbiAgICBpZiAoc3RvcmUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICB9XG4gICAgY29uc3QgdW5zdWIgPSBzdG9yZS5zdWJzY3JpYmUoLi4uY2FsbGJhY2tzKTtcbiAgICByZXR1cm4gdW5zdWIudW5zdWJzY3JpYmUgPyAoKSA9PiB1bnN1Yi51bnN1YnNjcmliZSgpIDogdW5zdWI7XG59XG5mdW5jdGlvbiBnZXRfc3RvcmVfdmFsdWUoc3RvcmUpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgc3Vic2NyaWJlKHN0b3JlLCBfID0+IHZhbHVlID0gXykoKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjb21wb25lbnRfc3Vic2NyaWJlKGNvbXBvbmVudCwgc3RvcmUsIGNhbGxiYWNrKSB7XG4gICAgY29tcG9uZW50LiQkLm9uX2Rlc3Ryb3kucHVzaChzdWJzY3JpYmUoc3RvcmUsIGNhbGxiYWNrKSk7XG59XG5mdW5jdGlvbiBjcmVhdGVfc2xvdChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG4gICAgaWYgKGRlZmluaXRpb24pIHtcbiAgICAgICAgY29uc3Qgc2xvdF9jdHggPSBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblswXShzbG90X2N0eCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG4gICAgcmV0dXJuIGRlZmluaXRpb25bMV0gJiYgZm5cbiAgICAgICAgPyBhc3NpZ24oJCRzY29wZS5jdHguc2xpY2UoKSwgZGVmaW5pdGlvblsxXShmbihjdHgpKSlcbiAgICAgICAgOiAkJHNjb3BlLmN0eDtcbn1cbmZ1bmN0aW9uIGdldF9zbG90X2NoYW5nZXMoZGVmaW5pdGlvbiwgJCRzY29wZSwgZGlydHksIGZuKSB7XG4gICAgaWYgKGRlZmluaXRpb25bMl0gJiYgZm4pIHtcbiAgICAgICAgY29uc3QgbGV0cyA9IGRlZmluaXRpb25bMl0oZm4oZGlydHkpKTtcbiAgICAgICAgaWYgKCQkc2NvcGUuZGlydHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxldHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBsZXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gW107XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBNYXRoLm1heCgkJHNjb3BlLmRpcnR5Lmxlbmd0aCwgbGV0cy5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIG1lcmdlZFtpXSA9ICQkc2NvcGUuZGlydHlbaV0gfCBsZXRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJCRzY29wZS5kaXJ0eSB8IGxldHM7XG4gICAgfVxuICAgIHJldHVybiAkJHNjb3BlLmRpcnR5O1xufVxuZnVuY3Rpb24gdXBkYXRlX3Nsb3RfYmFzZShzbG90LCBzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgc2xvdF9jaGFuZ2VzLCBnZXRfc2xvdF9jb250ZXh0X2ZuKSB7XG4gICAgaWYgKHNsb3RfY2hhbmdlcykge1xuICAgICAgICBjb25zdCBzbG90X2NvbnRleHQgPSBnZXRfc2xvdF9jb250ZXh0KHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBnZXRfc2xvdF9jb250ZXh0X2ZuKTtcbiAgICAgICAgc2xvdC5wKHNsb3RfY29udGV4dCwgc2xvdF9jaGFuZ2VzKTtcbiAgICB9XG59XG5mdW5jdGlvbiB1cGRhdGVfc2xvdChzbG90LCBzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZGlydHksIGdldF9zbG90X2NoYW5nZXNfZm4sIGdldF9zbG90X2NvbnRleHRfZm4pIHtcbiAgICBjb25zdCBzbG90X2NoYW5nZXMgPSBnZXRfc2xvdF9jaGFuZ2VzKHNsb3RfZGVmaW5pdGlvbiwgJCRzY29wZSwgZGlydHksIGdldF9zbG90X2NoYW5nZXNfZm4pO1xuICAgIHVwZGF0ZV9zbG90X2Jhc2Uoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIHNsb3RfY2hhbmdlcywgZ2V0X3Nsb3RfY29udGV4dF9mbik7XG59XG5mdW5jdGlvbiBnZXRfYWxsX2RpcnR5X2Zyb21fc2NvcGUoJCRzY29wZSkge1xuICAgIGlmICgkJHNjb3BlLmN0eC5sZW5ndGggPiAzMikge1xuICAgICAgICBjb25zdCBkaXJ0eSA9IFtdO1xuICAgICAgICBjb25zdCBsZW5ndGggPSAkJHNjb3BlLmN0eC5sZW5ndGggLyAzMjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGlydHlbaV0gPSAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlydHk7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbmZ1bmN0aW9uIGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMocHJvcHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gcHJvcHMpXG4gICAgICAgIGlmIChrWzBdICE9PSAnJCcpXG4gICAgICAgICAgICByZXN1bHRba10gPSBwcm9wc1trXTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY29tcHV0ZV9yZXN0X3Byb3BzKHByb3BzLCBrZXlzKSB7XG4gICAgY29uc3QgcmVzdCA9IHt9O1xuICAgIGtleXMgPSBuZXcgU2V0KGtleXMpO1xuICAgIGZvciAoY29uc3QgayBpbiBwcm9wcylcbiAgICAgICAgaWYgKCFrZXlzLmhhcyhrKSAmJiBrWzBdICE9PSAnJCcpXG4gICAgICAgICAgICByZXN0W2tdID0gcHJvcHNba107XG4gICAgcmV0dXJuIHJlc3Q7XG59XG5mdW5jdGlvbiBjb21wdXRlX3Nsb3RzKHNsb3RzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2xvdHMpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gb25jZShmbikge1xuICAgIGxldCByYW4gPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHJhbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgICAgZm4uY2FsbCh0aGlzLCAuLi5hcmdzKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gbnVsbF90b19lbXB0eSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldF9zdG9yZV92YWx1ZShzdG9yZSwgcmV0LCB2YWx1ZSkge1xuICAgIHN0b3JlLnNldCh2YWx1ZSk7XG4gICAgcmV0dXJuIHJldDtcbn1cbmNvbnN0IGhhc19wcm9wID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG5mdW5jdGlvbiBhY3Rpb25fZGVzdHJveWVyKGFjdGlvbl9yZXN1bHQpIHtcbiAgICByZXR1cm4gYWN0aW9uX3Jlc3VsdCAmJiBpc19mdW5jdGlvbihhY3Rpb25fcmVzdWx0LmRlc3Ryb3kpID8gYWN0aW9uX3Jlc3VsdC5kZXN0cm95IDogbm9vcDtcbn1cblxuY29uc3QgaXNfY2xpZW50ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5sZXQgbm93ID0gaXNfY2xpZW50XG4gICAgPyAoKSA9PiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KClcbiAgICA6ICgpID0+IERhdGUubm93KCk7XG5sZXQgcmFmID0gaXNfY2xpZW50ID8gY2IgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKSA6IG5vb3A7XG4vLyB1c2VkIGludGVybmFsbHkgZm9yIHRlc3RpbmdcbmZ1bmN0aW9uIHNldF9ub3coZm4pIHtcbiAgICBub3cgPSBmbjtcbn1cbmZ1bmN0aW9uIHNldF9yYWYoZm4pIHtcbiAgICByYWYgPSBmbjtcbn1cblxuY29uc3QgdGFza3MgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBydW5fdGFza3Mobm93KSB7XG4gICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgaWYgKCF0YXNrLmMobm93KSkge1xuICAgICAgICAgICAgdGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICAgICAgdGFzay5mKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodGFza3Muc2l6ZSAhPT0gMClcbiAgICAgICAgcmFmKHJ1bl90YXNrcyk7XG59XG4vKipcbiAqIEZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkhXG4gKi9cbmZ1bmN0aW9uIGNsZWFyX2xvb3BzKCkge1xuICAgIHRhc2tzLmNsZWFyKCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdGFzayB0aGF0IHJ1bnMgb24gZWFjaCByYWYgZnJhbWVcbiAqIHVudGlsIGl0IHJldHVybnMgYSBmYWxzeSB2YWx1ZSBvciBpcyBhYm9ydGVkXG4gKi9cbmZ1bmN0aW9uIGxvb3AoY2FsbGJhY2spIHtcbiAgICBsZXQgdGFzaztcbiAgICBpZiAodGFza3Muc2l6ZSA9PT0gMClcbiAgICAgICAgcmFmKHJ1bl90YXNrcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvbWlzZTogbmV3IFByb21pc2UoZnVsZmlsbCA9PiB7XG4gICAgICAgICAgICB0YXNrcy5hZGQodGFzayA9IHsgYzogY2FsbGJhY2ssIGY6IGZ1bGZpbGwgfSk7XG4gICAgICAgIH0pLFxuICAgICAgICBhYm9ydCgpIHtcbiAgICAgICAgICAgIHRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8vIFRyYWNrIHdoaWNoIG5vZGVzIGFyZSBjbGFpbWVkIGR1cmluZyBoeWRyYXRpb24uIFVuY2xhaW1lZCBub2RlcyBjYW4gdGhlbiBiZSByZW1vdmVkIGZyb20gdGhlIERPTVxuLy8gYXQgdGhlIGVuZCBvZiBoeWRyYXRpb24gd2l0aG91dCB0b3VjaGluZyB0aGUgcmVtYWluaW5nIG5vZGVzLlxubGV0IGlzX2h5ZHJhdGluZyA9IGZhbHNlO1xuZnVuY3Rpb24gc3RhcnRfaHlkcmF0aW5nKCkge1xuICAgIGlzX2h5ZHJhdGluZyA9IHRydWU7XG59XG5mdW5jdGlvbiBlbmRfaHlkcmF0aW5nKCkge1xuICAgIGlzX2h5ZHJhdGluZyA9IGZhbHNlO1xufVxuZnVuY3Rpb24gdXBwZXJfYm91bmQobG93LCBoaWdoLCBrZXksIHZhbHVlKSB7XG4gICAgLy8gUmV0dXJuIGZpcnN0IGluZGV4IG9mIHZhbHVlIGxhcmdlciB0aGFuIGlucHV0IHZhbHVlIGluIHRoZSByYW5nZSBbbG93LCBoaWdoKVxuICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIGNvbnN0IG1pZCA9IGxvdyArICgoaGlnaCAtIGxvdykgPj4gMSk7XG4gICAgICAgIGlmIChrZXkobWlkKSA8PSB2YWx1ZSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbn1cbmZ1bmN0aW9uIGluaXRfaHlkcmF0ZSh0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0Lmh5ZHJhdGVfaW5pdClcbiAgICAgICAgcmV0dXJuO1xuICAgIHRhcmdldC5oeWRyYXRlX2luaXQgPSB0cnVlO1xuICAgIC8vIFdlIGtub3cgdGhhdCBhbGwgY2hpbGRyZW4gaGF2ZSBjbGFpbV9vcmRlciB2YWx1ZXMgc2luY2UgdGhlIHVuY2xhaW1lZCBoYXZlIGJlZW4gZGV0YWNoZWQgaWYgdGFyZ2V0IGlzIG5vdCA8aGVhZD5cbiAgICBsZXQgY2hpbGRyZW4gPSB0YXJnZXQuY2hpbGROb2RlcztcbiAgICAvLyBJZiB0YXJnZXQgaXMgPGhlYWQ+LCB0aGVyZSBtYXkgYmUgY2hpbGRyZW4gd2l0aG91dCBjbGFpbV9vcmRlclxuICAgIGlmICh0YXJnZXQubm9kZU5hbWUgPT09ICdIRUFEJykge1xuICAgICAgICBjb25zdCBteUNoaWxkcmVuID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGlmIChub2RlLmNsYWltX29yZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBteUNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRyZW4gPSBteUNoaWxkcmVuO1xuICAgIH1cbiAgICAvKlxuICAgICogUmVvcmRlciBjbGFpbWVkIGNoaWxkcmVuIG9wdGltYWxseS5cbiAgICAqIFdlIGNhbiByZW9yZGVyIGNsYWltZWQgY2hpbGRyZW4gb3B0aW1hbGx5IGJ5IGZpbmRpbmcgdGhlIGxvbmdlc3Qgc3Vic2VxdWVuY2Ugb2ZcbiAgICAqIG5vZGVzIHRoYXQgYXJlIGFscmVhZHkgY2xhaW1lZCBpbiBvcmRlciBhbmQgb25seSBtb3ZpbmcgdGhlIHJlc3QuIFRoZSBsb25nZXN0XG4gICAgKiBzdWJzZXF1ZW5jZSBzdWJzZXF1ZW5jZSBvZiBub2RlcyB0aGF0IGFyZSBjbGFpbWVkIGluIG9yZGVyIGNhbiBiZSBmb3VuZCBieVxuICAgICogY29tcHV0aW5nIHRoZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2YgLmNsYWltX29yZGVyIHZhbHVlcy5cbiAgICAqXG4gICAgKiBUaGlzIGFsZ29yaXRobSBpcyBvcHRpbWFsIGluIGdlbmVyYXRpbmcgdGhlIGxlYXN0IGFtb3VudCBvZiByZW9yZGVyIG9wZXJhdGlvbnNcbiAgICAqIHBvc3NpYmxlLlxuICAgICpcbiAgICAqIFByb29mOlxuICAgICogV2Uga25vdyB0aGF0LCBnaXZlbiBhIHNldCBvZiByZW9yZGVyaW5nIG9wZXJhdGlvbnMsIHRoZSBub2RlcyB0aGF0IGRvIG5vdCBtb3ZlXG4gICAgKiBhbHdheXMgZm9ybSBhbiBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlLCBzaW5jZSB0aGV5IGRvIG5vdCBtb3ZlIGFtb25nIGVhY2ggb3RoZXJcbiAgICAqIG1lYW5pbmcgdGhhdCB0aGV5IG11c3QgYmUgYWxyZWFkeSBvcmRlcmVkIGFtb25nIGVhY2ggb3RoZXIuIFRodXMsIHRoZSBtYXhpbWFsXG4gICAgKiBzZXQgb2Ygbm9kZXMgdGhhdCBkbyBub3QgbW92ZSBmb3JtIGEgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlLlxuICAgICovXG4gICAgLy8gQ29tcHV0ZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2VcbiAgICAvLyBtOiBzdWJzZXF1ZW5jZSBsZW5ndGggaiA9PiBpbmRleCBrIG9mIHNtYWxsZXN0IHZhbHVlIHRoYXQgZW5kcyBhbiBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIGxlbmd0aCBqXG4gICAgY29uc3QgbSA9IG5ldyBJbnQzMkFycmF5KGNoaWxkcmVuLmxlbmd0aCArIDEpO1xuICAgIC8vIFByZWRlY2Vzc29yIGluZGljZXMgKyAxXG4gICAgY29uc3QgcCA9IG5ldyBJbnQzMkFycmF5KGNoaWxkcmVuLmxlbmd0aCk7XG4gICAgbVswXSA9IC0xO1xuICAgIGxldCBsb25nZXN0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBjaGlsZHJlbltpXS5jbGFpbV9vcmRlcjtcbiAgICAgICAgLy8gRmluZCB0aGUgbGFyZ2VzdCBzdWJzZXF1ZW5jZSBsZW5ndGggc3VjaCB0aGF0IGl0IGVuZHMgaW4gYSB2YWx1ZSBsZXNzIHRoYW4gb3VyIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgLy8gdXBwZXJfYm91bmQgcmV0dXJucyBmaXJzdCBncmVhdGVyIHZhbHVlLCBzbyB3ZSBzdWJ0cmFjdCBvbmVcbiAgICAgICAgLy8gd2l0aCBmYXN0IHBhdGggZm9yIHdoZW4gd2UgYXJlIG9uIHRoZSBjdXJyZW50IGxvbmdlc3Qgc3Vic2VxdWVuY2VcbiAgICAgICAgY29uc3Qgc2VxTGVuID0gKChsb25nZXN0ID4gMCAmJiBjaGlsZHJlblttW2xvbmdlc3RdXS5jbGFpbV9vcmRlciA8PSBjdXJyZW50KSA/IGxvbmdlc3QgKyAxIDogdXBwZXJfYm91bmQoMSwgbG9uZ2VzdCwgaWR4ID0+IGNoaWxkcmVuW21baWR4XV0uY2xhaW1fb3JkZXIsIGN1cnJlbnQpKSAtIDE7XG4gICAgICAgIHBbaV0gPSBtW3NlcUxlbl0gKyAxO1xuICAgICAgICBjb25zdCBuZXdMZW4gPSBzZXFMZW4gKyAxO1xuICAgICAgICAvLyBXZSBjYW4gZ3VhcmFudGVlIHRoYXQgY3VycmVudCBpcyB0aGUgc21hbGxlc3QgdmFsdWUuIE90aGVyd2lzZSwgd2Ugd291bGQgaGF2ZSBnZW5lcmF0ZWQgYSBsb25nZXIgc2VxdWVuY2UuXG4gICAgICAgIG1bbmV3TGVuXSA9IGk7XG4gICAgICAgIGxvbmdlc3QgPSBNYXRoLm1heChuZXdMZW4sIGxvbmdlc3QpO1xuICAgIH1cbiAgICAvLyBUaGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIG5vZGVzIChpbml0aWFsbHkgcmV2ZXJzZWQpXG4gICAgY29uc3QgbGlzID0gW107XG4gICAgLy8gVGhlIHJlc3Qgb2YgdGhlIG5vZGVzLCBub2RlcyB0aGF0IHdpbGwgYmUgbW92ZWRcbiAgICBjb25zdCB0b01vdmUgPSBbXTtcbiAgICBsZXQgbGFzdCA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7XG4gICAgZm9yIChsZXQgY3VyID0gbVtsb25nZXN0XSArIDE7IGN1ciAhPSAwOyBjdXIgPSBwW2N1ciAtIDFdKSB7XG4gICAgICAgIGxpcy5wdXNoKGNoaWxkcmVuW2N1ciAtIDFdKTtcbiAgICAgICAgZm9yICg7IGxhc3QgPj0gY3VyOyBsYXN0LS0pIHtcbiAgICAgICAgICAgIHRvTW92ZS5wdXNoKGNoaWxkcmVuW2xhc3RdKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0LS07XG4gICAgfVxuICAgIGZvciAoOyBsYXN0ID49IDA7IGxhc3QtLSkge1xuICAgICAgICB0b01vdmUucHVzaChjaGlsZHJlbltsYXN0XSk7XG4gICAgfVxuICAgIGxpcy5yZXZlcnNlKCk7XG4gICAgLy8gV2Ugc29ydCB0aGUgbm9kZXMgYmVpbmcgbW92ZWQgdG8gZ3VhcmFudGVlIHRoYXQgdGhlaXIgaW5zZXJ0aW9uIG9yZGVyIG1hdGNoZXMgdGhlIGNsYWltIG9yZGVyXG4gICAgdG9Nb3ZlLnNvcnQoKGEsIGIpID0+IGEuY2xhaW1fb3JkZXIgLSBiLmNsYWltX29yZGVyKTtcbiAgICAvLyBGaW5hbGx5LCB3ZSBtb3ZlIHRoZSBub2Rlc1xuICAgIGZvciAobGV0IGkgPSAwLCBqID0gMDsgaSA8IHRvTW92ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB3aGlsZSAoaiA8IGxpcy5sZW5ndGggJiYgdG9Nb3ZlW2ldLmNsYWltX29yZGVyID49IGxpc1tqXS5jbGFpbV9vcmRlcikge1xuICAgICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuY2hvciA9IGogPCBsaXMubGVuZ3RoID8gbGlzW2pdIDogbnVsbDtcbiAgICAgICAgdGFyZ2V0Lmluc2VydEJlZm9yZSh0b01vdmVbaV0sIGFuY2hvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwZW5kKHRhcmdldCwgbm9kZSkge1xuICAgIHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9zdHlsZXModGFyZ2V0LCBzdHlsZV9zaGVldF9pZCwgc3R5bGVzKSB7XG4gICAgY29uc3QgYXBwZW5kX3N0eWxlc190byA9IGdldF9yb290X2Zvcl9zdHlsZSh0YXJnZXQpO1xuICAgIGlmICghYXBwZW5kX3N0eWxlc190by5nZXRFbGVtZW50QnlJZChzdHlsZV9zaGVldF9pZCkpIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBlbGVtZW50KCdzdHlsZScpO1xuICAgICAgICBzdHlsZS5pZCA9IHN0eWxlX3NoZWV0X2lkO1xuICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IHN0eWxlcztcbiAgICAgICAgYXBwZW5kX3N0eWxlc2hlZXQoYXBwZW5kX3N0eWxlc190bywgc3R5bGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldF9yb290X2Zvcl9zdHlsZShub2RlKSB7XG4gICAgaWYgKCFub2RlKVxuICAgICAgICByZXR1cm4gZG9jdW1lbnQ7XG4gICAgY29uc3Qgcm9vdCA9IG5vZGUuZ2V0Um9vdE5vZGUgPyBub2RlLmdldFJvb3ROb2RlKCkgOiBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgaWYgKHJvb3QgJiYgcm9vdC5ob3N0KSB7XG4gICAgICAgIHJldHVybiByb290O1xuICAgIH1cbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50O1xufVxuZnVuY3Rpb24gYXBwZW5kX2VtcHR5X3N0eWxlc2hlZXQobm9kZSkge1xuICAgIGNvbnN0IHN0eWxlX2VsZW1lbnQgPSBlbGVtZW50KCdzdHlsZScpO1xuICAgIGFwcGVuZF9zdHlsZXNoZWV0KGdldF9yb290X2Zvcl9zdHlsZShub2RlKSwgc3R5bGVfZWxlbWVudCk7XG4gICAgcmV0dXJuIHN0eWxlX2VsZW1lbnQuc2hlZXQ7XG59XG5mdW5jdGlvbiBhcHBlbmRfc3R5bGVzaGVldChub2RlLCBzdHlsZSkge1xuICAgIGFwcGVuZChub2RlLmhlYWQgfHwgbm9kZSwgc3R5bGUpO1xufVxuZnVuY3Rpb24gYXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpIHtcbiAgICBpZiAoaXNfaHlkcmF0aW5nKSB7XG4gICAgICAgIGluaXRfaHlkcmF0ZSh0YXJnZXQpO1xuICAgICAgICBpZiAoKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID09PSB1bmRlZmluZWQpIHx8ICgodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgIT09IG51bGwpICYmICh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZC5wYXJlbnRFbGVtZW50ICE9PSB0YXJnZXQpKSkge1xuICAgICAgICAgICAgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPSB0YXJnZXQuZmlyc3RDaGlsZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBTa2lwIG5vZGVzIG9mIHVuZGVmaW5lZCBvcmRlcmluZ1xuICAgICAgICB3aGlsZSAoKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkICE9PSBudWxsKSAmJiAodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQuY2xhaW1fb3JkZXIgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUgIT09IHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkKSB7XG4gICAgICAgICAgICAvLyBXZSBvbmx5IGluc2VydCBpZiB0aGUgb3JkZXJpbmcgb2YgdGhpcyBub2RlIHNob3VsZCBiZSBtb2RpZmllZCBvciB0aGUgcGFyZW50IG5vZGUgaXMgbm90IHRhcmdldFxuICAgICAgICAgICAgaWYgKG5vZGUuY2xhaW1fb3JkZXIgIT09IHVuZGVmaW5lZCB8fCBub2RlLnBhcmVudE5vZGUgIT09IHRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gdGFyZ2V0IHx8IG5vZGUubmV4dFNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgICAgdGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgYW5jaG9yIHx8IG51bGwpO1xufVxuZnVuY3Rpb24gaW5zZXJ0X2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIGlmIChpc19oeWRyYXRpbmcgJiYgIWFuY2hvcikge1xuICAgICAgICBhcHBlbmRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gdGFyZ2V0IHx8IG5vZGUubmV4dFNpYmxpbmcgIT0gYW5jaG9yKSB7XG4gICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgYW5jaG9yIHx8IG51bGwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGFjaChub2RlKSB7XG4gICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xufVxuZnVuY3Rpb24gZGVzdHJveV9lYWNoKGl0ZXJhdGlvbnMsIGRldGFjaGluZykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlcmF0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoaXRlcmF0aW9uc1tpXSlcbiAgICAgICAgICAgIGl0ZXJhdGlvbnNbaV0uZChkZXRhY2hpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVsZW1lbnQobmFtZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpO1xufVxuZnVuY3Rpb24gZWxlbWVudF9pcyhuYW1lLCBpcykge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUsIHsgaXMgfSk7XG59XG5mdW5jdGlvbiBvYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzKG9iaiwgZXhjbHVkZSkge1xuICAgIGNvbnN0IHRhcmdldCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBpbiBvYmopIHtcbiAgICAgICAgaWYgKGhhc19wcm9wKG9iaiwgaylcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICYmIGV4Y2x1ZGUuaW5kZXhPZihrKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHRhcmdldFtrXSA9IG9ialtrXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gc3ZnX2VsZW1lbnQobmFtZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgbmFtZSk7XG59XG5mdW5jdGlvbiB0ZXh0KGRhdGEpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF0YSk7XG59XG5mdW5jdGlvbiBzcGFjZSgpIHtcbiAgICByZXR1cm4gdGV4dCgnICcpO1xufVxuZnVuY3Rpb24gZW1wdHkoKSB7XG4gICAgcmV0dXJuIHRleHQoJycpO1xufVxuZnVuY3Rpb24gbGlzdGVuKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gKCkgPT4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHByZXZlbnRfZGVmYXVsdChmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHN0b3BfcHJvcGFnYXRpb24oZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc2VsZihmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSB0aGlzKVxuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRydXN0ZWQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LmlzVHJ1c3RlZClcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICBlbHNlIGlmIChub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpICE9PSB2YWx1ZSlcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBzZXRfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobm9kZS5fX3Byb3RvX18pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgbm9kZS5zdHlsZS5jc3NUZXh0ID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ19fdmFsdWUnKSB7XG4gICAgICAgICAgICBub2RlLnZhbHVlID0gbm9kZVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlc2NyaXB0b3JzW2tleV0gJiYgZGVzY3JpcHRvcnNba2V5XS5zZXQpIHtcbiAgICAgICAgICAgIG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N2Z19hdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgaWYgKHByb3AgaW4gbm9kZSkge1xuICAgICAgICBub2RlW3Byb3BdID0gdHlwZW9mIG5vZGVbcHJvcF0gPT09ICdib29sZWFuJyAmJiB2YWx1ZSA9PT0gJycgPyB0cnVlIDogdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhdHRyKG5vZGUsIHByb3AsIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiB4bGlua19hdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRfYmluZGluZ19ncm91cF92YWx1ZShncm91cCwgX192YWx1ZSwgY2hlY2tlZCkge1xuICAgIGNvbnN0IHZhbHVlID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGdyb3VwW2ldLmNoZWNrZWQpXG4gICAgICAgICAgICB2YWx1ZS5hZGQoZ3JvdXBbaV0uX192YWx1ZSk7XG4gICAgfVxuICAgIGlmICghY2hlY2tlZCkge1xuICAgICAgICB2YWx1ZS5kZWxldGUoX192YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHRvX251bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gJycgPyBudWxsIDogK3ZhbHVlO1xufVxuZnVuY3Rpb24gdGltZV9yYW5nZXNfdG9fYXJyYXkocmFuZ2VzKSB7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnJheS5wdXNoKHsgc3RhcnQ6IHJhbmdlcy5zdGFydChpKSwgZW5kOiByYW5nZXMuZW5kKGkpIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBjaGlsZHJlbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudC5jaGlsZE5vZGVzKTtcbn1cbmZ1bmN0aW9uIGluaXRfY2xhaW1faW5mbyhub2Rlcykge1xuICAgIGlmIChub2Rlcy5jbGFpbV9pbmZvID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbm9kZXMuY2xhaW1faW5mbyA9IHsgbGFzdF9pbmRleDogMCwgdG90YWxfY2xhaW1lZDogMCB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsYWltX25vZGUobm9kZXMsIHByZWRpY2F0ZSwgcHJvY2Vzc05vZGUsIGNyZWF0ZU5vZGUsIGRvbnRVcGRhdGVMYXN0SW5kZXggPSBmYWxzZSkge1xuICAgIC8vIFRyeSB0byBmaW5kIG5vZGVzIGluIGFuIG9yZGVyIHN1Y2ggdGhhdCB3ZSBsZW5ndGhlbiB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlXG4gICAgaW5pdF9jbGFpbV9pbmZvKG5vZGVzKTtcbiAgICBjb25zdCByZXN1bHROb2RlID0gKCgpID0+IHtcbiAgICAgICAgLy8gV2UgZmlyc3QgdHJ5IHRvIGZpbmQgYW4gZWxlbWVudCBhZnRlciB0aGUgcHJldmlvdXMgb25lXG4gICAgICAgIGZvciAobGV0IGkgPSBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXg7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShub2RlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gcHJvY2Vzc05vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0gPSByZXBsYWNlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkb250VXBkYXRlTGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSwgd2UgdHJ5IHRvIGZpbmQgb25lIGJlZm9yZVxuICAgICAgICAvLyBXZSBpdGVyYXRlIGluIHJldmVyc2Ugc28gdGhhdCB3ZSBkb24ndCBnbyB0b28gZmFyIGJhY2tcbiAgICAgICAgZm9yIChsZXQgaSA9IG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVwbGFjZW1lbnQgPSBwcm9jZXNzTm9kZShub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXSA9IHJlcGxhY2VtZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWRvbnRVcGRhdGVMYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4ID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSBzcGxpY2VkIGJlZm9yZSB0aGUgbGFzdF9pbmRleCwgd2UgZGVjcmVhc2UgaXRcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4LS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIGNhbid0IGZpbmQgYW55IG1hdGNoaW5nIG5vZGUsIHdlIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU5vZGUoKTtcbiAgICB9KSgpO1xuICAgIHJlc3VsdE5vZGUuY2xhaW1fb3JkZXIgPSBub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQ7XG4gICAgbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkICs9IDE7XG4gICAgcmV0dXJuIHJlc3VsdE5vZGU7XG59XG5mdW5jdGlvbiBjbGFpbV9lbGVtZW50X2Jhc2Uobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIGNyZWF0ZV9lbGVtZW50KSB7XG4gICAgcmV0dXJuIGNsYWltX25vZGUobm9kZXMsIChub2RlKSA9PiBub2RlLm5vZGVOYW1lID09PSBuYW1lLCAobm9kZSkgPT4ge1xuICAgICAgICBjb25zdCByZW1vdmUgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBub2RlLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IG5vZGUuYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgIGlmICghYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0pIHtcbiAgICAgICAgICAgICAgICByZW1vdmUucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVtb3ZlLmZvckVhY2godiA9PiBub2RlLnJlbW92ZUF0dHJpYnV0ZSh2KSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSwgKCkgPT4gY3JlYXRlX2VsZW1lbnQobmFtZSkpO1xufVxuZnVuY3Rpb24gY2xhaW1fZWxlbWVudChub2RlcywgbmFtZSwgYXR0cmlidXRlcykge1xuICAgIHJldHVybiBjbGFpbV9lbGVtZW50X2Jhc2Uobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gY2xhaW1fc3ZnX2VsZW1lbnQobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBzdmdfZWxlbWVudCk7XG59XG5mdW5jdGlvbiBjbGFpbV90ZXh0KG5vZGVzLCBkYXRhKSB7XG4gICAgcmV0dXJuIGNsYWltX25vZGUobm9kZXMsIChub2RlKSA9PiBub2RlLm5vZGVUeXBlID09PSAzLCAobm9kZSkgPT4ge1xuICAgICAgICBjb25zdCBkYXRhU3RyID0gJycgKyBkYXRhO1xuICAgICAgICBpZiAobm9kZS5kYXRhLnN0YXJ0c1dpdGgoZGF0YVN0cikpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmRhdGEubGVuZ3RoICE9PSBkYXRhU3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlLnNwbGl0VGV4dChkYXRhU3RyLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlLmRhdGEgPSBkYXRhU3RyO1xuICAgICAgICB9XG4gICAgfSwgKCkgPT4gdGV4dChkYXRhKSwgdHJ1ZSAvLyBUZXh0IG5vZGVzIHNob3VsZCBub3QgdXBkYXRlIGxhc3QgaW5kZXggc2luY2UgaXQgaXMgbGlrZWx5IG5vdCB3b3J0aCBpdCB0byBlbGltaW5hdGUgYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBhY3R1YWwgZWxlbWVudHNcbiAgICApO1xufVxuZnVuY3Rpb24gY2xhaW1fc3BhY2Uobm9kZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fdGV4dChub2RlcywgJyAnKTtcbn1cbmZ1bmN0aW9uIGZpbmRfY29tbWVudChub2RlcywgdGV4dCwgc3RhcnQpIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBub2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA4IC8qIGNvbW1lbnQgbm9kZSAqLyAmJiBub2RlLnRleHRDb250ZW50LnRyaW0oKSA9PT0gdGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIGNsYWltX2h0bWxfdGFnKG5vZGVzLCBpc19zdmcpIHtcbiAgICAvLyBmaW5kIGh0bWwgb3BlbmluZyB0YWdcbiAgICBjb25zdCBzdGFydF9pbmRleCA9IGZpbmRfY29tbWVudChub2RlcywgJ0hUTUxfVEFHX1NUQVJUJywgMCk7XG4gICAgY29uc3QgZW5kX2luZGV4ID0gZmluZF9jb21tZW50KG5vZGVzLCAnSFRNTF9UQUdfRU5EJywgc3RhcnRfaW5kZXgpO1xuICAgIGlmIChzdGFydF9pbmRleCA9PT0gZW5kX2luZGV4KSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbFRhZ0h5ZHJhdGlvbih1bmRlZmluZWQsIGlzX3N2Zyk7XG4gICAgfVxuICAgIGluaXRfY2xhaW1faW5mbyhub2Rlcyk7XG4gICAgY29uc3QgaHRtbF90YWdfbm9kZXMgPSBub2Rlcy5zcGxpY2Uoc3RhcnRfaW5kZXgsIGVuZF9pbmRleCAtIHN0YXJ0X2luZGV4ICsgMSk7XG4gICAgZGV0YWNoKGh0bWxfdGFnX25vZGVzWzBdKTtcbiAgICBkZXRhY2goaHRtbF90YWdfbm9kZXNbaHRtbF90YWdfbm9kZXMubGVuZ3RoIC0gMV0pO1xuICAgIGNvbnN0IGNsYWltZWRfbm9kZXMgPSBodG1sX3RhZ19ub2Rlcy5zbGljZSgxLCBodG1sX3RhZ19ub2Rlcy5sZW5ndGggLSAxKTtcbiAgICBmb3IgKGNvbnN0IG4gb2YgY2xhaW1lZF9ub2Rlcykge1xuICAgICAgICBuLmNsYWltX29yZGVyID0gbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkO1xuICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQgKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBIdG1sVGFnSHlkcmF0aW9uKGNsYWltZWRfbm9kZXMsIGlzX3N2Zyk7XG59XG5mdW5jdGlvbiBzZXRfZGF0YSh0ZXh0LCBkYXRhKSB7XG4gICAgZGF0YSA9ICcnICsgZGF0YTtcbiAgICBpZiAodGV4dC53aG9sZVRleHQgIT09IGRhdGEpXG4gICAgICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdmFsdWUoaW5wdXQsIHZhbHVlKSB7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldF9pbnB1dF90eXBlKGlucHV0LCB0eXBlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaW5wdXQudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfc3R5bGUobm9kZSwga2V5LCB2YWx1ZSwgaW1wb3J0YW50KSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIG5vZGUuc3R5bGUucmVtb3ZlUHJvcGVydHkoa2V5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YWx1ZSwgaW1wb3J0YW50ID8gJ2ltcG9ydGFudCcgOiAnJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbihzZWxlY3QsIHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcbiAgICAgICAgaWYgKG9wdGlvbi5fX3ZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWxlY3Quc2VsZWN0ZWRJbmRleCA9IC0xOyAvLyBubyBvcHRpb24gc2hvdWxkIGJlIHNlbGVjdGVkXG59XG5mdW5jdGlvbiBzZWxlY3Rfb3B0aW9ucyhzZWxlY3QsIHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gfnZhbHVlLmluZGV4T2Yob3B0aW9uLl9fdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbGVjdF92YWx1ZShzZWxlY3QpIHtcbiAgICBjb25zdCBzZWxlY3RlZF9vcHRpb24gPSBzZWxlY3QucXVlcnlTZWxlY3RvcignOmNoZWNrZWQnKSB8fCBzZWxlY3Qub3B0aW9uc1swXTtcbiAgICByZXR1cm4gc2VsZWN0ZWRfb3B0aW9uICYmIHNlbGVjdGVkX29wdGlvbi5fX3ZhbHVlO1xufVxuZnVuY3Rpb24gc2VsZWN0X211bHRpcGxlX3ZhbHVlKHNlbGVjdCkge1xuICAgIHJldHVybiBbXS5tYXAuY2FsbChzZWxlY3QucXVlcnlTZWxlY3RvckFsbCgnOmNoZWNrZWQnKSwgb3B0aW9uID0+IG9wdGlvbi5fX3ZhbHVlKTtcbn1cbi8vIHVuZm9ydHVuYXRlbHkgdGhpcyBjYW4ndCBiZSBhIGNvbnN0YW50IGFzIHRoYXQgd291bGRuJ3QgYmUgdHJlZS1zaGFrZWFibGVcbi8vIHNvIHdlIGNhY2hlIHRoZSByZXN1bHQgaW5zdGVhZFxubGV0IGNyb3Nzb3JpZ2luO1xuZnVuY3Rpb24gaXNfY3Jvc3NvcmlnaW4oKSB7XG4gICAgaWYgKGNyb3Nzb3JpZ2luID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3Jvc3NvcmlnaW4gPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdm9pZCB3aW5kb3cucGFyZW50LmRvY3VtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY3Jvc3NvcmlnaW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjcm9zc29yaWdpbjtcbn1cbmZ1bmN0aW9uIGFkZF9yZXNpemVfbGlzdGVuZXIobm9kZSwgZm4pIHtcbiAgICBjb25zdCBjb21wdXRlZF9zdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgaWYgKGNvbXB1dGVkX3N0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICB9XG4gICAgY29uc3QgaWZyYW1lID0gZWxlbWVudCgnaWZyYW1lJyk7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTogYmxvY2s7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyAnICtcbiAgICAgICAgJ292ZXJmbG93OiBoaWRkZW47IGJvcmRlcjogMDsgb3BhY2l0eTogMDsgcG9pbnRlci1ldmVudHM6IG5vbmU7IHotaW5kZXg6IC0xOycpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICBpZnJhbWUudGFiSW5kZXggPSAtMTtcbiAgICBjb25zdCBjcm9zc29yaWdpbiA9IGlzX2Nyb3Nzb3JpZ2luKCk7XG4gICAgbGV0IHVuc3Vic2NyaWJlO1xuICAgIGlmIChjcm9zc29yaWdpbikge1xuICAgICAgICBpZnJhbWUuc3JjID0gXCJkYXRhOnRleHQvaHRtbCw8c2NyaXB0Pm9ucmVzaXplPWZ1bmN0aW9uKCl7cGFyZW50LnBvc3RNZXNzYWdlKDAsJyonKX08L3NjcmlwdD5cIjtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBsaXN0ZW4od2luZG93LCAnbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gaWZyYW1lLmNvbnRlbnRXaW5kb3cpXG4gICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZnJhbWUuc3JjID0gJ2Fib3V0OmJsYW5rJztcbiAgICAgICAgaWZyYW1lLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gbGlzdGVuKGlmcmFtZS5jb250ZW50V2luZG93LCAncmVzaXplJywgZm4pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBhcHBlbmQobm9kZSwgaWZyYW1lKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5zdWJzY3JpYmUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGV0YWNoKGlmcmFtZSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvZ2dsZV9jbGFzcyhlbGVtZW50LCBuYW1lLCB0b2dnbGUpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdFt0b2dnbGUgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTtcbn1cbmZ1bmN0aW9uIGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwsIHsgYnViYmxlcyA9IGZhbHNlLCBjYW5jZWxhYmxlID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsIGRldGFpbCk7XG4gICAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBxdWVyeV9zZWxlY3Rvcl9hbGwoc2VsZWN0b3IsIHBhcmVudCA9IGRvY3VtZW50LmJvZHkpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuY2xhc3MgSHRtbFRhZyB7XG4gICAgY29uc3RydWN0b3IoaXNfc3ZnID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5pc19zdmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc19zdmcgPSBpc19zdmc7XG4gICAgICAgIHRoaXMuZSA9IHRoaXMubiA9IG51bGw7XG4gICAgfVxuICAgIGMoaHRtbCkge1xuICAgICAgICB0aGlzLmgoaHRtbCk7XG4gICAgfVxuICAgIG0oaHRtbCwgdGFyZ2V0LCBhbmNob3IgPSBudWxsKSB7XG4gICAgICAgIGlmICghdGhpcy5lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc19zdmcpXG4gICAgICAgICAgICAgICAgdGhpcy5lID0gc3ZnX2VsZW1lbnQodGFyZ2V0Lm5vZGVOYW1lKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmUgPSBlbGVtZW50KHRhcmdldC5ub2RlTmFtZSk7XG4gICAgICAgICAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmMoaHRtbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pKGFuY2hvcik7XG4gICAgfVxuICAgIGgoaHRtbCkge1xuICAgICAgICB0aGlzLmUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgdGhpcy5uID0gQXJyYXkuZnJvbSh0aGlzLmUuY2hpbGROb2Rlcyk7XG4gICAgfVxuICAgIGkoYW5jaG9yKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpbnNlcnQodGhpcy50LCB0aGlzLm5baV0sIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcChodG1sKSB7XG4gICAgICAgIHRoaXMuZCgpO1xuICAgICAgICB0aGlzLmgoaHRtbCk7XG4gICAgICAgIHRoaXMuaSh0aGlzLmEpO1xuICAgIH1cbiAgICBkKCkge1xuICAgICAgICB0aGlzLm4uZm9yRWFjaChkZXRhY2gpO1xuICAgIH1cbn1cbmNsYXNzIEh0bWxUYWdIeWRyYXRpb24gZXh0ZW5kcyBIdG1sVGFnIHtcbiAgICBjb25zdHJ1Y3RvcihjbGFpbWVkX25vZGVzLCBpc19zdmcgPSBmYWxzZSkge1xuICAgICAgICBzdXBlcihpc19zdmcpO1xuICAgICAgICB0aGlzLmUgPSB0aGlzLm4gPSBudWxsO1xuICAgICAgICB0aGlzLmwgPSBjbGFpbWVkX25vZGVzO1xuICAgIH1cbiAgICBjKGh0bWwpIHtcbiAgICAgICAgaWYgKHRoaXMubCkge1xuICAgICAgICAgICAgdGhpcy5uID0gdGhpcy5sO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIuYyhodG1sKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpKGFuY2hvcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaW5zZXJ0X2h5ZHJhdGlvbih0aGlzLnQsIHRoaXMubltpXSwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGF0dHJpYnV0ZV90b19vYmplY3QoYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmVzdWx0W2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldF9jdXN0b21fZWxlbWVudHNfc2xvdHMoZWxlbWVudCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGVsZW1lbnQuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIHJlc3VsdFtub2RlLnNsb3QgfHwgJ2RlZmF1bHQnXSA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gd2UgbmVlZCB0byBzdG9yZSB0aGUgaW5mb3JtYXRpb24gZm9yIG11bHRpcGxlIGRvY3VtZW50cyBiZWNhdXNlIGEgU3ZlbHRlIGFwcGxpY2F0aW9uIGNvdWxkIGFsc28gY29udGFpbiBpZnJhbWVzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlL2lzc3Vlcy8zNjI0XG5jb25zdCBtYW5hZ2VkX3N0eWxlcyA9IG5ldyBNYXAoKTtcbmxldCBhY3RpdmUgPSAwO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Rhcmtza3lhcHAvc3RyaW5nLWhhc2gvYmxvYi9tYXN0ZXIvaW5kZXguanNcbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gICAgbGV0IGhhc2ggPSA1MzgxO1xuICAgIGxldCBpID0gc3RyLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgXiBzdHIuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gaGFzaCA+Pj4gMDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9zdHlsZV9pbmZvcm1hdGlvbihkb2MsIG5vZGUpIHtcbiAgICBjb25zdCBpbmZvID0geyBzdHlsZXNoZWV0OiBhcHBlbmRfZW1wdHlfc3R5bGVzaGVldChub2RlKSwgcnVsZXM6IHt9IH07XG4gICAgbWFuYWdlZF9zdHlsZXMuc2V0KGRvYywgaW5mbyk7XG4gICAgcmV0dXJuIGluZm87XG59XG5mdW5jdGlvbiBjcmVhdGVfcnVsZShub2RlLCBhLCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2UsIGZuLCB1aWQgPSAwKSB7XG4gICAgY29uc3Qgc3RlcCA9IDE2LjY2NiAvIGR1cmF0aW9uO1xuICAgIGxldCBrZXlmcmFtZXMgPSAne1xcbic7XG4gICAgZm9yIChsZXQgcCA9IDA7IHAgPD0gMTsgcCArPSBzdGVwKSB7XG4gICAgICAgIGNvbnN0IHQgPSBhICsgKGIgLSBhKSAqIGVhc2UocCk7XG4gICAgICAgIGtleWZyYW1lcyArPSBwICogMTAwICsgYCV7JHtmbih0LCAxIC0gdCl9fVxcbmA7XG4gICAgfVxuICAgIGNvbnN0IHJ1bGUgPSBrZXlmcmFtZXMgKyBgMTAwJSB7JHtmbihiLCAxIC0gYil9fVxcbn1gO1xuICAgIGNvbnN0IG5hbWUgPSBgX19zdmVsdGVfJHtoYXNoKHJ1bGUpfV8ke3VpZH1gO1xuICAgIGNvbnN0IGRvYyA9IGdldF9yb290X2Zvcl9zdHlsZShub2RlKTtcbiAgICBjb25zdCB7IHN0eWxlc2hlZXQsIHJ1bGVzIH0gPSBtYW5hZ2VkX3N0eWxlcy5nZXQoZG9jKSB8fCBjcmVhdGVfc3R5bGVfaW5mb3JtYXRpb24oZG9jLCBub2RlKTtcbiAgICBpZiAoIXJ1bGVzW25hbWVdKSB7XG4gICAgICAgIHJ1bGVzW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgc3R5bGVzaGVldC5pbnNlcnRSdWxlKGBAa2V5ZnJhbWVzICR7bmFtZX0gJHtydWxlfWAsIHN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9uID0gbm9kZS5zdHlsZS5hbmltYXRpb24gfHwgJyc7XG4gICAgbm9kZS5zdHlsZS5hbmltYXRpb24gPSBgJHthbmltYXRpb24gPyBgJHthbmltYXRpb259LCBgIDogJyd9JHtuYW1lfSAke2R1cmF0aW9ufW1zIGxpbmVhciAke2RlbGF5fW1zIDEgYm90aGA7XG4gICAgYWN0aXZlICs9IDE7XG4gICAgcmV0dXJuIG5hbWU7XG59XG5mdW5jdGlvbiBkZWxldGVfcnVsZShub2RlLCBuYW1lKSB7XG4gICAgY29uc3QgcHJldmlvdXMgPSAobm9kZS5zdHlsZS5hbmltYXRpb24gfHwgJycpLnNwbGl0KCcsICcpO1xuICAgIGNvbnN0IG5leHQgPSBwcmV2aW91cy5maWx0ZXIobmFtZVxuICAgICAgICA/IGFuaW0gPT4gYW5pbS5pbmRleE9mKG5hbWUpIDwgMCAvLyByZW1vdmUgc3BlY2lmaWMgYW5pbWF0aW9uXG4gICAgICAgIDogYW5pbSA9PiBhbmltLmluZGV4T2YoJ19fc3ZlbHRlJykgPT09IC0xIC8vIHJlbW92ZSBhbGwgU3ZlbHRlIGFuaW1hdGlvbnNcbiAgICApO1xuICAgIGNvbnN0IGRlbGV0ZWQgPSBwcmV2aW91cy5sZW5ndGggLSBuZXh0Lmxlbmd0aDtcbiAgICBpZiAoZGVsZXRlZCkge1xuICAgICAgICBub2RlLnN0eWxlLmFuaW1hdGlvbiA9IG5leHQuam9pbignLCAnKTtcbiAgICAgICAgYWN0aXZlIC09IGRlbGV0ZWQ7XG4gICAgICAgIGlmICghYWN0aXZlKVxuICAgICAgICAgICAgY2xlYXJfcnVsZXMoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhcl9ydWxlcygpIHtcbiAgICByYWYoKCkgPT4ge1xuICAgICAgICBpZiAoYWN0aXZlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBtYW5hZ2VkX3N0eWxlcy5mb3JFYWNoKGluZm8gPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBzdHlsZXNoZWV0IH0gPSBpbmZvO1xuICAgICAgICAgICAgbGV0IGkgPSBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pXG4gICAgICAgICAgICAgICAgc3R5bGVzaGVldC5kZWxldGVSdWxlKGkpO1xuICAgICAgICAgICAgaW5mby5ydWxlcyA9IHt9O1xuICAgICAgICB9KTtcbiAgICAgICAgbWFuYWdlZF9zdHlsZXMuY2xlYXIoKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlX2FuaW1hdGlvbihub2RlLCBmcm9tLCBmbiwgcGFyYW1zKSB7XG4gICAgaWYgKCFmcm9tKVxuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICBjb25zdCB0byA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGZyb20ubGVmdCA9PT0gdG8ubGVmdCAmJiBmcm9tLnJpZ2h0ID09PSB0by5yaWdodCAmJiBmcm9tLnRvcCA9PT0gdG8udG9wICYmIGZyb20uYm90dG9tID09PSB0by5ib3R0b20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIFxuICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogc2hvdWxkIHRoaXMgYmUgc2VwYXJhdGVkIGZyb20gZGVzdHJ1Y3R1cmluZz8gT3Igc3RhcnQvZW5kIGFkZGVkIHRvIHB1YmxpYyBhcGkgYW5kIGRvY3VtZW50YXRpb24/XG4gICAgc3RhcnQ6IHN0YXJ0X3RpbWUgPSBub3coKSArIGRlbGF5LCBcbiAgICAvLyBAdHMtaWdub3JlIHRvZG86XG4gICAgZW5kID0gc3RhcnRfdGltZSArIGR1cmF0aW9uLCB0aWNrID0gbm9vcCwgY3NzIH0gPSBmbihub2RlLCB7IGZyb20sIHRvIH0sIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSB0cnVlO1xuICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgbGV0IG5hbWU7XG4gICAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAwLCAxLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlbGF5KSB7XG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgbmFtZSk7XG4gICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgbG9vcChub3cgPT4ge1xuICAgICAgICBpZiAoIXN0YXJ0ZWQgJiYgbm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydGVkICYmIG5vdyA+PSBlbmQpIHtcbiAgICAgICAgICAgIHRpY2soMSwgMCk7XG4gICAgICAgICAgICBzdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFydW5uaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBub3cgLSBzdGFydF90aW1lO1xuICAgICAgICAgICAgY29uc3QgdCA9IDAgKyAxICogZWFzaW5nKHAgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICBzdGFydCgpO1xuICAgIHRpY2soMCwgMSk7XG4gICAgcmV0dXJuIHN0b3A7XG59XG5mdW5jdGlvbiBmaXhfcG9zaXRpb24obm9kZSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBpZiAoc3R5bGUucG9zaXRpb24gIT09ICdhYnNvbHV0ZScgJiYgc3R5bGUucG9zaXRpb24gIT09ICdmaXhlZCcpIHtcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBzdHlsZTtcbiAgICAgICAgY29uc3QgYSA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIG5vZGUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gd2lkdGg7XG4gICAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBhZGRfdHJhbnNmb3JtKG5vZGUsIGEpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZF90cmFuc2Zvcm0obm9kZSwgYSkge1xuICAgIGNvbnN0IGIgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChhLmxlZnQgIT09IGIubGVmdCB8fCBhLnRvcCAhPT0gYi50b3ApIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogc3R5bGUudHJhbnNmb3JtO1xuICAgICAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IGAke3RyYW5zZm9ybX0gdHJhbnNsYXRlKCR7YS5sZWZ0IC0gYi5sZWZ0fXB4LCAke2EudG9wIC0gYi50b3B9cHgpYDtcbiAgICB9XG59XG5cbmxldCBjdXJyZW50X2NvbXBvbmVudDtcbmZ1bmN0aW9uIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpIHtcbiAgICBjdXJyZW50X2NvbXBvbmVudCA9IGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGdldF9jdXJyZW50X2NvbXBvbmVudCgpIHtcbiAgICBpZiAoIWN1cnJlbnRfY29tcG9uZW50KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uIGNhbGxlZCBvdXRzaWRlIGNvbXBvbmVudCBpbml0aWFsaXphdGlvbicpO1xuICAgIHJldHVybiBjdXJyZW50X2NvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGJlZm9yZVVwZGF0ZShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmJlZm9yZV91cGRhdGUucHVzaChmbik7XG59XG5mdW5jdGlvbiBvbk1vdW50KGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fbW91bnQucHVzaChmbik7XG59XG5mdW5jdGlvbiBhZnRlclVwZGF0ZShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmFmdGVyX3VwZGF0ZS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIG9uRGVzdHJveShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX2Rlc3Ryb3kucHVzaChmbik7XG59XG5mdW5jdGlvbiBjcmVhdGVFdmVudERpc3BhdGNoZXIoKSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG4gICAgcmV0dXJuICh0eXBlLCBkZXRhaWwsIHsgY2FuY2VsYWJsZSA9IGZhbHNlIH0gPSB7fSkgPT4ge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW3R5cGVdO1xuICAgICAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAvLyBUT0RPIGFyZSB0aGVyZSBzaXR1YXRpb25zIHdoZXJlIGV2ZW50cyBjb3VsZCBiZSBkaXNwYXRjaGVkXG4gICAgICAgICAgICAvLyBpbiBhIHNlcnZlciAobm9uLURPTSkgZW52aXJvbm1lbnQ/XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwsIHsgY2FuY2VsYWJsZSB9KTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5zbGljZSgpLmZvckVhY2goZm4gPT4ge1xuICAgICAgICAgICAgICAgIGZuLmNhbGwoY29tcG9uZW50LCBldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc2V0Q29udGV4dChrZXksIGNvbnRleHQpIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5jb250ZXh0LnNldChrZXksIGNvbnRleHQpO1xuICAgIHJldHVybiBjb250ZXh0O1xufVxuZnVuY3Rpb24gZ2V0Q29udGV4dChrZXkpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5nZXQoa2V5KTtcbn1cbmZ1bmN0aW9uIGdldEFsbENvbnRleHRzKCkge1xuICAgIHJldHVybiBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5jb250ZXh0O1xufVxuZnVuY3Rpb24gaGFzQ29udGV4dChrZXkpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5oYXMoa2V5KTtcbn1cbi8vIFRPRE8gZmlndXJlIG91dCBpZiB3ZSBzdGlsbCB3YW50IHRvIHN1cHBvcnRcbi8vIHNob3J0aGFuZCBldmVudHMsIG9yIGlmIHdlIHdhbnQgdG8gaW1wbGVtZW50XG4vLyBhIHJlYWwgYnViYmxpbmcgbWVjaGFuaXNtXG5mdW5jdGlvbiBidWJibGUoY29tcG9uZW50LCBldmVudCkge1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGNvbXBvbmVudC4kJC5jYWxsYmFja3NbZXZlbnQudHlwZV07XG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNhbGxiYWNrcy5zbGljZSgpLmZvckVhY2goZm4gPT4gZm4uY2FsbCh0aGlzLCBldmVudCkpO1xuICAgIH1cbn1cblxuY29uc3QgZGlydHlfY29tcG9uZW50cyA9IFtdO1xuY29uc3QgaW50cm9zID0geyBlbmFibGVkOiBmYWxzZSB9O1xuY29uc3QgYmluZGluZ19jYWxsYmFja3MgPSBbXTtcbmNvbnN0IHJlbmRlcl9jYWxsYmFja3MgPSBbXTtcbmNvbnN0IGZsdXNoX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgcmVzb2x2ZWRfcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xubGV0IHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNjaGVkdWxlX3VwZGF0ZSgpIHtcbiAgICBpZiAoIXVwZGF0ZV9zY2hlZHVsZWQpIHtcbiAgICAgICAgdXBkYXRlX3NjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmVkX3Byb21pc2UudGhlbihmbHVzaCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdGljaygpIHtcbiAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICByZXR1cm4gcmVzb2x2ZWRfcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGFkZF9yZW5kZXJfY2FsbGJhY2soZm4pIHtcbiAgICByZW5kZXJfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWRkX2ZsdXNoX2NhbGxiYWNrKGZuKSB7XG4gICAgZmx1c2hfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuLy8gZmx1c2goKSBjYWxscyBjYWxsYmFja3MgaW4gdGhpcyBvcmRlcjpcbi8vIDEuIEFsbCBiZWZvcmVVcGRhdGUgY2FsbGJhY2tzLCBpbiBvcmRlcjogcGFyZW50cyBiZWZvcmUgY2hpbGRyZW5cbi8vIDIuIEFsbCBiaW5kOnRoaXMgY2FsbGJhY2tzLCBpbiByZXZlcnNlIG9yZGVyOiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cy5cbi8vIDMuIEFsbCBhZnRlclVwZGF0ZSBjYWxsYmFja3MsIGluIG9yZGVyOiBwYXJlbnRzIGJlZm9yZSBjaGlsZHJlbi4gRVhDRVBUXG4vLyAgICBmb3IgYWZ0ZXJVcGRhdGVzIGNhbGxlZCBkdXJpbmcgdGhlIGluaXRpYWwgb25Nb3VudCwgd2hpY2ggYXJlIGNhbGxlZCBpblxuLy8gICAgcmV2ZXJzZSBvcmRlcjogY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMuXG4vLyBTaW5jZSBjYWxsYmFja3MgbWlnaHQgdXBkYXRlIGNvbXBvbmVudCB2YWx1ZXMsIHdoaWNoIGNvdWxkIHRyaWdnZXIgYW5vdGhlclxuLy8gY2FsbCB0byBmbHVzaCgpLCB0aGUgZm9sbG93aW5nIHN0ZXBzIGd1YXJkIGFnYWluc3QgdGhpczpcbi8vIDEuIER1cmluZyBiZWZvcmVVcGRhdGUsIGFueSB1cGRhdGVkIGNvbXBvbmVudHMgd2lsbCBiZSBhZGRlZCB0byB0aGVcbi8vICAgIGRpcnR5X2NvbXBvbmVudHMgYXJyYXkgYW5kIHdpbGwgY2F1c2UgYSByZWVudHJhbnQgY2FsbCB0byBmbHVzaCgpLiBCZWNhdXNlXG4vLyAgICB0aGUgZmx1c2ggaW5kZXggaXMga2VwdCBvdXRzaWRlIHRoZSBmdW5jdGlvbiwgdGhlIHJlZW50cmFudCBjYWxsIHdpbGwgcGlja1xuLy8gICAgdXAgd2hlcmUgdGhlIGVhcmxpZXIgY2FsbCBsZWZ0IG9mZiBhbmQgZ28gdGhyb3VnaCBhbGwgZGlydHkgY29tcG9uZW50cy4gVGhlXG4vLyAgICBjdXJyZW50X2NvbXBvbmVudCB2YWx1ZSBpcyBzYXZlZCBhbmQgcmVzdG9yZWQgc28gdGhhdCB0aGUgcmVlbnRyYW50IGNhbGwgd2lsbFxuLy8gICAgbm90IGludGVyZmVyZSB3aXRoIHRoZSBcInBhcmVudFwiIGZsdXNoKCkgY2FsbC5cbi8vIDIuIGJpbmQ6dGhpcyBjYWxsYmFja3MgY2Fubm90IHRyaWdnZXIgbmV3IGZsdXNoKCkgY2FsbHMuXG4vLyAzLiBEdXJpbmcgYWZ0ZXJVcGRhdGUsIGFueSB1cGRhdGVkIGNvbXBvbmVudHMgd2lsbCBOT1QgaGF2ZSB0aGVpciBhZnRlclVwZGF0ZVxuLy8gICAgY2FsbGJhY2sgY2FsbGVkIGEgc2Vjb25kIHRpbWU7IHRoZSBzZWVuX2NhbGxiYWNrcyBzZXQsIG91dHNpZGUgdGhlIGZsdXNoKClcbi8vICAgIGZ1bmN0aW9uLCBndWFyYW50ZWVzIHRoaXMgYmVoYXZpb3IuXG5jb25zdCBzZWVuX2NhbGxiYWNrcyA9IG5ldyBTZXQoKTtcbmxldCBmbHVzaGlkeCA9IDA7IC8vIERvICpub3QqIG1vdmUgdGhpcyBpbnNpZGUgdGhlIGZsdXNoKCkgZnVuY3Rpb25cbmZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGNvbnN0IHNhdmVkX2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICAgIGRvIHtcbiAgICAgICAgLy8gZmlyc3QsIGNhbGwgYmVmb3JlVXBkYXRlIGZ1bmN0aW9uc1xuICAgICAgICAvLyBhbmQgdXBkYXRlIGNvbXBvbmVudHNcbiAgICAgICAgd2hpbGUgKGZsdXNoaWR4IDwgZGlydHlfY29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGRpcnR5X2NvbXBvbmVudHNbZmx1c2hpZHhdO1xuICAgICAgICAgICAgZmx1c2hpZHgrKztcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGNvbXBvbmVudC4kJCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIGZsdXNoaWR4ID0gMDtcbiAgICAgICAgd2hpbGUgKGJpbmRpbmdfY2FsbGJhY2tzLmxlbmd0aClcbiAgICAgICAgICAgIGJpbmRpbmdfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgICAgIC8vIHRoZW4sIG9uY2UgY29tcG9uZW50cyBhcmUgdXBkYXRlZCwgY2FsbFxuICAgICAgICAvLyBhZnRlclVwZGF0ZSBmdW5jdGlvbnMuIFRoaXMgbWF5IGNhdXNlXG4gICAgICAgIC8vIHN1YnNlcXVlbnQgdXBkYXRlcy4uLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gcmVuZGVyX2NhbGxiYWNrc1tpXTtcbiAgICAgICAgICAgIGlmICghc2Vlbl9jYWxsYmFja3MuaGFzKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgIC8vIC4uLnNvIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgbG9vcHNcbiAgICAgICAgICAgICAgICBzZWVuX2NhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgIH0gd2hpbGUgKGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKTtcbiAgICB3aGlsZSAoZmx1c2hfY2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICBmbHVzaF9jYWxsYmFja3MucG9wKCkoKTtcbiAgICB9XG4gICAgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIHNlZW5fY2FsbGJhY2tzLmNsZWFyKCk7XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHNhdmVkX2NvbXBvbmVudCk7XG59XG5mdW5jdGlvbiB1cGRhdGUoJCQpIHtcbiAgICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgJCQudXBkYXRlKCk7XG4gICAgICAgIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICAgICAgIGNvbnN0IGRpcnR5ID0gJCQuZGlydHk7XG4gICAgICAgICQkLmRpcnR5ID0gWy0xXTtcbiAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQucCgkJC5jdHgsIGRpcnR5KTtcbiAgICAgICAgJCQuYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG4gICAgfVxufVxuXG5sZXQgcHJvbWlzZTtcbmZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgaWYgKCFwcm9taXNlKSB7XG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChub2RlLCBkaXJlY3Rpb24sIGtpbmQpIHtcbiAgICBub2RlLmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KGAke2RpcmVjdGlvbiA/ICdpbnRybycgOiAnb3V0cm8nfSR7a2luZH1gKSk7XG59XG5jb25zdCBvdXRyb2luZyA9IG5ldyBTZXQoKTtcbmxldCBvdXRyb3M7XG5mdW5jdGlvbiBncm91cF9vdXRyb3MoKSB7XG4gICAgb3V0cm9zID0ge1xuICAgICAgICByOiAwLFxuICAgICAgICBjOiBbXSxcbiAgICAgICAgcDogb3V0cm9zIC8vIHBhcmVudCBncm91cFxuICAgIH07XG59XG5mdW5jdGlvbiBjaGVja19vdXRyb3MoKSB7XG4gICAgaWYgKCFvdXRyb3Mucikge1xuICAgICAgICBydW5fYWxsKG91dHJvcy5jKTtcbiAgICB9XG4gICAgb3V0cm9zID0gb3V0cm9zLnA7XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX2luKGJsb2NrLCBsb2NhbCkge1xuICAgIGlmIChibG9jayAmJiBibG9jay5pKSB7XG4gICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgIGJsb2NrLmkobG9jYWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25fb3V0KGJsb2NrLCBsb2NhbCwgZGV0YWNoLCBjYWxsYmFjaykge1xuICAgIGlmIChibG9jayAmJiBibG9jay5vKSB7XG4gICAgICAgIGlmIChvdXRyb2luZy5oYXMoYmxvY2spKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBvdXRyb2luZy5hZGQoYmxvY2spO1xuICAgICAgICBvdXRyb3MuYy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoZGV0YWNoKVxuICAgICAgICAgICAgICAgICAgICBibG9jay5kKDEpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBibG9jay5vKGxvY2FsKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG59XG5jb25zdCBudWxsX3RyYW5zaXRpb24gPSB7IGR1cmF0aW9uOiAwIH07XG5mdW5jdGlvbiBjcmVhdGVfaW5fdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSBmYWxzZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgbGV0IHRhc2s7XG4gICAgbGV0IHVpZCA9IDA7XG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcywgdWlkKyspO1xuICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheTtcbiAgICAgICAgY29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG4gICAgICAgIGlmICh0YXNrKVxuICAgICAgICAgICAgdGFzay5hYm9ydCgpO1xuICAgICAgICBydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCB0cnVlLCAnc3RhcnQnKSk7XG4gICAgICAgIHRhc2sgPSBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0KCkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0ZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlKTtcbiAgICAgICAgICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICAgICAgd2FpdCgpLnRoZW4oZ28pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9vdXRfdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSB0cnVlO1xuICAgIGxldCBhbmltYXRpb25fbmFtZTtcbiAgICBjb25zdCBncm91cCA9IG91dHJvcztcbiAgICBncm91cC5yICs9IDE7XG4gICAgZnVuY3Rpb24gZ28oKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDEsIDAsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheTtcbiAgICAgICAgY29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG4gICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgZmFsc2UsICdzdGFydCcpKTtcbiAgICAgICAgbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93ID49IGVuZF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIGZhbHNlLCAnZW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghLS1ncm91cC5yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHdpbGwgcmVzdWx0IGluIGBlbmQoKWAgYmVpbmcgY2FsbGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gd2UgZG9uJ3QgbmVlZCB0byBjbGVhbiB1cCBoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5fYWxsKGdyb3VwLmMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlYXNpbmcoKG5vdyAtIHN0YXJ0X3RpbWUpIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDEgLSB0LCB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnVubmluZztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgIHdhaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZygpO1xuICAgICAgICAgICAgZ28oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnbygpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBlbmQocmVzZXQpIHtcbiAgICAgICAgICAgIGlmIChyZXNldCAmJiBjb25maWcudGljaykge1xuICAgICAgICAgICAgICAgIGNvbmZpZy50aWNrKDEsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICAgICAgICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zLCBpbnRybykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCB0ID0gaW50cm8gPyAwIDogMTtcbiAgICBsZXQgcnVubmluZ19wcm9ncmFtID0gbnVsbDtcbiAgICBsZXQgcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWUgPSBudWxsO1xuICAgIGZ1bmN0aW9uIGNsZWFyX2FuaW1hdGlvbigpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbml0KHByb2dyYW0sIGR1cmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGQgPSAocHJvZ3JhbS5iIC0gdCk7XG4gICAgICAgIGR1cmF0aW9uICo9IE1hdGguYWJzKGQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYTogdCxcbiAgICAgICAgICAgIGI6IHByb2dyYW0uYixcbiAgICAgICAgICAgIGQsXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIHN0YXJ0OiBwcm9ncmFtLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBwcm9ncmFtLnN0YXJ0ICsgZHVyYXRpb24sXG4gICAgICAgICAgICBncm91cDogcHJvZ3JhbS5ncm91cFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbyhiKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSB7XG4gICAgICAgICAgICBzdGFydDogbm93KCkgKyBkZWxheSxcbiAgICAgICAgICAgIGJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFiKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgcHJvZ3JhbS5ncm91cCA9IG91dHJvcztcbiAgICAgICAgICAgIG91dHJvcy5yICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSB8fCBwZW5kaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgIHBlbmRpbmdfcHJvZ3JhbSA9IHByb2dyYW07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIGlzIGFuIGludHJvLCBhbmQgdGhlcmUncyBhIGRlbGF5LCB3ZSBuZWVkIHRvIGRvXG4gICAgICAgICAgICAvLyBhbiBpbml0aWFsIHRpY2sgYW5kL29yIGFwcGx5IENTUyBhbmltYXRpb24gaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIGIsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGIpXG4gICAgICAgICAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IGluaXQocHJvZ3JhbSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCBiLCAnc3RhcnQnKSk7XG4gICAgICAgICAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdfcHJvZ3JhbSAmJiBub3cgPiBwZW5kaW5nX3Byb2dyYW0uc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gaW5pdChwZW5kaW5nX3Byb2dyYW0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgcnVubmluZ19wcm9ncmFtLmIsICdzdGFydCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgdCwgcnVubmluZ19wcm9ncmFtLmIsIHJ1bm5pbmdfcHJvZ3JhbS5kdXJhdGlvbiwgMCwgZWFzaW5nLCBjb25maWcuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub3cgPj0gcnVubmluZ19wcm9ncmFtLmVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGljayh0ID0gcnVubmluZ19wcm9ncmFtLmIsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnZW5kJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBlbmRpbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlJ3JlIGRvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtLmIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW50cm8gXHUyMDE0IHdlIGNhbiB0aWR5IHVwIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3V0cm8gXHUyMDE0IG5lZWRzIHRvIGJlIGNvb3JkaW5hdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghLS1ydW5uaW5nX3Byb2dyYW0uZ3JvdXAucilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bl9hbGwocnVubmluZ19wcm9ncmFtLmdyb3VwLmMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobm93ID49IHJ1bm5pbmdfcHJvZ3JhbS5zdGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcCA9IG5vdyAtIHJ1bm5pbmdfcHJvZ3JhbS5zdGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBydW5uaW5nX3Byb2dyYW0uYSArIHJ1bm5pbmdfcHJvZ3JhbS5kICogZWFzaW5nKHAgLyBydW5uaW5nX3Byb2dyYW0uZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhKHJ1bm5pbmdfcHJvZ3JhbSB8fCBwZW5kaW5nX3Byb2dyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcnVuKGIpIHtcbiAgICAgICAgICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgd2FpdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZygpO1xuICAgICAgICAgICAgICAgICAgICBnbyhiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdvKGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbmQoKSB7XG4gICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVfcHJvbWlzZShwcm9taXNlLCBpbmZvKSB7XG4gICAgY29uc3QgdG9rZW4gPSBpbmZvLnRva2VuID0ge307XG4gICAgZnVuY3Rpb24gdXBkYXRlKHR5cGUsIGluZGV4LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpbmZvLnRva2VuICE9PSB0b2tlbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaW5mby5yZXNvbHZlZCA9IHZhbHVlO1xuICAgICAgICBsZXQgY2hpbGRfY3R4ID0gaW5mby5jdHg7XG4gICAgICAgIGlmIChrZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2hpbGRfY3R4ID0gY2hpbGRfY3R4LnNsaWNlKCk7XG4gICAgICAgICAgICBjaGlsZF9jdHhba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2NrID0gdHlwZSAmJiAoaW5mby5jdXJyZW50ID0gdHlwZSkoY2hpbGRfY3R4KTtcbiAgICAgICAgbGV0IG5lZWRzX2ZsdXNoID0gZmFsc2U7XG4gICAgICAgIGlmIChpbmZvLmJsb2NrKSB7XG4gICAgICAgICAgICBpZiAoaW5mby5ibG9ja3MpIHtcbiAgICAgICAgICAgICAgICBpbmZvLmJsb2Nrcy5mb3JFYWNoKChibG9jaywgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gaW5kZXggJiYgYmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mby5ibG9ja3NbaV0gPT09IGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzW2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmZvLmJsb2NrLmQoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBibG9jay5jKCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGJsb2NrLCAxKTtcbiAgICAgICAgICAgIGJsb2NrLm0oaW5mby5tb3VudCgpLCBpbmZvLmFuY2hvcik7XG4gICAgICAgICAgICBuZWVkc19mbHVzaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5mby5ibG9jayA9IGJsb2NrO1xuICAgICAgICBpZiAoaW5mby5ibG9ja3MpXG4gICAgICAgICAgICBpbmZvLmJsb2Nrc1tpbmRleF0gPSBibG9jaztcbiAgICAgICAgaWYgKG5lZWRzX2ZsdXNoKSB7XG4gICAgICAgICAgICBmbHVzaCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc19wcm9taXNlKHByb21pc2UpKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRfY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG4gICAgICAgIHByb21pc2UudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY3VycmVudF9jb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGluZm8udGhlbiwgMSwgaW5mby52YWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY3VycmVudF9jb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGluZm8uY2F0Y2gsIDIsIGluZm8uZXJyb3IsIGVycm9yKTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgICAgIGlmICghaW5mby5oYXNDYXRjaCkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gaWYgd2UgcHJldmlvdXNseSBoYWQgYSB0aGVuL2NhdGNoIGJsb2NrLCBkZXN0cm95IGl0XG4gICAgICAgIGlmIChpbmZvLmN1cnJlbnQgIT09IGluZm8ucGVuZGluZykge1xuICAgICAgICAgICAgdXBkYXRlKGluZm8ucGVuZGluZywgMCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby50aGVuKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSBwcm9taXNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZV9hd2FpdF9ibG9ja19icmFuY2goaW5mbywgY3R4LCBkaXJ0eSkge1xuICAgIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICAgIGNvbnN0IHsgcmVzb2x2ZWQgfSA9IGluZm87XG4gICAgaWYgKGluZm8uY3VycmVudCA9PT0gaW5mby50aGVuKSB7XG4gICAgICAgIGNoaWxkX2N0eFtpbmZvLnZhbHVlXSA9IHJlc29sdmVkO1xuICAgIH1cbiAgICBpZiAoaW5mby5jdXJyZW50ID09PSBpbmZvLmNhdGNoKSB7XG4gICAgICAgIGNoaWxkX2N0eFtpbmZvLmVycm9yXSA9IHJlc29sdmVkO1xuICAgIH1cbiAgICBpbmZvLmJsb2NrLnAoY2hpbGRfY3R4LCBkaXJ0eSk7XG59XG5cbmNvbnN0IGdsb2JhbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IHdpbmRvd1xuICAgIDogdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gZ2xvYmFsVGhpc1xuICAgICAgICA6IGdsb2JhbCk7XG5cbmZ1bmN0aW9uIGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmQoMSk7XG4gICAgbG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xufVxuZnVuY3Rpb24gb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgIGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZpeF9hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZigpO1xuICAgIGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5mdW5jdGlvbiBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5mKCk7XG4gICAgb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5mdW5jdGlvbiB1cGRhdGVfa2V5ZWRfZWFjaChvbGRfYmxvY2tzLCBkaXJ0eSwgZ2V0X2tleSwgZHluYW1pYywgY3R4LCBsaXN0LCBsb29rdXAsIG5vZGUsIGRlc3Ryb3ksIGNyZWF0ZV9lYWNoX2Jsb2NrLCBuZXh0LCBnZXRfY29udGV4dCkge1xuICAgIGxldCBvID0gb2xkX2Jsb2Nrcy5sZW5ndGg7XG4gICAgbGV0IG4gPSBsaXN0Lmxlbmd0aDtcbiAgICBsZXQgaSA9IG87XG4gICAgY29uc3Qgb2xkX2luZGV4ZXMgPSB7fTtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBvbGRfaW5kZXhlc1tvbGRfYmxvY2tzW2ldLmtleV0gPSBpO1xuICAgIGNvbnN0IG5ld19ibG9ja3MgPSBbXTtcbiAgICBjb25zdCBuZXdfbG9va3VwID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGRlbHRhcyA9IG5ldyBNYXAoKTtcbiAgICBpID0gbjtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSk7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldF9rZXkoY2hpbGRfY3R4KTtcbiAgICAgICAgbGV0IGJsb2NrID0gbG9va3VwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWJsb2NrKSB7XG4gICAgICAgICAgICBibG9jayA9IGNyZWF0ZV9lYWNoX2Jsb2NrKGtleSwgY2hpbGRfY3R4KTtcbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkeW5hbWljKSB7XG4gICAgICAgICAgICBibG9jay5wKGNoaWxkX2N0eCwgZGlydHkpO1xuICAgICAgICB9XG4gICAgICAgIG5ld19sb29rdXAuc2V0KGtleSwgbmV3X2Jsb2Nrc1tpXSA9IGJsb2NrKTtcbiAgICAgICAgaWYgKGtleSBpbiBvbGRfaW5kZXhlcylcbiAgICAgICAgICAgIGRlbHRhcy5zZXQoa2V5LCBNYXRoLmFicyhpIC0gb2xkX2luZGV4ZXNba2V5XSkpO1xuICAgIH1cbiAgICBjb25zdCB3aWxsX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgZGlkX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgZnVuY3Rpb24gaW5zZXJ0KGJsb2NrKSB7XG4gICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICBibG9jay5tKG5vZGUsIG5leHQpO1xuICAgICAgICBsb29rdXAuc2V0KGJsb2NrLmtleSwgYmxvY2spO1xuICAgICAgICBuZXh0ID0gYmxvY2suZmlyc3Q7XG4gICAgICAgIG4tLTtcbiAgICB9XG4gICAgd2hpbGUgKG8gJiYgbikge1xuICAgICAgICBjb25zdCBuZXdfYmxvY2sgPSBuZXdfYmxvY2tzW24gLSAxXTtcbiAgICAgICAgY29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvIC0gMV07XG4gICAgICAgIGNvbnN0IG5ld19rZXkgPSBuZXdfYmxvY2sua2V5O1xuICAgICAgICBjb25zdCBvbGRfa2V5ID0gb2xkX2Jsb2NrLmtleTtcbiAgICAgICAgaWYgKG5ld19ibG9jayA9PT0gb2xkX2Jsb2NrKSB7XG4gICAgICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICAgICAgICBuZXh0ID0gbmV3X2Jsb2NrLmZpcnN0O1xuICAgICAgICAgICAgby0tO1xuICAgICAgICAgICAgbi0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfa2V5KSkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBibG9ja1xuICAgICAgICAgICAgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWxvb2t1cC5oYXMobmV3X2tleSkgfHwgd2lsbF9tb3ZlLmhhcyhuZXdfa2V5KSkge1xuICAgICAgICAgICAgaW5zZXJ0KG5ld19ibG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGlkX21vdmUuaGFzKG9sZF9rZXkpKSB7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVsdGFzLmdldChuZXdfa2V5KSA+IGRlbHRhcy5nZXQob2xkX2tleSkpIHtcbiAgICAgICAgICAgIGRpZF9tb3ZlLmFkZChuZXdfa2V5KTtcbiAgICAgICAgICAgIGluc2VydChuZXdfYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2lsbF9tb3ZlLmFkZChvbGRfa2V5KTtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoby0tKSB7XG4gICAgICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3Nbb107XG4gICAgICAgIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2Jsb2NrLmtleSkpXG4gICAgICAgICAgICBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcbiAgICB9XG4gICAgd2hpbGUgKG4pXG4gICAgICAgIGluc2VydChuZXdfYmxvY2tzW24gLSAxXSk7XG4gICAgcmV0dXJuIG5ld19ibG9ja3M7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9lYWNoX2tleXMoY3R4LCBsaXN0LCBnZXRfY29udGV4dCwgZ2V0X2tleSkge1xuICAgIGNvbnN0IGtleXMgPSBuZXcgU2V0KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldF9rZXkoZ2V0X2NvbnRleHQoY3R4LCBsaXN0LCBpKSk7XG4gICAgICAgIGlmIChrZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBoYXZlIGR1cGxpY2F0ZSBrZXlzIGluIGEga2V5ZWQgZWFjaCcpO1xuICAgICAgICB9XG4gICAgICAgIGtleXMuYWRkKGtleSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRfc3ByZWFkX3VwZGF0ZShsZXZlbHMsIHVwZGF0ZXMpIHtcbiAgICBjb25zdCB1cGRhdGUgPSB7fTtcbiAgICBjb25zdCB0b19udWxsX291dCA9IHt9O1xuICAgIGNvbnN0IGFjY291bnRlZF9mb3IgPSB7ICQkc2NvcGU6IDEgfTtcbiAgICBsZXQgaSA9IGxldmVscy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBvID0gbGV2ZWxzW2ldO1xuICAgICAgICBjb25zdCBuID0gdXBkYXRlc1tpXTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gbikpXG4gICAgICAgICAgICAgICAgICAgIHRvX251bGxfb3V0W2tleV0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbikge1xuICAgICAgICAgICAgICAgIGlmICghYWNjb3VudGVkX2ZvcltrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gbltrZXldO1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50ZWRfZm9yW2tleV0gPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldmVsc1tpXSA9IG47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0b19udWxsX291dCkge1xuICAgICAgICBpZiAoIShrZXkgaW4gdXBkYXRlKSlcbiAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlO1xufVxuZnVuY3Rpb24gZ2V0X3NwcmVhZF9vYmplY3Qoc3ByZWFkX3Byb3BzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzcHJlYWRfcHJvcHMgPT09ICdvYmplY3QnICYmIHNwcmVhZF9wcm9wcyAhPT0gbnVsbCA/IHNwcmVhZF9wcm9wcyA6IHt9O1xufVxuXG4vLyBzb3VyY2U6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbFxuY29uc3QgYm9vbGVhbl9hdHRyaWJ1dGVzID0gbmV3IFNldChbXG4gICAgJ2FsbG93ZnVsbHNjcmVlbicsXG4gICAgJ2FsbG93cGF5bWVudHJlcXVlc3QnLFxuICAgICdhc3luYycsXG4gICAgJ2F1dG9mb2N1cycsXG4gICAgJ2F1dG9wbGF5JyxcbiAgICAnY2hlY2tlZCcsXG4gICAgJ2NvbnRyb2xzJyxcbiAgICAnZGVmYXVsdCcsXG4gICAgJ2RlZmVyJyxcbiAgICAnZGlzYWJsZWQnLFxuICAgICdmb3Jtbm92YWxpZGF0ZScsXG4gICAgJ2hpZGRlbicsXG4gICAgJ2lzbWFwJyxcbiAgICAnbG9vcCcsXG4gICAgJ211bHRpcGxlJyxcbiAgICAnbXV0ZWQnLFxuICAgICdub21vZHVsZScsXG4gICAgJ25vdmFsaWRhdGUnLFxuICAgICdvcGVuJyxcbiAgICAncGxheXNpbmxpbmUnLFxuICAgICdyZWFkb25seScsXG4gICAgJ3JlcXVpcmVkJyxcbiAgICAncmV2ZXJzZWQnLFxuICAgICdzZWxlY3RlZCdcbl0pO1xuXG5jb25zdCB2b2lkX2VsZW1lbnRfbmFtZXMgPSAvXig/OmFyZWF8YmFzZXxicnxjb2x8Y29tbWFuZHxlbWJlZHxocnxpbWd8aW5wdXR8a2V5Z2VufGxpbmt8bWV0YXxwYXJhbXxzb3VyY2V8dHJhY2t8d2JyKSQvO1xuZnVuY3Rpb24gaXNfdm9pZChuYW1lKSB7XG4gICAgcmV0dXJuIHZvaWRfZWxlbWVudF9uYW1lcy50ZXN0KG5hbWUpIHx8IG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJyFkb2N0eXBlJztcbn1cblxuY29uc3QgaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIgPSAvW1xccydcIj4vPVxcdXtGREQwfS1cXHV7RkRFRn1cXHV7RkZGRX1cXHV7RkZGRn1cXHV7MUZGRkV9XFx1ezFGRkZGfVxcdXsyRkZGRX1cXHV7MkZGRkZ9XFx1ezNGRkZFfVxcdXszRkZGRn1cXHV7NEZGRkV9XFx1ezRGRkZGfVxcdXs1RkZGRX1cXHV7NUZGRkZ9XFx1ezZGRkZFfVxcdXs2RkZGRn1cXHV7N0ZGRkV9XFx1ezdGRkZGfVxcdXs4RkZGRX1cXHV7OEZGRkZ9XFx1ezlGRkZFfVxcdXs5RkZGRn1cXHV7QUZGRkV9XFx1e0FGRkZGfVxcdXtCRkZGRX1cXHV7QkZGRkZ9XFx1e0NGRkZFfVxcdXtDRkZGRn1cXHV7REZGRkV9XFx1e0RGRkZGfVxcdXtFRkZGRX1cXHV7RUZGRkZ9XFx1e0ZGRkZFfVxcdXtGRkZGRn1cXHV7MTBGRkZFfVxcdXsxMEZGRkZ9XS91O1xuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG4vLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jbm9uY2hhcmFjdGVyXG5mdW5jdGlvbiBzcHJlYWQoYXJncywgYXR0cnNfdG9fYWRkKSB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIC4uLmFyZ3MpO1xuICAgIGlmIChhdHRyc190b19hZGQpIHtcbiAgICAgICAgY29uc3QgY2xhc3Nlc190b19hZGQgPSBhdHRyc190b19hZGQuY2xhc3NlcztcbiAgICAgICAgY29uc3Qgc3R5bGVzX3RvX2FkZCA9IGF0dHJzX3RvX2FkZC5zdHlsZXM7XG4gICAgICAgIGlmIChjbGFzc2VzX3RvX2FkZCkge1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuY2xhc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuY2xhc3MgPSBjbGFzc2VzX3RvX2FkZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuY2xhc3MgKz0gJyAnICsgY2xhc3Nlc190b19hZGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0eWxlc190b19hZGQpIHtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLnN0eWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnN0eWxlID0gc3R5bGVfb2JqZWN0X3RvX3N0cmluZyhzdHlsZXNfdG9fYWRkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuc3R5bGUgPSBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKG1lcmdlX3Nzcl9zdHlsZXMoYXR0cmlidXRlcy5zdHlsZSwgc3R5bGVzX3RvX2FkZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBzdHIgPSAnJztcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICBpZiAoaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIudGVzdChuYW1lKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUgPT09IHRydWUpXG4gICAgICAgICAgICBzdHIgKz0gJyAnICsgbmFtZTtcbiAgICAgICAgZWxzZSBpZiAoYm9vbGVhbl9hdHRyaWJ1dGVzLmhhcyhuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpXG4gICAgICAgICAgICAgICAgc3RyICs9ICcgJyArIG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc3RyICs9IGAgJHtuYW1lfT1cIiR7dmFsdWV9XCJgO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cjtcbn1cbmZ1bmN0aW9uIG1lcmdlX3Nzcl9zdHlsZXMoc3R5bGVfYXR0cmlidXRlLCBzdHlsZV9kaXJlY3RpdmUpIHtcbiAgICBjb25zdCBzdHlsZV9vYmplY3QgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGluZGl2aWR1YWxfc3R5bGUgb2Ygc3R5bGVfYXR0cmlidXRlLnNwbGl0KCc7JykpIHtcbiAgICAgICAgY29uc3QgY29sb25faW5kZXggPSBpbmRpdmlkdWFsX3N0eWxlLmluZGV4T2YoJzonKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IGluZGl2aWR1YWxfc3R5bGUuc2xpY2UoMCwgY29sb25faW5kZXgpLnRyaW0oKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBpbmRpdmlkdWFsX3N0eWxlLnNsaWNlKGNvbG9uX2luZGV4ICsgMSkudHJpbSgpO1xuICAgICAgICBpZiAoIW5hbWUpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgc3R5bGVfb2JqZWN0W25hbWVdID0gdmFsdWU7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbmFtZSBpbiBzdHlsZV9kaXJlY3RpdmUpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzdHlsZV9kaXJlY3RpdmVbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgc3R5bGVfb2JqZWN0W25hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgc3R5bGVfb2JqZWN0W25hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHlsZV9vYmplY3Q7XG59XG5jb25zdCBBVFRSX1JFR0VYID0gL1smXCJdL2c7XG5jb25zdCBDT05URU5UX1JFR0VYID0gL1smPF0vZztcbi8qKlxuICogTm90ZTogdGhpcyBtZXRob2QgaXMgcGVyZm9ybWFuY2Ugc2Vuc2l0aXZlIGFuZCBoYXMgYmVlbiBvcHRpbWl6ZWRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zdmVsdGVqcy9zdmVsdGUvcHVsbC81NzAxXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZSh2YWx1ZSwgaXNfYXR0ciA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc3RyID0gU3RyaW5nKHZhbHVlKTtcbiAgICBjb25zdCBwYXR0ZXJuID0gaXNfYXR0ciA/IEFUVFJfUkVHRVggOiBDT05URU5UX1JFR0VYO1xuICAgIHBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgICBsZXQgZXNjYXBlZCA9ICcnO1xuICAgIGxldCBsYXN0ID0gMDtcbiAgICB3aGlsZSAocGF0dGVybi50ZXN0KHN0cikpIHtcbiAgICAgICAgY29uc3QgaSA9IHBhdHRlcm4ubGFzdEluZGV4IC0gMTtcbiAgICAgICAgY29uc3QgY2ggPSBzdHJbaV07XG4gICAgICAgIGVzY2FwZWQgKz0gc3RyLnN1YnN0cmluZyhsYXN0LCBpKSArIChjaCA9PT0gJyYnID8gJyZhbXA7JyA6IChjaCA9PT0gJ1wiJyA/ICcmcXVvdDsnIDogJyZsdDsnKSk7XG4gICAgICAgIGxhc3QgPSBpICsgMTtcbiAgICB9XG4gICAgcmV0dXJuIGVzY2FwZWQgKyBzdHIuc3Vic3RyaW5nKGxhc3QpO1xufVxuZnVuY3Rpb24gZXNjYXBlX2F0dHJpYnV0ZV92YWx1ZSh2YWx1ZSkge1xuICAgIC8vIGtlZXAgYm9vbGVhbnMsIG51bGwsIGFuZCB1bmRlZmluZWQgZm9yIHRoZSBzYWtlIG9mIGBzcHJlYWRgXG4gICAgY29uc3Qgc2hvdWxkX2VzY2FwZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpO1xuICAgIHJldHVybiBzaG91bGRfZXNjYXBlID8gZXNjYXBlKHZhbHVlLCB0cnVlKSA6IHZhbHVlO1xufVxuZnVuY3Rpb24gZXNjYXBlX29iamVjdChvYmopIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBlc2NhcGVfYXR0cmlidXRlX3ZhbHVlKG9ialtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGVhY2goaXRlbXMsIGZuKSB7XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IGZuKGl0ZW1zW2ldLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbmNvbnN0IG1pc3NpbmdfY29tcG9uZW50ID0ge1xuICAgICQkcmVuZGVyOiAoKSA9PiAnJ1xufTtcbmZ1bmN0aW9uIHZhbGlkYXRlX2NvbXBvbmVudChjb21wb25lbnQsIG5hbWUpIHtcbiAgICBpZiAoIWNvbXBvbmVudCB8fCAhY29tcG9uZW50LiQkcmVuZGVyKSB7XG4gICAgICAgIGlmIChuYW1lID09PSAnc3ZlbHRlOmNvbXBvbmVudCcpXG4gICAgICAgICAgICBuYW1lICs9ICcgdGhpcz17Li4ufSc7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgPCR7bmFtZX0+IGlzIG5vdCBhIHZhbGlkIFNTUiBjb21wb25lbnQuIFlvdSBtYXkgbmVlZCB0byByZXZpZXcgeW91ciBidWlsZCBjb25maWcgdG8gZW5zdXJlIHRoYXQgZGVwZW5kZW5jaWVzIGFyZSBjb21waWxlZCwgcmF0aGVyIHRoYW4gaW1wb3J0ZWQgYXMgcHJlLWNvbXBpbGVkIG1vZHVsZXNgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGRlYnVnKGZpbGUsIGxpbmUsIGNvbHVtbiwgdmFsdWVzKSB7XG4gICAgY29uc29sZS5sb2coYHtAZGVidWd9ICR7ZmlsZSA/IGZpbGUgKyAnICcgOiAnJ30oJHtsaW5lfToke2NvbHVtbn0pYCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKHZhbHVlcyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIHJldHVybiAnJztcbn1cbmxldCBvbl9kZXN0cm95O1xuZnVuY3Rpb24gY3JlYXRlX3Nzcl9jb21wb25lbnQoZm4pIHtcbiAgICBmdW5jdGlvbiAkJHJlbmRlcihyZXN1bHQsIHByb3BzLCBiaW5kaW5ncywgc2xvdHMsIGNvbnRleHQpIHtcbiAgICAgICAgY29uc3QgcGFyZW50X2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICAgICAgICBjb25zdCAkJCA9IHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3ksXG4gICAgICAgICAgICBjb250ZXh0OiBuZXcgTWFwKGNvbnRleHQgfHwgKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSkpLFxuICAgICAgICAgICAgLy8gdGhlc2Ugd2lsbCBiZSBpbW1lZGlhdGVseSBkaXNjYXJkZWRcbiAgICAgICAgICAgIG9uX21vdW50OiBbXSxcbiAgICAgICAgICAgIGJlZm9yZV91cGRhdGU6IFtdLFxuICAgICAgICAgICAgYWZ0ZXJfdXBkYXRlOiBbXSxcbiAgICAgICAgICAgIGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KClcbiAgICAgICAgfTtcbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHsgJCQgfSk7XG4gICAgICAgIGNvbnN0IGh0bWwgPSBmbihyZXN1bHQsIHByb3BzLCBiaW5kaW5ncywgc2xvdHMpO1xuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXI6IChwcm9wcyA9IHt9LCB7ICQkc2xvdHMgPSB7fSwgY29udGV4dCA9IG5ldyBNYXAoKSB9ID0ge30pID0+IHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3kgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgdGl0bGU6ICcnLCBoZWFkOiAnJywgY3NzOiBuZXcgU2V0KCkgfTtcbiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSAkJHJlbmRlcihyZXN1bHQsIHByb3BzLCB7fSwgJCRzbG90cywgY29udGV4dCk7XG4gICAgICAgICAgICBydW5fYWxsKG9uX2Rlc3Ryb3kpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBodG1sLFxuICAgICAgICAgICAgICAgIGNzczoge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBBcnJheS5mcm9tKHJlc3VsdC5jc3MpLm1hcChjc3MgPT4gY3NzLmNvZGUpLmpvaW4oJ1xcbicpLFxuICAgICAgICAgICAgICAgICAgICBtYXA6IG51bGwgLy8gVE9ET1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGVhZDogcmVzdWx0LnRpdGxlICsgcmVzdWx0LmhlYWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgICQkcmVuZGVyXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGFkZF9hdHRyaWJ1dGUobmFtZSwgdmFsdWUsIGJvb2xlYW4pIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAoYm9vbGVhbiAmJiAhdmFsdWUpKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgY29uc3QgYXNzaWdubWVudCA9IChib29sZWFuICYmIHZhbHVlID09PSB0cnVlKSA/ICcnIDogYD1cIiR7ZXNjYXBlKHZhbHVlLCB0cnVlKX1cImA7XG4gICAgcmV0dXJuIGAgJHtuYW1lfSR7YXNzaWdubWVudH1gO1xufVxuZnVuY3Rpb24gYWRkX2NsYXNzZXMoY2xhc3Nlcykge1xuICAgIHJldHVybiBjbGFzc2VzID8gYCBjbGFzcz1cIiR7Y2xhc3Nlc31cImAgOiAnJztcbn1cbmZ1bmN0aW9uIHN0eWxlX29iamVjdF90b19zdHJpbmcoc3R5bGVfb2JqZWN0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHN0eWxlX29iamVjdClcbiAgICAgICAgLmZpbHRlcihrZXkgPT4gc3R5bGVfb2JqZWN0W2tleV0pXG4gICAgICAgIC5tYXAoa2V5ID0+IGAke2tleX06ICR7c3R5bGVfb2JqZWN0W2tleV19O2ApXG4gICAgICAgIC5qb2luKCcgJyk7XG59XG5mdW5jdGlvbiBhZGRfc3R5bGVzKHN0eWxlX29iamVjdCkge1xuICAgIGNvbnN0IHN0eWxlcyA9IHN0eWxlX29iamVjdF90b19zdHJpbmcoc3R5bGVfb2JqZWN0KTtcbiAgICByZXR1cm4gc3R5bGVzID8gYCBzdHlsZT1cIiR7c3R5bGVzfVwiYCA6ICcnO1xufVxuXG5mdW5jdGlvbiBiaW5kKGNvbXBvbmVudCwgbmFtZSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBpbmRleCA9IGNvbXBvbmVudC4kJC5wcm9wc1tuYW1lXTtcbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb21wb25lbnQuJCQuYm91bmRbaW5kZXhdID0gY2FsbGJhY2s7XG4gICAgICAgIGNhbGxiYWNrKGNvbXBvbmVudC4kJC5jdHhbaW5kZXhdKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVfY29tcG9uZW50KGJsb2NrKSB7XG4gICAgYmxvY2sgJiYgYmxvY2suYygpO1xufVxuZnVuY3Rpb24gY2xhaW1fY29tcG9uZW50KGJsb2NrLCBwYXJlbnRfbm9kZXMpIHtcbiAgICBibG9jayAmJiBibG9jay5sKHBhcmVudF9ub2Rlcyk7XG59XG5mdW5jdGlvbiBtb3VudF9jb21wb25lbnQoY29tcG9uZW50LCB0YXJnZXQsIGFuY2hvciwgY3VzdG9tRWxlbWVudCkge1xuICAgIGNvbnN0IHsgZnJhZ21lbnQsIG9uX21vdW50LCBvbl9kZXN0cm95LCBhZnRlcl91cGRhdGUgfSA9IGNvbXBvbmVudC4kJDtcbiAgICBmcmFnbWVudCAmJiBmcmFnbWVudC5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICBpZiAoIWN1c3RvbUVsZW1lbnQpIHtcbiAgICAgICAgLy8gb25Nb3VudCBoYXBwZW5zIGJlZm9yZSB0aGUgaW5pdGlhbCBhZnRlclVwZGF0ZVxuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19vbl9kZXN0cm95ID0gb25fbW91bnQubWFwKHJ1bikuZmlsdGVyKGlzX2Z1bmN0aW9uKTtcbiAgICAgICAgICAgIGlmIChvbl9kZXN0cm95KSB7XG4gICAgICAgICAgICAgICAgb25fZGVzdHJveS5wdXNoKC4uLm5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEVkZ2UgY2FzZSAtIGNvbXBvbmVudCB3YXMgZGVzdHJveWVkIGltbWVkaWF0ZWx5LFxuICAgICAgICAgICAgICAgIC8vIG1vc3QgbGlrZWx5IGFzIGEgcmVzdWx0IG9mIGEgYmluZGluZyBpbml0aWFsaXNpbmdcbiAgICAgICAgICAgICAgICBydW5fYWxsKG5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBvbmVudC4kJC5vbl9tb3VudCA9IFtdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG59XG5mdW5jdGlvbiBkZXN0cm95X2NvbXBvbmVudChjb21wb25lbnQsIGRldGFjaGluZykge1xuICAgIGNvbnN0ICQkID0gY29tcG9uZW50LiQkO1xuICAgIGlmICgkJC5mcmFnbWVudCAhPT0gbnVsbCkge1xuICAgICAgICBydW5fYWxsKCQkLm9uX2Rlc3Ryb3kpO1xuICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5kKGRldGFjaGluZyk7XG4gICAgICAgIC8vIFRPRE8gbnVsbCBvdXQgb3RoZXIgcmVmcywgaW5jbHVkaW5nIGNvbXBvbmVudC4kJCAoYnV0IG5lZWQgdG9cbiAgICAgICAgLy8gcHJlc2VydmUgZmluYWwgc3RhdGU/KVxuICAgICAgICAkJC5vbl9kZXN0cm95ID0gJCQuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgICAkJC5jdHggPSBbXTtcbiAgICB9XG59XG5mdW5jdGlvbiBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSkge1xuICAgIGlmIChjb21wb25lbnQuJCQuZGlydHlbMF0gPT09IC0xKSB7XG4gICAgICAgIGRpcnR5X2NvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICAgICAgY29tcG9uZW50LiQkLmRpcnR5LmZpbGwoMCk7XG4gICAgfVxuICAgIGNvbXBvbmVudC4kJC5kaXJ0eVsoaSAvIDMxKSB8IDBdIHw9ICgxIDw8IChpICUgMzEpKTtcbn1cbmZ1bmN0aW9uIGluaXQoY29tcG9uZW50LCBvcHRpb25zLCBpbnN0YW5jZSwgY3JlYXRlX2ZyYWdtZW50LCBub3RfZXF1YWwsIHByb3BzLCBhcHBlbmRfc3R5bGVzLCBkaXJ0eSA9IFstMV0pIHtcbiAgICBjb25zdCBwYXJlbnRfY29tcG9uZW50ID0gY3VycmVudF9jb21wb25lbnQ7XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgY29uc3QgJCQgPSBjb21wb25lbnQuJCQgPSB7XG4gICAgICAgIGZyYWdtZW50OiBudWxsLFxuICAgICAgICBjdHg6IG51bGwsXG4gICAgICAgIC8vIHN0YXRlXG4gICAgICAgIHByb3BzLFxuICAgICAgICB1cGRhdGU6IG5vb3AsXG4gICAgICAgIG5vdF9lcXVhbCxcbiAgICAgICAgYm91bmQ6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICAvLyBsaWZlY3ljbGVcbiAgICAgICAgb25fbW91bnQ6IFtdLFxuICAgICAgICBvbl9kZXN0cm95OiBbXSxcbiAgICAgICAgb25fZGlzY29ubmVjdDogW10sXG4gICAgICAgIGJlZm9yZV91cGRhdGU6IFtdLFxuICAgICAgICBhZnRlcl91cGRhdGU6IFtdLFxuICAgICAgICBjb250ZXh0OiBuZXcgTWFwKG9wdGlvbnMuY29udGV4dCB8fCAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IFtdKSksXG4gICAgICAgIC8vIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICBkaXJ0eSxcbiAgICAgICAgc2tpcF9ib3VuZDogZmFsc2UsXG4gICAgICAgIHJvb3Q6IG9wdGlvbnMudGFyZ2V0IHx8IHBhcmVudF9jb21wb25lbnQuJCQucm9vdFxuICAgIH07XG4gICAgYXBwZW5kX3N0eWxlcyAmJiBhcHBlbmRfc3R5bGVzKCQkLnJvb3QpO1xuICAgIGxldCByZWFkeSA9IGZhbHNlO1xuICAgICQkLmN0eCA9IGluc3RhbmNlXG4gICAgICAgID8gaW5zdGFuY2UoY29tcG9uZW50LCBvcHRpb25zLnByb3BzIHx8IHt9LCAoaSwgcmV0LCAuLi5yZXN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJlc3QubGVuZ3RoID8gcmVzdFswXSA6IHJldDtcbiAgICAgICAgICAgIGlmICgkJC5jdHggJiYgbm90X2VxdWFsKCQkLmN0eFtpXSwgJCQuY3R4W2ldID0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkJC5za2lwX2JvdW5kICYmICQkLmJvdW5kW2ldKVxuICAgICAgICAgICAgICAgICAgICAkJC5ib3VuZFtpXSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlYWR5KVxuICAgICAgICAgICAgICAgICAgICBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9KVxuICAgICAgICA6IFtdO1xuICAgICQkLnVwZGF0ZSgpO1xuICAgIHJlYWR5ID0gdHJ1ZTtcbiAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgIC8vIGBmYWxzZWAgYXMgYSBzcGVjaWFsIGNhc2Ugb2Ygbm8gRE9NIGNvbXBvbmVudFxuICAgICQkLmZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50ID8gY3JlYXRlX2ZyYWdtZW50KCQkLmN0eCkgOiBmYWxzZTtcbiAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaHlkcmF0ZSkge1xuICAgICAgICAgICAgc3RhcnRfaHlkcmF0aW5nKCk7XG4gICAgICAgICAgICBjb25zdCBub2RlcyA9IGNoaWxkcmVuKG9wdGlvbnMudGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5sKG5vZGVzKTtcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2goZGV0YWNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW50cm8pXG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGNvbXBvbmVudC4kJC5mcmFnbWVudCk7XG4gICAgICAgIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIG9wdGlvbnMudGFyZ2V0LCBvcHRpb25zLmFuY2hvciwgb3B0aW9ucy5jdXN0b21FbGVtZW50KTtcbiAgICAgICAgZW5kX2h5ZHJhdGluZygpO1xuICAgICAgICBmbHVzaCgpO1xuICAgIH1cbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG59XG5sZXQgU3ZlbHRlRWxlbWVudDtcbmlmICh0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBTdmVsdGVFbGVtZW50ID0gY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgY29uc3QgeyBvbl9tb3VudCB9ID0gdGhpcy4kJDtcbiAgICAgICAgICAgIHRoaXMuJCQub25fZGlzY29ubmVjdCA9IG9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy4kJC5zbG90dGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuJCQuc2xvdHRlZFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgX29sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpc1thdHRyXSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgcnVuX2FsbCh0aGlzLiQkLm9uX2Rpc2Nvbm5lY3QpO1xuICAgICAgICB9XG4gICAgICAgICRkZXN0cm95KCkge1xuICAgICAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIFRPRE8gc2hvdWxkIHRoaXMgZGVsZWdhdGUgdG8gYWRkRXZlbnRMaXN0ZW5lcj9cbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgJHNldCgkJHByb3BzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkoJCRwcm9wcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRzZXQoJCRwcm9wcyk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBTdmVsdGUgY29tcG9uZW50cy4gVXNlZCB3aGVuIGRldj1mYWxzZS5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50IHtcbiAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSBub29wO1xuICAgIH1cbiAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdIHx8ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSA9IFtdKSk7XG4gICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgJHNldCgkJHByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLiQkc2V0ICYmICFpc19lbXB0eSgkJHByb3BzKSkge1xuICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuJCRzZXQoJCRwcm9wcyk7XG4gICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hfZGV2KHR5cGUsIGRldGFpbCkge1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KHR5cGUsIE9iamVjdC5hc3NpZ24oeyB2ZXJzaW9uOiAnMy40OS4wJyB9LCBkZXRhaWwpLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xufVxuZnVuY3Rpb24gYXBwZW5kX2Rldih0YXJnZXQsIG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlIH0pO1xuICAgIGFwcGVuZCh0YXJnZXQsIG5vZGUpO1xufVxuZnVuY3Rpb24gYXBwZW5kX2h5ZHJhdGlvbl9kZXYodGFyZ2V0LCBub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSB9KTtcbiAgICBhcHBlbmRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSk7XG59XG5mdW5jdGlvbiBpbnNlcnRfZGV2KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSwgYW5jaG9yIH0pO1xuICAgIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG59XG5mdW5jdGlvbiBpbnNlcnRfaHlkcmF0aW9uX2Rldih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUsIGFuY2hvciB9KTtcbiAgICBpbnNlcnRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSwgYW5jaG9yKTtcbn1cbmZ1bmN0aW9uIGRldGFjaF9kZXYobm9kZSkge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NUmVtb3ZlJywgeyBub2RlIH0pO1xuICAgIGRldGFjaChub2RlKTtcbn1cbmZ1bmN0aW9uIGRldGFjaF9iZXR3ZWVuX2RldihiZWZvcmUsIGFmdGVyKSB7XG4gICAgd2hpbGUgKGJlZm9yZS5uZXh0U2libGluZyAmJiBiZWZvcmUubmV4dFNpYmxpbmcgIT09IGFmdGVyKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYmVmb3JlLm5leHRTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2hfYmVmb3JlX2RldihhZnRlcikge1xuICAgIHdoaWxlIChhZnRlci5wcmV2aW91c1NpYmxpbmcpIHtcbiAgICAgICAgZGV0YWNoX2RldihhZnRlci5wcmV2aW91c1NpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGFjaF9hZnRlcl9kZXYoYmVmb3JlKSB7XG4gICAgd2hpbGUgKGJlZm9yZS5uZXh0U2libGluZykge1xuICAgICAgICBkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gbGlzdGVuX2Rldihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucywgaGFzX3ByZXZlbnRfZGVmYXVsdCwgaGFzX3N0b3BfcHJvcGFnYXRpb24pIHtcbiAgICBjb25zdCBtb2RpZmllcnMgPSBvcHRpb25zID09PSB0cnVlID8gWydjYXB0dXJlJ10gOiBvcHRpb25zID8gQXJyYXkuZnJvbShPYmplY3Qua2V5cyhvcHRpb25zKSkgOiBbXTtcbiAgICBpZiAoaGFzX3ByZXZlbnRfZGVmYXVsdClcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3ByZXZlbnREZWZhdWx0Jyk7XG4gICAgaWYgKGhhc19zdG9wX3Byb3BhZ2F0aW9uKVxuICAgICAgICBtb2RpZmllcnMucHVzaCgnc3RvcFByb3BhZ2F0aW9uJyk7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01BZGRFdmVudExpc3RlbmVyJywgeyBub2RlLCBldmVudCwgaGFuZGxlciwgbW9kaWZpZXJzIH0pO1xuICAgIGNvbnN0IGRpc3Bvc2UgPSBsaXN0ZW4obm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NUmVtb3ZlRXZlbnRMaXN0ZW5lcicsIHsgbm9kZSwgZXZlbnQsIGhhbmRsZXIsIG1vZGlmaWVycyB9KTtcbiAgICAgICAgZGlzcG9zZSgpO1xuICAgIH07XG59XG5mdW5jdGlvbiBhdHRyX2Rldihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01SZW1vdmVBdHRyaWJ1dGUnLCB7IG5vZGUsIGF0dHJpYnV0ZSB9KTtcbiAgICBlbHNlXG4gICAgICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0QXR0cmlidXRlJywgeyBub2RlLCBhdHRyaWJ1dGUsIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gcHJvcF9kZXYobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgbm9kZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldFByb3BlcnR5JywgeyBub2RlLCBwcm9wZXJ0eSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBkYXRhc2V0X2Rldihub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBub2RlLmRhdGFzZXRbcHJvcGVydHldID0gdmFsdWU7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXREYXRhc2V0JywgeyBub2RlLCBwcm9wZXJ0eSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBzZXRfZGF0YV9kZXYodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQud2hvbGVUZXh0ID09PSBkYXRhKVxuICAgICAgICByZXR1cm47XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXREYXRhJywgeyBub2RlOiB0ZXh0LCBkYXRhIH0pO1xuICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50KGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnc3RyaW5nJyAmJiAhKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBhcmcpKSB7XG4gICAgICAgIGxldCBtc2cgPSAneyNlYWNofSBvbmx5IGl0ZXJhdGVzIG92ZXIgYXJyYXktbGlrZSBvYmplY3RzLic7XG4gICAgICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIGFyZyAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gYXJnKSB7XG4gICAgICAgICAgICBtc2cgKz0gJyBZb3UgY2FuIHVzZSBhIHNwcmVhZCB0byBjb252ZXJ0IHRoaXMgaXRlcmFibGUgaW50byBhbiBhcnJheS4nO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3Nsb3RzKG5hbWUsIHNsb3QsIGtleXMpIHtcbiAgICBmb3IgKGNvbnN0IHNsb3Rfa2V5IG9mIE9iamVjdC5rZXlzKHNsb3QpKSB7XG4gICAgICAgIGlmICghfmtleXMuaW5kZXhPZihzbG90X2tleSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgPCR7bmFtZX0+IHJlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgc2xvdCBcIiR7c2xvdF9rZXl9XCIuYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9keW5hbWljX2VsZW1lbnQodGFnKSB7XG4gICAgY29uc3QgaXNfc3RyaW5nID0gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZyc7XG4gICAgaWYgKHRhZyAmJiAhaXNfc3RyaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignPHN2ZWx0ZTplbGVtZW50PiBleHBlY3RzIFwidGhpc1wiIGF0dHJpYnV0ZSB0byBiZSBhIHN0cmluZy4nKTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV92b2lkX2R5bmFtaWNfZWxlbWVudCh0YWcpIHtcbiAgICBpZiAodGFnICYmIGlzX3ZvaWQodGFnKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYDxzdmVsdGU6ZWxlbWVudCB0aGlzPVwiJHt0YWd9XCI+IGlzIHNlbGYtY2xvc2luZyBhbmQgY2Fubm90IGhhdmUgY29udGVudC5gKTtcbiAgICB9XG59XG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIFN2ZWx0ZSBjb21wb25lbnRzIHdpdGggc29tZSBtaW5vciBkZXYtZW5oYW5jZW1lbnRzLiBVc2VkIHdoZW4gZGV2PXRydWUuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudERldiBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMgfHwgKCFvcHRpb25zLnRhcmdldCAmJiAhb3B0aW9ucy4kJGlubGluZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIid0YXJnZXQnIGlzIGEgcmVxdWlyZWQgb3B0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgICRkZXN0cm95KCkge1xuICAgICAgICBzdXBlci4kZGVzdHJveSgpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb21wb25lbnQgd2FzIGFscmVhZHkgZGVzdHJveWVkJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICB9O1xuICAgIH1cbiAgICAkY2FwdHVyZV9zdGF0ZSgpIHsgfVxuICAgICRpbmplY3Rfc3RhdGUoKSB7IH1cbn1cbi8qKlxuICogQmFzZSBjbGFzcyB0byBjcmVhdGUgc3Ryb25nbHkgdHlwZWQgU3ZlbHRlIGNvbXBvbmVudHMuXG4gKiBUaGlzIG9ubHkgZXhpc3RzIGZvciB0eXBpbmcgcHVycG9zZXMgYW5kIHNob3VsZCBiZSB1c2VkIGluIGAuZC50c2AgZmlsZXMuXG4gKlxuICogIyMjIEV4YW1wbGU6XG4gKlxuICogWW91IGhhdmUgY29tcG9uZW50IGxpYnJhcnkgb24gbnBtIGNhbGxlZCBgY29tcG9uZW50LWxpYnJhcnlgLCBmcm9tIHdoaWNoXG4gKiB5b3UgZXhwb3J0IGEgY29tcG9uZW50IGNhbGxlZCBgTXlDb21wb25lbnRgLiBGb3IgU3ZlbHRlK1R5cGVTY3JpcHQgdXNlcnMsXG4gKiB5b3Ugd2FudCB0byBwcm92aWRlIHR5cGluZ3MuIFRoZXJlZm9yZSB5b3UgY3JlYXRlIGEgYGluZGV4LmQudHNgOlxuICogYGBgdHNcbiAqIGltcG9ydCB7IFN2ZWx0ZUNvbXBvbmVudFR5cGVkIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICogZXhwb3J0IGNsYXNzIE15Q29tcG9uZW50IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50VHlwZWQ8e2Zvbzogc3RyaW5nfT4ge31cbiAqIGBgYFxuICogVHlwaW5nIHRoaXMgbWFrZXMgaXQgcG9zc2libGUgZm9yIElERXMgbGlrZSBWUyBDb2RlIHdpdGggdGhlIFN2ZWx0ZSBleHRlbnNpb25cbiAqIHRvIHByb3ZpZGUgaW50ZWxsaXNlbnNlIGFuZCB0byB1c2UgdGhlIGNvbXBvbmVudCBsaWtlIHRoaXMgaW4gYSBTdmVsdGUgZmlsZVxuICogd2l0aCBUeXBlU2NyaXB0OlxuICogYGBgc3ZlbHRlXG4gKiA8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICogXHRpbXBvcnQgeyBNeUNvbXBvbmVudCB9IGZyb20gXCJjb21wb25lbnQtbGlicmFyeVwiO1xuICogPC9zY3JpcHQ+XG4gKiA8TXlDb21wb25lbnQgZm9vPXsnYmFyJ30gLz5cbiAqIGBgYFxuICpcbiAqICMjIyMgV2h5IG5vdCBtYWtlIHRoaXMgcGFydCBvZiBgU3ZlbHRlQ29tcG9uZW50KERldilgP1xuICogQmVjYXVzZVxuICogYGBgdHNcbiAqIGNsYXNzIEFTdWJjbGFzc09mU3ZlbHRlQ29tcG9uZW50IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50PHtmb286IHN0cmluZ30+IHt9XG4gKiBjb25zdCBjb21wb25lbnQ6IHR5cGVvZiBTdmVsdGVDb21wb25lbnQgPSBBU3ViY2xhc3NPZlN2ZWx0ZUNvbXBvbmVudDtcbiAqIGBgYFxuICogd2lsbCB0aHJvdyBhIHR5cGUgZXJyb3IsIHNvIHdlIG5lZWQgdG8gc2VwYXJhdGUgdGhlIG1vcmUgc3RyaWN0bHkgdHlwZWQgY2xhc3MuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudFR5cGVkIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50RGV2IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxvb3BfZ3VhcmQodGltZW91dCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHN0YXJ0ID4gdGltZW91dCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmZpbml0ZSBsb29wIGRldGVjdGVkJyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnQgeyBIdG1sVGFnLCBIdG1sVGFnSHlkcmF0aW9uLCBTdmVsdGVDb21wb25lbnQsIFN2ZWx0ZUNvbXBvbmVudERldiwgU3ZlbHRlQ29tcG9uZW50VHlwZWQsIFN2ZWx0ZUVsZW1lbnQsIGFjdGlvbl9kZXN0cm95ZXIsIGFkZF9hdHRyaWJ1dGUsIGFkZF9jbGFzc2VzLCBhZGRfZmx1c2hfY2FsbGJhY2ssIGFkZF9sb2NhdGlvbiwgYWRkX3JlbmRlcl9jYWxsYmFjaywgYWRkX3Jlc2l6ZV9saXN0ZW5lciwgYWRkX3N0eWxlcywgYWRkX3RyYW5zZm9ybSwgYWZ0ZXJVcGRhdGUsIGFwcGVuZCwgYXBwZW5kX2RldiwgYXBwZW5kX2VtcHR5X3N0eWxlc2hlZXQsIGFwcGVuZF9oeWRyYXRpb24sIGFwcGVuZF9oeWRyYXRpb25fZGV2LCBhcHBlbmRfc3R5bGVzLCBhc3NpZ24sIGF0dHIsIGF0dHJfZGV2LCBhdHRyaWJ1dGVfdG9fb2JqZWN0LCBiZWZvcmVVcGRhdGUsIGJpbmQsIGJpbmRpbmdfY2FsbGJhY2tzLCBibGFua19vYmplY3QsIGJ1YmJsZSwgY2hlY2tfb3V0cm9zLCBjaGlsZHJlbiwgY2xhaW1fY29tcG9uZW50LCBjbGFpbV9lbGVtZW50LCBjbGFpbV9odG1sX3RhZywgY2xhaW1fc3BhY2UsIGNsYWltX3N2Z19lbGVtZW50LCBjbGFpbV90ZXh0LCBjbGVhcl9sb29wcywgY29tcG9uZW50X3N1YnNjcmliZSwgY29tcHV0ZV9yZXN0X3Byb3BzLCBjb21wdXRlX3Nsb3RzLCBjcmVhdGVFdmVudERpc3BhdGNoZXIsIGNyZWF0ZV9hbmltYXRpb24sIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24sIGNyZWF0ZV9jb21wb25lbnQsIGNyZWF0ZV9pbl90cmFuc2l0aW9uLCBjcmVhdGVfb3V0X3RyYW5zaXRpb24sIGNyZWF0ZV9zbG90LCBjcmVhdGVfc3NyX2NvbXBvbmVudCwgY3VycmVudF9jb21wb25lbnQsIGN1c3RvbV9ldmVudCwgZGF0YXNldF9kZXYsIGRlYnVnLCBkZXN0cm95X2Jsb2NrLCBkZXN0cm95X2NvbXBvbmVudCwgZGVzdHJveV9lYWNoLCBkZXRhY2gsIGRldGFjaF9hZnRlcl9kZXYsIGRldGFjaF9iZWZvcmVfZGV2LCBkZXRhY2hfYmV0d2Vlbl9kZXYsIGRldGFjaF9kZXYsIGRpcnR5X2NvbXBvbmVudHMsIGRpc3BhdGNoX2RldiwgZWFjaCwgZWxlbWVudCwgZWxlbWVudF9pcywgZW1wdHksIGVuZF9oeWRyYXRpbmcsIGVzY2FwZSwgZXNjYXBlX2F0dHJpYnV0ZV92YWx1ZSwgZXNjYXBlX29iamVjdCwgZXhjbHVkZV9pbnRlcm5hbF9wcm9wcywgZml4X2FuZF9kZXN0cm95X2Jsb2NrLCBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrLCBmaXhfcG9zaXRpb24sIGZsdXNoLCBnZXRBbGxDb250ZXh0cywgZ2V0Q29udGV4dCwgZ2V0X2FsbF9kaXJ0eV9mcm9tX3Njb3BlLCBnZXRfYmluZGluZ19ncm91cF92YWx1ZSwgZ2V0X2N1cnJlbnRfY29tcG9uZW50LCBnZXRfY3VzdG9tX2VsZW1lbnRzX3Nsb3RzLCBnZXRfcm9vdF9mb3Jfc3R5bGUsIGdldF9zbG90X2NoYW5nZXMsIGdldF9zcHJlYWRfb2JqZWN0LCBnZXRfc3ByZWFkX3VwZGF0ZSwgZ2V0X3N0b3JlX3ZhbHVlLCBnbG9iYWxzLCBncm91cF9vdXRyb3MsIGhhbmRsZV9wcm9taXNlLCBoYXNDb250ZXh0LCBoYXNfcHJvcCwgaWRlbnRpdHksIGluaXQsIGluc2VydCwgaW5zZXJ0X2RldiwgaW5zZXJ0X2h5ZHJhdGlvbiwgaW5zZXJ0X2h5ZHJhdGlvbl9kZXYsIGludHJvcywgaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIsIGlzX2NsaWVudCwgaXNfY3Jvc3NvcmlnaW4sIGlzX2VtcHR5LCBpc19mdW5jdGlvbiwgaXNfcHJvbWlzZSwgaXNfdm9pZCwgbGlzdGVuLCBsaXN0ZW5fZGV2LCBsb29wLCBsb29wX2d1YXJkLCBtZXJnZV9zc3Jfc3R5bGVzLCBtaXNzaW5nX2NvbXBvbmVudCwgbW91bnRfY29tcG9uZW50LCBub29wLCBub3RfZXF1YWwsIG5vdywgbnVsbF90b19lbXB0eSwgb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcywgb25EZXN0cm95LCBvbk1vdW50LCBvbmNlLCBvdXRyb19hbmRfZGVzdHJveV9ibG9jaywgcHJldmVudF9kZWZhdWx0LCBwcm9wX2RldiwgcXVlcnlfc2VsZWN0b3JfYWxsLCByYWYsIHJ1biwgcnVuX2FsbCwgc2FmZV9ub3RfZXF1YWwsIHNjaGVkdWxlX3VwZGF0ZSwgc2VsZWN0X211bHRpcGxlX3ZhbHVlLCBzZWxlY3Rfb3B0aW9uLCBzZWxlY3Rfb3B0aW9ucywgc2VsZWN0X3ZhbHVlLCBzZWxmLCBzZXRDb250ZXh0LCBzZXRfYXR0cmlidXRlcywgc2V0X2N1cnJlbnRfY29tcG9uZW50LCBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YSwgc2V0X2RhdGEsIHNldF9kYXRhX2Rldiwgc2V0X2lucHV0X3R5cGUsIHNldF9pbnB1dF92YWx1ZSwgc2V0X25vdywgc2V0X3JhZiwgc2V0X3N0b3JlX3ZhbHVlLCBzZXRfc3R5bGUsIHNldF9zdmdfYXR0cmlidXRlcywgc3BhY2UsIHNwcmVhZCwgc3JjX3VybF9lcXVhbCwgc3RhcnRfaHlkcmF0aW5nLCBzdG9wX3Byb3BhZ2F0aW9uLCBzdWJzY3JpYmUsIHN2Z19lbGVtZW50LCB0ZXh0LCB0aWNrLCB0aW1lX3Jhbmdlc190b19hcnJheSwgdG9fbnVtYmVyLCB0b2dnbGVfY2xhc3MsIHRyYW5zaXRpb25faW4sIHRyYW5zaXRpb25fb3V0LCB0cnVzdGVkLCB1cGRhdGVfYXdhaXRfYmxvY2tfYnJhbmNoLCB1cGRhdGVfa2V5ZWRfZWFjaCwgdXBkYXRlX3Nsb3QsIHVwZGF0ZV9zbG90X2Jhc2UsIHZhbGlkYXRlX2NvbXBvbmVudCwgdmFsaWRhdGVfZHluYW1pY19lbGVtZW50LCB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50LCB2YWxpZGF0ZV9lYWNoX2tleXMsIHZhbGlkYXRlX3Nsb3RzLCB2YWxpZGF0ZV9zdG9yZSwgdmFsaWRhdGVfdm9pZF9keW5hbWljX2VsZW1lbnQsIHhsaW5rX2F0dHIgfTtcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCAqIGFzIGNocm9ubyBmcm9tICdjaHJvbm8tbm9kZSc7XG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG4gICAgaW1wb3J0IHsgUmVjdXJyZW5jZSB9IGZyb20gJy4uL1JlY3VycmVuY2UnO1xuICAgIGltcG9ydCB7IGdldFNldHRpbmdzIH0gZnJvbSAnLi4vQ29uZmlnL1NldHRpbmdzJztcbiAgICBpbXBvcnQgeyBQcmlvcml0eSwgU3RhdHVzLCBUYXNrIH0gZnJvbSAnLi4vVGFzayc7XG4gICAgaW1wb3J0IHtcbiAgICAgICAgcHJpb3JpdHlTeW1ib2xzLFxuICAgICAgICByZWN1cnJlbmNlU3ltYm9sLFxuICAgICAgICBzdGFydERhdGVTeW1ib2wsXG4gICAgICAgIHNjaGVkdWxlZERhdGVTeW1ib2wsXG4gICAgICAgIGR1ZURhdGVTeW1ib2wsXG4gICAgfSBmcm9tICcuLi9UYXNrJztcbiAgICBpbXBvcnQgeyBkb0F1dG9jb21wbGV0ZSB9IGZyb20gJy4uL0RhdGVBYmJyZXZpYXRpb25zJztcblxuICAgIGV4cG9ydCBsZXQgdGFzazogVGFzaztcbiAgICBleHBvcnQgbGV0IG9uU3VibWl0OiAodXBkYXRlZFRhc2tzOiBUYXNrW10pID0+IHZvaWQgfCBQcm9taXNlPHZvaWQ+O1xuXG4gICAgbGV0IGRlc2NyaXB0aW9uSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgbGV0IGVkaXRhYmxlVGFzazoge1xuICAgICAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgICAgICBzdGF0dXM6IFN0YXR1cztcbiAgICAgICAgcHJpb3JpdHk6ICdub25lJyB8ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCc7XG4gICAgICAgIHJlY3VycmVuY2VSdWxlOiBzdHJpbmc7XG4gICAgICAgIHN0YXJ0RGF0ZTogc3RyaW5nO1xuICAgICAgICBzY2hlZHVsZWREYXRlOiBzdHJpbmc7XG4gICAgICAgIGR1ZURhdGU6IHN0cmluZztcbiAgICAgICAgZG9uZURhdGU6IHN0cmluZztcbiAgICAgICAgZm9yd2FyZE9ubHk6IGJvb2xlYW47XG4gICAgfSA9IHtcbiAgICAgICAgZGVzY3JpcHRpb246ICcnLFxuICAgICAgICBzdGF0dXM6IFN0YXR1cy5UT0RPLFxuICAgICAgICBwcmlvcml0eTogJ25vbmUnLFxuICAgICAgICByZWN1cnJlbmNlUnVsZTogJycsXG4gICAgICAgIHN0YXJ0RGF0ZTogJycsXG4gICAgICAgIHNjaGVkdWxlZERhdGU6ICcnLFxuICAgICAgICBkdWVEYXRlOiAnJyxcbiAgICAgICAgZG9uZURhdGU6ICcnLFxuICAgICAgICBmb3J3YXJkT25seTogdHJ1ZVxuICAgIH07XG5cbiAgICBsZXQgcGFyc2VkU3RhcnREYXRlOiBzdHJpbmcgPSAnJztcbiAgICBsZXQgcGFyc2VkU2NoZWR1bGVkRGF0ZTogc3RyaW5nID0gJyc7XG4gICAgbGV0IHBhcnNlZER1ZURhdGU6IHN0cmluZyA9ICcnO1xuICAgIGxldCBwYXJzZWRSZWN1cnJlbmNlOiBzdHJpbmcgPSAnJztcbiAgICBsZXQgcGFyc2VkRG9uZTogc3RyaW5nID0gJyc7XG4gICAgbGV0IGFkZEdsb2JhbEZpbHRlck9uU2F2ZTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGxldCB3aXRoQWNjZXNzS2V5czogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvLyAnd2Vla2VuZCcgYWJicmV2aWF0aW9uIG9tbWl0dGVkIGR1ZSB0byBsYWNrIG9mIHNwYWNlLlxuICAgIGxldCBkYXRlUGxhY2Vob2xkZXIgPVxuICAgICAgICBcIlRyeSAnTW9uZGF5JyBvciAndG9tb3Jyb3cnLCBvciBbdGR8dG18eWR8dHd8bnd8d2VdIHRoZW4gc3BhY2UuXCI7XG5cbiAgICBjb25zdCBwcmlvcml0eU9wdGlvbnM6IHtcbiAgICAgICAgICAgIHZhbHVlOiB0eXBlb2YgZWRpdGFibGVUYXNrLnByaW9yaXR5LFxuICAgICAgICAgICAgbGFiZWw6IHN0cmluZyxcbiAgICAgICAgICAgIHN5bWJvbDogc3RyaW5nIH1bXSA9XG4gICAgICAgIFt7XG4gICAgICAgICAgICB2YWx1ZTogJ2xvdycsXG4gICAgICAgICAgICBsYWJlbDogJ0xvdycsXG4gICAgICAgICAgICBzeW1ib2w6IHByaW9yaXR5U3ltYm9scy5Mb3dcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdmFsdWU6ICdub25lJyxcbiAgICAgICAgICAgIGxhYmVsOiAnTm9ybWFsJyxcbiAgICAgICAgICAgIHN5bWJvbDogcHJpb3JpdHlTeW1ib2xzLk5vbmVcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdmFsdWU6ICdtZWRpdW0nLFxuICAgICAgICAgICAgbGFiZWw6ICdNZWRpdW0nLFxuICAgICAgICAgICAgc3ltYm9sOiBwcmlvcml0eVN5bWJvbHMuTWVkaXVtXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIHZhbHVlOiAnaGlnaCcsXG4gICAgICAgICAgICBsYWJlbDogJ0hpZ2gnLFxuICAgICAgICAgICAgc3ltYm9sOiBwcmlvcml0eVN5bWJvbHMuSGlnaFxuICAgICAgICB9XVxuXG4gICAgZnVuY3Rpb24gcGFyc2VEYXRlKFxuICAgICAgICB0eXBlOiAnc3RhcnQnIHwgJ3NjaGVkdWxlZCcgfCAnZHVlJyB8ICdkb25lJyxcbiAgICAgICAgZGF0ZTogc3RyaW5nLFxuICAgICAgICBmb3J3YXJkRGF0ZTogRGF0ZSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCxcbiAgICApOiBzdHJpbmcge1xuICAgICAgICBpZiAoIWRhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBgPGk+bm8gJHt0eXBlfSBkYXRlPC9pPmA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkID0gY2hyb25vLnBhcnNlRGF0ZShkYXRlLCBmb3J3YXJkRGF0ZSwge1xuICAgICAgICAgICAgZm9yd2FyZERhdGU6IGZvcndhcmREYXRlICE9IHVuZGVmaW5lZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYXJzZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubW9tZW50KHBhcnNlZCkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGA8aT5pbnZhbGlkICR7dHlwZX0gZGF0ZTwvaT5gO1xuICAgIH1cblxuICAgICQ6IGFjY2Vzc2tleSA9IChrZXk6IHN0cmluZykgPT4gd2l0aEFjY2Vzc0tleXMgPyBrZXkgOiBudWxsO1xuXG4gICAgJDoge1xuICAgICAgICBlZGl0YWJsZVRhc2suc3RhcnREYXRlID0gZG9BdXRvY29tcGxldGUoZWRpdGFibGVUYXNrLnN0YXJ0RGF0ZSk7XG4gICAgICAgIHBhcnNlZFN0YXJ0RGF0ZSA9IHBhcnNlRGF0ZShcbiAgICAgICAgICAgICdzdGFydCcsXG4gICAgICAgICAgICBlZGl0YWJsZVRhc2suc3RhcnREYXRlLFxuICAgICAgICAgICAgZWRpdGFibGVUYXNrLmZvcndhcmRPbmx5ID8gbmV3IERhdGUoKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAkOiB7XG4gICAgICAgIGVkaXRhYmxlVGFzay5zY2hlZHVsZWREYXRlID0gZG9BdXRvY29tcGxldGUoZWRpdGFibGVUYXNrLnNjaGVkdWxlZERhdGUpO1xuICAgICAgICBwYXJzZWRTY2hlZHVsZWREYXRlID0gcGFyc2VEYXRlKFxuICAgICAgICAgICAgJ3NjaGVkdWxlZCcsXG4gICAgICAgICAgICBlZGl0YWJsZVRhc2suc2NoZWR1bGVkRGF0ZSxcbiAgICAgICAgICAgIGVkaXRhYmxlVGFzay5mb3J3YXJkT25seSA/IG5ldyBEYXRlKCkgOiB1bmRlZmluZWQsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgJDoge1xuICAgICAgICBlZGl0YWJsZVRhc2suZHVlRGF0ZSA9IGRvQXV0b2NvbXBsZXRlKGVkaXRhYmxlVGFzay5kdWVEYXRlKTtcbiAgICAgICAgcGFyc2VkRHVlRGF0ZSA9IHBhcnNlRGF0ZShcbiAgICAgICAgICAgICdkdWUnLFxuICAgICAgICAgICAgZWRpdGFibGVUYXNrLmR1ZURhdGUsXG4gICAgICAgICAgICBlZGl0YWJsZVRhc2suZm9yd2FyZE9ubHkgPyBuZXcgRGF0ZSgpIDogdW5kZWZpbmVkLFxuICAgICAgICApO1xuICAgIH1cblxuICAgICQ6IHtcbiAgICAgICAgaWYgKCFlZGl0YWJsZVRhc2sucmVjdXJyZW5jZVJ1bGUpIHtcbiAgICAgICAgICAgIHBhcnNlZFJlY3VycmVuY2UgPSAnPGk+bm90IHJlY3VycmluZzwvPic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZWRSZWN1cnJlbmNlID1cbiAgICAgICAgICAgICAgICBSZWN1cnJlbmNlLmZyb21UZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJyZW5jZVJ1bGVUZXh0OiBlZGl0YWJsZVRhc2sucmVjdXJyZW5jZVJ1bGUsXG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgZm9yIHJlcHJlc2VudGF0aW9uIGluIHRoZSBtb2RhbCwgbm8gZGF0ZXMgcmVxdWlyZWQuXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVkRGF0ZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZHVlRGF0ZTogbnVsbCxcbiAgICAgICAgICAgICAgICB9KT8udG9UZXh0KCkgPz8gJzxpPmludmFsaWQgcmVjdXJyZW5jZSBydWxlPC9pPic7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkOiB7XG4gICAgICAgIHBhcnNlZERvbmUgPSBwYXJzZURhdGUoJ2RvbmUnLCBlZGl0YWJsZVRhc2suZG9uZURhdGUpO1xuICAgIH1cblxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGdsb2JhbEZpbHRlciwgcHJvdmlkZUFjY2Vzc0tleXMgfSA9IGdldFNldHRpbmdzKCk7XG4gICAgICAgIHdpdGhBY2Nlc3NLZXlzID0gcHJvdmlkZUFjY2Vzc0tleXM7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gdGFzay5nZXREZXNjcmlwdGlvbldpdGhvdXRHbG9iYWxGaWx0ZXIoKTtcbiAgICAgICAgLy8gSWYgd2UncmUgZGlzcGxheWluZyB0byB0aGUgdXNlciB0aGUgZGVzY3JpcHRpb24gd2l0aG91dCB0aGUgZ2xvYmFsIGZpbHRlciAoaS5lLiBpdCB3YXMgcmVtb3ZlZCBpbiB0aGUgbWV0aG9kXG4gICAgICAgIC8vIGFib3ZlKSwgb3IgaWYgdGhlIGRlc2NyaXB0aW9uIGRpZCBub3QgaW5jbHVkZSBhIGdsb2JhbCBmaWx0ZXIgaW4gdGhlIGZpcnN0IHBsYWNlLCB3ZSdsbCBhZGQgdGhlIGdsb2JhbCBmaWx0ZXJcbiAgICAgICAgLy8gd2hlbiBzYXZpbmcgdGhlIHRhc2suXG4gICAgICAgIC8vIEFub3RoZXIgc3BlY2lhbCBjYXNlIGlzIHdoZW4gdGhlIGdsb2JhbCBmaWx0ZXIgaXMgZW1wdHk6IGluIHRoaXMgY2FzZSB0aGVyZSdzIGFuIFwiZW1wdHlcIiBtYXRjaCBpbiB0aGUgYGluZGV4T2ZgXG4gICAgICAgIC8vIChpdCByZXR1cm5zIDApLCBhbmQgdGh1cyB3ZSAqZG9uJ3QqIHNldCBhZGRHbG9iYWxGaWx0ZXJPblNhdmUuXG4gICAgICAgIGlmIChkZXNjcmlwdGlvbiAhPSB0YXNrLmRlc2NyaXB0aW9uIHx8IGRlc2NyaXB0aW9uLmluZGV4T2YoZ2xvYmFsRmlsdGVyKSA9PSAtMSlcbiAgICAgICAgICAgIGFkZEdsb2JhbEZpbHRlck9uU2F2ZSA9IHRydWU7XG4gICAgICAgIGxldCBwcmlvcml0eTogdHlwZW9mIGVkaXRhYmxlVGFzay5wcmlvcml0eSA9ICdub25lJztcbiAgICAgICAgaWYgKHRhc2sucHJpb3JpdHkgPT09IFByaW9yaXR5Lkxvdykge1xuICAgICAgICAgICAgcHJpb3JpdHkgPSAnbG93JztcbiAgICAgICAgfSBlbHNlIGlmICh0YXNrLnByaW9yaXR5ID09PSBQcmlvcml0eS5NZWRpdW0pIHtcbiAgICAgICAgICAgIHByaW9yaXR5ID0gJ21lZGl1bSc7XG4gICAgICAgIH0gZWxzZSBpZiAodGFzay5wcmlvcml0eSA9PT0gUHJpb3JpdHkuSGlnaCkge1xuICAgICAgICAgICAgcHJpb3JpdHkgPSAnaGlnaCc7XG4gICAgICAgIH1cblxuICAgICAgICBlZGl0YWJsZVRhc2sgPSB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHN0YXR1czogdGFzay5zdGF0dXMsXG4gICAgICAgICAgICBwcmlvcml0eSxcbiAgICAgICAgICAgIHJlY3VycmVuY2VSdWxlOiB0YXNrLnJlY3VycmVuY2UgPyB0YXNrLnJlY3VycmVuY2UudG9UZXh0KCkgOiAnJyxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogdGFzay5zdGFydERhdGVcbiAgICAgICAgICAgICAgICA/IHRhc2suc3RhcnREYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpXG4gICAgICAgICAgICAgICAgOiAnJyxcbiAgICAgICAgICAgIHNjaGVkdWxlZERhdGU6IHRhc2suc2NoZWR1bGVkRGF0ZVxuICAgICAgICAgICAgICAgID8gdGFzay5zY2hlZHVsZWREYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpXG4gICAgICAgICAgICAgICAgOiAnJyxcbiAgICAgICAgICAgIGR1ZURhdGU6IHRhc2suZHVlRGF0ZSA/IHRhc2suZHVlRGF0ZS5mb3JtYXQoJ1lZWVktTU0tREQnKSA6ICcnLFxuICAgICAgICAgICAgZG9uZURhdGU6IHRhc2suZG9uZURhdGUgPyB0YXNrLmRvbmVEYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpIDogJycsXG4gICAgICAgICAgICBmb3J3YXJkT25seTogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbklucHV0LmZvY3VzKCk7XG4gICAgICAgIH0sIDEwKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IF9vblByaW9yaXR5S2V5dXAgPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSAmJiAhZXZlbnQuYWx0S2V5ICYmICFldmVudC5jdHJsS2V5KSB7XG4gICAgICAgICAgICBjb25zdCBwcmlvcml0eU9wdGlvbiA9IHByaW9yaXR5T3B0aW9ucy5maW5kKFxuICAgICAgICAgICAgICAgIG9wdGlvbiA9PiBvcHRpb24ubGFiZWwuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgPT0gZXZlbnQua2V5KTtcbiAgICAgICAgICAgIGlmIChwcmlvcml0eU9wdGlvbikge1xuICAgICAgICAgICAgICAgIGVkaXRhYmxlVGFzay5wcmlvcml0eSA9IHByaW9yaXR5T3B0aW9uLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgX29uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIG9uU3VibWl0KFtdKTtcbiAgICB9XG5cbiAgICBjb25zdCBfb25TdWJtaXQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZ2xvYmFsRmlsdGVyIH0gPSBnZXRTZXR0aW5ncygpO1xuICAgICAgICBsZXQgZGVzY3JpcHRpb24gPSBlZGl0YWJsZVRhc2suZGVzY3JpcHRpb24udHJpbSgpO1xuICAgICAgICBpZiAoYWRkR2xvYmFsRmlsdGVyT25TYXZlKSB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGdsb2JhbEZpbHRlciArICcgJyArIGRlc2NyaXB0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN0YXJ0RGF0ZTogbW9tZW50Lk1vbWVudCB8IG51bGwgPSBudWxsO1xuICAgICAgICBjb25zdCBwYXJzZWRTdGFydERhdGUgPSBjaHJvbm8ucGFyc2VEYXRlKFxuICAgICAgICAgICAgZWRpdGFibGVUYXNrLnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgIG5ldyBEYXRlKCksXG4gICAgICAgICAgICB7IGZvcndhcmREYXRlOiBlZGl0YWJsZVRhc2suZm9yd2FyZE9ubHkgfSxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHBhcnNlZFN0YXJ0RGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhcnREYXRlID0gd2luZG93Lm1vbWVudChwYXJzZWRTdGFydERhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNjaGVkdWxlZERhdGU6IG1vbWVudC5Nb21lbnQgfCBudWxsID0gbnVsbDtcbiAgICAgICAgY29uc3QgcGFyc2VkU2NoZWR1bGVkRGF0ZSA9IGNocm9uby5wYXJzZURhdGUoXG4gICAgICAgICAgICBlZGl0YWJsZVRhc2suc2NoZWR1bGVkRGF0ZSxcbiAgICAgICAgICAgIG5ldyBEYXRlKCksXG4gICAgICAgICAgICB7IGZvcndhcmREYXRlOiBlZGl0YWJsZVRhc2suZm9yd2FyZE9ubHkgfSxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHBhcnNlZFNjaGVkdWxlZERhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlZERhdGUgPSB3aW5kb3cubW9tZW50KHBhcnNlZFNjaGVkdWxlZERhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGR1ZURhdGU6IG1vbWVudC5Nb21lbnQgfCBudWxsID0gbnVsbDtcbiAgICAgICAgY29uc3QgcGFyc2VkRHVlRGF0ZSA9IGNocm9uby5wYXJzZURhdGUoXG4gICAgICAgICAgICBlZGl0YWJsZVRhc2suZHVlRGF0ZSxcbiAgICAgICAgICAgIG5ldyBEYXRlKCksXG4gICAgICAgICAgICB7IGZvcndhcmREYXRlOiBlZGl0YWJsZVRhc2suZm9yd2FyZE9ubHkgfSxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHBhcnNlZER1ZURhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGR1ZURhdGUgPSB3aW5kb3cubW9tZW50KHBhcnNlZER1ZURhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlY3VycmVuY2U6IFJlY3VycmVuY2UgfCBudWxsID0gbnVsbDtcbiAgICAgICAgaWYgKGVkaXRhYmxlVGFzay5yZWN1cnJlbmNlUnVsZSkge1xuICAgICAgICAgICAgcmVjdXJyZW5jZSA9IFJlY3VycmVuY2UuZnJvbVRleHQoe1xuICAgICAgICAgICAgICAgIHJlY3VycmVuY2VSdWxlVGV4dDogZWRpdGFibGVUYXNrLnJlY3VycmVuY2VSdWxlLFxuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICBzY2hlZHVsZWREYXRlLFxuICAgICAgICAgICAgICAgIGR1ZURhdGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwYXJzZWRQcmlvcml0eTogUHJpb3JpdHk7XG4gICAgICAgIHN3aXRjaCAoZWRpdGFibGVUYXNrLnByaW9yaXR5KSB7XG4gICAgICAgICAgICBjYXNlICdsb3cnOlxuICAgICAgICAgICAgICAgIHBhcnNlZFByaW9yaXR5ID0gUHJpb3JpdHkuTG93O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWVkaXVtJzpcbiAgICAgICAgICAgICAgICBwYXJzZWRQcmlvcml0eSA9IFByaW9yaXR5Lk1lZGl1bTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hpZ2gnOlxuICAgICAgICAgICAgICAgIHBhcnNlZFByaW9yaXR5ID0gUHJpb3JpdHkuSGlnaDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcGFyc2VkUHJpb3JpdHkgPSBQcmlvcml0eS5Ob25lO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdXBkYXRlZFRhc2sgPSBuZXcgVGFzayh7XG4gICAgICAgICAgICAuLi50YXNrLFxuICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBzdGF0dXM6IGVkaXRhYmxlVGFzay5zdGF0dXMsXG4gICAgICAgICAgICBwcmlvcml0eTogcGFyc2VkUHJpb3JpdHksXG4gICAgICAgICAgICByZWN1cnJlbmNlLFxuICAgICAgICAgICAgc3RhcnREYXRlLFxuICAgICAgICAgICAgc2NoZWR1bGVkRGF0ZSxcbiAgICAgICAgICAgIGR1ZURhdGUsXG4gICAgICAgICAgICBkb25lRGF0ZTogd2luZG93XG4gICAgICAgICAgICAgICAgLm1vbWVudChlZGl0YWJsZVRhc2suZG9uZURhdGUsICdZWVlZLU1NLUREJylcbiAgICAgICAgICAgICAgICAuaXNWYWxpZCgpXG4gICAgICAgICAgICAgICAgPyB3aW5kb3cubW9tZW50KGVkaXRhYmxlVGFzay5kb25lRGF0ZSwgJ1lZWVktTU0tREQnKVxuICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgb25TdWJtaXQoW3VwZGF0ZWRUYXNrXSk7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwidGFza3MtbW9kYWxcIj5cbiAgICA8Zm9ybSBvbjpzdWJtaXR8cHJldmVudERlZmF1bHQ9e19vblN1Ym1pdH0gY2xhc3M6d2l0aC1hY2Nlc3NrZXlzPVwie3dpdGhBY2Nlc3NLZXlzfVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGFza3MtbW9kYWwtc2VjdGlvblwiPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImRlc2NyaXB0aW9uXCI+RGVzY3JpcDxzcGFuIGNsYXNzPVwiYWNjZXNza2V5XCI+dDwvc3Bhbj5pb248L2xhYmVsPlxuICAgICAgICAgICAgPCEtLSBzdmVsdGUtaWdub3JlIGExMXktYWNjZXNza2V5IC0tPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgYmluZDp2YWx1ZT17ZWRpdGFibGVUYXNrLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgIGJpbmQ6dGhpcz17ZGVzY3JpcHRpb25JbnB1dH1cbiAgICAgICAgICAgICAgICBpZD1cImRlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJ0YXNrcy1tb2RhbC1kZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUYWtlIG91dCB0aGUgdHJhc2hcIlxuICAgICAgICAgICAgICAgIGFjY2Vzc2tleT17YWNjZXNza2V5KFwidFwiKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGFza3MtbW9kYWwtc2VjdGlvbiB0YXNrcy1tb2RhbC1wcmlvcml0aWVzXCIgb246a2V5dXA9e19vblByaW9yaXR5S2V5dXB9PlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cInByaW9yaXR5LXtlZGl0YWJsZVRhc2sucHJpb3JpdHl9XCI+UHJpb3JpdHk8L2xhYmVsPlxuICAgICAgICAgICAgeyNlYWNoIHByaW9yaXR5T3B0aW9ucyBhcyB7dmFsdWUsIGxhYmVsLCBzeW1ib2x9fVxuICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS1hY2Nlc3NrZXkgLS0+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwicHJpb3JpdHkte3ZhbHVlfVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB7dmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5kOmdyb3VwPXtlZGl0YWJsZVRhc2sucHJpb3JpdHl9XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NrZXk9e2FjY2Vzc2tleShsYWJlbC5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSl9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJwcmlvcml0eS17dmFsdWV9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImFjY2Vzc2tleS1maXJzdFwiPntsYWJlbH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICB7I2lmIHN5bWJvbCAmJiBzeW1ib2wuY2hhckNvZGVBdCgwKSA+PSAweDEwMH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57c3ltYm9sfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRhc2tzLW1vZGFsLXNlY3Rpb24gdGFza3MtbW9kYWwtZGF0ZXNcIj5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJyZWN1cnJlbmNlXCIgY2xhc3M9XCJhY2Nlc3NrZXktZmlyc3RcIj5SZWN1cnM8L2xhYmVsPlxuICAgICAgICAgICAgPCEtLSBzdmVsdGUtaWdub3JlIGExMXktYWNjZXNza2V5IC0tPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgYmluZDp2YWx1ZT17ZWRpdGFibGVUYXNrLnJlY3VycmVuY2VSdWxlfVxuICAgICAgICAgICAgICAgIGlkPVwiZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlRyeSAnZXZlcnkgMiB3ZWVrcyBvbiBUaHVyc2RheScuXCJcbiAgICAgICAgICAgICAgICBhY2Nlc3NrZXk9e2FjY2Vzc2tleShcInJcIil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGNvZGU+e3JlY3VycmVuY2VTeW1ib2x9IHtAaHRtbCBwYXJzZWRSZWN1cnJlbmNlfTwvY29kZT5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJkdWVcIiBjbGFzcz1cImFjY2Vzc2tleS1maXJzdFwiPkR1ZTwvbGFiZWw+XG4gICAgICAgICAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS1hY2Nlc3NrZXkgLS0+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBiaW5kOnZhbHVlPXtlZGl0YWJsZVRhc2suZHVlRGF0ZX1cbiAgICAgICAgICAgICAgICBpZD1cImR1ZVwiXG4gICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtkYXRlUGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgYWNjZXNza2V5PXthY2Nlc3NrZXkoXCJkXCIpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxjb2RlPntkdWVEYXRlU3ltYm9sfSB7QGh0bWwgcGFyc2VkRHVlRGF0ZX08L2NvZGU+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwic2NoZWR1bGVkXCIgY2xhc3M9XCJhY2Nlc3NrZXktZmlyc3RcIj5TY2hlZHVsZWQ8L2xhYmVsPlxuICAgICAgICAgICAgPCEtLSBzdmVsdGUtaWdub3JlIGExMXktYWNjZXNza2V5IC0tPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgYmluZDp2YWx1ZT17ZWRpdGFibGVUYXNrLnNjaGVkdWxlZERhdGV9XG4gICAgICAgICAgICAgICAgaWQ9XCJzY2hlZHVsZWRcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17ZGF0ZVBsYWNlaG9sZGVyfVxuICAgICAgICAgICAgICAgIGFjY2Vzc2tleT17YWNjZXNza2V5KFwic1wiKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Y29kZT57c2NoZWR1bGVkRGF0ZVN5bWJvbH0ge0BodG1sIHBhcnNlZFNjaGVkdWxlZERhdGV9PC9jb2RlPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cInN0YXJ0XCI+U3Q8c3BhbiBjbGFzcz1cImFjY2Vzc2tleVwiPmE8L3NwYW4+cnQ8L2xhYmVsPlxuICAgICAgICAgICAgPCEtLSBzdmVsdGUtaWdub3JlIGExMXktYWNjZXNza2V5IC0tPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgYmluZDp2YWx1ZT17ZWRpdGFibGVUYXNrLnN0YXJ0RGF0ZX1cbiAgICAgICAgICAgICAgICBpZD1cInN0YXJ0XCJcbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2RhdGVQbGFjZWhvbGRlcn1cbiAgICAgICAgICAgICAgICBhY2Nlc3NrZXk9e2FjY2Vzc2tleShcImFcIil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGNvZGU+e3N0YXJ0RGF0ZVN5bWJvbH0ge0BodG1sIHBhcnNlZFN0YXJ0RGF0ZX08L2NvZGU+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJmb3J3YXJkT25seVwiPk9ubHlcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJhY2Nlc3NrZXktZmlyc3RcIj5mdXR1cmU8L3NwYW4+IGRhdGVzOjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPCEtLSBzdmVsdGUtaWdub3JlIGExMXktYWNjZXNza2V5IC0tPlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICBiaW5kOmNoZWNrZWQ9e2VkaXRhYmxlVGFzay5mb3J3YXJkT25seX1cbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJmb3J3YXJkT25seVwiXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwidGFzay1saXN0LWl0ZW0tY2hlY2tib3ggdGFza3MtbW9kYWwtY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NrZXk9e2FjY2Vzc2tleShcImZcIil9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRhc2tzLW1vZGFsLXNlY3Rpb24gdGFza3MtbW9kYWwtc3RhdHVzXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJzdGF0dXNcIj5TdGF0dXM6PC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJzdGF0dXNcIlxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInRhc2stbGlzdC1pdGVtLWNoZWNrYm94IHRhc2tzLW1vZGFsLWNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17ZWRpdGFibGVUYXNrLnN0YXR1cyA9PT0gU3RhdHVzLkRPTkV9XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8Y29kZT57ZWRpdGFibGVUYXNrLnN0YXR1c308L2NvZGU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPHNwYW4+RG9uZSBvbjo8L3NwYW4+XG4gICAgICAgICAgICAgICAgPGNvZGU+e0BodG1sIHBhcnNlZERvbmV9PC9jb2RlPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGFza3MtbW9kYWwtc2VjdGlvbiB0YXNrcy1tb2RhbC1idXR0b25zXCI+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cIm1vZC1jdGFcIj5BcHBseTwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb246Y2xpY2s9e19vbkNsb3NlfT5DYW5jZWw8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9mb3JtPlxuPC9kaXY+XG4iLCAiLy8gQWJicmV2aWF0aW9ucyBmb3IgZW50ZXJpbmcgZGF0ZXMgd2l0aCBjaHJvbm9cbi8vIE1BSU5URU5BTkNFIE5PVEU6XG4vLyAgICAgIElmIGFkZGluZyBtb3JlIGFiYnJldmlhdGlvbnMsIHBsZWFzZSByZXZpZXcgZGF0ZVBsYWNlaG9sZGVyIGluIHNyYy91aS9FZGl0VGFzay5zdmVsdGVcbmNvbnN0IGFiYnJldmlhdGlvbnMgPSB7XG4gICAgdGQ6ICd0b2RheScsXG4gICAgdG06ICd0b21vcnJvdycsXG4gICAgeWQ6ICd5ZXN0ZXJkYXknLFxuICAgIHR3OiAndGhpcyB3ZWVrJyxcbiAgICBudzogJ25leHQgd2VlaycsXG4gICAgd2Vla2VuZDogJ3NhdCcsXG4gICAgd2U6ICdzYXQnLFxufTtcblxuLyoqXG4gKiBFeHBhbmQgYW55IHJlY29nbmlzZWQgYWJicmV2aWF0aW9ucyBmb3IgZGF0ZXMuXG4gKlxuICogSW1wb3J0YW50OiB0aGUgYWJicmV2aWF0aW9uIGlzIG9ubHkgZXhwYW5kZWQgaWYgaXQgaXMgZm9vbG93ZWQgYnkgYSBzcGFjZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgJ3RkICcgaXMgZXhwYW5kZWQgdG8gJ3RvZGF5J1xuICogQHBhcmFtIGRhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvQXV0b2NvbXBsZXRlKGRhdGU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGFiYnJldmlhdGlvbnMpKSB7XG4gICAgICAgIGRhdGUgPSBkYXRlLnJlcGxhY2UoUmVnRXhwKGBcXFxcYiR7a2V5fVxcXFxzYCwgJ2knKSwgdmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGU7XG59XG4iLCAiaW1wb3J0IHsgUHJpb3JpdHksIFN0YXR1cywgVGFzaywgVGFza1JlZ3VsYXJFeHByZXNzaW9ucyB9IGZyb20gJy4uL1Rhc2snO1xuaW1wb3J0IHsgRGF0ZUZhbGxiYWNrIH0gZnJvbSAnLi4vRGF0ZUZhbGxiYWNrJztcblxuZXhwb3J0IGNvbnN0IHRhc2tGcm9tTGluZSA9ICh7IGxpbmUsIHBhdGggfTogeyBsaW5lOiBzdHJpbmc7IHBhdGg6IHN0cmluZyB9KTogVGFzayA9PiB7XG4gICAgY29uc3QgZmFsbGJhY2tEYXRlID0gRGF0ZUZhbGxiYWNrLmZyb21QYXRoKHBhdGgpO1xuXG4gICAgY29uc3QgdGFzayA9IFRhc2suZnJvbUxpbmUoe1xuICAgICAgICBsaW5lLFxuICAgICAgICBwYXRoLFxuICAgICAgICBzZWN0aW9uU3RhcnQ6IDAsIC8vIFdlIGRvbid0IG5lZWQgdGhpcyB0byB0b2dnbGUgaXQgaGVyZSBpbiB0aGUgZWRpdG9yLlxuICAgICAgICBzZWN0aW9uSW5kZXg6IDAsIC8vIFdlIGRvbid0IG5lZWQgdGhpcyB0byB0b2dnbGUgaXQgaGVyZSBpbiB0aGUgZWRpdG9yLlxuICAgICAgICBwcmVjZWRpbmdIZWFkZXI6IG51bGwsIC8vIFdlIGRvbid0IG5lZWQgdGhpcyB0byB0b2dnbGUgaXQgaGVyZSBpbiB0aGUgZWRpdG9yLlxuICAgICAgICBmYWxsYmFja0RhdGUsIC8vIHNldCB0aGUgc2NoZWR1bGVkIGRhdGUgZnJvbSB0aGUgZmlsZW5hbWUsIHNvIGl0IGNhbiBiZSBkaXNwbGF5ZWQgaW4gdGhlIGRpYWxvZ1xuICAgIH0pO1xuXG4gICAgaWYgKHRhc2sgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRhc2s7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgYXJlIG5vdCBvbiBhIGxpbmUgb2YgYSB0YXNrLCB3ZSB0YWtlIHdoYXQgd2UgaGF2ZS5cbiAgICAvLyBUaGUgbm9uLXRhc2sgbGluZSBjYW4gc3RpbGwgYmUgYSBjaGVja2xpc3QsIGZvciBleGFtcGxlIGlmIGl0IGlzIGxhY2tpbmcgdGhlIGdsb2JhbCBmaWx0ZXIuXG4gICAgY29uc3Qgbm9uVGFza01hdGNoID0gbGluZS5tYXRjaChUYXNrUmVndWxhckV4cHJlc3Npb25zLm5vblRhc2tSZWdleCk7XG4gICAgaWYgKG5vblRhc2tNYXRjaCA9PT0gbnVsbCkge1xuICAgICAgICAvLyBTaG91bGQgbmV2ZXIgaGFwcGVuOyBldmVyeXRoaW5nIGluIHRoZSByZWdleCBpcyBvcHRpb25hbC5cbiAgICAgICAgY29uc29sZS5lcnJvcignVGFza3M6IENhbm5vdCBjcmVhdGUgdGFzayBvbiBsaW5lOicsIGxpbmUpO1xuICAgICAgICByZXR1cm4gbmV3IFRhc2soe1xuICAgICAgICAgICAgc3RhdHVzOiBTdGF0dXMuVE9ETyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICBpbmRlbnRhdGlvbjogJycsXG4gICAgICAgICAgICBsaXN0TWFya2VyOiAnLScsXG4gICAgICAgICAgICBvcmlnaW5hbFN0YXR1c0NoYXJhY3RlcjogJyAnLFxuICAgICAgICAgICAgcHJpb3JpdHk6IFByaW9yaXR5Lk5vbmUsXG4gICAgICAgICAgICBzdGFydERhdGU6IG51bGwsXG4gICAgICAgICAgICBzY2hlZHVsZWREYXRlOiBudWxsLFxuICAgICAgICAgICAgZHVlRGF0ZTogbnVsbCxcbiAgICAgICAgICAgIGRvbmVEYXRlOiBudWxsLFxuICAgICAgICAgICAgcmVjdXJyZW5jZTogbnVsbCxcbiAgICAgICAgICAgIC8vIFdlIGRvbid0IG5lZWQgdGhlIGZvbGxvd2luZyBmaWVsZHMgdG8gZWRpdCBoZXJlIGluIHRoZSBlZGl0b3IuXG4gICAgICAgICAgICBzZWN0aW9uU3RhcnQ6IDAsXG4gICAgICAgICAgICBzZWN0aW9uSW5kZXg6IDAsXG4gICAgICAgICAgICBwcmVjZWRpbmdIZWFkZXI6IG51bGwsXG4gICAgICAgICAgICBibG9ja0xpbms6ICcnLFxuICAgICAgICAgICAgdGFnczogW10sXG4gICAgICAgICAgICBvcmlnaW5hbE1hcmtkb3duOiAnJyxcbiAgICAgICAgICAgIHNjaGVkdWxlZERhdGVJc0luZmVycmVkOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgaW5kZW50YXRpb246IHN0cmluZyA9IG5vblRhc2tNYXRjaFsxXTtcbiAgICBjb25zdCBsaXN0TWFya2VyID0gJy0nO1xuICAgIGNvbnN0IHN0YXR1c1N0cmluZzogc3RyaW5nID0gbm9uVGFza01hdGNoWzNdID8/ICcgJztcbiAgICBjb25zdCBzdGF0dXMgPSBzdGF0dXNTdHJpbmcgPT09ICcgJyA/IFN0YXR1cy5UT0RPIDogU3RhdHVzLkRPTkU7XG4gICAgbGV0IGRlc2NyaXB0aW9uOiBzdHJpbmcgPSBub25UYXNrTWF0Y2hbNF07XG5cbiAgICBjb25zdCBibG9ja0xpbmtNYXRjaCA9IGxpbmUubWF0Y2goVGFza1JlZ3VsYXJFeHByZXNzaW9ucy5ibG9ja0xpbmtSZWdleCk7XG4gICAgY29uc3QgYmxvY2tMaW5rID0gYmxvY2tMaW5rTWF0Y2ggIT09IG51bGwgPyBibG9ja0xpbmtNYXRjaFswXSA6ICcnO1xuXG4gICAgaWYgKGJsb2NrTGluayAhPT0gJycpIHtcbiAgICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi5yZXBsYWNlKFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuYmxvY2tMaW5rUmVnZXgsICcnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFRhc2soe1xuICAgICAgICBzdGF0dXMsXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICBwYXRoLFxuICAgICAgICBpbmRlbnRhdGlvbixcbiAgICAgICAgbGlzdE1hcmtlcixcbiAgICAgICAgb3JpZ2luYWxTdGF0dXNDaGFyYWN0ZXI6IHN0YXR1c1N0cmluZyxcbiAgICAgICAgYmxvY2tMaW5rLFxuICAgICAgICBwcmlvcml0eTogUHJpb3JpdHkuTm9uZSxcbiAgICAgICAgc3RhcnREYXRlOiBudWxsLFxuICAgICAgICBzY2hlZHVsZWREYXRlOiBudWxsLFxuICAgICAgICBkdWVEYXRlOiBudWxsLFxuICAgICAgICBkb25lRGF0ZTogbnVsbCxcbiAgICAgICAgcmVjdXJyZW5jZTogbnVsbCxcbiAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0aGUgZm9sbG93aW5nIGZpZWxkcyB0byBlZGl0IGhlcmUgaW4gdGhlIGVkaXRvci5cbiAgICAgICAgc2VjdGlvblN0YXJ0OiAwLFxuICAgICAgICBzZWN0aW9uSW5kZXg6IDAsXG4gICAgICAgIHByZWNlZGluZ0hlYWRlcjogbnVsbCxcbiAgICAgICAgdGFnczogW10sXG4gICAgICAgIG9yaWdpbmFsTWFya2Rvd246ICcnLFxuICAgICAgICAvLyBOb3QgbmVlZGVkIHNpbmNlIHRoZSBpbmZlcnJlZCBzdGF0dXMgaXMgYWx3YXlzIHJlLWNvbXB1dGVkIGFmdGVyIHN1Ym1pdHRpbmcuXG4gICAgICAgIHNjaGVkdWxlZERhdGVJc0luZmVycmVkOiBmYWxzZSxcbiAgICB9KTtcbn07XG4iLCAiaW1wb3J0IHsgRWRpdG9yLCBNYXJrZG93blZpZXcsIFZpZXcgfSBmcm9tICdvYnNpZGlhbic7XG5cbmltcG9ydCB7IFRhc2ssIFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMgfSBmcm9tICcuLi9UYXNrJztcblxuZXhwb3J0IGNvbnN0IHRvZ2dsZURvbmUgPSAoY2hlY2tpbmc6IGJvb2xlYW4sIGVkaXRvcjogRWRpdG9yLCB2aWV3OiBWaWV3KSA9PiB7XG4gICAgaWYgKGNoZWNraW5nKSB7XG4gICAgICAgIGlmICghKHZpZXcgaW5zdGFuY2VvZiBNYXJrZG93blZpZXcpKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBhcmUgbm90IGluIGEgbWFya2Rvd24gdmlldywgdGhlIGNvbW1hbmQgc2hvdWxkbid0IGJlIHNob3duLlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGNvbW1hbmQgc2hvdWxkIGFsd2F5cyB0cmlnZ2VyIGluIGEgbWFya2Rvd24gdmlldzpcbiAgICAgICAgLy8gLSBDb252ZXJ0IGxpbmVzIHRvIGxpc3QgaXRlbXMuXG4gICAgICAgIC8vIC0gQ29udmVydCBsaXN0IGl0ZW1zIHRvIHRhc2tzLlxuICAgICAgICAvLyAtIFRvZ2dsZSB0YXNrcycgc3RhdHVzLlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoISh2aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3KSkge1xuICAgICAgICAvLyBTaG91bGQgbmV2ZXIgaGFwcGVuIGR1ZSB0byBjaGVjayBhYm92ZS5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFdlIGFyZSBjZXJ0YWluIHdlIGFyZSBpbiB0aGUgZWRpdG9yIGR1ZSB0byB0aGUgY2hlY2sgYWJvdmUuXG4gICAgY29uc3QgcGF0aCA9IHZpZXcuZmlsZT8ucGF0aDtcbiAgICBpZiAocGF0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBvcmlnQ3Vyc29yUG9zID0gZWRpdG9yLmdldEN1cnNvcigpO1xuICAgIGNvbnN0IGxpbmVOdW1iZXIgPSBvcmlnQ3Vyc29yUG9zLmxpbmU7XG4gICAgY29uc3QgbGluZSA9IGVkaXRvci5nZXRMaW5lKGxpbmVOdW1iZXIpO1xuXG4gICAgY29uc3QgdG9nZ2xlZExpbmUgPSB0b2dnbGVMaW5lKGxpbmUsIHBhdGgpO1xuICAgIGVkaXRvci5zZXRMaW5lKGxpbmVOdW1iZXIsIHRvZ2dsZWRMaW5lKTtcblxuICAgIC8qIEN1cnNvciBwb3NpdGlvbnMgYXJlIDAtYmFzZWQgZm9yIGJvdGggXCJsaW5lXCIgYW5kIFwiY2hcIiBvZmZzZXRzLlxuICAgICAqIElmIFwiY2hcIiBvZmZzZXQgYmlnZ2VyIHRoYW4gdGhlIGxpbmUgbGVuZ3RoLCB3aWxsIGp1c3QgY29udGludWUgdG8gbmV4dCBsaW5lKHMpLlxuICAgICAqIEJ5IGRlZmF1bHQgXCJlZGl0b3Iuc2V0TGluZSgpXCIgYXBwZWFycyB0byBlaXRoZXIga2VlcCB0aGUgY3Vyc29yIGF0IHRoZSBlbmQgb2YgdGhlIGxpbmUgaWYgaXQgaXMgYWxyZWFkeSB0aGVyZSxcbiAgICAgKiAuLi5vciBtb3ZlIGl0IHRvIHRoZSBiZWdpbm5pbmcgaWYgaXQgaXMgYW55d2hlcmUgZWxzZS4gTGljYXQgZXhwbGFpbmVkIHRoaXMgb24gRGlzY29yZCBhcyBcInN0aWNraW5nXCIgdG8gb25lIHNpZGUgb3IgYW5vdGhlci5cbiAgICAgKiBQcmV2aW91c2x5LCBUYXNrcyB3b3VsZCByZXNldCttb3ZlLXJpZ2h0IHRoZSBjdXJzb3IgaWYgdGhlcmUgd2FzIGFueSB0ZXh0IGluIHRoZSBsaW5lLCBpbmNsdWRpbmcgc29tZXRoaW5nIGluc2lkZSB0aGUgY2hlY2tib3gsXG4gICAgICogbW92aW5nIHJpZ2h0IGJ5ICh0b2dnbGVkTGluZS5sZW5ndGggLSBsaW5lLmxlbmd0aCkuIChTdXBwb3NlZGx5LCBidXQgaXQgc3RpbGwgbW92ZXMgcmlnaHQsIGp1c3QgYnkgbGVzcywgaWYgdGhlIHRvZ2dsZWRMaW5lIGlzIHNob3J0ZXIgdGhhbiB0aGUgb2xkKS5cbiAgICAgKiBUaGlzIG1pc3NlZCB0aGUgbmVlZCB0byBtb3ZlIHJpZ2h0IG9uIHRoZSBibGFuayBsaW5lIHRvIFwiLSBcIiBjYXNlIChpc3N1ZSAjNDYwKS5cbiAgICAgKiBUaGlzIGFsc28gbWVhbnQgdGhlIGN1cnNvciBtb3ZlZCBub25zZW5zaWNhbGx5IGlmIGl0IHdhcyBiZWZvcmUgYW55IG5ld2x5IGluc2VydGVkIHRleHQsXG4gICAgICogc3VjaCBhcyBhIGRvbmUgZGF0ZSBhdCB0aGUgZW5kIG9mIHRoZSBsaW5lLCBvciBhZnRlciB0aGUgXCI+XCIgd2hlbiBcIj4gLVwiIGNoYW5nZWQgdG8gXCI+IC0gWyBdXCIuXG4gICAgICovXG4gICAgLy8gUmVzZXQgdGhlIGN1cnNvci4gVXNlIHRoZSBkaWZmZXJlbmNlIGluIGxpbmUgbGVuZ3RocyBhbmQgb3JpZ2luYWwgY3Vyc29yIHBvc2l0aW9uIHRvIGRldGVybWluZSBiZWhhdmlvclxuICAgIGVkaXRvci5zZXRDdXJzb3Ioe1xuICAgICAgICBsaW5lOiBvcmlnQ3Vyc29yUG9zLmxpbmUsXG4gICAgICAgIGNoOiBjYWxjdWxhdGVDdXJzb3JPZmZzZXQob3JpZ0N1cnNvclBvcy5jaCwgbGluZSwgdG9nZ2xlZExpbmUpLFxuICAgIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHRvZ2dsZUxpbmUgPSAobGluZTogc3RyaW5nLCBwYXRoOiBzdHJpbmcpID0+IHtcbiAgICBsZXQgdG9nZ2xlZExpbmUgPSBsaW5lO1xuXG4gICAgY29uc3QgdGFzayA9IFRhc2suZnJvbUxpbmUoe1xuICAgICAgICAvLyBXaHkgYXJlIHdlIHVzaW5nIFRhc2suZnJvbUxpbmUgaW5zdGVhZCBvZiB0aGUgQ2FjaGUgaGVyZT9cbiAgICAgICAgbGluZSxcbiAgICAgICAgcGF0aCxcbiAgICAgICAgc2VjdGlvblN0YXJ0OiAwLCAvLyBXZSBkb24ndCBuZWVkIHRoaXMgdG8gdG9nZ2xlIGl0IGhlcmUgaW4gdGhlIGVkaXRvci5cbiAgICAgICAgc2VjdGlvbkluZGV4OiAwLCAvLyBXZSBkb24ndCBuZWVkIHRoaXMgdG8gdG9nZ2xlIGl0IGhlcmUgaW4gdGhlIGVkaXRvci5cbiAgICAgICAgcHJlY2VkaW5nSGVhZGVyOiBudWxsLCAvLyBXZSBkb24ndCBuZWVkIHRoaXMgdG8gdG9nZ2xlIGl0IGhlcmUgaW4gdGhlIGVkaXRvci5cbiAgICAgICAgZmFsbGJhY2tEYXRlOiBudWxsLCAvLyBXZSBkb24ndCBuZWVkIHRoaXMgdG8gdG9nZ2xlIGl0IGhlcmUgaW4gdGhlIGVkaXRvci5cbiAgICB9KTtcbiAgICBpZiAodGFzayAhPT0gbnVsbCkge1xuICAgICAgICB0b2dnbGVkTGluZSA9IHRvZ2dsZVRhc2sodGFzayk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIHRhc2sgaXMgbnVsbCB0aGlzIG1lYW5zIHRoYXQgd2UgaGF2ZSBvbmUgb2Y6XG4gICAgICAgIC8vIDEuIGEgcmVndWxhciBjaGVja2xpc3QgaXRlbVxuICAgICAgICAvLyAyLiBhIGxpc3QgaXRlbVxuICAgICAgICAvLyAzLiBhIHNpbXBsZSB0ZXh0IGxpbmVcblxuICAgICAgICAvLyBUaGUgdGFzayByZWdleCB3aWxsIG1hdGNoIGNoZWNrbGlzdCBpdGVtcy5cbiAgICAgICAgY29uc3QgcmVnZXhNYXRjaCA9IGxpbmUubWF0Y2goVGFza1JlZ3VsYXJFeHByZXNzaW9ucy50YXNrUmVnZXgpO1xuICAgICAgICBpZiAocmVnZXhNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gVG9nZ2xlIHRoZSBzdGF0dXMgb2YgdGhlIGNoZWNrbGlzdCBpdGVtLlxuICAgICAgICAgICAgY29uc3Qgc3RhdHVzU3RyaW5nID0gcmVnZXhNYXRjaFsyXS50b0xvd2VyQ2FzZSgpOyAvLyBOb3RlIGZvciBmdXR1cmU6IEkgZG8gbm90IHRoaW5rIHRoaXMgdG9Mb3dlckNhc2UgaXMgbmVjZXNzYXJ5IGFuZCB0aGVyZSBpcyBhbiBpc3N1ZSBhYm91dCBob3cgaXQgYnJlYWtzIHNvbWUgdGhlbWUgb3Igc25pcHBldC5cbiAgICAgICAgICAgIGNvbnN0IG5ld1N0YXR1c1N0cmluZyA9IHN0YXR1c1N0cmluZyA9PT0gJyAnID8gJ3gnIDogJyAnO1xuICAgICAgICAgICAgdG9nZ2xlZExpbmUgPSBsaW5lLnJlcGxhY2UoVGFza1JlZ3VsYXJFeHByZXNzaW9ucy50YXNrUmVnZXgsIGAkMS0gWyR7bmV3U3RhdHVzU3RyaW5nfV0gJDNgKTtcbiAgICAgICAgfSBlbHNlIGlmIChUYXNrUmVndWxhckV4cHJlc3Npb25zLmxpc3RJdGVtUmVnZXgudGVzdChsaW5lKSkge1xuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgbGlzdCBpdGVtIHRvIGEgY2hlY2tsaXN0IGl0ZW0uXG4gICAgICAgICAgICB0b2dnbGVkTGluZSA9IGxpbmUucmVwbGFjZShUYXNrUmVndWxhckV4cHJlc3Npb25zLmxpc3RJdGVtUmVnZXgsICckMSQyIFsgXScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgbGluZSB0byBhIGxpc3QgaXRlbS5cbiAgICAgICAgICAgIHRvZ2dsZWRMaW5lID0gbGluZS5yZXBsYWNlKFRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuaW5kZW50YXRpb25SZWdleCwgJyQxLSAnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0b2dnbGVkTGluZTtcbn07XG5cbmNvbnN0IHRvZ2dsZVRhc2sgPSAodGFzazogVGFzayk6IHN0cmluZyA9PiB7XG4gICAgLy8gVG9nZ2xpbmcgYSByZWN1cnJpbmcgdGFzayB3aWxsIHByb2R1Y2UgdHdvIFRhc2tzXG4gICAgY29uc3QgdG9nZ2xlZFRhc2tzID0gdGFzay50b2dnbGUoKTtcbiAgICBjb25zdCBzZXJpYWxpemVkID0gdG9nZ2xlZFRhc2tzLm1hcCgodGFzazogVGFzaykgPT4gdGFzay50b0ZpbGVMaW5lU3RyaW5nKCkpLmpvaW4oJ1xcbicpO1xuXG4gICAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG59O1xuXG4vKiBDYXNlcyAoYW5vdGhlciB3YXkpOlxuMCkgTGluZSBnb3Qgc2hvcnRlcjogZG9uZSBkYXRlIHJlbW92ZWQgZnJvbSBlbmQgb2YgdGFzaywgY3Vyc29yIHNob3VsZCByZXNldCBvciBiZSBtb3ZlZCB0byBuZXcgZW5kIGlmIHJlc2V0IHBvc2l0aW9uIGlzIHRvbyBsb25nLlxuMSkgTGluZSBzdGF5ZWQgdGhlIHNhbWUgbGVuZ3RoOiBDaGVja2luZyAmIHVuY2hlY2tpbmcgdGV4dGJveCB0aGF0IGlzIG5vdCBhIHRhc2sgLSBjdXJzb3Igc2hvdWxkIHJlc2V0LlxuMikgTGluZSBnb3QgbG9uZ2VyOlxuICAgIGEpIExpc3QgbWFya2VyIGNvdWxkIGhhdmUgYmVlbiBhZGRlZC4gRmluZCBpdCBpbiBuZXcgdGV4dDogaWYgY3Vyc29yIHdhcyBhdCBvciByaWdodCBvZiB3aGVyZSBpdCB3YXMgYWRkZWQsIG1vdmUgdGhlIGN1cnNvciByaWdodC5cbiAgICBiKSBFbXB0eSBjaGVja2JveCBjb3VsZCBoYXZlIGJlZW4gYWRkZWQuIElmIGN1cnNvciB3YXMgYWZ0ZXIgdGhlIGxpc3QgbWFya2VyIChpbiBvbGQgb3IgbmV3KSwgaXQgc2hvdWxkIG1vdmUgcmlnaHQuXG4gICAgYykgRG9uZSBlbW9qaSBhbmQgZGF0ZSBjb3VsZCBoYXZlIGJlZW4gYWRkZWQgdG8gdGhlIGVuZC4gQ3Vyc29yIHNob3VsZCByZXNldCBpZiAwLCBhbmQgc3RheSBlbmQgb2YgbGluZSBvdGhlcndpc2UuXG4gICAgZCkgUmVjdXJyaW5nIHRhc2sgY291bGQgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBiZWdpbm5pbmcgYW5kIGRvbmUgZW1vamkgYW5kIGRhdGUgYWRkZWQgdG8gdGhlIGVuZC4gQ3VycmVudCBiZWhhdmlvciBhZGRzIHNvIG11Y2ggdG8gdGhlIG9mZnNldCB0byBtYWtlIHRoaXMgcmlnaHQuXG5cblNvIGN1cnNvciBzaG91bGQgYmUgcmVzZXQgaWYgMCwgd2hpY2ggaW5jbHVkZXMgYmVpbmcgbW92ZWQgdG8gbmV3IGVuZCBpZiBnb3Qgc2hvcnRlci4gVGhlbiBtaWdodCBuZWVkIHRvIG1vdmUgcmlnaHQgMiBvciAzLlxuKi9cbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVDdXJzb3JPZmZzZXQgPSAob3JpZ0N1cnNvckNoOiBudW1iZXIsIGxpbmU6IHN0cmluZywgdG9nZ2xlZExpbmU6IHN0cmluZykgPT4ge1xuICAgIGxldCBuZXdMaW5lTGVuID0gdG9nZ2xlZExpbmUubGVuZ3RoO1xuICAgIGlmIChuZXdMaW5lTGVuIDw9IGxpbmUubGVuZ3RoKSB7XG4gICAgICAgIC8vIExpbmUgZ290IHNob3J0ZXIgb3Igc3RheWVkIHNhbWUgbGVuZ3RoLiBSZXNldCBjdXJzb3IgdG8gb3JpZ2luYWwgcG9zaXRpb24sIGNhcHBlZCBhdCBlbmQgb2YgbGluZS5cbiAgICAgICAgcmV0dXJuIG9yaWdDdXJzb3JDaCA+PSB0b2dnbGVkTGluZS5sZW5ndGggPyBuZXdMaW5lTGVuIDogb3JpZ0N1cnNvckNoO1xuICAgIH1cblxuICAgIC8vIFNwZWNpYWwtY2FzZSBmb3IgZG9uZS1kYXRlIGFwcGVuZCwgZml4ZXMgIzQ0OVxuICAgIGNvbnN0IGRvbmVEYXRlTGVuZ3RoID0gJyBcdTI3MDUgWVlZWS1NTS1ERCcubGVuZ3RoO1xuICAgIGlmICh0b2dnbGVkTGluZS5tYXRjaChUYXNrUmVndWxhckV4cHJlc3Npb25zLmRvbmVEYXRlUmVnZXgpICYmIG5ld0xpbmVMZW4gLSBsaW5lLmxlbmd0aCA+PSBkb25lRGF0ZUxlbmd0aCkge1xuICAgICAgICBuZXdMaW5lTGVuIC09IGRvbmVEYXRlTGVuZ3RoO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSByZWN1cnJpbmcgdGFza3M6IGVudGlyZSBsaW5lIHBsdXMgbmV3bGluZSBwcmVwZW5kZWQuIEZpeCBmb3IgIzQ0OSBhYm92ZSBtZWFucyBhcHBlbmRlZCBkb25lIGRhdGUgdHJlYXRlZCBjb3JyZWN0bHkuXG4gICAgaWYgKG5ld0xpbmVMZW4gPj0gMiAqIGxpbmUubGVuZ3RoICYmIHRvZ2dsZWRMaW5lLnNlYXJjaCgnLitcXG4uKycpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gb3JpZ0N1cnNvckNoICsgbmV3TGluZUxlbiAtIGxpbmUubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qIExpbmUgZ290IGxvbmdlciwgbm90IGEgcmVjdXJyaW5nIHRhc2suIFdlcmUgdGhlIGFkZGVkIGNoYXJhY3RlcnMgYmVmb3JlIG9yIGFmdGVyIHRoZSBjdXJzb3I/XG4gICAgICogQXQgdGhpcyBwb2ludCB0aGUgbGluZSBpcyBhdCBsZWFzdCBhIGxpc3QgaXRlbS4gRmluZCB0aGUgZmlyc3QgbGlzdCBtYXJrZXIuICovXG4gICAgY29uc3QgZmlyc3RMaXN0SXRlbUNoYXIgPSB0b2dnbGVkTGluZS5zZWFyY2goL1stKl0vKTtcbiAgICBpZiAob3JpZ0N1cnNvckNoIDwgZmlyc3RMaXN0SXRlbUNoYXIpIHtcbiAgICAgICAgLy8gQ3Vyc29yIHdhcyBpbiBpbmRlbnRhdGlvbi4gUmVzZXQgdG8gd2hlcmUgaXQgd2FzLlxuICAgICAgICByZXR1cm4gb3JpZ0N1cnNvckNoO1xuICAgIH1cblxuICAgIHJldHVybiBvcmlnQ3Vyc29yQ2ggKyBuZXdMaW5lTGVuIC0gbGluZS5sZW5ndGg7XG59O1xuIiwgImltcG9ydCB0eXBlIHsgQXBwLCBFZGl0b3IsIFBsdWdpbiwgVmlldyB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IGNyZWF0ZU9yRWRpdCB9IGZyb20gJy4vQ3JlYXRlT3JFZGl0JztcblxuaW1wb3J0IHsgdG9nZ2xlRG9uZSB9IGZyb20gJy4vVG9nZ2xlRG9uZSc7XG5cbmV4cG9ydCBjbGFzcyBDb21tYW5kcyB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwbHVnaW46IFBsdWdpbjtcblxuICAgIHByaXZhdGUgZ2V0IGFwcCgpOiBBcHAge1xuICAgICAgICByZXR1cm4gdGhpcy5wbHVnaW4uYXBwO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHsgcGx1Z2luIH06IHsgcGx1Z2luOiBQbHVnaW4gfSkge1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblxuICAgICAgICBwbHVnaW4uYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ2VkaXQtdGFzaycsXG4gICAgICAgICAgICBuYW1lOiAnQ3JlYXRlIG9yIGVkaXQgdGFzaycsXG4gICAgICAgICAgICBpY29uOiAncGVuY2lsJyxcbiAgICAgICAgICAgIGVkaXRvckNoZWNrQ2FsbGJhY2s6IChjaGVja2luZzogYm9vbGVhbiwgZWRpdG9yOiBFZGl0b3IsIHZpZXc6IFZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlT3JFZGl0KGNoZWNraW5nLCBlZGl0b3IsIHZpZXcsIHRoaXMuYXBwKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBsdWdpbi5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAndG9nZ2xlLWRvbmUnLFxuICAgICAgICAgICAgbmFtZTogJ1RvZ2dsZSB0YXNrIGRvbmUnLFxuICAgICAgICAgICAgaWNvbjogJ2NoZWNrLWluLWNpcmNsZScsXG4gICAgICAgICAgICBlZGl0b3JDaGVja0NhbGxiYWNrOiB0b2dnbGVEb25lLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBFdmVudFJlZiwgRXZlbnRzIGFzIE9ic2lkaWFuRXZlbnRzIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5pbXBvcnQgdHlwZSB7IFN0YXRlIH0gZnJvbSAnLi9DYWNoZSc7XG5pbXBvcnQgdHlwZSB7IFRhc2sgfSBmcm9tICcuL1Rhc2snO1xuXG5lbnVtIEV2ZW50IHtcbiAgICBDYWNoZVVwZGF0ZSA9ICdvYnNpZGlhbi10YXNrcy1wbHVnaW46Y2FjaGUtdXBkYXRlJyxcbiAgICBSZXF1ZXN0Q2FjaGVVcGRhdGUgPSAnb2JzaWRpYW4tdGFza3MtcGx1Z2luOnJlcXVlc3QtY2FjaGUtdXBkYXRlJyxcbn1cblxuaW50ZXJmYWNlIENhY2hlVXBkYXRlRGF0YSB7XG4gICAgdGFza3M6IFRhc2tbXTtcbiAgICBzdGF0ZTogU3RhdGU7XG59XG5cbmV4cG9ydCBjbGFzcyBUYXNrc0V2ZW50cyB7XG4gICAgcHJpdmF0ZSBvYnNpZGlhbkV2ZW50czogT2JzaWRpYW5FdmVudHM7XG5cbiAgICBjb25zdHJ1Y3Rvcih7IG9ic2lkaWFuRXZlbnRzIH06IHsgb2JzaWRpYW5FdmVudHM6IE9ic2lkaWFuRXZlbnRzIH0pIHtcbiAgICAgICAgdGhpcy5vYnNpZGlhbkV2ZW50cyA9IG9ic2lkaWFuRXZlbnRzO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbkNhY2hlVXBkYXRlKGhhbmRsZXI6IChjYWNoZURhdGE6IENhY2hlVXBkYXRlRGF0YSkgPT4gdm9pZCk6IEV2ZW50UmVmIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2JzaWRpYW5FdmVudHMub24oRXZlbnQuQ2FjaGVVcGRhdGUsIGhhbmRsZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cmlnZ2VyQ2FjaGVVcGRhdGUoY2FjaGVEYXRhOiBDYWNoZVVwZGF0ZURhdGEpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vYnNpZGlhbkV2ZW50cy50cmlnZ2VyKEV2ZW50LkNhY2hlVXBkYXRlLCBjYWNoZURhdGEpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvblJlcXVlc3RDYWNoZVVwZGF0ZShoYW5kbGVyOiAoZm46IChjYWNoZURhdGE6IENhY2hlVXBkYXRlRGF0YSkgPT4gdm9pZCkgPT4gdm9pZCk6IEV2ZW50UmVmIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2JzaWRpYW5FdmVudHMub24oRXZlbnQuUmVxdWVzdENhY2hlVXBkYXRlLCBoYW5kbGVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdHJpZ2dlclJlcXVlc3RDYWNoZVVwZGF0ZShmbjogKGNhY2hlRGF0YTogQ2FjaGVVcGRhdGVEYXRhKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAgIHRoaXMub2JzaWRpYW5FdmVudHMudHJpZ2dlcihFdmVudC5SZXF1ZXN0Q2FjaGVVcGRhdGUsIGZuKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb2ZmKGV2ZW50UmVmOiBFdmVudFJlZik6IHZvaWQge1xuICAgICAgICB0aGlzLm9ic2lkaWFuRXZlbnRzLm9mZnJlZihldmVudFJlZik7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IGdldFNldHRpbmdzIH0gZnJvbSAnQ29uZmlnL1NldHRpbmdzJztcblxuaW1wb3J0IHR5cGUgeyBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LCBQbHVnaW4gfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAnLi9UYXNrJztcblxuZXhwb3J0IGNsYXNzIElubGluZVJlbmRlcmVyIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHBsdWdpbiB9OiB7IHBsdWdpbjogUGx1Z2luIH0pIHtcbiAgICAgICAgcGx1Z2luLnJlZ2lzdGVyTWFya2Rvd25Qb3N0UHJvY2Vzc29yKHRoaXMuX21hcmtkb3duUG9zdFByb2Nlc3Nvci5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbWFya2Rvd25Qb3N0UHJvY2Vzc29yID0gdGhpcy5fbWFya2Rvd25Qb3N0UHJvY2Vzc29yLmJpbmQodGhpcyk7XG5cbiAgICBwcml2YXRlIGFzeW5jIF9tYXJrZG93blBvc3RQcm9jZXNzb3IoZWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbnRleHQ6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBnbG9iYWxGaWx0ZXIgfSA9IGdldFNldHRpbmdzKCk7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVkRWxlbWVudHMgPSBlbGVtZW50LmZpbmRBbGwoJy50YXNrLWxpc3QtaXRlbScpLmZpbHRlcigodGFza0l0ZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVzVGV4dCA9IHRhc2tJdGVtLnRleHRDb250ZW50Py5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICBpZiAobGluZXNUZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE9ubHkgdGhlIGZpcnN0IGxpbmUuIENhbiBiZSBtdWx0aXBsZSBsaW5lcyBpZiBhbiBMSSBlbGVtZW50IGNvbnRhaW5zIGFuIFVMLlxuICAgICAgICAgICAgLy8gV2FudCB0byBtYXRjaCB0aGUgdG9wIGxldmVsIExJIGluZGVwZW5kZW50bHkgZnJvbSBpdHMgY2hpbGRyZW4uXG4gICAgICAgICAgICAvLyBUaGVyZSB3YXMgYSBmYWxzZSBwb3NpdGl2ZSwgd2hlbiB0aGUgTEkgd2Fzbid0IGEgdGFzayBpdHNlbGYsIGJ1dCBjb250YWluZWQgdGhlXG4gICAgICAgICAgICAvLyBnbG9iYWwgZmlsdGVyIGluIGNoaWxkIExJcy5cbiAgICAgICAgICAgIGxldCBmaXJzdExpbmVUZXh0OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gVGhlIGZpcnN0IGxpbmUgaXMgdGhlIGZpcnN0IGxpbmUgdGhhdCBpcyBub3QgZW1wdHkuIEVtcHR5IGxpbmVzIGNhbiBleGlzdCB3aGVuXG4gICAgICAgICAgICAvLyB0aGUgY2hlY2tsaXN0IGluIG1hcmtkb3duIGluY2x1ZGVzIGJsYW5rIGxpbmVzIChzZWUgIzMxMykuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzVGV4dC5sZW5ndGg7IGkgPSBpICsgMSkge1xuICAgICAgICAgICAgICAgIGlmIChsaW5lc1RleHRbaV0gIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0TGluZVRleHQgPSBsaW5lc1RleHRbaV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZpcnN0TGluZVRleHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmaXJzdExpbmVUZXh0LmluY2x1ZGVzKGdsb2JhbEZpbHRlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVuZGVyZWRFbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIE5vIHRhc2tzIG1lYW5zIG5vdGhpbmcgdG8gZG8uXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXRoID0gY29udGV4dC5zb3VyY2VQYXRoO1xuICAgICAgICBjb25zdCBzZWN0aW9uID0gY29udGV4dC5nZXRTZWN0aW9uSW5mbyhlbGVtZW50KTtcblxuICAgICAgICBpZiAoc2VjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gV2UgY2Fubm90IHByb2Nlc3MgdGhlIHJlbmRlciB3aXRob3V0IHRoZSBzZWN0aW9uIGluZm8uXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaWxlTGluZXMgPSBzZWN0aW9uLnRleHQuc3BsaXQoJ1xcbicpO1xuXG4gICAgICAgIGxldCBzZWN0aW9uSW5kZXggPSAwO1xuICAgICAgICBjb25zdCBmaWxlVGFza3M6IFRhc2tbXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBsaW5lTnVtYmVyID0gc2VjdGlvbi5saW5lU3RhcnQ7IGxpbmVOdW1iZXIgPD0gc2VjdGlvbi5saW5lRW5kOyBsaW5lTnVtYmVyKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBmaWxlTGluZXNbbGluZU51bWJlcl07XG4gICAgICAgICAgICBpZiAobGluZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgZW5kIHVwIG91dHNpZGUgdGhlIHJhbmdlIG9mIHRoZSBmaWxlLFxuICAgICAgICAgICAgICAgIC8vIHdlIGNhbm5vdCBwcm9jZXNzIHRoaXMgdGFzay5cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdGFzayA9IFRhc2suZnJvbUxpbmUoe1xuICAgICAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgICBzZWN0aW9uU3RhcnQ6IHNlY3Rpb24ubGluZVN0YXJ0LFxuICAgICAgICAgICAgICAgIHNlY3Rpb25JbmRleCxcbiAgICAgICAgICAgICAgICBwcmVjZWRpbmdIZWFkZXI6IG51bGwsIC8vIFdlIGRvbid0IG5lZWQgdGhlIHByZWNlZGluZyBoZWFkZXIgZm9yIGluLWxpbmUgcmVuZGVyaW5nLlxuICAgICAgICAgICAgICAgIGZhbGxiYWNrRGF0ZTogbnVsbCwgLy8gV2UgZG9uJ3QgbmVlZCB0aGUgZmFsbGJhY2sgZGF0ZSBmb3IgaW4tbGluZSByZW5kZXJpbmdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRhc2sgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmaWxlVGFza3MucHVzaCh0YXNrKTtcbiAgICAgICAgICAgICAgICBzZWN0aW9uSW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBzZWN0aW9uIGluZGV4IGlzIHRoZSBudGggdGFzayB3aXRoaW4gdGhpcyBzZWN0aW9uLlxuICAgICAgICBmb3IgKGxldCBzZWN0aW9uSW5kZXggPSAwOyBzZWN0aW9uSW5kZXggPCByZW5kZXJlZEVsZW1lbnRzLmxlbmd0aDsgc2VjdGlvbkluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2sgPSBmaWxlVGFza3Nbc2VjdGlvbkluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlcmVkRWxlbWVudCA9IHJlbmRlcmVkRWxlbWVudHNbc2VjdGlvbkluZGV4XTtcblxuICAgICAgICAgICAgaWYgKHRhc2sgPT09IHVuZGVmaW5lZCB8fCByZW5kZXJlZEVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIEFzc3VtaW5nIG1hdGNoIG9mIHRhc2tzIGluIGZpbGUgYW5kIHJlbmRlciBwcmV2aWV3LlxuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGEgbWlzLW1hdGNoIGluIHRoZSBudW1iZXJzLCB3ZSBzdGlsbCBwcm9jZXNzXG4gICAgICAgICAgICAgICAgLy8gd2hhdCB3ZSBjYW4uXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGFMaW5lOiBzdHJpbmcgPSByZW5kZXJlZEVsZW1lbnQuZ2V0QXR0cignZGF0YS1saW5lJykgPz8gJzAnO1xuICAgICAgICAgICAgY29uc3QgbGlzdEluZGV4OiBudW1iZXIgPSBOdW1iZXIucGFyc2VJbnQoZGF0YUxpbmUsIDEwKTtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gYXdhaXQgdGFzay50b0xpKHtcbiAgICAgICAgICAgICAgICBwYXJlbnRVbEVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgbGlzdEluZGV4LFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIGEgc3ViLWxpc3Qgb3Igc3ViLWRpdiAoZS5nLiB0aGVcbiAgICAgICAgICAgIC8vIGZvbGRpbmcgYXJyb3cpLCB3ZSBuZWVkIHRvIGtlZXAgaXQuXG4gICAgICAgICAgICBjb25zdCByZW5kZXJlZENoaWxkcmVuID0gcmVuZGVyZWRFbGVtZW50LmNoaWxkTm9kZXM7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcmVkQ2hpbGRyZW4ubGVuZ3RoOyBpID0gaSArIDEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZW5kZXJlZENoaWxkID0gcmVuZGVyZWRDaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAocmVuZGVyZWRDaGlsZC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnZGl2Jykge1xuICAgICAgICAgICAgICAgICAgICB0YXNrRWxlbWVudC5wcmVwZW5kKHJlbmRlcmVkQ2hpbGQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVuZGVyZWRDaGlsZC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndWwnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2tFbGVtZW50LmFwcGVuZChyZW5kZXJlZENoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlLXNldCB0aGUgb3JpZ2luYWwgZm9vdG5vdGVzLlxuICAgICAgICAgICAgLy8gVGhlIG5ld2x5IHJlbmRlcmVkIEhUTUwgd29uJ3QgaGF2ZSB0aGUgY29ycmVjdCBpbmRleGVzIGFuZCBsaW5rc1xuICAgICAgICAgICAgLy8gZnJvbSB0aGUgb3JpZ2luYWwgZG9jdW1lbnQuXG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbEZvb3Rub3RlcyA9IHJlbmRlcmVkRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1mb290bm90ZS1pZF0nKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0Zvb3Rub3RlcyA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWZvb3Rub3RlLWlkXScpO1xuICAgICAgICAgICAgaWYgKG9yaWdpbmFsRm9vdG5vdGVzLmxlbmd0aCA9PT0gbmV3Rm9vdG5vdGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JpZ2luYWxGb290bm90ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Rm9vdG5vdGVzW2ldLnJlcGxhY2VXaXRoKG9yaWdpbmFsRm9vdG5vdGVzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlbmRlcmVkRWxlbWVudC5yZXBsYWNlV2l0aCh0YXNrRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgRWRpdG9yVmlldywgVmlld1BsdWdpbiB9IGZyb20gJ0Bjb2RlbWlycm9yL3ZpZXcnO1xuaW1wb3J0IHR5cGUgeyBQbHVnaW5WYWx1ZSB9IGZyb20gJ0Bjb2RlbWlycm9yL3ZpZXcnO1xuaW1wb3J0IHsgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAnLi9UYXNrJztcblxuZXhwb3J0IGNvbnN0IG5ld0xpdmVQcmV2aWV3RXh0ZW5zaW9uID0gKCkgPT4ge1xuICAgIHJldHVybiBWaWV3UGx1Z2luLmZyb21DbGFzcyhMaXZlUHJldmlld0V4dGVuc2lvbik7XG59O1xuXG5jbGFzcyBMaXZlUHJldmlld0V4dGVuc2lvbiBpbXBsZW1lbnRzIFBsdWdpblZhbHVlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHZpZXc6IEVkaXRvclZpZXc7XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3OiBFZGl0b3JWaWV3KSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG5cbiAgICAgICAgdGhpcy5oYW5kbGVDbGlja0V2ZW50ID0gdGhpcy5oYW5kbGVDbGlja0V2ZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudmlldy5kb20uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrRXZlbnQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZpZXcuZG9tLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGlja0V2ZW50KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUNsaWNrRXZlbnQoZXZlbnQ6IE1vdXNlRXZlbnQpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgeyB0YXJnZXQgfSA9IGV2ZW50O1xuXG4gICAgICAgIC8vIE9ubHkgaGFuZGxlIGNoZWNrYm94IGNsaWNrcy5cbiAgICAgICAgaWYgKCF0YXJnZXQgfHwgISh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSB8fCB0YXJnZXQudHlwZSAhPT0gJ2NoZWNrYm94Jykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogUmlnaHQgbm93IE9ic2lkaWFuIEFQSSBkb2VzIG5vdCBnaXZlIHVzIGEgd2F5IHRvIGhhbmRsZSBjaGVja2JveCBjbGlja3MgaW5zaWRlIHJlbmRlcmVkLXdpZGdldHMtaW4tTFAgc3VjaCBhc1xuICAgICAgICAgKiBjYWxsb3V0cywgdGFibGVzLCBhbmQgdHJhbnNjbHVzaW9ucyBiZWNhdXNlIGB0aGlzLnZpZXcucG9zQXRET01gIHdpbGwgcmV0dXJuIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHdpZGdldFxuICAgICAgICAgKiBhcyB0aGUgcG9zaXRpb24gZm9yIGFueSBjbGljayBpbnNpZGUgdGhlIHdpZGdldC5cbiAgICAgICAgICogRm9yIGNhbGxvdXRzLCB0aGlzIG1lYW5zIHRoYXQgdGhlIHRhc2sgd2lsbCBuZXZlciBiZSBmb3VuZCwgc2luY2UgdGhlIGBsaW5lQXRgIHdpbGwgYmUgdGhlIGJlZ2lubmluZyBvZiB0aGUgY2FsbG91dC5cbiAgICAgICAgICogVGhlcmVmb3JlLCBwcm9kdWNlIGFuIGVycm9yIG1lc3NhZ2UgcG9wLXVwIHVzaW5nIE9ic2lkaWFuJ3MgXCJOb3RpY2VcIiBmZWF0dXJlLCBsb2cgYSBjb25zb2xlIHdhcm5pbmcsIHRoZW4gcmV0dXJuLlxuICAgICAgICAgKi9cblxuICAgICAgICAvLyBUYXNrcyBmcm9tIFwidGFza1wiIHF1ZXJ5IGNvZGVibG9ja3MgaGFuZGxlIHRoZW1zZWx2ZXMgdGhhbmtzIHRvIGB0b0xpYCwgc28gYmUgc3BlY2lmaWMgYWJvdXQgZXJyb3IgbWVzc2FnaW5nLCBidXQgc3RpbGwgcmV0dXJuLlxuICAgICAgICBjb25zdCBhbmNlc3RvciA9IHRhcmdldC5jbG9zZXN0KCd1bC5wbHVnaW4tdGFza3MtcXVlcnktcmVzdWx0LCBkaXYuY2FsbG91dC1jb250ZW50Jyk7XG4gICAgICAgIGlmIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgaWYgKGFuY2VzdG9yLm1hdGNoZXMoJ2Rpdi5jYWxsb3V0LWNvbnRlbnQnKSkge1xuICAgICAgICAgICAgICAgIC8vIEVycm9yIG1lc3NhZ2UgZm9yIG5vdy5cbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPVxuICAgICAgICAgICAgICAgICAgICAnb2JzaWRpYW4tdGFza3MtcGx1Z2luIHdhcm5pbmc6IFRhc2tzIGNhbm5vdCBhZGQgb3IgcmVtb3ZlIGNvbXBsZXRpb24gZGF0ZXMgb3IgbWFrZSB0aGUgbmV4dCBjb3B5IG9mIGEgcmVjdXJyaW5nIHRhc2sgZm9yIHRhc2tzIHdyaXR0ZW4gaW5zaWRlIGEgY2FsbG91dCB3aGVuIHlvdSBjbGljayB0aGVpciBjaGVja2JveGVzIGluIExpdmUgUHJldmlldy4gXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICdJZiB5b3Ugd2FudGVkIFRhc2tzIHRvIGRvIHRoZXNlIHRoaW5ncywgcGxlYXNlIHVuZG8geW91ciBjaGFuZ2UsIHRoZW4gZWl0aGVyIGNsaWNrIHRoZSBsaW5lIG9mIHRoZSB0YXNrIGFuZCB1c2UgdGhlIFwiVG9nZ2xlIFRhc2sgRG9uZVwiIGNvbW1hbmQsIG9yIHN3aXRjaCB0byBSZWFkaW5nIFZpZXcgdG8gY2xpY2sgdGhlIGNoZWNrYm94Lic7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShtc2csIDQ1MDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgc3RhdGUgfSA9IHRoaXMudmlldztcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLnZpZXcucG9zQXRET00odGFyZ2V0KTtcbiAgICAgICAgY29uc3QgbGluZSA9IHN0YXRlLmRvYy5saW5lQXQocG9zaXRpb24pO1xuICAgICAgICBjb25zdCB0YXNrID0gVGFzay5mcm9tTGluZSh7XG4gICAgICAgICAgICBsaW5lOiBsaW5lLnRleHQsXG4gICAgICAgICAgICAvLyBOb25lIG9mIHRoaXMgZGF0YSBpcyByZWxldmFudCBoZXJlLlxuICAgICAgICAgICAgLy8gVGhlIHRhc2sgaXMgY3JlYXRlZCwgdG9nZ2xlZCwgYW5kIHdyaXR0ZW4gYmFjayB0byB0aGUgQ002IGRvY3VtZW50LFxuICAgICAgICAgICAgLy8gcmVwbGFjaW5nIHRoZSBvbGQgdGFzayBpbi1wbGFjZS5cbiAgICAgICAgICAgIHBhdGg6ICcnLFxuICAgICAgICAgICAgc2VjdGlvblN0YXJ0OiAwLFxuICAgICAgICAgICAgc2VjdGlvbkluZGV4OiAwLFxuICAgICAgICAgICAgcHJlY2VkaW5nSGVhZGVyOiBudWxsLFxuICAgICAgICAgICAgZmFsbGJhY2tEYXRlOiBudWxsLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zb2xlLmRlYnVnKGBMaXZlIFByZXZpZXcgRXh0ZW5zaW9uOiB0b2dnbGUgY2FsbGVkLiBQb3NpdGlvbjogJHtwb3NpdGlvbn0gTGluZTogJHtsaW5lLnRleHR9YCk7XG5cbiAgICAgICAgLy8gT25seSBoYW5kbGUgY2hlY2tib3hlcyBvZiB0YXNrcy5cbiAgICAgICAgaWYgKHRhc2sgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIG5lZWQgdG8gcHJldmVudCBkZWZhdWx0IHNvIHRoYXQgdGhlIGNoZWNrYm94IGlzIG9ubHkgaGFuZGxlZCBieSB1cyBhbmQgbm90IG9ic2lkaWFuLlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIC8vIENsaWNrZWQgb24gYSB0YXNrJ3MgY2hlY2tib3guIFRvZ2dsZSB0aGUgdGFzayBhbmQgc2V0IGl0LlxuICAgICAgICBjb25zdCB0b2dnbGVkID0gdGFzay50b2dnbGUoKTtcbiAgICAgICAgY29uc3QgdG9nZ2xlZFN0cmluZyA9IHRvZ2dsZWQubWFwKCh0KSA9PiB0LnRvRmlsZUxpbmVTdHJpbmcoKSkuam9pbihzdGF0ZS5saW5lQnJlYWspO1xuXG4gICAgICAgIC8vIENyZWF0ZXMgYSBDb2RlTWlycm9yIHRyYW5zYWN0aW9uIGluIG9yZGVyIHRvIHVwZGF0ZSB0aGUgZG9jdW1lbnQuXG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gc3RhdGUudXBkYXRlKHtcbiAgICAgICAgICAgIGNoYW5nZXM6IHtcbiAgICAgICAgICAgICAgICBmcm9tOiBsaW5lLmZyb20sXG4gICAgICAgICAgICAgICAgdG86IGxpbmUudG8sXG4gICAgICAgICAgICAgICAgaW5zZXJ0OiB0b2dnbGVkU3RyaW5nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudmlldy5kaXNwYXRjaCh0cmFuc2FjdGlvbik7XG5cbiAgICAgICAgLy8gRGlydHkgd29ya2Fyb3VuZC5cbiAgICAgICAgLy8gV2hpbGUgdGhlIGNvZGUgaW4gdGhpcyBtZXRob2QgcHJvcGVybHkgdXBkYXRlcyB0aGUgYGNoZWNrZWRgIHN0YXRlXG4gICAgICAgIC8vIG9mIHRoZSB0YXJnZXQgY2hlY2tib3gsIHNvbWUgT2JzaWRpYW4gaW50ZXJuYWxzIHJldmVydCB0aGUgc3RhdGUuXG4gICAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB0aGUgY2hlY2tib3ggd291bGQgcmVtYWluIGluIGl0cyBvcmlnaW5hbCBgY2hlY2tlZGBcbiAgICAgICAgLy8gc3RhdGUgKGB0cnVlYCBvciBgZmFsc2VgKSwgZXZlbiB0aG91Z2ggdGhlIHVuZGVybHlpbmcgZG9jdW1lbnRcbiAgICAgICAgLy8gdXBkYXRlcyBjb3JyZWN0bHkuXG4gICAgICAgIC8vIEFzIGEgXCJmaXhcIiwgd2Ugc2V0IHRoZSBjaGVja2JveCdzIGBjaGVja2VkYCBzdGF0ZSAqYWdhaW4qIGFmdGVyIGFcbiAgICAgICAgLy8gdGltZW91dCB0byByZXZlcnQgT2JzaWRpYW4ncyB3cm9uZ2Z1bCByZXZlcnNhbC5cbiAgICAgICAgY29uc3QgZGVzaXJlZENoZWNrZWRTdGF0dXMgPSB0YXJnZXQuY2hlY2tlZDtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0YXJnZXQuY2hlY2tlZCA9IGRlc2lyZWRDaGVja2VkU3RhdHVzO1xuICAgICAgICB9LCAxKTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgQXBwLCBNYXJrZG93blJlbmRlckNoaWxkLCBNYXJrZG93blJlbmRlcmVyLCBQbHVnaW4sIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHR5cGUgeyBFdmVudFJlZiwgTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCB9IGZyb20gJ29ic2lkaWFuJztcblxuaW1wb3J0IHR5cGUgeyBJUXVlcnkgfSBmcm9tICcuL0lRdWVyeSc7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4vQ2FjaGUnO1xuaW1wb3J0IHsgcmVwbGFjZVRhc2tXaXRoVGFza3MgfSBmcm9tICcuL0ZpbGUnO1xuaW1wb3J0IHsgUXVlcnkgfSBmcm9tICcuL1F1ZXJ5L1F1ZXJ5JztcbmltcG9ydCB0eXBlIHsgR3JvdXBIZWFkaW5nIH0gZnJvbSAnLi9RdWVyeS9Hcm91cEhlYWRpbmcnO1xuaW1wb3J0IHsgVGFza01vZGFsIH0gZnJvbSAnLi9UYXNrTW9kYWwnO1xuaW1wb3J0IHR5cGUgeyBUYXNrc0V2ZW50cyB9IGZyb20gJy4vVGFza3NFdmVudHMnO1xuaW1wb3J0IHR5cGUgeyBUYXNrIH0gZnJvbSAnLi9UYXNrJztcbmltcG9ydCB7IERhdGVGYWxsYmFjayB9IGZyb20gJy4vRGF0ZUZhbGxiYWNrJztcblxuZXhwb3J0IGNsYXNzIFF1ZXJ5UmVuZGVyZXIge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYXBwOiBBcHA7XG4gICAgcHJpdmF0ZSByZWFkb25seSBldmVudHM6IFRhc2tzRXZlbnRzO1xuXG4gICAgY29uc3RydWN0b3IoeyBwbHVnaW4sIGV2ZW50cyB9OiB7IHBsdWdpbjogUGx1Z2luOyBldmVudHM6IFRhc2tzRXZlbnRzIH0pIHtcbiAgICAgICAgdGhpcy5hcHAgPSBwbHVnaW4uYXBwO1xuICAgICAgICB0aGlzLmV2ZW50cyA9IGV2ZW50cztcblxuICAgICAgICBwbHVnaW4ucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcigndGFza3MnLCB0aGlzLl9hZGRRdWVyeVJlbmRlckNoaWxkLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGRRdWVyeVJlbmRlckNoaWxkID0gdGhpcy5fYWRkUXVlcnlSZW5kZXJDaGlsZC5iaW5kKHRoaXMpO1xuXG4gICAgcHJpdmF0ZSBhc3luYyBfYWRkUXVlcnlSZW5kZXJDaGlsZChzb3VyY2U6IHN0cmluZywgZWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbnRleHQ6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5hZGRDaGlsZChcbiAgICAgICAgICAgIG5ldyBRdWVyeVJlbmRlckNoaWxkKHtcbiAgICAgICAgICAgICAgICBhcHA6IHRoaXMuYXBwLFxuICAgICAgICAgICAgICAgIGV2ZW50czogdGhpcy5ldmVudHMsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiBlbGVtZW50LFxuICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aDogY29udGV4dC5zb3VyY2VQYXRoLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5jbGFzcyBRdWVyeVJlbmRlckNoaWxkIGV4dGVuZHMgTWFya2Rvd25SZW5kZXJDaGlsZCB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBhcHA6IEFwcDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV2ZW50czogVGFza3NFdmVudHM7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzb3VyY2U6IHN0cmluZzsgLy8gVGhlIGNvbXBsZXRlIHRleHQgaW4gdGhlIGluc3RydWN0aW9uIGJsb2NrLCBzdWNoIGFzICdub3QgZG9uZVxcbnNob3J0IG1vZGUnXG4gICAgcHJpdmF0ZSByZWFkb25seSBmaWxlUGF0aDogc3RyaW5nOyAvLyBUaGUgcGF0aCBvZiB0aGUgZmlsZSB0aGF0IGNvbnRhaW5zIHRoZSBpbnN0cnVjdGlvbiBibG9ja1xuICAgIHByaXZhdGUgcXVlcnk6IElRdWVyeTtcbiAgICBwcml2YXRlIHF1ZXJ5VHlwZTogc3RyaW5nO1xuXG4gICAgcHJpdmF0ZSByZW5kZXJFdmVudFJlZjogRXZlbnRSZWYgfCB1bmRlZmluZWQ7XG4gICAgcHJpdmF0ZSBxdWVyeVJlbG9hZFRpbWVvdXQ6IE5vZGVKUy5UaW1lb3V0IHwgdW5kZWZpbmVkO1xuXG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBhcHAsXG4gICAgICAgIGV2ZW50cyxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBzb3VyY2UsXG4gICAgICAgIGZpbGVQYXRoLFxuICAgIH06IHtcbiAgICAgICAgYXBwOiBBcHA7XG4gICAgICAgIGV2ZW50czogVGFza3NFdmVudHM7XG4gICAgICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgICAgIHNvdXJjZTogc3RyaW5nO1xuICAgICAgICBmaWxlUGF0aDogc3RyaW5nO1xuICAgIH0pIHtcbiAgICAgICAgc3VwZXIoY29udGFpbmVyKTtcblxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICAgICAgdGhpcy5ldmVudHMgPSBldmVudHM7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLmZpbGVQYXRoID0gZmlsZVBhdGg7XG5cbiAgICAgICAgLy8gVGhlIGVuZ2luZSBpcyBjaG9zZW4gb24gdGhlIGJhc2lzIG9mIHRoZSBjb2RlIGJsb2NrIGxhbmd1YWdlLiBDdXJyZW50bHlcbiAgICAgICAgLy8gdGhlcmUgaXMgb25seSB0aGUgbWFpbiBlbmdpbmUgZm9yIHRoZSBwbHVnaW4sIHRoaXMgYWxsb3dzIG90aGVycyB0byBiZVxuICAgICAgICAvLyBhZGRlZCBsYXRlci5cbiAgICAgICAgc3dpdGNoICh0aGlzLmNvbnRhaW5lckVsLmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stbGFuZ3VhZ2UtdGFza3MnOlxuICAgICAgICAgICAgICAgIHRoaXMucXVlcnkgPSBuZXcgUXVlcnkoeyBzb3VyY2UgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWVyeVR5cGUgPSAndGFza3MnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMucXVlcnkgPSBuZXcgUXVlcnkoeyBzb3VyY2UgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWVyeVR5cGUgPSAndGFza3MnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25sb2FkKCkge1xuICAgICAgICAvLyBQcm9jZXNzIHRoZSBjdXJyZW50IGNhY2hlIHN0YXRlOlxuICAgICAgICB0aGlzLmV2ZW50cy50cmlnZ2VyUmVxdWVzdENhY2hlVXBkYXRlKHRoaXMucmVuZGVyLmJpbmQodGhpcykpO1xuICAgICAgICAvLyBMaXN0ZW4gdG8gZnV0dXJlIGNhY2hlIGNoYW5nZXM6XG4gICAgICAgIHRoaXMucmVuZGVyRXZlbnRSZWYgPSB0aGlzLmV2ZW50cy5vbkNhY2hlVXBkYXRlKHRoaXMucmVuZGVyLmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRoaXMucmVsb2FkUXVlcnlBdE1pZG5pZ2h0KCk7XG4gICAgfVxuXG4gICAgb251bmxvYWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlbmRlckV2ZW50UmVmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLm9mZih0aGlzLnJlbmRlckV2ZW50UmVmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnF1ZXJ5UmVsb2FkVGltZW91dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5xdWVyeVJlbG9hZFRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVsb2FkcyB0aGUgcXVlcnkgYWZ0ZXIgbWlkbmlnaHQgdG8gdXBkYXRlIHJlc3VsdHMgZnJvbSByZWxhdGl2ZSBkYXRlIHF1ZXJpZXMuXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZSwgdGhlIHF1ZXJ5IGBkdWUgdG9kYXlgIGNoYW5nZXMgZXZlcnkgZGF5LiBUaGlzIG1ha2VzIHN1cmUgdGhhdCBhbGwgcXVlcnkgcmVzdWx0c1xuICAgICAqIGFyZSByZS1yZW5kZXJlZCBhZnRlciBtaWRuaWdodCBldmVyeSBkYXkgdG8gZW5zdXJlIHVwLXRvLWRhdGUgcmVzdWx0cyB3aXRob3V0IGhhdmluZyB0b1xuICAgICAqIHJlbG9hZCBvYnNpZGlhbi4gQ3JlYXRpbmcgYSBuZXcgcXVlcnkgb2JqZWN0IGZyb20gdGhlIHNvdXJjZSByZS1hcHBsaWVzIHRoZSByZWxhdGl2ZSBkYXRlc1xuICAgICAqIHRvIFwibm93XCIuXG4gICAgICovXG4gICAgcHJpdmF0ZSByZWxvYWRRdWVyeUF0TWlkbmlnaHQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG1pZG5pZ2h0ID0gbmV3IERhdGUoKTtcbiAgICAgICAgbWlkbmlnaHQuc2V0SG91cnMoMjQsIDAsIDAsIDApO1xuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgIGNvbnN0IG1pbGxpc2Vjb25kc1RvTWlkbmlnaHQgPSBtaWRuaWdodC5nZXRUaW1lKCkgLSBub3cuZ2V0VGltZSgpO1xuXG4gICAgICAgIHRoaXMucXVlcnlSZWxvYWRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnF1ZXJ5ID0gbmV3IFF1ZXJ5KHsgc291cmNlOiB0aGlzLnNvdXJjZSB9KTtcbiAgICAgICAgICAgIC8vIFByb2Nlc3MgdGhlIGN1cnJlbnQgY2FjaGUgc3RhdGU6XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy50cmlnZ2VyUmVxdWVzdENhY2hlVXBkYXRlKHRoaXMucmVuZGVyLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5yZWxvYWRRdWVyeUF0TWlkbmlnaHQoKTtcbiAgICAgICAgfSwgbWlsbGlzZWNvbmRzVG9NaWRuaWdodCArIDEwMDApOyAvLyBBZGQgYnVmZmVyIHRvIGJlIHN1cmUgdG8gcnVuIGFmdGVyIG1pZG5pZ2h0LlxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgcmVuZGVyKHsgdGFza3MsIHN0YXRlIH06IHsgdGFza3M6IFRhc2tbXTsgc3RhdGU6IFN0YXRlIH0pIHtcbiAgICAgICAgLy8gRG9uJ3QgbG9nIGFueXRoaW5nIGhlcmUsIGZvciBhbnkgc3RhdGUsIGFzIGl0IGdlbmVyYXRlcyBodWdlIGFtb3VudHMgb2ZcbiAgICAgICAgLy8gY29uc29sZSBtZXNzYWdlcyBpbiBsYXJnZSB2YXVsdHMsIGlmIE9ic2lkaWFuIHdhcyBvcGVuZWQgd2l0aCBhbnlcbiAgICAgICAgLy8gbm90ZXMgd2l0aCB0YXNrcyBjb2RlIGJsb2NrcyBpbiBSZWFkaW5nIG9yIExpdmUgUHJldmlldyBtb2RlLlxuXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKCdkaXYnKTtcbiAgICAgICAgaWYgKHN0YXRlID09PSBTdGF0ZS5XYXJtICYmIHRoaXMucXVlcnkuZXJyb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhcbiAgICAgICAgICAgICAgICBgUmVuZGVyICR7dGhpcy5xdWVyeVR5cGV9IGNhbGxlZCBmb3IgYSBibG9jayBpbiBhY3RpdmUgZmlsZSBcIiR7dGhpcy5maWxlUGF0aH1cIiwgdG8gc2VsZWN0IGZyb20gJHt0YXNrcy5sZW5ndGh9IHRhc2tzOiBwbHVnaW4gc3RhdGU6ICR7c3RhdGV9YCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnF1ZXJ5LmxheW91dE9wdGlvbnMuZXhwbGFpblF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVFeHBsYW5hdGlvbihjb250ZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdGFza3NTb3J0ZWRMaW1pdGVkR3JvdXBlZCA9IHRoaXMucXVlcnkuYXBwbHlRdWVyeVRvVGFza3ModGFza3MpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBncm91cCBvZiB0YXNrc1NvcnRlZExpbWl0ZWRHcm91cGVkLmdyb3Vwcykge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIHdlcmUgbm8gJ2dyb3VwIGJ5JyBpbnN0cnVjdGlvbnMsIGdyb3VwLmdyb3VwSGVhZGluZ3NcbiAgICAgICAgICAgICAgICAvLyB3aWxsIGJlIGVtcHR5LCBhbmQgbm8gaGVhZGluZ3Mgd2lsbCBiZSBhZGRlZC5cbiAgICAgICAgICAgICAgICB0aGlzLmFkZEdyb3VwSGVhZGluZ3MoY29udGVudCwgZ3JvdXAuZ3JvdXBIZWFkaW5ncyk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB7IHRhc2tMaXN0IH0gPSBhd2FpdCB0aGlzLmNyZWF0ZVRhc2tzTGlzdCh7XG4gICAgICAgICAgICAgICAgICAgIHRhc2tzOiBncm91cC50YXNrcyxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKHRhc2tMaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRvdGFsVGFza3NDb3VudCA9IHRhc2tzU29ydGVkTGltaXRlZEdyb3VwZWQudG90YWxUYXNrc0NvdW50KCk7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKGAke3RvdGFsVGFza3NDb3VudH0gb2YgJHt0YXNrcy5sZW5ndGh9IHRhc2tzIGRpc3BsYXllZCBpbiBhIGJsb2NrIGluIFwiJHt0aGlzLmZpbGVQYXRofVwiYCk7XG4gICAgICAgICAgICB0aGlzLmFkZFRhc2tDb3VudChjb250ZW50LCB0b3RhbFRhc2tzQ291bnQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucXVlcnkuZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29udGVudC5zZXRUZXh0KGBUYXNrcyBxdWVyeTogJHt0aGlzLnF1ZXJ5LmVycm9yfWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGVudC5zZXRUZXh0KCdMb2FkaW5nIFRhc2tzIC4uLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5maXJzdENoaWxkPy5yZXBsYWNlV2l0aChjb250ZW50KTtcbiAgICB9XG5cbiAgICAvLyBVc2UgdGhlICdleHBsYWluJyBpbnN0cnVjdGlvbiB0byBlbmFibGUgdGhpc1xuICAgIHByaXZhdGUgY3JlYXRlRXhwbGFuYXRpb24oY29udGVudDogSFRNTERpdkVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgZXhwbGFuYXRpb25Bc1N0cmluZyA9IHRoaXMucXVlcnkuZXhwbGFpblF1ZXJ5KCk7XG5cbiAgICAgICAgY29uc3QgZXhwbGFuYXRpb25zQmxvY2sgPSBjb250ZW50LmNyZWF0ZUVsKCdwcmUnKTtcbiAgICAgICAgZXhwbGFuYXRpb25zQmxvY2suYWRkQ2xhc3NlcyhbJ3BsdWdpbi10YXNrcy1xdWVyeS1leHBsYW5hdGlvbiddKTtcbiAgICAgICAgZXhwbGFuYXRpb25zQmxvY2suc2V0VGV4dChleHBsYW5hdGlvbkFzU3RyaW5nKTtcbiAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChleHBsYW5hdGlvbnNCbG9jayk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVUYXNrc0xpc3Qoe1xuICAgICAgICB0YXNrcyxcbiAgICAgICAgY29udGVudCxcbiAgICB9OiB7XG4gICAgICAgIHRhc2tzOiBUYXNrW107XG4gICAgICAgIGNvbnRlbnQ6IEhUTUxEaXZFbGVtZW50O1xuICAgIH0pOiBQcm9taXNlPHsgdGFza0xpc3Q6IEhUTUxVTGlzdEVsZW1lbnQ7IHRhc2tzQ291bnQ6IG51bWJlciB9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tzQ291bnQgPSB0YXNrcy5sZW5ndGg7XG5cbiAgICAgICAgY29uc3QgdGFza0xpc3QgPSBjb250ZW50LmNyZWF0ZUVsKCd1bCcpO1xuICAgICAgICB0YXNrTGlzdC5hZGRDbGFzc2VzKFsnY29udGFpbnMtdGFzay1saXN0JywgJ3BsdWdpbi10YXNrcy1xdWVyeS1yZXN1bHQnXSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFza3NDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrID0gdGFza3NbaV07XG4gICAgICAgICAgICBjb25zdCBpc0ZpbGVuYW1lVW5pcXVlID0gdGhpcy5pc0ZpbGVuYW1lVW5pcXVlKHsgdGFzayB9KTtcblxuICAgICAgICAgICAgY29uc3QgbGlzdEl0ZW0gPSBhd2FpdCB0YXNrLnRvTGkoe1xuICAgICAgICAgICAgICAgIHBhcmVudFVsRWxlbWVudDogdGFza0xpc3QsXG4gICAgICAgICAgICAgICAgbGlzdEluZGV4OiBpLFxuICAgICAgICAgICAgICAgIGxheW91dE9wdGlvbnM6IHRoaXMucXVlcnkubGF5b3V0T3B0aW9ucyxcbiAgICAgICAgICAgICAgICBpc0ZpbGVuYW1lVW5pcXVlLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgZm9vdG5vdGVzLiBUaGV5IGRvbid0IHJlLWFwcGVhciBpbiBhbm90aGVyIGRvY3VtZW50LlxuICAgICAgICAgICAgY29uc3QgZm9vdG5vdGVzID0gbGlzdEl0ZW0ucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZm9vdG5vdGUtaWRdJyk7XG4gICAgICAgICAgICBmb290bm90ZXMuZm9yRWFjaCgoZm9vdG5vdGUpID0+IGZvb3Rub3RlLnJlbW92ZSgpKTtcblxuICAgICAgICAgICAgY29uc3Qgc2hvcnRNb2RlID0gdGhpcy5xdWVyeS5sYXlvdXRPcHRpb25zLnNob3J0TW9kZTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnF1ZXJ5LmxheW91dE9wdGlvbnMuaGlkZVVyZ2VuY3kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFVyZ2VuY3kobGlzdEl0ZW0sIHRhc2spO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMucXVlcnkubGF5b3V0T3B0aW9ucy5oaWRlQmFja2xpbmtzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRCYWNrbGlua3MobGlzdEl0ZW0sIHRhc2ssIHNob3J0TW9kZSwgaXNGaWxlbmFtZVVuaXF1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5xdWVyeS5sYXlvdXRPcHRpb25zLmhpZGVFZGl0QnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRFZGl0QnV0dG9uKGxpc3RJdGVtLCB0YXNrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGFza0xpc3QuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgdGFza0xpc3QsIHRhc2tzQ291bnQgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZEVkaXRCdXR0b24obGlzdEl0ZW06IEhUTUxMSUVsZW1lbnQsIHRhc2s6IFRhc2spIHtcbiAgICAgICAgY29uc3QgZWRpdFRhc2tQZW5jaWwgPSBsaXN0SXRlbS5jcmVhdGVFbCgnYScsIHtcbiAgICAgICAgICAgIGNsczogJ3Rhc2tzLWVkaXQnLFxuICAgICAgICB9KTtcbiAgICAgICAgZWRpdFRhc2tQZW5jaWwub25DbGlja0V2ZW50KChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgY29uc3Qgb25TdWJtaXQgPSAodXBkYXRlZFRhc2tzOiBUYXNrW10pOiB2b2lkID0+IHtcbiAgICAgICAgICAgICAgICByZXBsYWNlVGFza1dpdGhUYXNrcyh7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsVGFzazogdGFzayxcbiAgICAgICAgICAgICAgICAgICAgbmV3VGFza3M6IERhdGVGYWxsYmFjay5yZW1vdmVJbmZlcnJlZFN0YXR1c0lmTmVlZGVkKHRhc2ssIHVwZGF0ZWRUYXNrcyksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBOZWVkIHRvIGNyZWF0ZSBhIG5ldyBpbnN0YW5jZSBldmVyeSB0aW1lLCBhcyBjdXJzb3IvdGFzayBjYW4gY2hhbmdlLlxuICAgICAgICAgICAgY29uc3QgdGFza01vZGFsID0gbmV3IFRhc2tNb2RhbCh7XG4gICAgICAgICAgICAgICAgYXBwOiB0aGlzLmFwcCxcbiAgICAgICAgICAgICAgICB0YXNrLFxuICAgICAgICAgICAgICAgIG9uU3VibWl0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0YXNrTW9kYWwub3BlbigpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZFVyZ2VuY3kobGlzdEl0ZW06IEhUTUxMSUVsZW1lbnQsIHRhc2s6IFRhc2spIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgpLmZvcm1hdCh0YXNrLnVyZ2VuY3kpO1xuICAgICAgICBsaXN0SXRlbS5jcmVhdGVTcGFuKHsgdGV4dCwgY2xzOiAndGFza3MtdXJnZW5jeScgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzcGxheSBoZWFkaW5ncyBmb3IgYSBncm91cCBvZiB0YXNrcy5cbiAgICAgKiBAcGFyYW0gY29udGVudFxuICAgICAqIEBwYXJhbSBncm91cEhlYWRpbmdzIC0gVGhlIGhlYWRpbmdzIHRvIGRpc3BsYXkuIFRoaXMgY2FuIGJlIGFuIGVtcHR5IGFycmF5LFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgaW4gd2hpY2ggY2FzZSBubyBoZWFkaW5ncyB3aWxsIGJlIGFkZGVkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHJpdmF0ZSBhZGRHcm91cEhlYWRpbmdzKGNvbnRlbnQ6IEhUTUxEaXZFbGVtZW50LCBncm91cEhlYWRpbmdzOiBHcm91cEhlYWRpbmdbXSkge1xuICAgICAgICBmb3IgKGNvbnN0IGhlYWRpbmcgb2YgZ3JvdXBIZWFkaW5ncykge1xuICAgICAgICAgICAgdGhpcy5hZGRHcm91cEhlYWRpbmcoY29udGVudCwgaGVhZGluZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGFkZEdyb3VwSGVhZGluZyhjb250ZW50OiBIVE1MRGl2RWxlbWVudCwgZ3JvdXA6IEdyb3VwSGVhZGluZykge1xuICAgICAgICBsZXQgaGVhZGVyOiBhbnk7XG4gICAgICAgIC8vIElzIGl0IHBvc3NpYmxlIHRvIHJlbW92ZSB0aGUgcmVwZXRpdGlvbiBoZXJlP1xuICAgICAgICAvLyBJZGVhbGx5LCBieSBjcmVhdGluZyBhIHZhcmlhYmxlIHRoYXQgY29udGFpbnMgaDQsIGg1IG9yIGg2XG4gICAgICAgIC8vIGFuZCB0aGVuIG9ubHkgaGF2aW5nIG9uZSBjYWxsIHRvIGNvbnRlbnQuY3JlYXRlRWwoKS5cbiAgICAgICAgaWYgKGdyb3VwLm5lc3RpbmdMZXZlbCA9PT0gMCkge1xuICAgICAgICAgICAgaGVhZGVyID0gY29udGVudC5jcmVhdGVFbCgnaDQnLCB7XG4gICAgICAgICAgICAgICAgY2xzOiAndGFza3MtZ3JvdXAtaGVhZGluZycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChncm91cC5uZXN0aW5nTGV2ZWwgPT09IDEpIHtcbiAgICAgICAgICAgIGhlYWRlciA9IGNvbnRlbnQuY3JlYXRlRWwoJ2g1Jywge1xuICAgICAgICAgICAgICAgIGNsczogJ3Rhc2tzLWdyb3VwLWhlYWRpbmcnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBIZWFkaW5ncyBuZXN0ZWQgdG8gMiBvciBtb3JlIGxldmVscyBhcmUgYWxsIGRpc3BsYXllZCB3aXRoICdoNjpcbiAgICAgICAgICAgIGhlYWRlciA9IGNvbnRlbnQuY3JlYXRlRWwoJ2g2Jywge1xuICAgICAgICAgICAgICAgIGNsczogJ3Rhc2tzLWdyb3VwLWhlYWRpbmcnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihncm91cC5uYW1lLCBoZWFkZXIsIHRoaXMuZmlsZVBhdGgsIHRoaXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkQmFja2xpbmtzKFxuICAgICAgICBsaXN0SXRlbTogSFRNTExJRWxlbWVudCxcbiAgICAgICAgdGFzazogVGFzayxcbiAgICAgICAgc2hvcnRNb2RlOiBib29sZWFuLFxuICAgICAgICBpc0ZpbGVuYW1lVW5pcXVlOiBib29sZWFuIHwgdW5kZWZpbmVkLFxuICAgICkge1xuICAgICAgICBjb25zdCBiYWNrTGluayA9IGxpc3RJdGVtLmNyZWF0ZVNwYW4oeyBjbHM6ICd0YXNrcy1iYWNrbGluaycgfSk7XG5cbiAgICAgICAgaWYgKCFzaG9ydE1vZGUpIHtcbiAgICAgICAgICAgIGJhY2tMaW5rLmFwcGVuZCgnICgnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxpbmsgPSBiYWNrTGluay5jcmVhdGVFbCgnYScpO1xuXG4gICAgICAgIGxpbmsuaHJlZiA9IHRhc2sucGF0aDtcbiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2RhdGEtaHJlZicsIHRhc2sucGF0aCk7XG4gICAgICAgIGxpbmsucmVsID0gJ25vb3BlbmVyJztcbiAgICAgICAgbGluay50YXJnZXQgPSAnX2JsYW5rJztcbiAgICAgICAgbGluay5hZGRDbGFzcygnaW50ZXJuYWwtbGluaycpO1xuICAgICAgICBpZiAoc2hvcnRNb2RlKSB7XG4gICAgICAgICAgICBsaW5rLmFkZENsYXNzKCdpbnRlcm5hbC1saW5rLXNob3J0LW1vZGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXNrLnByZWNlZGluZ0hlYWRlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3Qgc2FuaXRpc2VkSGVhZGluZyA9IHRhc2sucHJlY2VkaW5nSGVhZGVyLnJlcGxhY2UoLyMvZywgJycpO1xuICAgICAgICAgICAgbGluay5ocmVmID0gbGluay5ocmVmICsgJyMnICsgc2FuaXRpc2VkSGVhZGluZztcbiAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKCdkYXRhLWhyZWYnLCBsaW5rLmdldEF0dHJpYnV0ZSgnZGF0YS1ocmVmJykgKyAnIycgKyBzYW5pdGlzZWRIZWFkaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsaW5rVGV4dDogc3RyaW5nO1xuICAgICAgICBpZiAoc2hvcnRNb2RlKSB7XG4gICAgICAgICAgICBsaW5rVGV4dCA9ICcgXHVEODNEXHVERDE3JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmtUZXh0ID0gdGFzay5nZXRMaW5rVGV4dCh7IGlzRmlsZW5hbWVVbmlxdWUgfSkgPz8gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBsaW5rLnNldFRleHQobGlua1RleHQpO1xuXG4gICAgICAgIGlmICghc2hvcnRNb2RlKSB7XG4gICAgICAgICAgICBiYWNrTGluay5hcHBlbmQoJyknKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYWRkVGFza0NvdW50KGNvbnRlbnQ6IEhUTUxEaXZFbGVtZW50LCB0YXNrc0NvdW50OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLnF1ZXJ5LmxheW91dE9wdGlvbnMuaGlkZVRhc2tDb3VudCkge1xuICAgICAgICAgICAgY29udGVudC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgIHRleHQ6IGAke3Rhc2tzQ291bnR9IHRhc2ske3Rhc2tzQ291bnQgIT09IDEgPyAncycgOiAnJ31gLFxuICAgICAgICAgICAgICAgIGNsczogJ3Rhc2tzLWNvdW50JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0ZpbGVuYW1lVW5pcXVlKHsgdGFzayB9OiB7IHRhc2s6IFRhc2sgfSk6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuICAgICAgICAvLyBXaWxsIG1hdGNoIHRoZSBmaWxlbmFtZSB3aXRob3V0IGV4dGVuc2lvbiAodGhlIGZpbGUncyBcImJhc2VuYW1lXCIpLlxuICAgICAgICBjb25zdCBmaWxlbmFtZU1hdGNoID0gdGFzay5wYXRoLm1hdGNoKC8oW14vXSopXFwuLiskL2kpO1xuICAgICAgICBpZiAoZmlsZW5hbWVNYXRjaCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gZmlsZW5hbWVNYXRjaFsxXTtcbiAgICAgICAgY29uc3QgYWxsRmlsZXNXaXRoU2FtZU5hbWUgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCkuZmlsdGVyKChmaWxlOiBURmlsZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGZpbGUuYmFzZW5hbWUgPT09IGZpbGVuYW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gRm91bmQgYSBmaWxlIHdpdGggdGhlIHNhbWUgbmFtZSAoaXQgbWlnaHQgYWN0dWFsbHkgYmUgdGhlIHNhbWUgZmlsZSwgYnV0IHdlJ2xsIHRha2UgdGhhdCBpbnRvIGFjY291bnQgbGF0ZXIuKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYWxsRmlsZXNXaXRoU2FtZU5hbWUubGVuZ3RoIDwgMjtcbiAgICB9XG59XG4iLCAiLyoqXG4gKiBBbiBpbnRlcmZhY2UgZm9yIGRldGVybWluaW5nIHdoZXRoZXIgYSBzdHJpbmcgdmFsdWUgbWF0Y2hlcyBhIHBhcnRpY3VsYXIgY29uZGl0aW9uLlxuICpcbiAqIFRoaXMgaXMgdXNlZCB0byBoaWRlIGF3YXkgdGhlIGRldGFpbHMgb2YgdmFyaW91cyB0ZXh0IHNlYXJjaGVzLCBzdWNoIGFzIHRoZVxuICogc2ltcGxlIGluY2x1c2lvbiBvZiBhIHN1Yi1zdHJpbmcsIG9yIHRoZSBtb3JlIGNvbXBsZXggcmVndWxhciBleHByZXNzaW9uIHNlYXJjaGVzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSVN0cmluZ01hdGNoZXIge1xuICAgIC8qKlxuICAgICAqIFJldHVybiB3aGV0aGVyIHRoZSBnaXZlbiBzdHJpbmcgbWF0Y2hlcyB0aGlzIGNvbmRpdGlvbi5cbiAgICAgKiBAcGFyYW0gc3RyaW5nVG9TZWFyY2hcbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgbWF0Y2hlcyhzdHJpbmdUb1NlYXJjaDogc3RyaW5nKTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiB3aGV0aGVyIGFueSBvZiB0aGUgZ2l2ZW4gc3RyaW5ncyBtYXRjaGVzIHRoaXMgY29uZGl0aW9uLlxuICAgICAqIEBwYXJhbSBzdHJpbmdzVG9TZWFyY2hcbiAgICAgKi9cbiAgICBwdWJsaWMgbWF0Y2hlc0FueU9mKHN0cmluZ3NUb1NlYXJjaDogc3RyaW5nW10pIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ3NUb1NlYXJjaC5zb21lKChzKSA9PiB0aGlzLm1hdGNoZXMocykpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBJU3RyaW5nTWF0Y2hlciB9IGZyb20gJy4vSVN0cmluZ01hdGNoZXInO1xuXG4vKipcbiAqIFN1YnN0cmluZy1iYXNlZCBpbXBsZW1lbnRhdGlvbiBvZiBJU3RyaW5nTWF0Y2hlci5cbiAqXG4gKiBUaGlzIGRvZXMgYSBjYXNlLWluc2Vuc2l0aXZlIHNlYXJjaCBmb3IgdGhlIGdpdmVuIHN0cmluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnN0cmluZ01hdGNoZXIgZXh0ZW5kcyBJU3RyaW5nTWF0Y2hlciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzdHJpbmdUb0ZpbmQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIFN1YnN0cmluZ01hdGNoZXIgb2JqZWN0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nVG9GaW5kIC0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWFyY2hlcyB3aWxsIGJlIGNhc2UtaW5zZW5zaXRpdmUuXG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHN0cmluZ1RvRmluZDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RyaW5nVG9GaW5kID0gc3RyaW5nVG9GaW5kO1xuICAgIH1cblxuICAgIHB1YmxpYyBtYXRjaGVzKHN0cmluZ1RvU2VhcmNoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIFN1YnN0cmluZ01hdGNoZXIuc3RyaW5nSW5jbHVkZXNDYXNlSW5zZW5zaXRpdmUoc3RyaW5nVG9TZWFyY2gsIHRoaXMuc3RyaW5nVG9GaW5kKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHN0cmluZ0luY2x1ZGVzQ2FzZUluc2Vuc2l0aXZlKGhheXN0YWNrOiBzdHJpbmcsIG5lZWRsZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBoYXlzdGFjay50b0xvY2FsZUxvd2VyQ2FzZSgpLmluY2x1ZGVzKG5lZWRsZS50b0xvY2FsZUxvd2VyQ2FzZSgpKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgSVN0cmluZ01hdGNoZXIgfSBmcm9tICcuL0lTdHJpbmdNYXRjaGVyJztcblxuLyoqXG4gKiBSZWd1bGFyLWV4cHJlc3Npb24tYmFzZWQgaW1wbGVtZW50YXRpb24gb2YgSVN0cmluZ01hdGNoZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWdleE1hdGNoZXIgZXh0ZW5kcyBJU3RyaW5nTWF0Y2hlciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSByZWdleDogUmVnRXhwO1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgUmVnZXhNYXRjaGVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWdleCB7UmVnRXhwfSAtIEEgdmFsaWQgcmVndWxhciBleHByZXNzaW9uXG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHJlZ2V4OiBSZWdFeHApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5yZWdleCA9IHJlZ2V4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIFJlZ2V4TWF0Y2hlciBvYmplY3QgaWYgdGhlIHN1cHBsaWVkIHN0cmluZyBpcyBhIHZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgICAgKiBhbmQgbnVsbCBpZiBub3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnZXhJbnB1dCAtIEEgc3RyaW5nIHRoYXQgY2FuIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEl0IG11c3QgYmVnaW4gd2l0aCBhIC8sIGFuZCBlbmQgZWl0aGVyIHdpdGggLyBhbmQgb3B0aW9uYWxseSBhbnlcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkIGZsYWdzLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgdmFsaWRhdGVBbmRDb25zdHJ1Y3QocmVnZXhJbnB1dDogc3RyaW5nKTogUmVnZXhNYXRjaGVyIHwgbnVsbCB7XG4gICAgICAgIC8vIENvdXJ0ZXN5IG9mIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE3ODQzNjkxL2phdmFzY3JpcHQtcmVnZXgtdG8tbWF0Y2gtYS1yZWdleFxuICAgICAgICBjb25zdCByZWdleFBhdHRlcm4gPVxuICAgICAgICAgICAgL1xcLygoPyFbKis/XSkoPzpbXlxcclxcblsvXFxcXF18XFxcXC58XFxbKD86W15cXHJcXG5cXF1cXFxcXXxcXFxcLikqXSkrKVxcLygoPzpnKD86aW0/fG1pPyk/fGkoPzpnbT98bWc/KT98bSg/OmdpP3xpZz8pPyk/KS87XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gcmVnZXhJbnB1dC5tYXRjaChyZWdleFBhdHRlcm4pO1xuXG4gICAgICAgIGlmIChxdWVyeSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgcmVnRXhwID0gbmV3IFJlZ0V4cChxdWVyeVsxXSwgcXVlcnlbMl0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdleE1hdGNoZXIocmVnRXhwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG1hdGNoZXMoc3RyaW5nVG9TZWFyY2g6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gc3RyaW5nVG9TZWFyY2gubWF0Y2godGhpcy5yZWdleCkgIT09IG51bGw7XG4gICAgfVxufVxuIiwgIi8qKlxuICogQW4gRXhwbGFuYXRpb24gb2JqZWN0IHN0b3JlcyBhIHRleHQgZGVzY3JpcHRpb24gb2YgYSBRdWVyeSBpbnN0cnVjdGlvbiwgb3IgYSBjb21wb25lbnQgb2Ygb25lLlxuICpcbiAqIEl0IHN1cHBvcnRzIEJvb2xlYW4gY29tYmluYXRpb25zIHZpYSB0aGUge0BsaW5rIGNoaWxkcmVufSBmaWVsZC5cbiAqXG4gKiBJbml0aWFsbHksIHRoZSB7QGxpbmsgZGVzY3JpcHRpb259IHdpbGwgc2ltcGx5IHJlc3RhdGUgdGhlIGluc3RydWN0aW9uIGZpbHRlci5cbiAqIExhdGVyLCBtb3JlIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9ucyB3aWxsIGJlIGdlbmVyYXRlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIEV4cGxhbmF0aW9uIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3ltYm9sOiBzdHJpbmc7IC8vIEFORCwgT1IsIE5PVCwgWE9SXG4gICAgcHVibGljIHJlYWRvbmx5IGNoaWxkcmVuOiBFeHBsYW5hdGlvbltdO1xuXG4gICAgY29uc3RydWN0b3IoZGVzY3JpcHRpb246IHN0cmluZywgY2hpbGRyZW46IEV4cGxhbmF0aW9uW10gPSBbXSwgc3ltYm9sOiBzdHJpbmcgPSAnJykge1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuc3ltYm9sID0gc3ltYm9sO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIEV4cGxhbmF0aW9uIG9iamVjdCByZXByZXNlbnRpbmcgQm9vbGVhbiBBTkRcbiAgICAgKiBAcGFyYW0gY2hpbGRyZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW5BbmQoY2hpbGRyZW46IEV4cGxhbmF0aW9uW10pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tYmluZU9yQ3JlYXRlRXhwbGFuYXRpb24oJ0FsbCBvZicsIGNoaWxkcmVuLCAnQU5EJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIEV4cGxhbmF0aW9uIG9iamVjdCByZXByZXNlbnRpbmcgQm9vbGVhbiBPUlxuICAgICAqIEBwYXJhbSBjaGlsZHJlblxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbk9yKGNoaWxkcmVuOiBFeHBsYW5hdGlvbltdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJpbmVPckNyZWF0ZUV4cGxhbmF0aW9uKCdBdCBsZWFzdCBvbmUgb2YnLCBjaGlsZHJlbiwgJ09SJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIEV4cGxhbmF0aW9uIG9iamVjdCByZXByZXNlbnRpbmcgQm9vbGVhbiBOT1RcbiAgICAgKiBAcGFyYW0gY2hpbGRyZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW5Ob3QoY2hpbGRyZW46IEV4cGxhbmF0aW9uW10pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFeHBsYW5hdGlvbignTm9uZSBvZicsIGNoaWxkcmVuLCAnTk9UJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIEV4cGxhbmF0aW9uIG9iamVjdCByZXByZXNlbnRpbmcgQm9vbGVhbiBYT1JcbiAgICAgKiBAcGFyYW0gY2hpbGRyZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW5Yb3IoY2hpbGRyZW46IEV4cGxhbmF0aW9uW10pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFeHBsYW5hdGlvbignRXhhY3RseSBvbmUgb2YnLCBjaGlsZHJlbiwgJ1hPUicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgRXhwbGFuYXRpb24uXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgaXQgd2lsbCBub3QgaGF2ZSBhIGZpbmFsIGVuZC1vZi1saW5lIGNoYXJhY3RlciBhdCB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHBhcmFtIGN1cnJlbnRJbmRlbnRhdGlvbiAtIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLiBVc2VycyBjYW4gaWdub3JlIGl0LlxuICAgICAqL1xuICAgIHB1YmxpYyBhc1N0cmluZyhjdXJyZW50SW5kZW50YXRpb246IHN0cmluZyA9ICcnKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEluZGVudGF0aW9uICsgdGhpcy5kZXNjcmlwdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIGhhdmUgY2hpbGRyZW4sIHNvIGNvbmNhdGVuYXRlIHRoZW0gdG9nZXRoZXJcbiAgICAgICAgbGV0IHJlc3VsdCA9IGN1cnJlbnRJbmRlbnRhdGlvbiArIGAke3RoaXMuc3ltYm9sfWA7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIFRoZSBkZXNjcmlwdGlvbnMgbGlrZSAnQWxsIG9mJywgJ05vbmUgb2YnIGFyZSBvbmUgcmVhbGx5IG1lYW5pbmdmdWxcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgZmlsdGVyLiBPdGhlcndpc2UsIHRoZXkgYXJlIGp1c3QgY29uZnVzaW5nLlxuICAgICAgICAgICAgcmVzdWx0ICs9IGAgKCR7dGhpcy5kZXNjcmlwdGlvbn0pYDtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gJzonO1xuICAgICAgICBjb25zdCBuZXdJbmRlbnRhdGlvbiA9IGN1cnJlbnRJbmRlbnRhdGlvbiArICcgICc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGBcXG4ke3RoaXMuY2hpbGRyZW5baV0uYXNTdHJpbmcobmV3SW5kZW50YXRpb24pfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBjb21iaW5lT3JDcmVhdGVFeHBsYW5hdGlvbihkZXNjcmlwdGlvbjogc3RyaW5nLCBjaGlsZHJlbjogRXhwbGFuYXRpb25bXSwgc3ltYm9sOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQwID0gY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBjb25zdCBjaGlsZDEgPSBjaGlsZHJlblsxXTtcbiAgICAgICAgICAgIGlmIChjaGlsZDAuc3ltYm9sID09PSBzeW1ib2wgJiYgY2hpbGQxLnN5bWJvbCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBjaGlsZDAuY2hpbGRyZW4ucHVzaChjaGlsZDEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBFeHBsYW5hdGlvbihkZXNjcmlwdGlvbiwgY2hpbGRyZW4sIHN5bWJvbCk7XG4gICAgfVxufVxuIiwgImltcG9ydCB0eXBlIHsgRmlsdGVyT3JFcnJvck1lc3NhZ2UgfSBmcm9tICcuL0ZpbHRlcic7XG5cbi8qKlxuICogRmllbGQgaXMgYW4gYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgZWFjaCB0eXBlIG9mIGZpbHRlciBpbnN0cnVjdGlvbi5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgZGVyaXZlZCBjbGFzcyBTdGFydERhdGVGaWVsZCBpbXBsZW1lbnRzIHRoZSBwYXJzaW5nXG4gKiBvZiAnc3RhcnRzJyBpbnN0cnVjdGlvbnMuXG4gKlxuICogVGhlIG5hbWUgJ0ZpZWxkJyBtYXkgc2VlbSBjb25mdXNpbmcsIGFzIGl0IG1pZ2h0IGN1cnJlbnRseSBiZVxuICogZXhwZWN0ZWQgdG8gaGF2ZSB0aGUgd29yZCAnRmlsdGVyJyBpbiB0aGUgY2xhc3MgbmFtZS5cbiAqXG4gKiBDdXJyZW50IHRoaW5raW5nIGlzIHRoYXQgaXQgbWF5IHdlbGwgZXZvbHZlIGxhdGVyIHRvIGFsc28gaW1wbGVtZW50XG4gKiB0aGUgcHJlc2VuY2UgYW5kIGFic2VuY2Ugc2VhcmNoZXMgYXMgd2VsbFxuICogKHN1Y2ggJ25vIHN0YXJ0IGRhdGUnIGFuZCAnaGFzIHN0YXJ0IGRhdGUnKS5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZpZWxkIHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGNsYXNzIGNhbiBwYXJzZSB0aGUgZ2l2ZW4gaW5zdHJ1Y3Rpb24gbGluZS5cbiAgICAgKlxuICAgICAqIEN1cnJlbnQgaW1wbGVtZW50YXRpb24gc2ltcGx5IGNoZWNrcyB3aGV0aGVyIHRoZSBsaW5lIG1hdGNoZXNcbiAgICAgKiB0aGlzLmZpbHRlclJlZ0V4cCgpLlxuICAgICAqIEBwYXJhbSBsaW5lIC0gQSBsaW5lIGZyb20gYSBgYGB0YXNrc2BgYCBibG9jay5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2FuQ3JlYXRlRmlsdGVyRm9yTGluZShsaW5lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIEZpZWxkLmxpbmVNYXRjaGVzRmlsdGVyKHRoaXMuZmlsdGVyUmVnRXhwKCksIGxpbmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlIHRoZSBsaW5lLCBhbmQgcmV0dXJuIGVpdGhlciBhIEZpbHRlciBmdW5jdGlvbiBvciBhbiBlcnJvciBzdHJpbmcsXG4gICAgICogd2hpY2ggYXJlIGJvdGggd3JhcHBlZCBpbiBhIEZpbHRlck9yRXJyb3JNZXNzYWdlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gbGluZSAtIEEgbGluZSBmcm9tIGEgYGBgdGFza3NgYGAgYmxvY2suXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGNyZWF0ZUZpbHRlck9yRXJyb3JNZXNzYWdlKGxpbmU6IHN0cmluZyk6IEZpbHRlck9yRXJyb3JNZXNzYWdlO1xuXG4gICAgLyoqXG4gICAgICogRG9lcyB0aGUgZ2l2ZW4gbGluZSBtYXRjaCB0aGUgZ2l2ZW4gZmlsdGVyP1xuICAgICAqIEBwYXJhbSBmaWx0ZXIgLSBBIFJlZ0V4cCByZWd1bGFyIGV4cHJlc3Npb24sIHRoYXQgc3BlY2lmaWVzIG9uZSBxdWVyeSBpbnN0cnVjdGlvbi5cbiAgICAgKiAgICAgICAgICAgICAgICAgT3IgbnVsbCwgaWYgdGhlIGZpZWxkIGRvZXMgbm90IHN1cHBvcnQgcmVnZXhwLWJhc2VkIGZpbHRlcmluZy5cbiAgICAgKiBAcGFyYW0gbGluZSAtIEEgbGluZSBmcm9tIGEgdGFza3MgY29kZSBibG9jayBxdWVyeS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBsaW5lTWF0Y2hlc0ZpbHRlcihmaWx0ZXI6IFJlZ0V4cCB8IG51bGwsIGxpbmU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoZmlsdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyLnRlc3QobGluZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIG1hdGNoIGZvciB0aGUgZ2l2ZW4gZmlsdGVyLCBvciBudWxsIGlmIGl0IGRvZXMgbm90IG1hdGNoXG4gICAgICogQHBhcmFtIGZpbHRlclJlZ0V4cCAtIEEgUmVnRXhwIHJlZ3VsYXIgZXhwcmVzc2lvbiwgdGhhdCBzcGVjaWZpZXMgb25lIHF1ZXJ5IGluc3RydWN0aW9uLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICBPciBudWxsLCBpZiB0aGUgZmllbGQgZG9lcyBub3Qgc3VwcG9ydCByZWdleHAtYmFzZWQgZmlsdGVyaW5nLlxuICAgICAqIEBwYXJhbSBsaW5lIC0gQSBsaW5lIGZyb20gYSB0YXNrcyBjb2RlIGJsb2NrIHF1ZXJ5LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgc3RhdGljIGdldE1hdGNoKGZpbHRlclJlZ0V4cDogUmVnRXhwIHwgbnVsbCwgbGluZTogc3RyaW5nKTogUmVnRXhwTWF0Y2hBcnJheSB8IG51bGwge1xuICAgICAgICBpZiAoZmlsdGVyUmVnRXhwKSB7XG4gICAgICAgICAgICByZXR1cm4gbGluZS5tYXRjaChmaWx0ZXJSZWdFeHApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCB3aWxsIG1hdGNoIGEgY29ycmVjdGx5LWZvcm1lZFxuICAgICAqIGluc3RydWN0aW9uIGxpbmUgZm9yIGZpbHRlcmluZyBUYXNrcyBieSBpbnNwZWN0aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIGZpZWxkLlxuICAgICAqIE9yIG51bGwsIGlmIHRoaXMgZmllbGQgZG9lcyBub3QgaGF2ZSBhIHJlZ2V4LWJhc2VkIGluc3RydWN0aW9uLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZmlsdGVyUmVnRXhwKCk6IFJlZ0V4cCB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIG5hbWUgb2YgdGhpcyBmaWVsZCwgdG8gYmUgdXNlZCBpbiBlcnJvciBtZXNzYWdlcy5cbiAgICAgKiBUaGlzIHVzdWFsbHkgbWF0Y2hlcyB0aGUgaW5zdHJ1Y3Rpb24gbmFtZSwgYnV0IGRvZXMgbm90IGFsd2F5c1xuICAgICAqIChzZWUgc3RhcnQgYW5kIHN0YXJ0cykuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBmaWVsZE5hbWUoKTogc3RyaW5nO1xufVxuIiwgImltcG9ydCB0eXBlIHsgVGFzayB9IGZyb20gJy4uLy4uL1Rhc2snO1xuaW1wb3J0IHR5cGUgeyBFeHBsYW5hdGlvbiB9IGZyb20gJy4uL0V4cGxhaW4vRXhwbGFuYXRpb24nO1xuXG4vKipcbiAqIEEgZmlsdGVyaW5nIGZ1bmN0aW9uLCB0aGF0IHRha2VzIGEgVGFzayBvYmplY3QgYW5kIHJldHVybnNcbiAqIHdoZXRoZXIgaXQgbWF0Y2hlcyBhIHBhcnRpY3VsYXIgZmlsdGVyaW5nIGluc3RydWN0aW9uLlxuICovXG5leHBvcnQgdHlwZSBGaWx0ZXJGdW5jdGlvbiA9ICh0YXNrOiBUYXNrKSA9PiBib29sZWFuO1xuXG4vKipcbiAqIEEgY2xhc3MgdGhhdCByZXByZXNlbnRzIGEgcGFyc2VkIGZpbHRlcmluZyBpbnN0cnVjdGlvbiBmcm9tIGEgdGFza3MgY29kZSBibG9jay5cbiAqXG4gKiBDdXJyZW50bHkgaXQgcHJvdmlkZXMgYWNjZXNzIHRvOlxuICpcbiAqIC0gVGhlIG9yaWdpbmFsIHtAbGluayBpbnN0cnVjdGlvbn1cbiAqIC0gVGhlIHtAbGluayBmaWx0ZXJGdW5jdGlvbn0gLSBhIHtAbGluayBGaWx0ZXJGdW5jdGlvbn0gd2hpY2ggdGVzdHMgd2hldGhlciBhIHRhc2sgbWF0Y2hlcyB0aGUgZmlsdGVyXG4gKlxuICogTGF0ZXIsIHRoZSBwbGFuIGlzIHRvIGFkZCBhIGh1bWFuLXJlYWRhYmxlIGV4cGxhbmF0aW9uIG9mIHRoZSBmaWx0ZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWx0ZXIge1xuICAgIHJlYWRvbmx5IGluc3RydWN0aW9uOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgZXhwbGFuYXRpb246IEV4cGxhbmF0aW9uO1xuICAgIHB1YmxpYyBmaWx0ZXJGdW5jdGlvbjogRmlsdGVyRnVuY3Rpb247XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoaW5zdHJ1Y3Rpb246IHN0cmluZywgZmlsdGVyRnVuY3Rpb246IEZpbHRlckZ1bmN0aW9uLCBleHBsYW5hdGlvbjogRXhwbGFuYXRpb24pIHtcbiAgICAgICAgdGhpcy5pbnN0cnVjdGlvbiA9IGluc3RydWN0aW9uO1xuICAgICAgICB0aGlzLmV4cGxhbmF0aW9uID0gZXhwbGFuYXRpb247XG4gICAgICAgIHRoaXMuZmlsdGVyRnVuY3Rpb24gPSBmaWx0ZXJGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZXhwbGFpbkZpbHRlckluZGVudGVkKGluZGVudDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGV4cGxhbmF0aW9uID0gdGhpcy5leHBsYW5hdGlvbjtcbiAgICAgICAgY29uc3QgdW5pbmRlbnRlZEV4cGxhbmF0aW9uID0gZXhwbGFuYXRpb24uYXNTdHJpbmcoKTtcbiAgICAgICAgaWYgKHVuaW5kZW50ZWRFeHBsYW5hdGlvbiA9PT0gdGhpcy5pbnN0cnVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGAke2luZGVudH0ke3RoaXMuaW5zdHJ1Y3Rpb259XFxuYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBgJHtpbmRlbnR9JHt0aGlzLmluc3RydWN0aW9ufSA9PlxcbiR7ZXhwbGFuYXRpb24uYXNTdHJpbmcoJyAgJyl9XFxuYDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBBIGNsYXNzIHdoaWNoIHN0b3JlcyBvbmUgb2Y6XG4gKiAtIFRoZSBvcmlnaW5hbCBpbnN0cnVjdGlvbiBzdHJpbmcgLSBhIGxpbmUgZnJvbSBhIHRhc2tzIGNvZGUgYmxvY2tcbiAqIC0gQW4gb3B0aW9uYWwge0BsaW5rIEZpbHRlcn1cbiAqIC0gQW4gb3B0aW9uYWwgZXJyb3IgbWVzc2FnZVxuICpcbiAqIFRoaXMgaXMgcmVhbGx5IGN1cnJlbnRseSBhIGNvbnZlbmllbmNlIGZvciByZXR1cm5pbmcgZGF0YSBmcm9tXG4gKiB7QGxpbmsgRmllbGQuY3JlYXRlRmlsdGVyT3JFcnJvck1lc3NhZ2UoKX0gYW5kIGRlcml2ZWQgY2xhc3Nlcy5cbiAqXG4gKiBCeSB0aGUgdGltZSB0aGUgY29kZSBoYXMgZmluaXNoZWQgd2l0aCBwYXJzaW5nIHRoZSBsaW5lLCB0eXBpY2FsbHkgdGhlXG4gKiBjb250YWluZWQge0BsaW5rIEZpbHRlcn0gd2lsbCBiZSBzYXZlZCwgZm9yIGxhdGVyIHVzZSBpbiBzZWFyY2hpbmcgZm9yIFRhc2tzXG4gKiB0aGF0IG1hdGNoIHRoZSB1c2VyJ3MgZmlsdGVyIGluc3RydWN0aW9uLlxuICpcbiAqIExhdGVyLCBpdCBtYXkgZ2FpbiBoZWxwZXIgZnVuY3Rpb25zIGZvciBjb25zdHJ1Y3RpbmcgcGFyc2VyIGVycm9yIG1lc3NhZ2VzLFxuICogYXMgY3VycmVudGx5IHRoZXNlIGFyZSBjcmVhdGVkIGJ5IHNvbWUgcmF0aGVyIHJlcGV0aXRpb3VzIGNvZGUsIGFuZCBhbHNvXG4gKiB0aGVyZSBpcyBzY29wZSBmb3IgbWFraW5nIHRoZXNlIG1lc3NhZ2VzIG1vcmUgaW5mb3JtYXRpdmUgKGluY2x1ZGluZyB0aGVcbiAqIHByb2JsZW0gbGluZSwgYW5kIHBlcmhhcHMgbGlzdGluZyBhbGxvd2VkIG9wdGlvbnMpLlxuICovXG5leHBvcnQgY2xhc3MgRmlsdGVyT3JFcnJvck1lc3NhZ2Uge1xuICAgIHJlYWRvbmx5IGluc3RydWN0aW9uOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfZmlsdGVyOiBGaWx0ZXIgfCB1bmRlZmluZWQ7XG4gICAgZXJyb3I6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0cnVjdG9yKGluc3RydWN0aW9uOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5pbnN0cnVjdGlvbiA9IGluc3RydWN0aW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZmlsdGVyKCk6IEZpbHRlciB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXI7XG4gICAgfVxuXG4gICAgc2V0IGZpbHRlcih2YWx1ZTogRmlsdGVyIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX2ZpbHRlciA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCBmaWx0ZXJGdW5jdGlvbigpOiBGaWx0ZXJGdW5jdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGlmICh0aGlzLl9maWx0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXIuZmlsdGVyRnVuY3Rpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgRmlsdGVyT3JFcnJvck1lc3NhZ2Ugd2l0aCB0aGUgZmlsdGVyLlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBhbGxvd3MgYSBtZWFuaW5nZnVsIHtAbGluayBFeHBsYW5hdGlvbn0gdG8gYmUgc3VwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmlsdGVyIC0gYSB7QGxpbmsgRmlsdGVyfVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbUZpbHRlcihmaWx0ZXI6IEZpbHRlcik6IEZpbHRlck9yRXJyb3JNZXNzYWdlIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEZpbHRlck9yRXJyb3JNZXNzYWdlKGZpbHRlci5pbnN0cnVjdGlvbik7XG4gICAgICAgIHJlc3VsdC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgRmlsdGVyT3JFcnJvck1lc3NhZ2Ugd2l0aCB0aGUgZ2l2ZW4gZXJyb3IgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0gaW5zdHJ1Y3Rpb25cbiAgICAgKiBAcGFyYW0gZXJyb3JNZXNzYWdlXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBmcm9tRXJyb3IoaW5zdHJ1Y3Rpb246IHN0cmluZywgZXJyb3JNZXNzYWdlOiBzdHJpbmcpOiBGaWx0ZXJPckVycm9yTWVzc2FnZSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBGaWx0ZXJPckVycm9yTWVzc2FnZShpbnN0cnVjdGlvbik7XG4gICAgICAgIHJlc3VsdC5lcnJvciA9IGVycm9yTWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBUYXNrIH0gZnJvbSAnLi4vLi4vVGFzayc7XG5pbXBvcnQgeyBTdWJzdHJpbmdNYXRjaGVyIH0gZnJvbSAnLi4vTWF0Y2hlcnMvU3Vic3RyaW5nTWF0Y2hlcic7XG5pbXBvcnQgeyBSZWdleE1hdGNoZXIgfSBmcm9tICcuLi9NYXRjaGVycy9SZWdleE1hdGNoZXInO1xuaW1wb3J0IHR5cGUgeyBJU3RyaW5nTWF0Y2hlciB9IGZyb20gJy4uL01hdGNoZXJzL0lTdHJpbmdNYXRjaGVyJztcbmltcG9ydCB7IEV4cGxhbmF0aW9uIH0gZnJvbSAnLi4vRXhwbGFpbi9FeHBsYW5hdGlvbic7XG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4vRmllbGQnO1xuaW1wb3J0IHR5cGUgeyBGaWx0ZXJGdW5jdGlvbiB9IGZyb20gJy4vRmlsdGVyJztcbmltcG9ydCB7IEZpbHRlciwgRmlsdGVyT3JFcnJvck1lc3NhZ2UgfSBmcm9tICcuL0ZpbHRlcic7XG5cbi8qKlxuICogVGV4dEZpZWxkIGlzIGFuIGFic3RyYWN0IGJhc2UgY2xhc3MgdG8gaGVscCBpbXBsZW1lbnRcbiAqIGFsbCB0aGUgZmlsdGVyIGluc3RydWN0aW9ucyB0aGF0IGFjdCBvbiBhIHNpbmdsZSB0eXBlIG9mIHN0cmluZ1xuICogdmFsdWUsIHN1Y2ggYXMgdGhlIGRlc2NyaXB0aW9uIG9yIGZpbGUgcGF0aC5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRleHRGaWVsZCBleHRlbmRzIEZpZWxkIHtcbiAgICBwdWJsaWMgY3JlYXRlRmlsdGVyT3JFcnJvck1lc3NhZ2UobGluZTogc3RyaW5nKTogRmlsdGVyT3JFcnJvck1lc3NhZ2Uge1xuICAgICAgICBjb25zdCBtYXRjaCA9IEZpZWxkLmdldE1hdGNoKHRoaXMuZmlsdGVyUmVnRXhwKCksIGxpbmUpO1xuICAgICAgICBpZiAobWF0Y2ggPT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIElmIEZpZWxkLmNhbkNyZWF0ZUZpbHRlckZvckxpbmUoKSBoYXMgYmVlbiBjaGVja2VkLCB3ZSBzaG91bGQgbmV2ZXIgZ2V0XG4gICAgICAgICAgICAvLyBpbiB0byB0aGlzIGJsb2NrLlxuICAgICAgICAgICAgcmV0dXJuIEZpbHRlck9yRXJyb3JNZXNzYWdlLmZyb21FcnJvcihsaW5lLCBgZG8gbm90IHVuZGVyc3RhbmQgcXVlcnkgZmlsdGVyICgke3RoaXMuZmllbGROYW1lKCl9KWApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29uc3RydWN0IGFuIElTdHJpbmdNYXRjaGVyIGZvciB0aGlzIGZpbHRlciwgb3IgcmV0dXJuXG4gICAgICAgIC8vIGlmIHRoZSBpbnB1dHMgYXJlIGludmFsaWQuXG4gICAgICAgIGNvbnN0IFtfLCBmaWx0ZXJPcGVyYXRvciwgZmlsdGVyVmFsdWVdID0gbWF0Y2g7XG4gICAgICAgIGxldCBtYXRjaGVyOiBJU3RyaW5nTWF0Y2hlciB8IG51bGwgPSBudWxsO1xuICAgICAgICBpZiAoZmlsdGVyT3BlcmF0b3IuaW5jbHVkZXMoJ2luY2x1ZGUnKSkge1xuICAgICAgICAgICAgbWF0Y2hlciA9IG5ldyBTdWJzdHJpbmdNYXRjaGVyKGZpbHRlclZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWx0ZXJPcGVyYXRvci5pbmNsdWRlcygncmVnZXgnKSkge1xuICAgICAgICAgICAgbWF0Y2hlciA9IFJlZ2V4TWF0Y2hlci52YWxpZGF0ZUFuZENvbnN0cnVjdChmaWx0ZXJWYWx1ZSk7XG4gICAgICAgICAgICBpZiAobWF0Y2hlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBGaWx0ZXJPckVycm9yTWVzc2FnZS5mcm9tRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGBjYW5ub3QgcGFyc2UgcmVnZXggKCR7dGhpcy5maWVsZE5hbWUoKX0pOyBjaGVjayB5b3VyIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMgZm9yIHlvdXIgcXVlcnlgLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2hlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSXQncyBsaWtlbHkgdGhpcyBjYW4gbm93IG5ldmVyIGJlIHJlYWNoZWQuXG4gICAgICAgICAgICAvLyBSZXRhaW5lZCBmb3Igc2FmZXR5LCBmb3Igbm93LlxuICAgICAgICAgICAgcmV0dXJuIEZpbHRlck9yRXJyb3JNZXNzYWdlLmZyb21FcnJvcihsaW5lLCBgZG8gbm90IHVuZGVyc3RhbmQgcXVlcnkgZmlsdGVyICgke3RoaXMuZmllbGROYW1lKCl9KWApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluYWxseSwgd2UgY2FuIGNyZWF0ZSB0aGUgRmlsdGVyLCB0aGF0IHRha2VzIGEgdGFza1xuICAgICAgICAvLyBhbmQgdGVzdHMgaWYgaXQgbWF0Y2hlcyB0aGUgc3RyaW5nIGZpbHRlcmluZyBydWxlXG4gICAgICAgIC8vIHJlcHJlc2VudGVkIGJ5IHRoaXMgb2JqZWN0LlxuICAgICAgICBjb25zdCBuZWdhdGUgPSBmaWx0ZXJPcGVyYXRvci5tYXRjaCgvbm90LykgIT09IG51bGw7XG4gICAgICAgIGNvbnN0IGZpbHRlciA9IG5ldyBGaWx0ZXIobGluZSwgdGhpcy5nZXRGaWx0ZXIobWF0Y2hlciwgbmVnYXRlKSwgbmV3IEV4cGxhbmF0aW9uKGxpbmUpKTtcbiAgICAgICAgcmV0dXJuIEZpbHRlck9yRXJyb3JNZXNzYWdlLmZyb21GaWx0ZXIoZmlsdGVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHN0cmluZ0luY2x1ZGVzQ2FzZUluc2Vuc2l0aXZlKGhheXN0YWNrOiBzdHJpbmcsIG5lZWRsZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBTdWJzdHJpbmdNYXRjaGVyLnN0cmluZ0luY2x1ZGVzQ2FzZUluc2Vuc2l0aXZlKGhheXN0YWNrLCBuZWVkbGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSByZWdleHAgcGF0dGVybiBtYXRjaGluZyB0aGUgZmllbGQncyBuYW1lIGFuZCBwb3NzaWJsZSBhbGlhc2VzXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGZpZWxkUGF0dGVybigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZE5hbWUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcmVnZXhwIHBhdHRlcm4gbWF0Y2hpbmcgYWxsIHBvc3NpYmxlIGZpbHRlciBvcGVyYXRvcnMgZm9yIHRoaXMgZmllbGQsXG4gICAgICogc3VjaCBhcyBcImluY2x1ZGVzXCIgb3IgXCJkb2VzIG5vdCBpbmNsdWRlXCIuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGZpbHRlck9wZXJhdG9yUGF0dGVybigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ2luY2x1ZGVzfGRvZXMgbm90IGluY2x1ZGV8cmVnZXggbWF0Y2hlc3xyZWdleCBkb2VzIG5vdCBtYXRjaCc7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGZpbHRlclJlZ0V4cCgpOiBSZWdFeHAge1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChgXig/OiR7dGhpcy5maWVsZFBhdHRlcm4oKX0pICgke3RoaXMuZmlsdGVyT3BlcmF0b3JQYXR0ZXJuKCl9KSAoLiopYCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFic3RyYWN0IGZpZWxkTmFtZSgpOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBmaWVsZCdzIHZhbHVlLCBvciBhbiBlbXB0eSBzdHJpbmcgaWYgdGhlIHZhbHVlIGlzIG51bGxcbiAgICAgKiBAcGFyYW0gdGFza1xuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgdmFsdWUodGFzazogVGFzayk6IHN0cmluZztcblxuICAgIHByb3RlY3RlZCBnZXRGaWx0ZXIobWF0Y2hlcjogSVN0cmluZ01hdGNoZXIsIG5lZ2F0ZTogYm9vbGVhbik6IEZpbHRlckZ1bmN0aW9uIHtcbiAgICAgICAgcmV0dXJuICh0YXNrOiBUYXNrKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IG1hdGNoZXIhLm1hdGNoZXModGhpcy52YWx1ZSh0YXNrKSk7XG4gICAgICAgICAgICByZXR1cm4gbmVnYXRlID8gIW1hdGNoIDogbWF0Y2g7XG4gICAgICAgIH07XG4gICAgfVxufVxuIiwgImltcG9ydCB7IGdldFNldHRpbmdzIH0gZnJvbSAnLi4vLi4vQ29uZmlnL1NldHRpbmdzJztcbmltcG9ydCB0eXBlIHsgVGFzayB9IGZyb20gJy4uLy4uL1Rhc2snO1xuaW1wb3J0IHsgVGV4dEZpZWxkIH0gZnJvbSAnLi9UZXh0RmllbGQnO1xuXG4vKipcbiAqIFN1cHBvcnQgdGhlICdkZXNjcmlwdGlvbicgc2VhcmNoIGluc3RydWN0aW9uLlxuICpcbiAqIE5vdGUgdGhhdCBEZXNjcmlwdGlvbkZpZWxkLnZhbHVlKCkgcmV0dXJucyB0aGUgZGVzY3JpcHRpb25cbiAqIHdpdGggdGhlIGdsb2JhbCBmaWx0ZXIgKGlmIGFueSkgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIERlc2NyaXB0aW9uRmllbGQgZXh0ZW5kcyBUZXh0RmllbGQge1xuICAgIHB1YmxpYyBmaWVsZE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdkZXNjcmlwdGlvbic7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSB0YXNrJ3MgZGVzY3JpcHRpb24sIHdpdGggYW55IGdsb2JhbCB0YWcgcmVtb3ZlZFxuICAgICAqXG4gICAgICogUHJvbW90ZWQgdG8gcHVibGljLCB0byBlbmFibGUgdGVzdGluZy5cbiAgICAgKiBAcGFyYW0gdGFza1xuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBwdWJsaWMgdmFsdWUodGFzazogVGFzayk6IHN0cmluZyB7XG4gICAgICAgIC8vIFJlbW92ZSBnbG9iYWwgZmlsdGVyIGZyb20gZGVzY3JpcHRpb24gbWF0Y2ggaWYgcHJlc2VudC5cbiAgICAgICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgdG8gbWF0Y2ggb25seSBvbiB0aGUgY29udGVudCBvZiB0aGUgdGFzaywgbm90XG4gICAgICAgIC8vIHRoZSBnbG9iYWwgZmlsdGVyLlxuICAgICAgICBjb25zdCBnbG9iYWxGaWx0ZXIgPSBnZXRTZXR0aW5ncygpLmdsb2JhbEZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHRhc2suZGVzY3JpcHRpb24ucmVwbGFjZShnbG9iYWxGaWx0ZXIsICcnKS50cmltKCk7XG4gICAgfVxufVxuIiwgImltcG9ydCAqIGFzIGNocm9ubyBmcm9tICdjaHJvbm8tbm9kZSc7XG5cbmV4cG9ydCBjbGFzcyBEYXRlUGFyc2VyIHtcbiAgICBwdWJsaWMgc3RhdGljIHBhcnNlRGF0ZShpbnB1dDogc3RyaW5nLCBmb3J3YXJkRGF0ZTogYm9vbGVhbiA9IGZhbHNlKTogbW9tZW50Lk1vbWVudCB7XG4gICAgICAgIC8vIFVzaW5nIHN0YXJ0IG9mIGRheSB0byBjb3JyZWN0bHkgbWF0Y2ggb24gY29tcGFyaXNvbiB3aXRoIG90aGVyIGRhdGVzIChsaWtlIGVxdWFsaXR5KS5cbiAgICAgICAgcmV0dXJuIHdpbmRvd1xuICAgICAgICAgICAgLm1vbWVudChcbiAgICAgICAgICAgICAgICBjaHJvbm8ucGFyc2VEYXRlKGlucHV0LCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yd2FyZERhdGU6IGZvcndhcmREYXRlLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN0YXJ0T2YoJ2RheScpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBFeHBsYW5hdGlvbiB9IGZyb20gJy4uL0V4cGxhaW4vRXhwbGFuYXRpb24nO1xuaW1wb3J0IHsgRmlsdGVyLCBGaWx0ZXJPckVycm9yTWVzc2FnZSB9IGZyb20gJy4vRmlsdGVyJztcbmltcG9ydCB0eXBlIHsgRmlsdGVyRnVuY3Rpb24gfSBmcm9tICcuL0ZpbHRlcic7XG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgYSBzaW5nbGUgaW5zdHJ1Y3Rpb24gZm9yIGZpbHRlcmluZyB0YXNrcywgYW5kIGl0cyBjb3JyZXNwb25kaW5nIHByZWRpY2F0ZS5cbiAqXG4gKiBUaGlzIGlzIHJlYWxseSBhIGhlbHBlciB0byBzaW1wbGlmeSB0aGUgaW1wbGVtZW50YXRpb24gb2YgaW5kaXZpZHVhbCBmaWx0ZXJcbiAqIGluc3RydWN0aW9ucywgaGlkaW5nIGF3YXkgdGhlIGRldGFpbHMgb2YgcGFyc2luZyBpbmRpdmlkdWFsIGluc3RydWN0aW9uIGxpbmVzLlxuICpcbiAqIFRoaXMgd2lsbCB1c3VhbGx5IGJlIGFjY2Vzc2VkIHZpYSB7QGxpbmsgRmlsdGVySW5zdHJ1Y3Rpb25zLmFkZH1cbiAqXG4gKiBAc2VlIEZpbHRlckluc3RydWN0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgRmlsdGVySW5zdHJ1Y3Rpb24ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2luc3RydWN0aW9uOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfZmlsdGVyOiBGaWx0ZXJGdW5jdGlvbjtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yOlxuICAgICAqIEBwYXJhbSBpbnN0cnVjdGlvbiAtIEZ1bGwgdGV4dCBvZiB0aGUgaW5zdHJ1Y3Rpb24gZm9yIHRoZSBmaWx0ZXI6IG11c3QgYmUgbWF0Y2hlZCBleGFjdGx5XG4gICAgICogQHBhcmFtIGZpbHRlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGluc3RydWN0aW9uOiBzdHJpbmcsIGZpbHRlcjogRmlsdGVyRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5faW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbjtcbiAgICAgICAgdGhpcy5fZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBjYW5DcmVhdGVGaWx0ZXJGb3JMaW5lKGxpbmU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gbGluZSA9PSB0aGlzLl9pbnN0cnVjdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlRmlsdGVyT3JFcnJvck1lc3NhZ2UobGluZTogc3RyaW5nKTogRmlsdGVyT3JFcnJvck1lc3NhZ2Uge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgRmlsdGVyT3JFcnJvck1lc3NhZ2UobGluZSk7XG5cbiAgICAgICAgaWYgKGxpbmUgPT09IHRoaXMuX2luc3RydWN0aW9uKSB7XG4gICAgICAgICAgICByZXN1bHQuZmlsdGVyID0gbmV3IEZpbHRlcihsaW5lLCB0aGlzLl9maWx0ZXIsIG5ldyBFeHBsYW5hdGlvbihsaW5lKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0LmVycm9yID0gYGRvIG5vdCB1bmRlcnN0YW5kIGZpbHRlcjogJHtsaW5lfWA7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IEZpbHRlckluc3RydWN0aW9uIH0gZnJvbSAnLi9GaWx0ZXJJbnN0cnVjdGlvbic7XG5pbXBvcnQgeyBGaWx0ZXJPckVycm9yTWVzc2FnZSB9IGZyb20gJy4vRmlsdGVyJztcbmltcG9ydCB0eXBlIHsgRmlsdGVyRnVuY3Rpb24gfSBmcm9tICcuL0ZpbHRlcic7XG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgYSBjb2xsZWN0aW9uIG9mIGluc3RydWN0aW9ucyBmb3IgZmlsdGVyaW5nIHRhc2tzLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgICAgcHJpdmF0ZSByZWFkb25seSBfZmlsdGVycyA9IG5ldyBGaWx0ZXJJbnN0cnVjdGlvbnMoKTtcbiAqICAgICB0aGlzLl9maWx0ZXJzLmFkZCgnaXMgcmVjdXJyaW5nJywgKHRhc2spID0+IHRhc2sucmVjdXJyZW5jZSAhPT0gbnVsbCk7XG4gKlxuICogQHNlZSBGaWx0ZXJJbnN0cnVjdGlvblxuICovXG5leHBvcnQgY2xhc3MgRmlsdGVySW5zdHJ1Y3Rpb25zIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9maWx0ZXJzOiBGaWx0ZXJJbnN0cnVjdGlvbltdID0gW107XG5cbiAgICBwdWJsaWMgYWRkKGluc3RydWN0aW9uOiBzdHJpbmcsIGZpbHRlcjogRmlsdGVyRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fZmlsdGVycy5wdXNoKG5ldyBGaWx0ZXJJbnN0cnVjdGlvbihpbnN0cnVjdGlvbiwgZmlsdGVyKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNhbkNyZWF0ZUZpbHRlckZvckxpbmUobGluZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGZvciAoY29uc3QgZmlsdGVyIG9mIHRoaXMuX2ZpbHRlcnMpIHtcbiAgICAgICAgICAgIGlmIChmaWx0ZXIuY2FuQ3JlYXRlRmlsdGVyRm9yTGluZShsaW5lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlRmlsdGVyT3JFcnJvck1lc3NhZ2UobGluZTogc3RyaW5nKTogRmlsdGVyT3JFcnJvck1lc3NhZ2Uge1xuICAgICAgICBmb3IgKGNvbnN0IGZpbHRlciBvZiB0aGlzLl9maWx0ZXJzKSB7XG4gICAgICAgICAgICBjb25zdCB4ID0gZmlsdGVyLmNyZWF0ZUZpbHRlck9yRXJyb3JNZXNzYWdlKGxpbmUpO1xuICAgICAgICAgICAgaWYgKHguZXJyb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEZpbHRlck9yRXJyb3JNZXNzYWdlKGxpbmUpO1xuICAgICAgICByZXN1bHQuZXJyb3IgPSBgZG8gbm90IHVuZGVyc3RhbmQgZmlsdGVyOiAke2xpbmV9YDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBNb21lbnQgfSBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHR5cGUgeyBUYXNrIH0gZnJvbSAnLi4vLi4vVGFzayc7XG5pbXBvcnQgeyBEYXRlUGFyc2VyIH0gZnJvbSAnLi4vRGF0ZVBhcnNlcic7XG5pbXBvcnQgeyBFeHBsYW5hdGlvbiB9IGZyb20gJy4uL0V4cGxhaW4vRXhwbGFuYXRpb24nO1xuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuL0ZpZWxkJztcbmltcG9ydCB7IEZpbHRlciwgRmlsdGVyT3JFcnJvck1lc3NhZ2UgfSBmcm9tICcuL0ZpbHRlcic7XG5pbXBvcnQgeyBGaWx0ZXJJbnN0cnVjdGlvbnMgfSBmcm9tICcuL0ZpbHRlckluc3RydWN0aW9ucyc7XG5cbi8qKlxuICogRGF0ZUZpZWxkIGlzIGFuIGFic3RyYWN0IGJhc2UgY2xhc3MgdG8gaGVscCBpbXBsZW1lbnRcbiAqIGFsbCB0aGUgZmlsdGVyIGluc3RydWN0aW9ucyB0aGF0IGFjdCBvbiBhIHNpbmdsZSB0eXBlIG9mIGRhdGVcbiAqIHZhbHVlLCBzdWNoIGFzIHRoZSBkb25lIGRhdGUuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEYXRlRmllbGQgZXh0ZW5kcyBGaWVsZCB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBmaWx0ZXJJbnN0cnVjdGlvbnM6IEZpbHRlckluc3RydWN0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZpbHRlckluc3RydWN0aW9ucyA9IG5ldyBGaWx0ZXJJbnN0cnVjdGlvbnMoKTtcbiAgICAgICAgdGhpcy5maWx0ZXJJbnN0cnVjdGlvbnMuYWRkKGBoYXMgJHt0aGlzLmZpZWxkTmFtZSgpfSBkYXRlYCwgKHRhc2s6IFRhc2spID0+IHRoaXMuZGF0ZSh0YXNrKSAhPT0gbnVsbCk7XG4gICAgICAgIHRoaXMuZmlsdGVySW5zdHJ1Y3Rpb25zLmFkZChgbm8gJHt0aGlzLmZpZWxkTmFtZSgpfSBkYXRlYCwgKHRhc2s6IFRhc2spID0+IHRoaXMuZGF0ZSh0YXNrKSA9PT0gbnVsbCk7XG4gICAgICAgIHRoaXMuZmlsdGVySW5zdHJ1Y3Rpb25zLmFkZChgJHt0aGlzLmZpZWxkTmFtZSgpfSBkYXRlIGlzIGludmFsaWRgLCAodGFzazogVGFzaykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IHRoaXMuZGF0ZSh0YXNrKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRlICE9PSBudWxsICYmICFkYXRlLmlzVmFsaWQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNhbkNyZWF0ZUZpbHRlckZvckxpbmUobGluZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLmZpbHRlckluc3RydWN0aW9ucy5jYW5DcmVhdGVGaWx0ZXJGb3JMaW5lKGxpbmUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdXBlci5jYW5DcmVhdGVGaWx0ZXJGb3JMaW5lKGxpbmUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGVGaWx0ZXJPckVycm9yTWVzc2FnZShsaW5lOiBzdHJpbmcpOiBGaWx0ZXJPckVycm9yTWVzc2FnZSB7XG4gICAgICAgIGNvbnN0IGZpbHRlclJlc3VsdCA9IHRoaXMuZmlsdGVySW5zdHJ1Y3Rpb25zLmNyZWF0ZUZpbHRlck9yRXJyb3JNZXNzYWdlKGxpbmUpO1xuICAgICAgICBpZiAoZmlsdGVyUmVzdWx0LmZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyUmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEZpbHRlck9yRXJyb3JNZXNzYWdlKGxpbmUpO1xuXG4gICAgICAgIGNvbnN0IG1hdGNoID0gRmllbGQuZ2V0TWF0Y2godGhpcy5maWx0ZXJSZWdFeHAoKSwgbGluZSk7XG4gICAgICAgIGxldCBmaWx0ZXJGdW5jdGlvbjtcbiAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJEYXRlID0gRGF0ZVBhcnNlci5wYXJzZURhdGUobWF0Y2hbMl0pO1xuICAgICAgICAgICAgaWYgKCFmaWx0ZXJEYXRlLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5lcnJvciA9ICdkbyBub3QgdW5kZXJzdGFuZCAnICsgdGhpcy5maWVsZE5hbWUoKSArICcgZGF0ZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMV0gPT09ICdiZWZvcmUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlckZ1bmN0aW9uID0gKHRhc2s6IFRhc2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGUgPSB0aGlzLmRhdGUodGFzayk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZSA/IGRhdGUuaXNCZWZvcmUoZmlsdGVyRGF0ZSkgOiB0aGlzLmZpbHRlclJlc3VsdElmRmllbGRNaXNzaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlID0gJyAnICsgbWF0Y2hbMV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFsxXSA9PT0gJ2FmdGVyJykge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJGdW5jdGlvbiA9ICh0YXNrOiBUYXNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlID0gdGhpcy5kYXRlKHRhc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGUgPyBkYXRlLmlzQWZ0ZXIoZmlsdGVyRGF0ZSkgOiB0aGlzLmZpbHRlclJlc3VsdElmRmllbGRNaXNzaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlID0gJyAnICsgbWF0Y2hbMV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyRnVuY3Rpb24gPSAodGFzazogVGFzaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZSA9IHRoaXMuZGF0ZSh0YXNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlID8gZGF0ZS5pc1NhbWUoZmlsdGVyRGF0ZSkgOiB0aGlzLmZpbHRlclJlc3VsdElmRmllbGRNaXNzaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlID0gJyBvbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGV4cGxhbmF0aW9uID0gRGF0ZUZpZWxkLmdldEV4cGxhbmF0aW9uU3RyaW5nKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkTmFtZSgpLFxuICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJSZXN1bHRJZkZpZWxkTWlzc2luZygpLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJEYXRlLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmZpbHRlciA9IG5ldyBGaWx0ZXIobGluZSwgZmlsdGVyRnVuY3Rpb24sIG5ldyBFeHBsYW5hdGlvbihleHBsYW5hdGlvbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LmVycm9yID0gJ2RvIG5vdCB1bmRlcnN0YW5kIHF1ZXJ5IGZpbHRlciAoJyArIHRoaXMuZmllbGROYW1lKCkgKyAnIGRhdGUpJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgdGFzaydzIHZhbHVlIGZvciB0aGlzIGRhdGUgZmllbGQsIGlmIGFueS5cbiAgICAgKiBAcGFyYW0gdGFzayAtIGEgVGFzayBvYmplY3RcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGRhdGUodGFzazogVGFzayk6IE1vbWVudCB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBzdHJpbmcgdXNlZCB0byBleHBsYWluIGEgZGF0ZS1iYXNlZCBmaWx0ZXJcbiAgICAgKiBAcGFyYW0gZmllbGROYW1lIC0gZm9yIGV4YW1wbGUsICdkdWUnXG4gICAgICogQHBhcmFtIHJlbGF0aW9uc2hpcFByZWZpeGVkV2l0aFNwYWNlIC0gZm9yIGV4YW1wbGUgJyBiZWZvcmUnIG9yICcnXG4gICAgICogQHBhcmFtIGZpbHRlclJlc3VsdElmRmllbGRNaXNzaW5nIC0gd2hldGhlciB0aGUgc2VhcmNoIG1hdGNoZXMgdGFza3Mgd2l0aG91dCB0aGUgcmVxdWVzdGVkIGRhdGUgdmFsdWVcbiAgICAgKiBAcGFyYW0gZmlsdGVyRGF0ZSAtIHRoZSBkYXRlIHVzZWQgaW4gdGhlIGZpbHRlclxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0RXhwbGFuYXRpb25TdHJpbmcoXG4gICAgICAgIGZpZWxkTmFtZTogc3RyaW5nLFxuICAgICAgICByZWxhdGlvbnNoaXBQcmVmaXhlZFdpdGhTcGFjZTogc3RyaW5nLFxuICAgICAgICBmaWx0ZXJSZXN1bHRJZkZpZWxkTWlzc2luZzogYm9vbGVhbixcbiAgICAgICAgZmlsdGVyRGF0ZTogbW9tZW50Lk1vbWVudCxcbiAgICApIHtcbiAgICAgICAgLy8gRXhhbXBsZSBvZiBmb3JtYXR0ZWQgZGF0ZTogJzIwMjQtMDEtMDIgKFR1ZXNkYXkgMm5kIEphbnVhcnkgMjAyNCknXG4gICAgICAgIGNvbnN0IGFjdHVhbERhdGUgPSBmaWx0ZXJEYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCAoZGRkZCBEbyBNTU1NIFlZWVkpJyk7XG4gICAgICAgIGxldCByZXN1bHQgPSBgJHtmaWVsZE5hbWV9IGRhdGUgaXMke3JlbGF0aW9uc2hpcFByZWZpeGVkV2l0aFNwYWNlfSAke2FjdHVhbERhdGV9YDtcbiAgICAgICAgaWYgKGZpbHRlclJlc3VsdElmRmllbGRNaXNzaW5nKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gYCBPUiBubyAke2ZpZWxkTmFtZX0gZGF0ZWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgd2hldGhlciBhIHRhc2sgdGhhdCBkb2VzIG5vdCBoYXZlIHRoZSBwYXJ0aWN1bGFyIGRhdGUgdmFsdWVcbiAgICAgKiBzaG91bGQgYmUgdHJlYXRlZCBhcyBhIG1hdGNoLiBGb3IgZXhhbXBsZSwgJ3N0YXJ0cycgc2VhcmNoZXMgbWF0Y2ggYWxsIHRhc2tzXG4gICAgICogdGhhdCBoYXZlIG5vIHN0YXJ0IGRhdGUsIHdoaWNoIGJlaGF2ZXMgZGlmZmVyZW50bHkgZnJvbSAnZHVlJywgJ2RvbmUnIGFuZFxuICAgICAqICdzY2hlZHVsZWQnIHNlYXJjaGVzLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZmlsdGVyUmVzdWx0SWZGaWVsZE1pc3NpbmcoKTogYm9vbGVhbjtcbn1cbiIsICJpbXBvcnQgdHlwZSB7IE1vbWVudCB9IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgdHlwZSB7IFRhc2sgfSBmcm9tICcuLi8uLi9UYXNrJztcbmltcG9ydCB7IERhdGVGaWVsZCB9IGZyb20gJy4vRGF0ZUZpZWxkJztcblxuLyoqXG4gKiBTdXBwb3J0IHRoZSAnZG9uZScgc2VhcmNoIGluc3RydWN0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgRG9uZURhdGVGaWVsZCBleHRlbmRzIERhdGVGaWVsZCB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgZG9uZVJlZ2V4cCA9IC9eZG9uZSAoYmVmb3JlfGFmdGVyfG9uKT8gPyguKikvO1xuXG4gICAgcHJvdGVjdGVkIGZpbHRlclJlZ0V4cCgpOiBSZWdFeHAge1xuICAgICAgICByZXR1cm4gRG9uZURhdGVGaWVsZC5kb25lUmVnZXhwO1xuICAgIH1cbiAgICBwdWJsaWMgZmllbGROYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAnZG9uZSc7XG4gICAgfVxuICAgIHB1YmxpYyBkYXRlKHRhc2s6IFRhc2spOiBNb21lbnQgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRhc2suZG9uZURhdGU7XG4gICAgfVxuICAgIHByb3RlY3RlZCBmaWx0ZXJSZXN1bHRJZkZpZWxkTWlzc2luZygpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7IE1vbWVudCB9IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgdHlwZSB7IFRhc2sgfSBmcm9tICcuLi8uLi9UYXNrJztcbmltcG9ydCB7IERhdGVGaWVsZCB9IGZyb20gJy4vRGF0ZUZpZWxkJztcblxuLyoqXG4gKiBTdXBwb3J0IHRoZSAnZHVlJyBzZWFyY2ggaW5zdHJ1Y3Rpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBEdWVEYXRlRmllbGQgZXh0ZW5kcyBEYXRlRmllbGQge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGR1ZVJlZ2V4cCA9IC9eZHVlIChiZWZvcmV8YWZ0ZXJ8b24pPyA/KC4qKS87XG5cbiAgICBwcm90ZWN0ZWQgZmlsdGVyUmVnRXhwKCk6IFJlZ0V4cCB7XG4gICAgICAgIHJldHVybiBEdWVEYXRlRmllbGQuZHVlUmVnZXhwO1xuICAgIH1cbiAgICBwdWJsaWMgZmllbGROYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAnZHVlJztcbiAgICB9XG4gICAgcHVibGljIGRhdGUodGFzazogVGFzayk6IE1vbWVudCB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGFzay5kdWVEYXRlO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZmlsdGVyUmVzdWx0SWZGaWVsZE1pc3NpbmcoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuL0ZpZWxkJztcbmltcG9ydCB7IEZpbHRlckluc3RydWN0aW9ucyB9IGZyb20gJy4vRmlsdGVySW5zdHJ1Y3Rpb25zJztcbmltcG9ydCB0eXBlIHsgRmlsdGVyT3JFcnJvck1lc3NhZ2UgfSBmcm9tICcuL0ZpbHRlcic7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBmb3IgaW1wbGVtZW50cyBvZiB7QGxpbmsgRmllbGR9XG4gKlxuICogVGhlIG5hbWVkIG9mIHRoZSBjbGFzcyBpcyB3ZWFrLiBJdCBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGZhY3QgdGhhdCB0aGVcbiAqIGNsYXNzIGlzIGVudGlyZWx5IGltcGxlbWVudGVkIHZpYSB0aGUge0BsaW5rIEZpbHRlckluc3RydWN0aW9uc30gY2xhc3MuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGaWx0ZXJJbnN0cnVjdGlvbnNCYXNlZEZpZWxkIGV4dGVuZHMgRmllbGQge1xuICAgIHByb3RlY3RlZCByZWFkb25seSBfZmlsdGVycyA9IG5ldyBGaWx0ZXJJbnN0cnVjdGlvbnMoKTtcblxuICAgIHB1YmxpYyBjYW5DcmVhdGVGaWx0ZXJGb3JMaW5lKGxpbmU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsdGVycy5jYW5DcmVhdGVGaWx0ZXJGb3JMaW5lKGxpbmUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGVGaWx0ZXJPckVycm9yTWVzc2FnZShsaW5lOiBzdHJpbmcpOiBGaWx0ZXJPckVycm9yTWVzc2FnZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJzLmNyZWF0ZUZpbHRlck9yRXJyb3JNZXNzYWdlKGxpbmUpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBmaWx0ZXJSZWdFeHAoKTogUmVnRXhwIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBGaWx0ZXJJbnN0cnVjdGlvbnNCYXNlZEZpZWxkIH0gZnJvbSAnLi9GaWx0ZXJJbnN0cnVjdGlvbnNCYXNlZEZpZWxkJztcblxuLyoqXG4gKiBJbXBsZW1lbnRzICdleGNsdWRlIHN1Yi1pdGVtcycgZmlsdGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBFeGNsdWRlU3ViSXRlbXNGaWVsZCBleHRlbmRzIEZpbHRlckluc3RydWN0aW9uc0Jhc2VkRmllbGQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX2ZpbHRlcnMuYWRkKCdleGNsdWRlIHN1Yi1pdGVtcycsICh0YXNrKSA9PiB7XG4gICAgICAgICAgICBpZiAodGFzay5pbmRlbnRhdGlvbiA9PT0gJycpIHJldHVybiB0cnVlOyAvLyBubyBpbmRlbnRhdGlvbiwgbm90IGEgc3ViaXRlbVxuXG4gICAgICAgICAgICBjb25zdCBsYXN0QmxvY2txdW90ZU1hcmsgPSB0YXNrLmluZGVudGF0aW9uLmxhc3RJbmRleE9mKCc+Jyk7XG4gICAgICAgICAgICBpZiAobGFzdEJsb2NrcXVvdGVNYXJrID09PSAtMSkgcmV0dXJuIGZhbHNlOyAvLyBpbmRlbnRhdGlvbiBwcmVzZW50LCBub3QgaW4gYSBibG9ja3F1b3RlLCBzdWJpdGVtXG5cbiAgICAgICAgICAgIC8vIFVwIHRvIG9uZSBzcGFjZSBhbGxvd2VkIGFmdGVyIGxhc3QgPiBpbiBibG9ja3F1b3RlL2NhbGxvdXQsIG90aGVyd2lzZSBzdWJpdGVtXG4gICAgICAgICAgICByZXR1cm4gL14gPyQvLnRlc3QodGFzay5pbmRlbnRhdGlvbi5zbGljZShsYXN0QmxvY2txdW90ZU1hcmsgKyAxKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBmaWVsZE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdleGNsdWRlJztcbiAgICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBUYXNrIH0gZnJvbSAnLi4vLi4vVGFzayc7XG5pbXBvcnQgeyBUZXh0RmllbGQgfSBmcm9tICcuL1RleHRGaWVsZCc7XG5cbi8qKiBTdXBwb3J0IHRoZSAnaGVhZGluZycgc2VhcmNoIGluc3RydWN0aW9uLlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIEhlYWRpbmdGaWVsZCBleHRlbmRzIFRleHRGaWVsZCB7XG4gICAgcHVibGljIGZpZWxkTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ2hlYWRpbmcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHByZWNlZGluZyBoZWFkaW5nLCBvciBhbiBlbXB0eSBzdHJpbmcgaWYgdGhlIGhlYWRpbmcgaXMgbnVsbFxuICAgICAqIEBwYXJhbSB0YXNrXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHB1YmxpYyB2YWx1ZSh0YXNrOiBUYXNrKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRhc2sucHJlY2VkaW5nSGVhZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFzay5wcmVjZWRpbmdIZWFkZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBUYXNrIH0gZnJvbSAnLi4vLi4vVGFzayc7XG5pbXBvcnQgeyBUZXh0RmllbGQgfSBmcm9tICcuL1RleHRGaWVsZCc7XG5cbi8qKiBTdXBwb3J0IHRoZSAncGF0aCcgc2VhcmNoIGluc3RydWN0aW9uLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBhbHNvIHNlYXJjaGVzIHRoZSBmaWxlIGV4dGVuc2lvbixcbiAqIHNvICdwYXRoIGluY2x1ZGVzIC5tZCcgd2lsbCB0eXBpY2FsbHkgbWF0Y2ggYWxsIHRhc2tzLlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIFBhdGhGaWVsZCBleHRlbmRzIFRleHRGaWVsZCB7XG4gICAgcHVibGljIGZpZWxkTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ3BhdGgnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGZpbGUgcGF0aCBpbmNsdWRpbmcgZmlsZSBleHRlbnNpb24sIG9yIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgcGF0aCBpcyBudWxsXG4gICAgICogQHBhcmFtIHRhc2tcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgcHVibGljIHZhbHVlKHRhc2s6IFRhc2spOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGFzay5wYXRoO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBQcmlvcml0eSwgVGFzayB9IGZyb20gJy4uLy4uL1Rhc2snO1xuaW1wb3J0IHsgRXhwbGFuYXRpb24gfSBmcm9tICcuLi9FeHBsYWluL0V4cGxhbmF0aW9uJztcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi9GaWVsZCc7XG5pbXBvcnQgeyBGaWx0ZXIsIEZpbHRlck9yRXJyb3JNZXNzYWdlIH0gZnJvbSAnLi9GaWx0ZXInO1xuXG5leHBvcnQgY2xhc3MgUHJpb3JpdHlGaWVsZCBleHRlbmRzIEZpZWxkIHtcbiAgICAvLyBUaGUgdHJpY2sgaW4gdGhlIGZvbGxvd2luZyB0byBtYW5hZ2Ugd2hpdGVzcGFjZSB3aXRoIG9wdGlvbmFsIHZhbHVlc1xuICAgIC8vIGlzIHRvIGNhcHR1cmUgdGhlbSBpbiBOZXN0ZWQgQ2FwdHVyZSBHcm91cHMsIGxpa2UgdGhpczpcbiAgICAvLyAgKGxlYWRpbmctd2hpdGUtc3BhY2UtaW4tb3V0ZXItY2FwdHVyZS1ncm91cCh2YWx1ZXMtdG8tdXNlLWFyZS1pbi1pbm5lci1jYXB0dXJlLWdyb3VwKSlcbiAgICAvLyBUaGUgY2FwdHVyZSBncm91cHMgYXJlIG51bWJlcmVkIGluIHRoZSBvcmRlciBvZiB0aGVpciBvcGVuaW5nIGJyYWNrZXRzLCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgcHJpb3JpdHlSZWdleHAgPSAvXnByaW9yaXR5KFxccytpcyk/KFxccysoYWJvdmV8YmVsb3d8bm90KSk/KFxccysobG93fG5vbmV8bWVkaXVtfGhpZ2gpKSQvO1xuXG4gICAgY3JlYXRlRmlsdGVyT3JFcnJvck1lc3NhZ2UobGluZTogc3RyaW5nKTogRmlsdGVyT3JFcnJvck1lc3NhZ2Uge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgRmlsdGVyT3JFcnJvck1lc3NhZ2UobGluZSk7XG4gICAgICAgIGNvbnN0IHByaW9yaXR5TWF0Y2ggPSBGaWVsZC5nZXRNYXRjaCh0aGlzLmZpbHRlclJlZ0V4cCgpLCBsaW5lKTtcbiAgICAgICAgaWYgKHByaW9yaXR5TWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlclByaW9yaXR5U3RyaW5nID0gcHJpb3JpdHlNYXRjaFs1XTtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJQcmlvcml0eTogUHJpb3JpdHkgfCBudWxsID0gbnVsbDtcblxuICAgICAgICAgICAgc3dpdGNoIChmaWx0ZXJQcmlvcml0eVN0cmluZykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xvdyc6XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclByaW9yaXR5ID0gUHJpb3JpdHkuTG93O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdub25lJzpcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyUHJpb3JpdHkgPSBQcmlvcml0eS5Ob25lO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtZWRpdW0nOlxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJQcmlvcml0eSA9IFByaW9yaXR5Lk1lZGl1bTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaGlnaCc6XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclByaW9yaXR5ID0gUHJpb3JpdHkuSGlnaDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmaWx0ZXJQcmlvcml0eSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5lcnJvciA9ICdkbyBub3QgdW5kZXJzdGFuZCBwcmlvcml0eSc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGV4cGxhbmF0aW9uID0gbGluZTtcbiAgICAgICAgICAgIGxldCBmaWx0ZXI7XG4gICAgICAgICAgICBzd2l0Y2ggKHByaW9yaXR5TWF0Y2hbM10pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdhYm92ZSc6XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlciA9ICh0YXNrOiBUYXNrKSA9PiB0YXNrLnByaW9yaXR5LmxvY2FsZUNvbXBhcmUoZmlsdGVyUHJpb3JpdHkhKSA8IDA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2JlbG93JzpcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyID0gKHRhc2s6IFRhc2spID0+IHRhc2sucHJpb3JpdHkubG9jYWxlQ29tcGFyZShmaWx0ZXJQcmlvcml0eSEpID4gMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbm90JzpcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyID0gKHRhc2s6IFRhc2spID0+IHRhc2sucHJpb3JpdHkgIT09IGZpbHRlclByaW9yaXR5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIgPSAodGFzazogVGFzaykgPT4gdGFzay5wcmlvcml0eSA9PT0gZmlsdGVyUHJpb3JpdHk7XG4gICAgICAgICAgICAgICAgICAgIGV4cGxhbmF0aW9uID0gYCR7dGhpcy5maWVsZE5hbWUoKX0gaXMgJHtmaWx0ZXJQcmlvcml0eVN0cmluZ31gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXN1bHQuZmlsdGVyID0gbmV3IEZpbHRlcihsaW5lLCBmaWx0ZXIsIG5ldyBFeHBsYW5hdGlvbihleHBsYW5hdGlvbikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LmVycm9yID0gJ2RvIG5vdCB1bmRlcnN0YW5kIHF1ZXJ5IGZpbHRlciAocHJpb3JpdHkpJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHB1YmxpYyBmaWVsZE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdwcmlvcml0eSc7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGZpbHRlclJlZ0V4cCgpOiBSZWdFeHAge1xuICAgICAgICByZXR1cm4gUHJpb3JpdHlGaWVsZC5wcmlvcml0eVJlZ2V4cDtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBNb21lbnQgfSBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHR5cGUgeyBUYXNrIH0gZnJvbSAnLi4vLi4vVGFzayc7XG5pbXBvcnQgeyBEYXRlRmllbGQgfSBmcm9tICcuL0RhdGVGaWVsZCc7XG5cbi8qKlxuICogU3VwcG9ydCB0aGUgJ3NjaGVkdWxlZCcgc2VhcmNoIGluc3RydWN0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgU2NoZWR1bGVkRGF0ZUZpZWxkIGV4dGVuZHMgRGF0ZUZpZWxkIHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBzY2hlZHVsZWRSZWdleHAgPSAvXnNjaGVkdWxlZCAoYmVmb3JlfGFmdGVyfG9uKT8gPyguKikvO1xuXG4gICAgcHJvdGVjdGVkIGZpbHRlclJlZ0V4cCgpOiBSZWdFeHAge1xuICAgICAgICByZXR1cm4gU2NoZWR1bGVkRGF0ZUZpZWxkLnNjaGVkdWxlZFJlZ2V4cDtcbiAgICB9XG4gICAgcHVibGljIGZpZWxkTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ3NjaGVkdWxlZCc7XG4gICAgfVxuICAgIHB1YmxpYyBkYXRlKHRhc2s6IFRhc2spOiBNb21lbnQgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRhc2suc2NoZWR1bGVkRGF0ZTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGZpbHRlclJlc3VsdElmRmllbGRNaXNzaW5nKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIiwgImltcG9ydCB0eXBlIHsgTW9tZW50IH0gZnJvbSAnbW9tZW50JztcbmltcG9ydCB0eXBlIHsgVGFzayB9IGZyb20gJy4uLy4uL1Rhc2snO1xuaW1wb3J0IHsgRGF0ZUZpZWxkIH0gZnJvbSAnLi9EYXRlRmllbGQnO1xuXG4vKipcbiAqIFN1cHBvcnQgdGhlICdzdGFydHMnIHNlYXJjaCBpbnN0cnVjdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFN0YXJ0RGF0ZUZpZWxkIGV4dGVuZHMgRGF0ZUZpZWxkIHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBzdGFydFJlZ2V4cCA9IC9ec3RhcnRzIChiZWZvcmV8YWZ0ZXJ8b24pPyA/KC4qKS87XG5cbiAgICBwcm90ZWN0ZWQgZmlsdGVyUmVnRXhwKCk6IFJlZ0V4cCB7XG4gICAgICAgIHJldHVybiBTdGFydERhdGVGaWVsZC5zdGFydFJlZ2V4cDtcbiAgICB9XG4gICAgcHVibGljIGZpZWxkTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ3N0YXJ0JztcbiAgICB9XG4gICAgcHVibGljIGRhdGUodGFzazogVGFzayk6IE1vbWVudCB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGFzay5zdGFydERhdGU7XG4gICAgfVxuICAgIHByb3RlY3RlZCBmaWx0ZXJSZXN1bHRJZkZpZWxkTWlzc2luZygpIHtcbiAgICAgICAgLy8gcmVmZXJlbmNlOiBodHRwczovL29ic2lkaWFuLXRhc2tzLWdyb3VwLmdpdGh1Yi5pby9vYnNpZGlhbi10YXNrcy9xdWVyaWVzL2ZpbHRlcnMvI3N0YXJ0LWRhdGVcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuIiwgImltcG9ydCB0eXBlIHsgTW9tZW50IH0gZnJvbSAnbW9tZW50JztcbmltcG9ydCB0eXBlIHsgVGFzayB9IGZyb20gJy4uLy4uL1Rhc2snO1xuaW1wb3J0IHsgRGF0ZVBhcnNlciB9IGZyb20gJy4uL0RhdGVQYXJzZXInO1xuaW1wb3J0IHsgU29ydCB9IGZyb20gJy4uL1NvcnQnO1xuaW1wb3J0IHsgRXhwbGFuYXRpb24gfSBmcm9tICcuLi9FeHBsYWluL0V4cGxhbmF0aW9uJztcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi9GaWVsZCc7XG5pbXBvcnQgeyBGaWx0ZXIsIEZpbHRlck9yRXJyb3JNZXNzYWdlIH0gZnJvbSAnLi9GaWx0ZXInO1xuaW1wb3J0IHsgRmlsdGVySW5zdHJ1Y3Rpb25zIH0gZnJvbSAnLi9GaWx0ZXJJbnN0cnVjdGlvbnMnO1xuaW1wb3J0IHsgRGF0ZUZpZWxkIH0gZnJvbSAnLi9EYXRlRmllbGQnO1xuXG4vKipcbiAqIFN1cHBvcnQgdGhlICdoYXBwZW5zJyBzZWFyY2ggaW5zdHJ1Y3Rpb24sIHdoaWNoIHNlYXJjaGVzIGFsbCBvZlxuICogc3RhcnQsIHNjaGVkdWxlZCBhbmQgZHVlIGRhdGVzLlxuICovXG5leHBvcnQgY2xhc3MgSGFwcGVuc0RhdGVGaWVsZCBleHRlbmRzIEZpZWxkIHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBoYXBwZW5zUmVnZXhwID0gL15oYXBwZW5zIChiZWZvcmV8YWZ0ZXJ8b24pPyA/KC4qKS87XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgaW5zdHJ1Y3Rpb25Gb3JGaWVsZFByZXNlbmNlID0gJ2hhcyBoYXBwZW5zIGRhdGUnO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGluc3RydWN0aW9uRm9yRmllbGRBYnNlbmNlID0gJ25vIGhhcHBlbnMgZGF0ZSc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBmaWx0ZXJJbnN0cnVjdGlvbnM6IEZpbHRlckluc3RydWN0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZpbHRlckluc3RydWN0aW9ucyA9IG5ldyBGaWx0ZXJJbnN0cnVjdGlvbnMoKTtcbiAgICAgICAgdGhpcy5maWx0ZXJJbnN0cnVjdGlvbnMuYWRkKEhhcHBlbnNEYXRlRmllbGQuaW5zdHJ1Y3Rpb25Gb3JGaWVsZFByZXNlbmNlLCAodGFzazogVGFzaykgPT5cbiAgICAgICAgICAgIHRoaXMuZGF0ZXModGFzaykuc29tZSgoZGF0ZSkgPT4gZGF0ZSAhPT0gbnVsbCksXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZmlsdGVySW5zdHJ1Y3Rpb25zLmFkZChcbiAgICAgICAgICAgIEhhcHBlbnNEYXRlRmllbGQuaW5zdHJ1Y3Rpb25Gb3JGaWVsZEFic2VuY2UsXG4gICAgICAgICAgICAodGFzazogVGFzaykgPT4gIXRoaXMuZGF0ZXModGFzaykuc29tZSgoZGF0ZSkgPT4gZGF0ZSAhPT0gbnVsbCksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGNhbkNyZWF0ZUZpbHRlckZvckxpbmUobGluZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLmZpbHRlckluc3RydWN0aW9ucy5jYW5DcmVhdGVGaWx0ZXJGb3JMaW5lKGxpbmUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuY2FuQ3JlYXRlRmlsdGVyRm9yTGluZShsaW5lKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlRmlsdGVyT3JFcnJvck1lc3NhZ2UobGluZTogc3RyaW5nKTogRmlsdGVyT3JFcnJvck1lc3NhZ2Uge1xuICAgICAgICBjb25zdCBmaWx0ZXJSZXN1bHQgPSB0aGlzLmZpbHRlckluc3RydWN0aW9ucy5jcmVhdGVGaWx0ZXJPckVycm9yTWVzc2FnZShsaW5lKTtcbiAgICAgICAgaWYgKGZpbHRlclJlc3VsdC5maWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbHRlclJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBGaWx0ZXJPckVycm9yTWVzc2FnZShsaW5lKTtcblxuICAgICAgICBjb25zdCBoYXBwZW5zTWF0Y2ggPSBGaWVsZC5nZXRNYXRjaCh0aGlzLmZpbHRlclJlZ0V4cCgpLCBsaW5lKTtcbiAgICAgICAgaWYgKGhhcHBlbnNNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyRGF0ZSA9IERhdGVQYXJzZXIucGFyc2VEYXRlKGhhcHBlbnNNYXRjaFsyXSk7XG4gICAgICAgICAgICBpZiAoIWZpbHRlckRhdGUuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmVycm9yID0gJ2RvIG5vdCB1bmRlcnN0YW5kIGhhcHBlbnMgZGF0ZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBmaWx0ZXJGdW5jdGlvbjtcbiAgICAgICAgICAgICAgICBsZXQgcmVsYXRpdmU7XG4gICAgICAgICAgICAgICAgaWYgKGhhcHBlbnNNYXRjaFsxXSA9PT0gJ2JlZm9yZScpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyRnVuY3Rpb24gPSAodGFzazogVGFzaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZXModGFzaykuc29tZSgoZGF0ZSkgPT4gZGF0ZSAmJiBkYXRlLmlzQmVmb3JlKGZpbHRlckRhdGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUgPSAnICcgKyBoYXBwZW5zTWF0Y2hbMV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYXBwZW5zTWF0Y2hbMV0gPT09ICdhZnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyRnVuY3Rpb24gPSAodGFzazogVGFzaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZXModGFzaykuc29tZSgoZGF0ZSkgPT4gZGF0ZSAmJiBkYXRlLmlzQWZ0ZXIoZmlsdGVyRGF0ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZSA9ICcgJyArIGhhcHBlbnNNYXRjaFsxXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJGdW5jdGlvbiA9ICh0YXNrOiBUYXNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRlcyh0YXNrKS5zb21lKChkYXRlKSA9PiBkYXRlICYmIGRhdGUuaXNTYW1lKGZpbHRlckRhdGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUgPSAnIG9uJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZXhwbGFuYXRpb24gPSBEYXRlRmllbGQuZ2V0RXhwbGFuYXRpb25TdHJpbmcoXG4gICAgICAgICAgICAgICAgICAgICdkdWUsIHN0YXJ0IG9yIHNjaGVkdWxlZCcsXG4gICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyRGF0ZSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5maWx0ZXIgPSBuZXcgRmlsdGVyKGxpbmUsIGZpbHRlckZ1bmN0aW9uLCBuZXcgRXhwbGFuYXRpb24oZXhwbGFuYXRpb24pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5lcnJvciA9ICdkbyBub3QgdW5kZXJzdGFuZCBxdWVyeSBmaWx0ZXIgKGhhcHBlbnMgZGF0ZSknO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBlYXJsaWVzdCBvZiB0aGUgZGF0ZXMgdXNlZCBieSAnaGFwcGVucycgaW4gdGhlIGdpdmVuIHRhc2ssIG9yIG51bGwgaWYgbm9uZSBzZXQuXG4gICAgICpcbiAgICAgKiBHZW5lcmFsbHkgc3BlYWtpbmcsIHRoZSBlYXJsaWVzdCBkYXRlIGlzIGNvbnNpZGVyZWQgdG8gYmUgdGhlIGhpZ2hlc3QgcHJpb3JpdHksXG4gICAgICogYXMgaXQgaXMgdGhlIGZpcnN0IHBvaW50IGF0IHdoaWNoIHRoZSB1c2VyIG1pZ2h0IHdpc2ggdG8gYWN0IG9uIHRoZSB0YXNrLlxuICAgICAqIEBwYXJhbSB0YXNrXG4gICAgICovXG4gICAgcHVibGljIGVhcmxpZXN0RGF0ZSh0YXNrOiBUYXNrKTogTW9tZW50IHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IGhhcHBlbnNEYXRlcyA9IG5ldyBIYXBwZW5zRGF0ZUZpZWxkKCkuZGF0ZXModGFzayk7XG4gICAgICAgIGNvbnN0IHNvcnRlZEhhcHBlbnNEYXRlcyA9IGhhcHBlbnNEYXRlcy5zb3J0KFNvcnQuY29tcGFyZUJ5RGF0ZSk7XG4gICAgICAgIHJldHVybiBzb3J0ZWRIYXBwZW5zRGF0ZXNbMF07XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGZpbHRlclJlZ0V4cCgpOiBSZWdFeHAge1xuICAgICAgICByZXR1cm4gSGFwcGVuc0RhdGVGaWVsZC5oYXBwZW5zUmVnZXhwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgdGFzaydzIHN0YXJ0LCBzY2hlZHVsZWQgYW5kIGR1ZSBkYXRlcywgYW55IG9yIGFsbCBvZiB3aGljaCBtYXkgYmUgbnVsbC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGF0ZXModGFzazogVGFzayk6IChNb21lbnQgfCBudWxsKVtdIHtcbiAgICAgICAgcmV0dXJuIEFycmF5Lm9mKHRhc2suc3RhcnREYXRlLCB0YXNrLnNjaGVkdWxlZERhdGUsIHRhc2suZHVlRGF0ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGZpZWxkTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ2hhcHBlbnMnO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBGaWx0ZXJJbnN0cnVjdGlvbnNCYXNlZEZpZWxkIH0gZnJvbSAnLi9GaWx0ZXJJbnN0cnVjdGlvbnNCYXNlZEZpZWxkJztcblxuZXhwb3J0IGNsYXNzIFJlY3VycmluZ0ZpZWxkIGV4dGVuZHMgRmlsdGVySW5zdHJ1Y3Rpb25zQmFzZWRGaWVsZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2ZpbHRlcnMuYWRkKCdpcyByZWN1cnJpbmcnLCAodGFzaykgPT4gdGFzay5yZWN1cnJlbmNlICE9PSBudWxsKTtcbiAgICAgICAgdGhpcy5fZmlsdGVycy5hZGQoJ2lzIG5vdCByZWN1cnJpbmcnLCAodGFzaykgPT4gdGFzay5yZWN1cnJlbmNlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZmllbGROYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAncmVjdXJyaW5nJztcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgU3RhdHVzLCBUYXNrIH0gZnJvbSAnLi4vLi4vVGFzayc7XG5pbXBvcnQgeyBGaWx0ZXJJbnN0cnVjdGlvbnNCYXNlZEZpZWxkIH0gZnJvbSAnLi9GaWx0ZXJJbnN0cnVjdGlvbnNCYXNlZEZpZWxkJztcblxuZXhwb3J0IGNsYXNzIFN0YXR1c0ZpZWxkIGV4dGVuZHMgRmlsdGVySW5zdHJ1Y3Rpb25zQmFzZWRGaWVsZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5fZmlsdGVycy5hZGQoJ2RvbmUnLCAodGFzazogVGFzaykgPT4gdGFzay5zdGF0dXMgPT09IFN0YXR1cy5ET05FKTtcbiAgICAgICAgdGhpcy5fZmlsdGVycy5hZGQoJ25vdCBkb25lJywgKHRhc2s6IFRhc2spID0+IHRhc2suc3RhdHVzICE9PSBTdGF0dXMuRE9ORSk7XG4gICAgfVxuXG4gICAgcHVibGljIGZpZWxkTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ3N0YXR1cyc7XG4gICAgfVxufVxuIiwgImltcG9ydCB0eXBlIHsgVGFzayB9IGZyb20gJy4uLy4uL1Rhc2snO1xuaW1wb3J0IHR5cGUgeyBJU3RyaW5nTWF0Y2hlciB9IGZyb20gJy4uL01hdGNoZXJzL0lTdHJpbmdNYXRjaGVyJztcbmltcG9ydCB7IFRleHRGaWVsZCB9IGZyb20gJy4vVGV4dEZpZWxkJztcbmltcG9ydCB0eXBlIHsgRmlsdGVyRnVuY3Rpb24gfSBmcm9tICcuL0ZpbHRlcic7XG5cbi8qKlxuICogTXVsdGlUZXh0RmllbGQgaXMgYW4gYWJzdHJhY3QgYmFzZSBjbGFzcyB0byBoZWxwIGltcGxlbWVudFxuICogYWxsIHRoZSBmaWx0ZXIgaW5zdHJ1Y3Rpb25zIHRoYXQgYWN0IG9uIG11bHRpcGxlIHN0cmluZyB2YWx1ZXNcbiAqIHN1Y2ggYXMgdGhlIHRhZ3MuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBNdWx0aVRleHRGaWVsZCBleHRlbmRzIFRleHRGaWVsZCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc2luZ3VsYXIgZm9ybSBvZiB0aGUgZmllbGQncyBuYW1lLlxuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCBmaWVsZE5hbWVTaW5ndWxhcigpOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwbHVyYWwgZm9ybSBvZiB0aGUgZmllbGQncyBuYW1lLlxuICAgICAqIElmIG5vdCBvdmVycmlkZGVuLCByZXR1cm5zIHRoZSBzaW5ndWxhciBmb3JtIGFwcGVuZGVkIHdpdGggYW4gXCJzXCIuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGZpZWxkTmFtZVBsdXJhbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZE5hbWVTaW5ndWxhcigpICsgJ3MnO1xuICAgIH1cblxuICAgIHB1YmxpYyBmaWVsZE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuZmllbGROYW1lU2luZ3VsYXIoKX0vJHt0aGlzLmZpZWxkTmFtZVBsdXJhbCgpfWA7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGZpZWxkUGF0dGVybigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5maWVsZE5hbWVTaW5ndWxhcigpfXwke3RoaXMuZmllbGROYW1lUGx1cmFsKCl9YDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZmlsdGVyT3BlcmF0b3JQYXR0ZXJuKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgJHtzdXBlci5maWx0ZXJPcGVyYXRvclBhdHRlcm4oKX18aW5jbHVkZXxkbyBub3QgaW5jbHVkZWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgbm90IG92ZXJyaWRkZW4sIHJldHVybnMgYSBjb21tYS1zZXBhcmF0ZWQgY29uY2F0ZW5hdGlvbiBvZiBhbGxcbiAgICAgKiB0aGUgdmFsdWVzIG9mIHRoaXMgZmllbGQgb3IgYW4gZW1wdHkgc3RyaW5nIGlmIHRoZXJlIGFyZSBub3QgdmFsdWVzXG4gICAgICogQHBhcmFtIHRhc2tcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgcHVibGljIHZhbHVlKHRhc2s6IFRhc2spOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXModGFzaykuam9pbignLCAnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiB2YWx1ZXMgb2YgdGhpcyBmaWVsZCwgb3IgYW4gZW1wdHkgYXJyYXlcbiAgICAgKiBpZiB0aGUgZmllbGQgaGFzIG5vIHZhbHVlc1xuICAgICAqIEBwYXJhbSB0YXNrXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHB1YmxpYyBhYnN0cmFjdCB2YWx1ZXModGFzazogVGFzayk6IHN0cmluZ1tdO1xuXG4gICAgcHJvdGVjdGVkIGdldEZpbHRlcihtYXRjaGVyOiBJU3RyaW5nTWF0Y2hlciwgbmVnYXRlOiBib29sZWFuKTogRmlsdGVyRnVuY3Rpb24ge1xuICAgICAgICByZXR1cm4gKHRhc2s6IFRhc2spID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gbWF0Y2hlciEubWF0Y2hlc0FueU9mKHRoaXMudmFsdWVzKHRhc2spKTtcbiAgICAgICAgICAgIHJldHVybiBuZWdhdGUgPyAhbWF0Y2ggOiBtYXRjaDtcbiAgICAgICAgfTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBUYXNrIH0gZnJvbSAnLi4vLi4vVGFzayc7XG5pbXBvcnQgeyBNdWx0aVRleHRGaWVsZCB9IGZyb20gJy4vTXVsdGlUZXh0RmllbGQnO1xuXG4vKipcbiAqIFN1cHBvcnQgdGhlICd0YWcnIGFuZCAndGFncycgc2VhcmNoIGluc3RydWN0aW9ucy5cbiAqXG4gKiBUYWdzIGNhbiBiZSBzZWFyY2hlZCBmb3Igd2l0aCBhbmQgd2l0aG91dCB0aGUgaGFzaCB0YWcgYXQgdGhlIHN0YXJ0LlxuICovXG5leHBvcnQgY2xhc3MgVGFnc0ZpZWxkIGV4dGVuZHMgTXVsdGlUZXh0RmllbGQge1xuICAgIHB1YmxpYyBmaWVsZE5hbWVTaW5ndWxhcigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ3RhZyc7XG4gICAgfVxuXG4gICAgcHVibGljIHZhbHVlcyh0YXNrOiBUYXNrKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGFzay50YWdzO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBwYXJzZSBhcyBib29uUGFyc2UgfSBmcm9tICdib29uLWpzJztcbmltcG9ydCB0eXBlIHsgUG9zdGZpeEV4cHJlc3Npb24gfSBmcm9tICdib29uLWpzJztcblxuaW1wb3J0IHsgcGFyc2VGaWx0ZXIgfSBmcm9tICcuLi9GaWx0ZXJQYXJzZXInO1xuaW1wb3J0IHR5cGUgeyBUYXNrIH0gZnJvbSAnLi4vLi4vVGFzayc7XG5pbXBvcnQgeyBFeHBsYW5hdGlvbiB9IGZyb20gJy4uL0V4cGxhaW4vRXhwbGFuYXRpb24nO1xuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuL0ZpZWxkJztcbmltcG9ydCB7IEZpbHRlck9yRXJyb3JNZXNzYWdlIH0gZnJvbSAnLi9GaWx0ZXInO1xuaW1wb3J0IHsgRmlsdGVyIH0gZnJvbSAnLi9GaWx0ZXInO1xuXG4vKipcbiAqIEJvb2xlYW5GaWVsZCBpcyBhICdjb250YWluZXInIGZpZWxkIHR5cGUgdGhhdCBwYXJzZXMgYSBoaWdoLWxldmVsIGZpbHRlcmluZyBxdWVyeSBvZlxuICogdGhlIGZvcm1hdCAtLVxuICogICAgKGZpbHRlcjEpIEFORCAoKGZpbHRlcjIpIE9SIChmaWx0ZXIzKSlcbiAqIFRoZSBmaWx0ZXJzIGNhbiBiZSBtaXhlZCBhbmQgbWF0Y2hlZCB3aXRoIGFueSBib29sZWFuIG9wZXJhdG9ycyBhcyBsb25nIGFzIHRoZSBpbmRpdmlkdWFsIGZpbHRlcnMgYXJlXG4gKiB3cmFwcGVkIGluIGVpdGhlciBwYXJhbnRoZXNpcyBvciBxdW90ZXMgLS0gKGZpbHRlcjEpIG9yIFwiZmlsdGVyMVwiLlxuICogV2hhdCBoYXBwZW5zIGludGVybmFsbHkgaXMgdGhhdCB3aGVuIHRoZSBib29sZWFuIGZpZWxkIGlzIGFza2VkIHRvIGNyZWF0ZSBhIGZpbHRlciwgaXQgcGFyc2VzIHRoZSBib29sZWFuXG4gKiBxdWVyeSBpbnRvIGEgbG9naWNhbCBwb3N0Zml4IGV4cHJlc3Npb24gKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1JldmVyc2VfUG9saXNoX25vdGF0aW9uKSxcbiAqIHdpdGggdGhlIGluZGl2aWR1YWwgZmlsdGVyIGNvbXBvbmVudHMgYXMgXCJpZGVudGlmaWVyXCIgdG9rZW5zLlxuICogVGhlc2UgaWRlbnRpZmllcnMgaGF2ZSBhbiBhc3NvY2lhdGVkIGFjdHVhbCBGaWx0ZXIgKHdoaWNoIGlzIGNhY2hlZCBkdXJpbmcgdGhlIHF1ZXJ5IHBhcnNpbmcpLlxuICogVGhlIHJldHVybmVkIEZpbHRlciBvZiB0aGUgd2hvbGUgYm9vbGVhbiBxdWVyeSBpcyBldmVudHVhbGx5IGEgZnVuY3Rpb24gdGhhdCBmb3IgZWFjaCBUYXNrIG9iamVjdCxcbiAqIGV2YWx1YXRlcyB0aGUgY29tcGxldGUgcG9zdGZpeCBleHByZXNzaW9uIGJ5IGdvaW5nIHRocm91Z2ggdGhlIGluZGl2aWR1YWwgZmlsdGVycyBhbmQgdGhlbiByZXNvbHZpbmdcbiAqIHRoZSBleHByZXNzaW9uIGludG8gYSBzaW5nbGUgYm9vbGVhbiBlbnRpdHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBCb29sZWFuRmllbGQgZXh0ZW5kcyBGaWVsZCB7XG4gICAgLy8gRmlyc3QgcGF0dGVybiBpbiB0aGlzIG1hdGNoZXMgY29udmVudGlvbmFsIChmaWx0ZXIxKSBPUiAoZmlsdGVyMikgYW5kIHNpbWlsYXJcbiAgICAvLyBTZWNvbmQgcGF0dGVybiBtYXRjaGVzIChmaWx0ZXIxKSAtIHRoYXQgaXMsIGVuc3VyZXMgdGhhdCBhIHNpbmdsZSBmaWx0ZXIgaXMgdHJlYXRlZCBhcyB2YWxpZFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYmFzaWNCb29sZWFuUmVnZXhwID0gLyguKihBTkR8T1J8WE9SfE5PVClcXHMqWyhcIl0uKnxcXCguK1xcKSkvZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN1cHBvcnRlZE9wZXJhdG9ycyA9IFsnQU5EJywgJ09SJywgJ1hPUicsICdOT1QnXTtcbiAgICBwcml2YXRlIHN1YkZpZWxkczogUmVjb3JkPHN0cmluZywgRmlsdGVyPiA9IHt9O1xuXG4gICAgcHJvdGVjdGVkIGZpbHRlclJlZ0V4cCgpOiBSZWdFeHAge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNpY0Jvb2xlYW5SZWdleHA7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZUZpbHRlck9yRXJyb3JNZXNzYWdlKGxpbmU6IHN0cmluZyk6IEZpbHRlck9yRXJyb3JNZXNzYWdlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VMaW5lKGxpbmUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmaWVsZE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdib29sZWFuIHF1ZXJ5JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJ1aWxkcyBhIEZpbHRlciBmb3IgYSBjb21wbGV0ZSBib29sZWFuIHF1ZXJ5IGJ5OlxuICAgICAqIDEuIFByZXByb2Nlc3NpbmcgdGhlIGV4cHJlc3Npb24gaW50byBzb21ldGhpbmcgb3VyIGhlbHBlciBwYWNrYWdlLCBib29uLWpzLCBrbm93cyBob3cgdG8gYnVpbGQgYW4gZXhwcmVzc2lvbiBmb3IuXG4gICAgICogMi4gQ3JlYXRpbmcgYSBwb3N0Zml4IGxvZ2ljYWwgZXhwcmVzc2lvbiB1c2luZyBib29uLWpzLCB3aGljaCBoYXMgLVxuICAgICAqICAgIGEuIElkZW50aWZpZXJzIChsZWF2ZXMpLCB3aGljaCBhcmUgcmVndWxhciBGaWVsZCBmaWx0ZXJzIHJlcHJlc2VudGVkIGFzIHRoZWlyIHN0cmluZy5cbiAgICAgKiAgICBiLiBPcGVyYXRvcnMsIHdoaWNoIGFyZSBsb2dpY2FsIG9wZXJhdG9ycyBiZXR3ZWVuIGlkZW50aWZpZXJzIG9yIGJldHdlZW4gcGFyZW50aGVzaXMuXG4gICAgICogMy4gQ3JlYXRpbmcgdGhlIGZpbHRlciBmdW5jdGlvbnMgZm9yIGFsbCB0aGUgSWRlbnRpZmllcnMgaW4gdGhlIGV4cHJlc3Npb24gYW5kIGNhY2hpbmcgdGhlbSBpbiB0aGlzLnN1YkZpZWxkcy5cbiAgICAgKiA0LiBSZXR1cm5pbmcgYSBmaW5hbCBmdW5jdGlvbiBmaWx0ZXIsIHdoaWNoIGZvciBlYWNoIFRhc2sgY2FuIHJ1biB0aGUgY29tcGxldGUgcXVlcnkuXG4gICAgICovXG4gICAgcHJpdmF0ZSBwYXJzZUxpbmUobGluZTogc3RyaW5nKTogRmlsdGVyT3JFcnJvck1lc3NhZ2Uge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgRmlsdGVyT3JFcnJvck1lc3NhZ2UobGluZSk7XG4gICAgICAgIGlmIChsaW5lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmVzdWx0LmVycm9yID0gJ2VtcHR5IGxpbmUnO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmVwcm9jZXNzZWQgPSB0aGlzLnByZXByb2Nlc3NFeHByZXNzaW9uKGxpbmUpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgKHByZXByb2Nlc3NlZCkgbGluZSBpbnRvIGEgcG9zdGZpeCBsb2dpY2FsIGV4cHJlc3Npb25cbiAgICAgICAgICAgIGNvbnN0IHBvc3RmaXhFeHByZXNzaW9uID0gYm9vblBhcnNlKHByZXByb2Nlc3NlZCk7XG4gICAgICAgICAgICAvLyBDb25zdHJ1Y3Qgc3ViLWZpZWxkIG1hcCwgaS5lLiBoYXZlIHN1YkZpZWxkcyBpbmNsdWRlIGEgZmlsdGVyIGZ1bmN0aW9uIGZvciBldmVyeVxuICAgICAgICAgICAgLy8gZmluYWwgdG9rZW4gaW4gdGhlIGV4cHJlc3Npb25cbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgcG9zdGZpeEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4ubmFtZSA9PT0gJ0lERU5USUZJRVInICYmIHRva2VuLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSB0b2tlbi52YWx1ZS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGlkZW50aWZpZXIgaW4gdGhpcy5zdWJGaWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRGaWVsZCA9IHBhcnNlRmlsdGVyKGlkZW50aWZpZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlZEZpZWxkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmVycm9yID0gYGNvdWxkbid0IHBhcnNlIHN1Yi1leHByZXNzaW9uICcke2lkZW50aWZpZXJ9J2A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZWRGaWVsZC5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5lcnJvciA9IGBjb3VsZG4ndCBwYXJzZSBzdWItZXhwcmVzc2lvbiAnJHtpZGVudGlmaWVyfSc6ICR7cGFyc2VkRmllbGQuZXJyb3J9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZWRGaWVsZC5maWx0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YkZpZWxkc1tpZGVudGlmaWVyXSA9IHBhcnNlZEZpZWxkLmZpbHRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9rZW4ubmFtZSA9PT0gJ09QRVJBVE9SJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBXaGlsZSB3ZSdyZSBhbHJlYWR5IGl0ZXJhdGluZyBvdmVyIHRoZSBleHByZXNzaW9uLCBhbHRob3VnaCB3ZSBkb24ndCBuZWVkIHRoZSBvcGVyYXRvcnMgYXRcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBzdGFnZSBidXQgb25seSBpbiBmaWx0ZXJUYXNrV2l0aFBhcnNlZFF1ZXJ5IGJlbG93LCB3ZSdyZSB1c2luZyB0aGUgb3Bwb3J0dW5pdHkgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZXkgYXJlIHZhbGlkLiBJZiB3ZSB3b24ndCwgdGhlbiBhbiBpbnZhbGlkIG9wZXJhdG9yIHdpbGwgb25seSBiZSBkZXRlY3RlZCB3aGVuIHRoZSBxdWVyeSBpc1xuICAgICAgICAgICAgICAgICAgICAvLyBydW4gb24gYSB0YXNrXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbi52YWx1ZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5lcnJvciA9ICdlbXB0eSBvcGVyYXRvciBpbiBib29sZWFuIHF1ZXJ5JztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnN1cHBvcnRlZE9wZXJhdG9ycy5pbmNsdWRlcyh0b2tlbi52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5lcnJvciA9IGB1bmtub3duIGJvb2xlYW4gb3BlcmF0b3IgJyR7dG9rZW4udmFsdWV9J2A7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBmaWx0ZXIgd2l0aCBmaWx0ZXIgZnVuY3Rpb24gdGhhdCBjYW4gcnVuIHRoZSBjb21wbGV0ZSBxdWVyeVxuICAgICAgICAgICAgY29uc3QgZmlsdGVyRnVuY3Rpb24gPSAodGFzazogVGFzaykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlclRhc2tXaXRoUGFyc2VkUXVlcnkodGFzaywgcG9zdGZpeEV4cHJlc3Npb24pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGxhbmF0aW9uID0gdGhpcy5jb25zdHJ1Y3RFeHBsYW5hdGlvbihwb3N0Zml4RXhwcmVzc2lvbik7XG4gICAgICAgICAgICByZXN1bHQuZmlsdGVyID0gbmV3IEZpbHRlcihsaW5lLCBmaWx0ZXJGdW5jdGlvbiwgZXhwbGFuYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICd1bmtub3duIGVycm9yIHR5cGUnO1xuICAgICAgICAgICAgcmVzdWx0LmVycm9yID0gYG1hbGZvcm1lZCBib29sZWFuIHF1ZXJ5IC0tICR7bWVzc2FnZX0gKGNoZWNrIHRoZSBkb2N1bWVudGF0aW9uIGZvciBndWlkZWxpbmVzKWA7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcmVwcm9jZXNzRXhwcmVzc2lvbihsaW5lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICAvLyBQcmVwYXJlIHRoZSBxdWVyeSB0byBiZSBwcm9jZXNzZWQgYnkgYm9vbi1qcy5cbiAgICAgICAgLy8gQm9vbiBkb2Vzbid0IHByb2Nlc3MgZXhwcmVzc2lvbiB3aXRoIHNwYWNlcyB1bmxlc3MgdGhleSBhcmUgc3Vycm91bmRlZCBieSBxdW90ZXMsIHNvIHJlcGxhY2VcbiAgICAgICAgLy8gKGR1ZSB0b2RheSkgYnkgKFwiZHVlIHRvZGF5XCIpLlxuICAgICAgICByZXR1cm4gbGluZS5yZXBsYWNlKC9cXCgoW14oKV0rKVxcKS9nLCAnKFwiJDFcIiknKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFRoaXMgcnVuIGEgVGFzayBvYmplY3QgdGhyb3VnaCBhIGNvbXBsZXRlIGJvb2xlYW4gZXhwcmVzc2lvbi5cbiAgICAgKiBJdCBiYXNpY2FsbHkgcmVzb2x2ZXMgdGhlIHBvc3RmaXggZXhwcmVzc2lvbiB1bnRpbCBpdCBpcyByZWR1Y2VkIGludG8gYSBzaW5nbGUgYm9vbGVhbiB2YWx1ZSxcbiAgICAgKiB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHRoZSBjb21wbGV0ZSBleHByZXNzaW9uLlxuICAgICAqIFNlZSBoZXJlIGhvdyBpdCB3b3JrczogaHR0cDovL3d3dy5idGVjaHNtYXJ0Y2xhc3MuY29tL2RhdGFfc3RydWN0dXJlcy9wb3N0Zml4LWV2YWx1YXRpb24uaHRtbFxuICAgICAqIEFub3RoZXIgcmVmZXJlbmNlOiBodHRwczovL3d3dy50dXRvcmlhbHNwb2ludC5jb20vRXZhbHVhdGUtUG9zdGZpeC1FeHByZXNzaW9uXG4gICAgICovXG4gICAgcHJpdmF0ZSBmaWx0ZXJUYXNrV2l0aFBhcnNlZFF1ZXJ5KHRhc2s6IFRhc2ssIHBvc3RmaXhFeHByZXNzaW9uOiBQb3N0Zml4RXhwcmVzc2lvbik6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB0b0Jvb2wgPSAoczogc3RyaW5nIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcyA9PT0gJ3RydWUnO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB0b1N0cmluZyA9IChiOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYiA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGJvb2xlYW5TdGFjazogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBwb3N0Zml4RXhwcmVzc2lvbikge1xuICAgICAgICAgICAgaWYgKHRva2VuLm5hbWUgPT09ICdJREVOVElGSUVSJykge1xuICAgICAgICAgICAgICAgIC8vIElkZW50aWZpZXJzIGFyZSB0aGUgc3ViLWZpZWxkcyBvZiB0aGUgZXhwcmVzc2lvbiwgdGhlIGFjdHVhbCBmaWx0ZXJzLCBlLmcuICdkZXNjcmlwdGlvbiBpbmNsdWRlcyBmb28nLlxuICAgICAgICAgICAgICAgIC8vIEZvciBlYWNoIGlkZW50aWZpZXIgd2UgY3JlYXRlZCBlYXJsaWVyIHRoZSBjb3JyZXNwb25kaW5nIEZpbHRlciwgc28gbm93IHdlIGNhbiBqdXN0IGV2YWx1YXRlIHRoZSBnaXZlblxuICAgICAgICAgICAgICAgIC8vIHRhc2sgZm9yIGVhY2ggaWRlbnRpZmllciB0aGF0IHdlIGZpbmQgaW4gdGhlIHBvc3RmaXggZXhwcmVzc2lvbi5cbiAgICAgICAgICAgICAgICBpZiAodG9rZW4udmFsdWUgPT0gbnVsbCkgdGhyb3cgRXJyb3IoJ251bGwgdG9rZW4gdmFsdWUnKTsgLy8gVGhpcyBzaG91bGQgbm90IGhhcHBlblxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuc3ViRmllbGRzW3Rva2VuLnZhbHVlLnRyaW0oKV07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZmlsdGVyLmZpbHRlckZ1bmN0aW9uKHRhc2spO1xuICAgICAgICAgICAgICAgIGJvb2xlYW5TdGFjay5wdXNoKHRvU3RyaW5nKHJlc3VsdCkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0b2tlbi5uYW1lID09PSAnT1BFUkFUT1InKSB7XG4gICAgICAgICAgICAgICAgLy8gVG8gZXZhbHVhdGUgYW4gb3BlcmF0b3Igd2UgbmVlZCB0byBwb3AgdGhlIHJlcXVpcmVkIG51bWJlciBvZiBpdGVtcyBmcm9tIHRoZSBib29sZWFuIHN0YWNrLFxuICAgICAgICAgICAgICAgIC8vIGRvIHRoZSBsb2dpY2FsIGV2YWx1YXRpb24gYW5kIHB1c2ggYmFjayB0aGUgcmVzdWx0XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLnZhbHVlID09PSAnTk9UJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmcxID0gdG9Cb29sKGJvb2xlYW5TdGFjay5wb3AoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJvb2xlYW5TdGFjay5wdXNoKHRvU3RyaW5nKCFhcmcxKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0b2tlbi52YWx1ZSA9PT0gJ09SJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmcxID0gdG9Cb29sKGJvb2xlYW5TdGFjay5wb3AoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZzIgPSB0b0Jvb2woYm9vbGVhblN0YWNrLnBvcCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYm9vbGVhblN0YWNrLnB1c2godG9TdHJpbmcoYXJnMSB8fCBhcmcyKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0b2tlbi52YWx1ZSA9PT0gJ0FORCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJnMSA9IHRvQm9vbChib29sZWFuU3RhY2sucG9wKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmcyID0gdG9Cb29sKGJvb2xlYW5TdGFjay5wb3AoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJvb2xlYW5TdGFjay5wdXNoKHRvU3RyaW5nKGFyZzEgJiYgYXJnMikpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9rZW4udmFsdWUgPT09ICdYT1InKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZzEgPSB0b0Jvb2woYm9vbGVhblN0YWNrLnBvcCgpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJnMiA9IHRvQm9vbChib29sZWFuU3RhY2sucG9wKCkpO1xuICAgICAgICAgICAgICAgICAgICBib29sZWFuU3RhY2sucHVzaCh0b1N0cmluZygoYXJnMSAmJiAhYXJnMikgfHwgKCFhcmcxICYmIGFyZzIpKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1Vuc3VwcG9ydGVkIG9wZXJhdG9yOiAnICsgdG9rZW4udmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1Vuc3VwcG9ydGVkIHRva2VuIHR5cGU6ICcgKyB0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXZlbnR1YWxseSB0aGUgcmVzdWx0IG9mIHRoZSBleHByZXNzaW9uIGZvciB0aGlzIFRhc2sgaXMgdGhlIG9ubHkgaXRlbSBsZWZ0IGluIHRoZSBib29sZWFuIHN0YWNrXG4gICAgICAgIHJldHVybiB0b0Jvb2woYm9vbGVhblN0YWNrWzBdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYW4ge0BsaW5rIEV4cGxhbmF0aW9ufSByZXByZXNlbnRpbmcgdGhlIGNvbXBsZXRlIEJvb2xlYW4gaW5zdHJ1Y3Rpb24gY3VycmVudGx5IGJlaW5nIGFuYWx5c2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBvc3RmaXhFeHByZXNzaW9uXG4gICAgICovXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RFeHBsYW5hdGlvbihwb3N0Zml4RXhwcmVzc2lvbjogUG9zdGZpeEV4cHJlc3Npb24pOiBFeHBsYW5hdGlvbiB7XG4gICAgICAgIC8vIEZvciBhbiBleHBsYW5hdGlvbiBvZiB0aGUgY29kZSwgc2VlIHRoZSBKU2RvYyBhbmQgY29tbWVudHMgb2YgZmlsdGVyVGFza1dpdGhQYXJzZWRRdWVyeSgpXG4gICAgICAgIGNvbnN0IGV4cGxhbmF0aW9uU3RhY2s6IEV4cGxhbmF0aW9uW10gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBwb3N0Zml4RXhwcmVzc2lvbikge1xuICAgICAgICAgICAgaWYgKHRva2VuLm5hbWUgPT09ICdJREVOVElGSUVSJykge1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi52YWx1ZSA9PSBudWxsKSB0aHJvdyBFcnJvcignbnVsbCB0b2tlbiB2YWx1ZScpOyAvLyBUaGlzIHNob3VsZCBub3QgaGFwcGVuXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyID0gdGhpcy5zdWJGaWVsZHNbdG9rZW4udmFsdWUudHJpbSgpXTtcbiAgICAgICAgICAgICAgICBleHBsYW5hdGlvblN0YWNrLnB1c2goZmlsdGVyLmV4cGxhbmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG9rZW4ubmFtZSA9PT0gJ09QRVJBVE9SJykge1xuICAgICAgICAgICAgICAgIC8vIFRvIGV2YWx1YXRlIGFuIG9wZXJhdG9yIHdlIG5lZWQgdG8gcG9wIHRoZSByZXF1aXJlZCBudW1iZXIgb2YgaXRlbXMgZnJvbSB0aGUgYm9vbGVhbiBzdGFjayxcbiAgICAgICAgICAgICAgICAvLyBkbyB0aGUgbG9naWNhbCBldmFsdWF0aW9uIGFuZCBwdXNoIGJhY2sgdGhlIHJlc3VsdFxuICAgICAgICAgICAgICAgIGlmICh0b2tlbi52YWx1ZSA9PT0gJ05PVCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJnMSA9IGV4cGxhbmF0aW9uU3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIGV4cGxhbmF0aW9uU3RhY2sucHVzaChFeHBsYW5hdGlvbi5ib29sZWFuTm90KFthcmcxIV0pKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuLnZhbHVlID09PSAnT1InKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZzIgPSBleHBsYW5hdGlvblN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmcxID0gZXhwbGFuYXRpb25TdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgZXhwbGFuYXRpb25TdGFjay5wdXNoKEV4cGxhbmF0aW9uLmJvb2xlYW5PcihbYXJnMSEsIGFyZzIhXSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9rZW4udmFsdWUgPT09ICdBTkQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZzIgPSBleHBsYW5hdGlvblN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmcxID0gZXhwbGFuYXRpb25TdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgZXhwbGFuYXRpb25TdGFjay5wdXNoKEV4cGxhbmF0aW9uLmJvb2xlYW5BbmQoW2FyZzEhLCBhcmcyIV0pKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuLnZhbHVlID09PSAnWE9SJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmcyID0gZXhwbGFuYXRpb25TdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJnMSA9IGV4cGxhbmF0aW9uU3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIGV4cGxhbmF0aW9uU3RhY2sucHVzaChFeHBsYW5hdGlvbi5ib29sZWFuWG9yKFthcmcxISwgYXJnMiFdKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1Vuc3VwcG9ydGVkIG9wZXJhdG9yOiAnICsgdG9rZW4udmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1Vuc3VwcG9ydGVkIHRva2VuIHR5cGU6ICcgKyB0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXZlbnR1YWxseSB0aGUgRXhwbGFuYXRpb24gaXMgdGhlIG9ubHkgaXRlbSBsZWZ0IGluIHRoZSBib29sZWFuIHN0YWNrXG4gICAgICAgIHJldHVybiBleHBsYW5hdGlvblN0YWNrWzBdO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7IFRhc2sgfSBmcm9tICcuLi8uLi9UYXNrJztcbmltcG9ydCB7IFRleHRGaWVsZCB9IGZyb20gJy4vVGV4dEZpZWxkJztcblxuLyoqIFN1cHBvcnQgdGhlICdmaWxlbmFtZScgc2VhcmNoIGluc3RydWN0aW9uLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBhbHNvIHNlYXJjaGVzIHRoZSBmaWxlIGV4dGVuc2lvbixcbiAqIHNvICdmaWxlbmFtZSBpbmNsdWRlcyAubWQnIHdpbGwgdHlwaWNhbGx5IG1hdGNoIGFsbCB0YXNrcy5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWxlbmFtZUZpZWxkIGV4dGVuZHMgVGV4dEZpZWxkIHtcbiAgICBwdWJsaWMgZmllbGROYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAnZmlsZW5hbWUnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGZpbGUgbmFtZSBpbmNsdWRpbmcgZmlsZSBleHRlbnNpb24sIG9yIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgdGFzayBkb2VzIG5vdCBoYXZlIGEgZmlsZW5hbWVcbiAgICAgKiBAcGFyYW0gdGFza1xuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBwdWJsaWMgdmFsdWUodGFzazogVGFzayk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gdGFzay5maWxlbmFtZTtcbiAgICAgICAgaWYgKGZpbGVuYW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbGVuYW1lICsgJy5tZCc7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IERlc2NyaXB0aW9uRmllbGQgfSBmcm9tICcuL0ZpbHRlci9EZXNjcmlwdGlvbkZpZWxkJztcbmltcG9ydCB7IERvbmVEYXRlRmllbGQgfSBmcm9tICcuL0ZpbHRlci9Eb25lRGF0ZUZpZWxkJztcbmltcG9ydCB7IER1ZURhdGVGaWVsZCB9IGZyb20gJy4vRmlsdGVyL0R1ZURhdGVGaWVsZCc7XG5pbXBvcnQgeyBFeGNsdWRlU3ViSXRlbXNGaWVsZCB9IGZyb20gJy4vRmlsdGVyL0V4Y2x1ZGVTdWJJdGVtc0ZpZWxkJztcbmltcG9ydCB7IEhlYWRpbmdGaWVsZCB9IGZyb20gJy4vRmlsdGVyL0hlYWRpbmdGaWVsZCc7XG5pbXBvcnQgeyBQYXRoRmllbGQgfSBmcm9tICcuL0ZpbHRlci9QYXRoRmllbGQnO1xuaW1wb3J0IHsgUHJpb3JpdHlGaWVsZCB9IGZyb20gJy4vRmlsdGVyL1ByaW9yaXR5RmllbGQnO1xuaW1wb3J0IHsgU2NoZWR1bGVkRGF0ZUZpZWxkIH0gZnJvbSAnLi9GaWx0ZXIvU2NoZWR1bGVkRGF0ZUZpZWxkJztcbmltcG9ydCB7IFN0YXJ0RGF0ZUZpZWxkIH0gZnJvbSAnLi9GaWx0ZXIvU3RhcnREYXRlRmllbGQnO1xuaW1wb3J0IHsgSGFwcGVuc0RhdGVGaWVsZCB9IGZyb20gJy4vRmlsdGVyL0hhcHBlbnNEYXRlRmllbGQnO1xuaW1wb3J0IHsgUmVjdXJyaW5nRmllbGQgfSBmcm9tICcuL0ZpbHRlci9SZWN1cnJpbmdGaWVsZCc7XG5pbXBvcnQgeyBTdGF0dXNGaWVsZCB9IGZyb20gJy4vRmlsdGVyL1N0YXR1c0ZpZWxkJztcbmltcG9ydCB7IFRhZ3NGaWVsZCB9IGZyb20gJy4vRmlsdGVyL1RhZ3NGaWVsZCc7XG5pbXBvcnQgeyBCb29sZWFuRmllbGQgfSBmcm9tICcuL0ZpbHRlci9Cb29sZWFuRmllbGQnO1xuaW1wb3J0IHsgRmlsZW5hbWVGaWVsZCB9IGZyb20gJy4vRmlsdGVyL0ZpbGVuYW1lRmllbGQnO1xuXG5pbXBvcnQgdHlwZSB7IEZpbHRlck9yRXJyb3JNZXNzYWdlIH0gZnJvbSAnLi9GaWx0ZXIvRmlsdGVyJztcblxuY29uc3QgZmllbGRDcmVhdG9ycyA9IFtcbiAgICAoKSA9PiBuZXcgU3RhdHVzRmllbGQoKSxcbiAgICAoKSA9PiBuZXcgUmVjdXJyaW5nRmllbGQoKSxcbiAgICAoKSA9PiBuZXcgUHJpb3JpdHlGaWVsZCgpLFxuICAgICgpID0+IG5ldyBIYXBwZW5zRGF0ZUZpZWxkKCksXG4gICAgKCkgPT4gbmV3IFN0YXJ0RGF0ZUZpZWxkKCksXG4gICAgKCkgPT4gbmV3IFNjaGVkdWxlZERhdGVGaWVsZCgpLFxuICAgICgpID0+IG5ldyBEdWVEYXRlRmllbGQoKSxcbiAgICAoKSA9PiBuZXcgRG9uZURhdGVGaWVsZCgpLFxuICAgICgpID0+IG5ldyBQYXRoRmllbGQoKSxcbiAgICAoKSA9PiBuZXcgRGVzY3JpcHRpb25GaWVsZCgpLFxuICAgICgpID0+IG5ldyBUYWdzRmllbGQoKSxcbiAgICAoKSA9PiBuZXcgSGVhZGluZ0ZpZWxkKCksXG4gICAgKCkgPT4gbmV3IEV4Y2x1ZGVTdWJJdGVtc0ZpZWxkKCksXG4gICAgKCkgPT4gbmV3IEJvb2xlYW5GaWVsZCgpLFxuICAgICgpID0+IG5ldyBGaWxlbmFtZUZpZWxkKCksXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VGaWx0ZXIoZmlsdGVyU3RyaW5nOiBzdHJpbmcpOiBGaWx0ZXJPckVycm9yTWVzc2FnZSB8IG51bGwge1xuICAgIGZvciAoY29uc3QgY3JlYXRvciBvZiBmaWVsZENyZWF0b3JzKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gY3JlYXRvcigpO1xuICAgICAgICBpZiAoZmllbGQuY2FuQ3JlYXRlRmlsdGVyRm9yTGluZShmaWx0ZXJTdHJpbmcpKSByZXR1cm4gZmllbGQuY3JlYXRlRmlsdGVyT3JFcnJvck1lc3NhZ2UoZmlsdGVyU3RyaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4iLCAiLyoqXG4gKiBHcm91cEhlYWRpbmcgY29udGFpbnMgdGhlIGRhdGEgbmVlZGVkIHRvIHJlbmRlciBvbmUgaGVhZGluZyBmb3IgYSBncm91cCBvZiB0YXNrc1xuICovXG5leHBvcnQgY2xhc3MgR3JvdXBIZWFkaW5nIHtcbiAgICAvKipcbiAgICAgKiBIb3cgbmVzdGVkIHRoZSBoZWFkaW5nIGlzLlxuICAgICAqIDAgaXMgdGhlIGZpcnN0IGdyb3VwLCBtZWFuaW5nIHRoaXMgaGVhZGluZyB3YXMgZ2VuZXJhdGVkIGJ5XG4gICAgICogdGhlIGZpcnN0ICdncm91cCBieScgaW5zdHJ1Y3Rpb24uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IG5lc3RpbmdMZXZlbDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgdG8gYmUgZGlzcGxheWVkIGZvciB0aGUgZ3JvdXAuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIEdyb3VwSGVhZGluZyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbmVzdGluZ0xldmVsIC0gU2VlIHRoaXMubmVzdGluZ0xldmVsIGZvciBkZXRhaWxzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgdGV4dCB0byBiZSBkaXNwbGF5ZWQgZm9yIHRoZSBncm91cFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5lc3RpbmdMZXZlbDogbnVtYmVyLCBuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5uZXN0aW5nTGV2ZWwgPSBuZXN0aW5nTGV2ZWw7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IEdyb3VwSGVhZGluZyB9IGZyb20gJy4vR3JvdXBIZWFkaW5nJztcbmltcG9ydCB0eXBlIHsgSW50ZXJtZWRpYXRlVGFza0dyb3Vwc1N0b3JhZ2UgfSBmcm9tICcuL0ludGVybWVkaWF0ZVRhc2tHcm91cHMnO1xuXG4vKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb2YgR3JvdXAudHNcbiAqL1xuXG4vKipcbiAqIEV4cGxhbmF0aW9uIG9mIHRoZSBhbGdvcml0aG1zIHVzZWQgaGVyZS5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIHRleHQgaXMgdGFrZW4gZnJvbVxuICogaHR0cHM6Ly9kaXNjb3JkLmNvbS9jaGFubmVscy82ODYwNTM3MDgyNjEyMjg1NzcvODQwMjg2MjY0OTY0MDIyMzAyLzk1NTI0MDgxMjk3MzgwOTY3NFxuICpcbiAqIFRoZSBQcm9ibGVtXG4gKiA9PT09PT09PT09PVxuICpcbiAqIEltYWdpbmUgdGhhdCB0aGUgdXNlciBoYXMgc3VwcGxpZWQgMyAnZ3JvdXAgYnknIGluc3RydWN0aW9ucywgYW5kIGluIG9yZGVyXG4gKiB0byBwcmVzZW50IHRoZSByZXN1bHRzLCB3ZSBzaW1wbHkgY29uY2F0ZW5hdGUgdGhlIGdyb3VwIG5hbWVzIHRvZ2V0aGVyXG4gKiB3aXRoICc+Jy5cbiAqXG4gKiBTbyB0aGUgZGlzcGxheSBtaWdodCBsb29rIHNvbWV0aGluZyBsaWtlOlxuICogICAgICAjIyMjIDEwLjAgPiAyMDIyLTAzLTIwID4gU29tZSBoZWFkaW5nIG5hbWVcbiAqICAgICAgLSB0YXNrIDFcbiAqICAgICAgLSB0YXNrIDJcbiAqICAgICAgIyMjIyAxMC4wID4gMjAyMi0wMy0yMiA+IFNvbWUgaGVhZGluZyBuYW1lXG4gKiAgICAgIC0gdGFzayA3XG4gKiAgICAgIC0gdGFzayA5XG4gKlxuICogVGhlIGhlYWRpbmdzIGdldCB2ZXJ5IGhhcmQgdG8gcmVhZCwgdmVyeSBxdWlja2x5LlxuICpcbiAqIFdoYXQgd2Ugd2FudCBpbnN0ZWFkIGlzOlxuICogICAgICAjIyMjIDEwLjBcbiAqICAgICAgIyMjIyMgMjAyMi0wMy0yMFxuICogICAgICAjIyMjIyMgU29tZSBoZWFkaW5nIG5hbWVcbiAqICAgICAgLSB0YXNrIDFcbiAqICAgICAgLSB0YXNrIDJcbiAqICAgICAgIyMjIyMgMjAyMi0wMy0yMlxuICogICAgICAjIyMjIyMgU29tZSBoZWFkaW5nIG5hbWVcbiAqICAgICAgLSB0YXNrIDdcbiAqICAgICAgLSB0YXNrIDlcbiAqXG4gKiBJJ20gc3RydWdnbGluZyB0byBnZXQgbXkgaGVhZCBhcm91bmQgaG93LCBpbiBUUywgSSBjYW4gc3RvcmUgc29tZXRoaW5nIGxpa2UgYSB0cmVlIHN0cnVjdHVyZSxcbiAqIG9mIGFyYml0cmFyeSBkZXB0aCAtIHRvIHJlcHJlc2VudCB0aGUgZ3JvdXBlZCB0YXNrcy5cbiAqXG4gKiBwamVieSdzIGFuc3dlclxuICogPT09PT09PT09PT09PT1cbiAqXG4gKiBVc2VyIHBqZWJ5IHJlcGxpZWQ6XG4gKiBodHRwczovL2Rpc2NvcmQuY29tL2NoYW5uZWxzLzY4NjA1MzcwODI2MTIyODU3Ny84NDAyODYyNjQ5NjQwMjIzMDIvOTU1NTc5NTYwMDM0OTgzOTQ2XG4gKlxuICogSWYgYWxsIHlvdSdyZSBkb2luZyBpcyBnZW5lcmF0aW5nIGhlYWRpbmdzLCB0aGUgc2ltcGxlIGFsZ29yaXRobSB3b3VsZCBiZSB0byBzb3J0IGV2ZXJ5dGhpbmcgYnkgYSBtdWx0aS12YWx1ZSBrZXkgLVxuICogaS5lLiwgW2xldmVsIDEsIGxldmVsIDIsIC4uLiwgaXRlbSBzb3J0IGtleV0gLS0gdGhlbiBpdGVyYXRlIHRoZSB3aG9sZSBsaXN0IGFuZCBvdXRwdXQgYSBoZWFkaW5nIGZvciBlYWNoIGxldmVsXG4gKiB3aGVyZSB0aGUgdmFsdWUgY2hhbmdlZC5cbiAqXG4gKiBpLmUuLCB5b3Ugc3RhcnQgd2l0aCBhIFtudWxsLCBudWxsLCBudWxsLCBudWxsLi4uLl0gXCJsYXN0IHNlZW5cIiBhcnJheSBhbmQgY29tcGFyZSBpdCBpdGVtIGJ5IGl0ZW0gdG8gdGhlIGN1cnJlbnRcbiAqIGl0ZW0ncyBkYXRhLCBhbmQgb3V0cHV0IGEgaGVhZGluZyBvZiB0aGUgY29ycmVjdCBsZXZlbCBpZiB0aGVyZSdzIGEgY2hhbmdlLCB1cGRhdGluZyB0aGUgaXRlbSBpbiB5b3VyXG4gKiBcImxhc3Qgc2VlblwiIGFycmF5LlxuICpcbiAqIGkuZS4gaWYgdGhlIGZpcnN0IGl0ZW0gaXMgZGlmZmVyZW50LCBvdXRwdXQgYW4gSDEgZm9yIHRoZSBuZXcgdmFsdWUgYW5kIHNldCB0aGUgcmVzdCBvZiB0aGUgYXJyYXkgdG8gbnVsbC5cbiAqIElmIHRoZSBzZWNvbmQgaXRlbSBpcyBhbHNvIGRpZmZlcmVudCwgb3V0cHV0IGFuIEgyLCBzYXZlIHRoZSB2YWx1ZSwgc2V0IHRoZSByZXN0IHRvIG51bGwsIGFuZCBzbyBvbi5cbiAqIEFmdGVyIGFsbCB0aGUgbGV2ZWxzIGFyZSBjaGVja2VkLCBvdXRwdXQgdGhlIGFjdHVhbCBpdGVtLlxuICogSWYgdGhlcmUgYXJlIG5vIGNoYW5nZXMsIHRoZW4gYmFzaWNhbGx5IHlvdSdsbCBqdXN0IGJlIG91dHB1dHRpbmcgdGhlIGl0ZW0uXG4gKiBObyB0cmVlcyBvciBncmFwaHMgb3Igd2hhdG5vdCBuZWVkZWQuXG4gKlxuICogWW91IGNvdWxkIGFsc28ganVzdCBrZWVwIHRoZSBsYXN0IGl0ZW0gYW5kIHNldCBhIGZsYWcgYXMgc29vbiBhcyBzb21ldGhpbmcgZG9lc24ndCBtYXRjaCwgYW5kIGtlZXAgb3V0cHV0dGluZ1xuICogaGVhZGluZ3MgYXMgc29vbiBhcyB0aGUgZmxhZyBpcyBzZXQuXG4gKlxuICogV2hhdCB0aGUgY29kZSBkb2VzXG4gKiA9PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBUaGUgSW50ZXJtZWRpYXRlVGFza0dyb3VwcyBjbGFzcyBiZWxvdyBkb2VzIHRoZSBpbml0aWFsIGdyb3VwaW5nIGFuZCBzb3J0aW5nLlxuICpcbiAqIFRoZSBHcm91cEhlYWRpbmdzIGNsYXNzIGJlbG93IGltcGxlbWVudHMgcGplYnkncyBoZWFkaW5nIGRldGVjdGlvbiBhbGdvcml0aG0sIGJ1dCBpbnN0ZWFkIG9mIGRvaW5nIHRoZSBwcmludGluZyBkaXJlY3RseSxcbiAqIGl0IHJldHVybnMgdGhlIGNhbGN1bGF0ZWQgaGVhZGluZyBsZXZlbHMgaW4gYW4gYXJyYXkgb2YgR3JvdXBIZWFkaW5nIG9iamVjdHMsIGZvciBsYXRlciB1c2UgaW4gUXVlcnlSZW5kZXJlci50cy5cbiAqL1xuXG4vKipcbiAqIEdyb3VwSGVhZGluZ3MgY2FsY3VsYXRlcyB3aGljaCBoZWFkaW5ncyBuZWVkIHRvIGJlIGRpc3BsYXllZCwgZm9yXG4gKiBhIGdpdmVuIGdyb3VwIG9mIHRhc2tzLlxuICpcbiAqIFNlZSB0aGUgZXhwbGFuYXRpb24gaW4gR3JvdXBIZWFkaW5ncy50cyBmb3IgaG93IGl0IHdvcmtzLlxuICovXG5leHBvcnQgY2xhc3MgR3JvdXBIZWFkaW5ncyB7XG4gICAgcHJpdmF0ZSBsYXN0SGVhZGluZ0F0TGV2ZWwgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuXG4gICAgY29uc3RydWN0b3IoZ3JvdXBlZFRhc2tzOiBJbnRlcm1lZGlhdGVUYXNrR3JvdXBzU3RvcmFnZSkge1xuICAgICAgICBjb25zdCBmaXJzdEdyb3VwID0gZ3JvdXBlZFRhc2tzLmtleXMoKS5uZXh0KCkudmFsdWU7XG4gICAgICAgIGNvbnN0IGdyb3VwQ291bnQgPSBmaXJzdEdyb3VwLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMubGFzdEhlYWRpbmdBdExldmVsLnB1c2goJycpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBtaW5pbWFsIHNldCBvZiBoZWFkaW5ncyB0aGF0IHNob3VsZCBiZSBkaXNwbGF5ZWRcbiAgICAgKiBiZWZvcmUgdGhlIHRhc2tzIHdpdGggdGhlIGdpdmVuIGdyb3VwIG5hbWVzLlxuICAgICAqXG4gICAgICogRGF0YSBmb3IgZWFjaCByZXF1aXJlZCBoZWFkaW5nIGlzIHN0b3JlZCBpbiBhIEdyb3VwSGVhZGluZyBvYmplY3QuXG4gICAgICogQHBhcmFtIGdyb3VwTmFtZXMgMCBvciBtb3JlIGdyb3VwIG5hbWVzLCBvbmUgcGVyICdncm91cCBieScgbGluZVxuICAgICAqL1xuICAgIGdldEhlYWRpbmdzRm9yVGFza0dyb3VwKGdyb3VwTmFtZXM6IHN0cmluZ1tdKTogR3JvdXBIZWFkaW5nW10ge1xuICAgICAgICAvLyBTZWUgJ3BqZWJ5J3MgYW5zd2VyJyBhYm92ZSBmb3IgYW4gZXhwbGFuYXRpb24gb2YgdGhpcyBhbGdvcml0aG0uXG4gICAgICAgIGNvbnN0IGhlYWRpbmdzRm9yR3JvdXAgPSBuZXcgQXJyYXk8R3JvdXBIZWFkaW5nPigpO1xuICAgICAgICBmb3IgKGxldCBsZXZlbCA9IDA7IGxldmVsIDwgZ3JvdXBOYW1lcy5sZW5ndGg7IGxldmVsKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gZ3JvdXBOYW1lc1tsZXZlbF07XG4gICAgICAgICAgICBpZiAoZ3JvdXAgIT0gdGhpcy5sYXN0SGVhZGluZ0F0TGV2ZWxbbGV2ZWxdKSB7XG4gICAgICAgICAgICAgICAgaGVhZGluZ3NGb3JHcm91cC5wdXNoKG5ldyBHcm91cEhlYWRpbmcobGV2ZWwsIGdyb3VwKSk7XG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgYWxsIHRoZSBsb3dlciBoZWFkaW5nIGxldmVscyB0byB1bi1zZWVuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGxldmVsOyBqIDwgZ3JvdXBOYW1lcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RIZWFkaW5nQXRMZXZlbFtqXSA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RIZWFkaW5nQXRMZXZlbFtsZXZlbF0gPSBncm91cDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGVhZGluZ3NGb3JHcm91cDtcbiAgICB9XG59XG4iLCAiLyoqXG4gKiBBIG5vZGUgaW4gdGhlIGdyb3VwaW5nIHRyZWUuIFRoZSBub2RlIGNvbnRhaW5zIHRoZVxuICogbGlzdCBvZiB2YWx1ZXMgbWF0Y2hpbmcgdGhlIHBhdGggZnJvbSB0aGUgcm9vdCBzbyBmYXIsIGFuZCBpdHMgY2hpbGRyZW5cbiAqIGFyZSB0aGUgZnVydGhlciBncm91cGluZyBvZiB0aG9zZSB2YWx1ZXMuXG4gKlxuICovXG5leHBvcnQgY2xhc3MgR3JvdXBpbmdUcmVlTm9kZTxUPiB7XG4gICAgY2hpbGRyZW46IE1hcDxzdHJpbmcsIEdyb3VwaW5nVHJlZU5vZGU8VD4+ID0gbmV3IE1hcCgpO1xuICAgIHZhbHVlczogVFtdID0gW107XG5cbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZXM6IFRbXSkge1xuICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSB0aGUgdHJlZSB0byBnZW5lcmF0ZSBhbGwgdGhlIHBhdGhzIHRvIHRoZSBsZWF2ZXMuXG4gICAgICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgbWFwIGZyb20gZXZlcnkgbGVhZiBwYXRoLCB0byB0aGUgbGlzdCBvZiB2YWx1ZXNcbiAgICAgKiBtYXRjaGluZyB0aGlzIHBhdGguXG4gICAgICogTk9URTogVGhlIG5vZGUgaXRzZWxmIGRvZXNuJ3QgZ2V0IGluY2x1ZGVkIGluIHRoZSBnZW5lcmF0ZWQgcGF0aHMuXG4gICAgICovXG4gICAgZ2VuZXJhdGVBbGxQYXRocyhwYXRoU29GYXI6IHN0cmluZ1tdID0gW10pOiBNYXA8c3RyaW5nW10sIFRbXT4ge1xuICAgICAgICBjb25zdCByZXN1bHRNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLnNpemUgPT0gMCkge1xuICAgICAgICAgICAgLy8gQmFzZSBjYXNlOiBMZWFmIG5vZGUuIFBvcHVsYXRlIHRoZSByZXN1bHRzIG1hcCB3aXRoIHRoZSBwYXRoIHRvXG4gICAgICAgICAgICAvLyB0aGlzIG5vZGUsIGFuZCB0aGUgdmFsdWVzIHRoYXQgbWF0Y2ggdGhpcyBwYXRoLlxuICAgICAgICAgICAgcmVzdWx0TWFwLnNldChbLi4ucGF0aFNvRmFyXSwgdGhpcy52YWx1ZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdE1hcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgW3Byb3BlcnR5LCBjaGlsZF0gb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgcGF0aFNvRmFyLnB1c2gocHJvcGVydHkpO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRSZXN1bHQgPSBjaGlsZC5nZW5lcmF0ZUFsbFBhdGhzKHBhdGhTb0Zhcik7XG4gICAgICAgICAgICBjaGlsZFJlc3VsdC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiByZXN1bHRNYXAuc2V0KGtleSwgdmFsdWUpKTtcbiAgICAgICAgICAgIHBhdGhTb0Zhci5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0TWFwO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7IFRhc2sgfSBmcm9tICcuLi9UYXNrJztcbmltcG9ydCB0eXBlIHsgR3JvdXBpbmcgfSBmcm9tICcuL1F1ZXJ5JztcbmltcG9ydCB7IEdyb3VwIH0gZnJvbSAnLi9Hcm91cCc7XG5pbXBvcnQgeyBHcm91cGluZ1RyZWVOb2RlIH0gZnJvbSAnLi9Hcm91cGluZ1RyZWVOb2RlJztcblxuLyoqXG4gKiBTdG9yYWdlIHVzZWQgZm9yIHRoZSBpbml0aWFsIGdyb3VwaW5nIHRvZ2V0aGVyIG9mIHRhc2tzLlxuICpcbiAqIFRoZSBrZXlzIG9mIHRoZSBtYXAgYXJlIHRoZSBuYW1lcyBvZiB0aGUgZ3JvdXBzLlxuICogRm9yIGV4YW1wbGUsIG9uZSBzZXQgb2Yga2V5cyBtaWdodCBiZSBbJ0ZvbGRlciBOYW1lLycsICdGaWxlIE5hbWUnXVxuICogYW5kIHRoZSB2YWx1ZXMgd291bGQgYmUgYWxsIHRoZSBtYXRjaGluZyBUYXNrcyBmcm9tIHRoYXQgZmlsZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEludGVybWVkaWF0ZVRhc2tHcm91cHNTdG9yYWdlIGV4dGVuZHMgTWFwPHN0cmluZ1tdLCBUYXNrW10+IHt9XG5cbi8qXG4gKiBBIHRyZWUgb2YgdGFza3Mgd2hlcmUgZXZlcnkgbGV2ZWwgaW4gdGhlIHRyZWUgY29ycmVzcG9uZHMgdG8gYSBncm91cGluZyBwcm9wZXJ0eS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaWYgd2UgaGF2ZTpcbiAqICMgSGVhZGluZyAxXG4gKiAtIFsgXSBUYXNrIDFcbiAqICMgSGVhZGluZyAyXG4gKiAtIFsgXSBUYXNrIDJcbiAqIC0gW1hdIFRhc2sgM1xuICpcbiAqIEFuZCB3ZSBncm91cCBieSBoZWFkaW5nIHRoZW4gc3RhdHVzLCB0aGUgdHJlZSB3aWxsIGxvb2sgbGlrZTpcbiAqXG4gKiAgICAgICAgICAgICAgICAgICBSb290IFtUMSwgVDIsIFQzXVxuICogICAgICAgICAgICAgICAgICAgICAvICAgICAgICAgICAgICBcXFxuICogICAgICAgICAgICAgIEhlYWRpbmcgMSBbVDFdICAgICBIZWFkaW5nIFtUMiwgVDNdXG4gKiAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgLyAgICAgICAgXFxcbiAqICAgICAgICAgICAgICAgVE9ETyBbVDFdICAgICBUT0RPIFtUMl0gICAgRG9uZSBbVDNdXG4gKlxuICogVGhlIG5pY2UgcHJvcGVydHkgb2YgdGhpcyB0cmVlIGlzIHRoYXQgZXZlcnkgcGF0aCBmcm9tIHRoZSByb290IHRvIGEgbGVhZiwgbWFwc1xuICogdG8gaG93IHRoZSB0YXNrcyB3aWxsIGJlIHJlbmRlcmVkLlxuICpcbiAqIE5PVEU6IFRoZSBzYW1lIHRhc2sgY2FuIGFwcGVhciBpbiBtdWx0aXBsZSBsZWFmIG5vZGVzLCBpZiBpdCBtYXRjaGVzIG11bHRpcGxlIHBhdGhzLlxuICovXG5jbGFzcyBUYXNrR3JvdXBpbmdUcmVlTm9kZSBleHRlbmRzIEdyb3VwaW5nVHJlZU5vZGU8VGFzaz4ge31cblxuLyoqXG4gKiBJbnRlcm1lZGlhdGVUYXNrR3JvdXBzIGRvZXMgdGhlIGluaXRpYWwgZ3JvdXBpbmcgdG9nZXRoZXIgb2YgdGFza3MsXG4gKiBpbiBhbHBoYWJldGljYWwgb3JkZXIgYnkgZ3JvdXAgbmFtZXMuXG4gKlxuICogSXQgaXMgZXNzZW50aWFsbHkgYSB0aGluIHdyYXBwZXIgYXJvdW5kIE1hcCAtIHNlZSBJbnRlcm1lZGlhdGVUYXNrR3JvdXBzU3RvcmFnZS5cbiAqXG4gKiBJdCBpcyBuYW1lZCBcIkludGVybWVkaWF0ZVwiIGJlY2F1c2UgaXRzIHJlc3VsdHMgYXJlIG9ubHkgdGVtcG9yYXJ5LlxuICogVGhleSB3aWxsIGJlIGRpc2NhcmRlZCBvbmNlIHRoZSBmaW5hbCBUYXNrR3JvdXBzIG9iamVjdCBpcyBjcmVhdGVkLlxuICpcbiAqIElkZWFsbHksIHRoaXMgY29kZSB3b3VsZCBiZSBzaW1wbGlmaWVkIGFuZCBtb3ZlZCBpbiB0byBUYXNrR3JvdXBzLlxuICovXG5leHBvcnQgY2xhc3MgSW50ZXJtZWRpYXRlVGFza0dyb3VwcyB7XG4gICAgcHVibGljIGdyb3VwcyA9IG5ldyBJbnRlcm1lZGlhdGVUYXNrR3JvdXBzU3RvcmFnZSgpO1xuXG4gICAgLyoqXG4gICAgICogR3JvdXAgYSBsaXN0IG9mIHRhc2tzLCBhY2NvcmRpbmcgdG8gb25lIG9yIG1vcmUgdGFzayBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIGdyb3VwaW5ncyAwIG9yIG1vcmUgR3JvdXBpbmcgdmFsdWVzLCBvbmUgcGVyICdncm91cCBieScgbGluZVxuICAgICAqIEBwYXJhbSB0YXNrcyBUaGUgdGFza3MgdGhhdCBtYXRjaCB0aGUgdGFzayBibG9jaydzIFF1ZXJ5XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZ3JvdXBpbmdzOiBHcm91cGluZ1tdLCB0YXNrczogVGFza1tdKSB7XG4gICAgICAgIGNvbnN0IHRyZWUgPSB0aGlzLmJ1aWxkR3JvdXBpbmdUcmVlKGdyb3VwaW5ncywgdGFza3MpO1xuICAgICAgICB0aGlzLmdyb3VwcyA9IHRyZWUuZ2VuZXJhdGVBbGxQYXRocygpO1xuICAgICAgICB0aGlzLmdyb3VwcyA9IHRoaXMuZ2V0U29ydGVkR3JvdXBzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGdyb3VwaW5nIHRyZWUgdGhhdCBncm91cHMgdGhlIHBhc3NlZCBAdGFza3MgYnkgdGhlIHBhc3NlZCBAZ3JvdXBpbmdzLlxuICAgICAqL1xuICAgIHByaXZhdGUgYnVpbGRHcm91cGluZ1RyZWUoZ3JvdXBpbmdzOiBHcm91cGluZ1tdLCB0YXNrczogVGFza1tdKTogVGFza0dyb3VwaW5nVHJlZU5vZGUge1xuICAgICAgICAvLyBUaGUgdHJlZSBpcyBidWlsZCBsYXllciBieSBsYXllciwgc3RhcnRpbmcgZnJvbSB0aGUgcm9vdC5cbiAgICAgICAgLy8gQXQgZXZlcnkgbGV2ZWwsIHdlIGl0ZXJhdGUgb24gdGhlIG5vZGVzIG9mIHRoYXQgbGV2ZWwgdG8gZ2VuZXJhdGVcbiAgICAgICAgLy8gdGhlIG5leHQgb25lIHVzaW5nIHRoZSBuZXh0IGdyb3VwaW5nLlxuXG4gICAgICAgIC8vIFRoZSByb290IG9mIHRoZSB0cmVlIGNvbnRhaW5zIGFsbCB0aGUgdGFza3MuXG4gICAgICAgIGNvbnN0IHJvb3QgPSBuZXcgVGFza0dyb3VwaW5nVHJlZU5vZGUodGFza3MpO1xuXG4gICAgICAgIGxldCBjdXJyZW50VHJlZUxldmVsID0gW3Jvb3RdO1xuICAgICAgICBmb3IgKGNvbnN0IGdyb3VwaW5nIG9mIGdyb3VwaW5ncykge1xuICAgICAgICAgICAgY29uc3QgbmV4dFRyZWVMZXZlbCA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjdXJyZW50VHJlZU5vZGUgb2YgY3VycmVudFRyZWVMZXZlbCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGFzayBvZiBjdXJyZW50VHJlZU5vZGUudmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwTmFtZXMgPSBHcm91cC5nZXRHcm91cE5hbWVzRm9yVGFzayhncm91cGluZy5wcm9wZXJ0eSwgdGFzayk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZ3JvdXBOYW1lIG9mIGdyb3VwTmFtZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IGN1cnJlbnRUcmVlTm9kZS5jaGlsZHJlbi5nZXQoZ3JvdXBOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBuZXcgVGFza0dyb3VwaW5nVHJlZU5vZGUoW10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUcmVlTm9kZS5jaGlsZHJlbi5zZXQoZ3JvdXBOYW1lLCBjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFRyZWVMZXZlbC5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnZhbHVlcy5wdXNoKHRhc2spO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFRyZWVMZXZlbCA9IG5leHRUcmVlTGV2ZWw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFNvcnRlZEdyb3VwcygpIHtcbiAgICAgICAgLy8gZ3JvdXBzLmtleXMoKSB3aWxsIGluaXRpYWxseSBiZSBpbiB0aGUgb3JkZXIgdGhlIGVudHJpZXMgd2VyZSBhZGRlZCxcbiAgICAgICAgLy8gc28gZWZmZWN0aXZlbHkgcmFuZG9tLlxuICAgICAgICAvLyBSZXR1cm4gYSBkdXBsaWNhdGUgbWFwLCB3aXRoIHRoZSBrZXlzICh0aGF0IGlzLCBncm91cCBuYW1lcykgc29ydGVkIGluIGFscGhhYmV0aWNhbCBvcmRlcjpcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRlcm1lZGlhdGVUYXNrR3JvdXBzU3RvcmFnZShbLi4udGhpcy5ncm91cHMuZW50cmllcygpXS5zb3J0KCkpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7IFRhc2sgfSBmcm9tICcuLi9UYXNrJztcbmltcG9ydCB0eXBlIHsgR3JvdXBIZWFkaW5nIH0gZnJvbSAnLi9Hcm91cEhlYWRpbmcnO1xuXG4vKipcbiAqIFRhc2tHcm91cCBzdG9yZXMgYSBzaW5nbGUgZ3JvdXAgb2YgdGFza3MsIHRoYXQgYWxsIHNoYXJlIHRoZSBzYW1lIGdyb3VwIG5hbWVzLlxuICogVGFza0dyb3VwIG9iamVjdHMgYXJlIHN0b3JlZCBpbiBhIFRhc2tHcm91cHMgb2JqZWN0LlxuICpcbiAqIEZvciBleGFtcGxlLCBpZiB0aGUgdXNlciBzdXBwbGllZCB0aGVzZSAnZ3JvdXAgYnknIGxpbmVzOlxuICogICBncm91cCBieSBmb2xkZXJcbiAqICAgZ3JvdXAgYnkgZmlsZW5hbWVcbiAqICAgZ3JvdXAgYnkgaGVhZGluZ1xuICogVGhlbiB0aGUgbmFtZXMgb2Ygb25lIFRhc2tHcm91cCBtaWdodCBiZSB0aGlzOlxuICogICBTb21lL0ZvbGRlci9Jbi9UaGUvVmF1bHRcbiAqICAgQSBQYXJ0aWN1bGFyIEZpbGUgTmFtZVxuICogICBNeSBsb3ZlbHkgaGVhZGluZ1xuICogQW5kIHRoZSBUYXNrR3JvdXAgd291bGQgc3RvcmUgYWxsIHRoZSB0YXNrcyBmcm9tIHRoYXQgbG9jYXRpb25cbiAqIHRoYXQgbWF0Y2ggdGhlIHRhc2sgYmxvY2sncyBmaWx0ZXJzLCBpbiB0aGUgdGFzayBibG9jaydzIHNvcnQgb3JkZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFRhc2tHcm91cCB7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWVzIG9mIHRoZSBncm91cCBwcm9wZXJ0aWVzIGZvciB0aGlzIHNldCBvZiB0YXNrcyxcbiAgICAgKiBpbiB0aGUgb3JkZXIgb2YgdGhlICdncm91cCBieScgbGluZXMgdGhlIHVzZXIgc3BlY2lmaWVkXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGdyb3Vwczogc3RyaW5nW107XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaGVhZGluZ3MgdG8gYmUgZGlzcGxheWVkIGluIGZyb250IG9mIHRoaXMgc2V0IG9mIHRhc2tzLFxuICAgICAqIHdoZW4gcmVuZGVyaW5nIHRoZSByZXN1bHRzLlxuICAgICAqXG4gICAgICogSXQgb25seSBjb250YWlucyB0aGUgbWluaW1hbCBzZXQgb2YgaGVhZGluZ3MgcmVxdWlyZWQgdG8gc2VwYXJhdGVcbiAgICAgKiB0aGlzIGdyb3VwIG9mIHRhc2tzIGZyb20gdGhlIHByZXZpb3VzIGdyb3VwIG9mIHRhc2tzLlxuICAgICAqXG4gICAgICogSWYgdGhlcmUgd2VyZSBubyAnZ3JvdXAgYnknIGluc3RydWN0aW9ucyBpbiB0aGUgdGFza3MgY29kZSBibG9jayxcbiAgICAgKiB0aGlzIHdpbGwgYmUgZW1wdHkuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGdyb3VwSGVhZGluZ3M6IEdyb3VwSGVhZGluZ1tdO1xuXG4gICAgLyoqXG4gICAgICogQWxsIHRoZSB0YXNrcyB0aGF0IG1hdGNoIHRoZSB1c2VyJ3MgZmlsdGVycyBhbmQgdGhhdCBoYXZlIHRoZVxuICAgICAqIGdyb3VwIG5hbWVzIGV4YWN0bHkgbWF0Y2hpbmcgZ3JvdXBzKCkuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IHRhc2tzOiBUYXNrW107XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgVGFza0dyb3VwXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gZ3JvdXBzIC0gU2VlIHRoaXMuZ3JvdXBzIGZvciBkZXRhaWxzXG4gICAgICogQHBhcmFtIHtHcm91cEhlYWRpbmdbXX0gZ3JvdXBIZWFkaW5ncyAtIFNlZSB0aGlzLmdyb3VwSGVhZGluZ3MgZm9yIGRldGFpbHNcbiAgICAgKiBAcGFyYW0gdGFza3Mge1Rhc2tbXX0gLSBTZWUgdGhpcy50YXNrcyBmb3IgZGV0YWlsc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGdyb3Vwczogc3RyaW5nW10sIGdyb3VwSGVhZGluZ3M6IEdyb3VwSGVhZGluZ1tdLCB0YXNrczogVGFza1tdKSB7XG4gICAgICAgIHRoaXMuZ3JvdXBzID0gZ3JvdXBzO1xuICAgICAgICB0aGlzLmdyb3VwSGVhZGluZ3MgPSBncm91cEhlYWRpbmdzO1xuICAgICAgICB0aGlzLnRhc2tzID0gdGFza3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBtYXJrZG93bi1mb3JtYXQgcmVwcmVzZW50YXRpb24gb2YgYWxsIHRoZSB0YXNrcyBpbiB0aGlzIGdyb3VwLlxuICAgICAqXG4gICAgICogVXNlZnVsIGZvciB0ZXN0aW5nLlxuICAgICAqL1xuICAgIHB1YmxpYyB0YXNrc0FzU3RyaW5nT2ZMaW5lcygpOiBzdHJpbmcge1xuICAgICAgICBsZXQgb3V0cHV0ID0gJyc7XG4gICAgICAgIGZvciAoY29uc3QgdGFzayBvZiB0aGlzLnRhc2tzKSB7XG4gICAgICAgICAgICBvdXRwdXQgKz0gdGFzay50b0ZpbGVMaW5lU3RyaW5nKCkgKyAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgaHVtYW4tcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB0YXNrIGdyb3VwLCBpbmNsdWRpbmcgbmFtZXNcbiAgICAgKiBhbmQgaGVhZGluZ3MgdGhhdCBzaG91bGQgYmUgZGlzcGxheWVkLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoaXMgaXMgdXNlZCBpbiBzbmFwc2hvdCB0ZXN0aW5nLCBzbyBpZiB0aGUgZm9ybWF0IGlzXG4gICAgICogY2hhbmdlZCwgdGhlIHNuYXBzaG90cyB3aWxsIG5lZWQgdG8gYmUgdXBkYXRlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IG91dHB1dCA9ICdcXG4nO1xuICAgICAgICBvdXRwdXQgKz0gYEdyb3VwIG5hbWVzOiBbJHt0aGlzLmdyb3Vwc31dXFxuYDtcblxuICAgICAgICBmb3IgKGNvbnN0IGhlYWRpbmcgb2YgdGhpcy5ncm91cEhlYWRpbmdzKSB7XG4gICAgICAgICAgICAvLyBUaGVzZSBoZWFkaW5ncyBtaW1pYyB0aGUgYmVoYXZpb3VyIG9mIFF1ZXJ5UmVuZGVyZXIsXG4gICAgICAgICAgICAvLyB3aGljaCB1c2VzICdoNCcsICdoNScgYW5kICdoNicgZm9yIG5lc3RlZCBncm91cHMuXG4gICAgICAgICAgICBjb25zdCBoZWFkaW5nUHJlZml4ID0gJyMnLnJlcGVhdCg0ICsgaGVhZGluZy5uZXN0aW5nTGV2ZWwpO1xuICAgICAgICAgICAgb3V0cHV0ICs9IGAke2hlYWRpbmdQcmVmaXh9ICR7aGVhZGluZy5uYW1lfVxcbmA7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXQgKz0gdGhpcy50YXNrc0FzU3RyaW5nT2ZMaW5lcygpO1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7IFRhc2sgfSBmcm9tICcuLi9UYXNrJztcbmltcG9ydCB0eXBlIHsgR3JvdXBpbmcgfSBmcm9tICcuL1F1ZXJ5JztcbmltcG9ydCB7IEdyb3VwSGVhZGluZ3MgfSBmcm9tICcuL0dyb3VwSGVhZGluZ3MnO1xuaW1wb3J0IHsgSW50ZXJtZWRpYXRlVGFza0dyb3VwcyB9IGZyb20gJy4vSW50ZXJtZWRpYXRlVGFza0dyb3Vwcyc7XG5pbXBvcnQgeyBUYXNrR3JvdXAgfSBmcm9tICcuL1Rhc2tHcm91cCc7XG5cbi8qKlxuICogVGFza0dyb3VwIHN0b3JlcyBhbGwgdGhlIGdyb3VwcyBvZiB0YXNrcyBnZW5lcmF0ZWQgYnkgYW55ICdncm91cCBieSdcbiAqIGluc3RydWN0aW9ucyBpbiB0aGUgdGFzayBibG9jay5cbiAqL1xuZXhwb3J0IGNsYXNzIFRhc2tHcm91cHMge1xuICAgIHByaXZhdGUgX2dyb3VwczogVGFza0dyb3VwW10gPSBuZXcgQXJyYXk8VGFza0dyb3VwPigpO1xuICAgIHByaXZhdGUgX3RvdGFsVGFza0NvdW50ID0gMDtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIGZvciBUYXNrR3JvdXBzXG4gICAgICogQHBhcmFtIHtHcm91cGluZ1tdfSBncm91cHMgLSAwIG9yIG1vcmUgR3JvdXBpbmcgdmFsdWVzLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSBwZXIgJ2dyb3VwIGJ5JyBsaW5lIGluIHRoZSB0YXNrIHF1ZXJ5IGJsb2NrXG4gICAgICogQHBhcmFtIHtUYXNrW119IHRhc2tzIC0gMCBtb3JlIG1vcmUgVGFzayBvYmplY3RzLCB3aXRoIGFsbCB0aGUgdGFza3NcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGluZyB0aGUgcXVlcnksIGFscmVhZHkgaW4gc29ydCBvcmRlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGdyb3VwczogR3JvdXBpbmdbXSwgdGFza3M6IFRhc2tbXSkge1xuICAgICAgICAvLyBHcm91cGluZyBkb2Vzbid0IGNoYW5nZSB0aGUgbnVtYmVyIG9mIHRhc2tzLCBhbmQgYWxsIHRoZSB0YXNrc1xuICAgICAgICAvLyB3aWxsIGJlIHNob3duIGluIGF0IGxlYXN0IG9uZSBncm91cC5cbiAgICAgICAgdGhpcy5fdG90YWxUYXNrQ291bnQgPSB0YXNrcy5sZW5ndGg7XG5cbiAgICAgICAgY29uc3QgaW5pdGlhbEdyb3VwcyA9IG5ldyBJbnRlcm1lZGlhdGVUYXNrR3JvdXBzKGdyb3VwcywgdGFza3MpO1xuICAgICAgICB0aGlzLmFkZFRhc2tzKGluaXRpYWxHcm91cHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFsbCB0aGUgdGFza3MgbWF0Y2hpbmcgdGhlIHF1ZXJ5LCBncm91cGVkIHRvZ2V0aGVyLCBhbmQgaW4gdGhlIG9yZGVyXG4gICAgICogdGhhdCB0aGV5IHNob3VsZCBiZSBkaXNwbGF5ZWQuXG4gICAgICovXG4gICAgcHVibGljIGdldCBncm91cHMoKTogVGFza0dyb3VwW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ3JvdXBzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB0b3RhbCBudW1iZXIgb2YgdGFza3MgbWF0Y2hpbmcgdGhlIHF1ZXJ5LlxuICAgICAqL1xuICAgIHB1YmxpYyB0b3RhbFRhc2tzQ291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90b3RhbFRhc2tDb3VudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGh1bWFuLXJlYWRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGFsbCB0aGUgdGFzayBncm91cHMuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhpcyBpcyB1c2VkIGluIHNuYXBzaG90IHRlc3RpbmcsIHNvIGlmIHRoZSBmb3JtYXQgaXNcbiAgICAgKiBjaGFuZ2VkLCB0aGUgc25hcHNob3RzIHdpbGwgbmVlZCB0byBiZSB1cGRhdGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICBsZXQgb3V0cHV0ID0gJyc7XG4gICAgICAgIGZvciAoY29uc3QgdGFza0dyb3VwIG9mIHRoaXMuZ3JvdXBzKSB7XG4gICAgICAgICAgICBvdXRwdXQgKz0gdGFza0dyb3VwLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBvdXRwdXQgKz0gJ1xcbi0tLVxcbic7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG90YWxUYXNrc0NvdW50ID0gdGhpcy50b3RhbFRhc2tzQ291bnQoKTtcbiAgICAgICAgb3V0cHV0ICs9IGBcXG4ke3RvdGFsVGFza3NDb3VudH0gdGFza3NcXG5gO1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkVGFza3MoaW5pdGlhbEdyb3VwczogSW50ZXJtZWRpYXRlVGFza0dyb3Vwcykge1xuICAgICAgICAvLyBHZXQgdGhlIGhlYWRpbmdzXG4gICAgICAgIGNvbnN0IGdyb3VwZXIgPSBuZXcgR3JvdXBIZWFkaW5ncyhpbml0aWFsR3JvdXBzLmdyb3Vwcyk7XG5cbiAgICAgICAgLy8gQnVpbGQgYSBjb250YWluZXIgb2YgYWxsIHRoZSBncm91cHNcbiAgICAgICAgZm9yIChjb25zdCBbZ3JvdXBzLCB0YXNrc10gb2YgaW5pdGlhbEdyb3Vwcy5ncm91cHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwSGVhZGluZ3MgPSBncm91cGVyLmdldEhlYWRpbmdzRm9yVGFza0dyb3VwKGdyb3Vwcyk7XG4gICAgICAgICAgICBjb25zdCB0YXNrR3JvdXAgPSBuZXcgVGFza0dyb3VwKGdyb3VwcywgZ3JvdXBIZWFkaW5ncywgdGFza3MpO1xuICAgICAgICAgICAgdGhpcy5hZGQodGFza0dyb3VwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYWRkKHRhc2tHcm91cDogVGFza0dyb3VwKSB7XG4gICAgICAgIHRoaXMuX2dyb3Vwcy5wdXNoKHRhc2tHcm91cCk7XG4gICAgfVxufVxuIiwgImltcG9ydCB0eXBlIHsgVGFzayB9IGZyb20gJy4uL1Rhc2snO1xuaW1wb3J0IHsgUHJpb3JpdHkgfSBmcm9tICcuLi9UYXNrJztcbmltcG9ydCB0eXBlIHsgR3JvdXBpbmcsIEdyb3VwaW5nUHJvcGVydHkgfSBmcm9tICcuL1F1ZXJ5JztcbmltcG9ydCB7IFRhc2tHcm91cHMgfSBmcm9tICcuL1Rhc2tHcm91cHMnO1xuaW1wb3J0IHsgSGFwcGVuc0RhdGVGaWVsZCB9IGZyb20gJy4vRmlsdGVyL0hhcHBlbnNEYXRlRmllbGQnO1xuXG4vKipcbiAqIEEgbmFtaW5nIGZ1bmN0aW9uLCB0aGF0IHRha2VzIGEgVGFzayBvYmplY3QgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgZ3JvdXAgcHJvcGVydHkgbmFtZVxuICovXG50eXBlIEdyb3VwZXIgPSAodGFzazogVGFzaykgPT4gc3RyaW5nW107XG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlICdncm91cCBieScgaW5zdHJ1Y3Rpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBHcm91cCB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgZ3JvdXBEYXRlRm9ybWF0ID0gJ1lZWVktTU0tREQgZGRkZCc7XG5cbiAgICAvKipcbiAgICAgKiBHcm91cCBhIGxpc3Qgb2YgdGFza3MsIGFjY29yZGluZyB0byBvbmUgb3IgbW9yZSB0YXNrIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0gZ3JvdXBpbmcgMCBvciBtb3JlIEdyb3VwaW5nIHZhbHVlcywgb25lIHBlciAnZ3JvdXAgYnknIGxpbmVcbiAgICAgKiBAcGFyYW0gdGFza3MgVGhlIHRhc2tzIHRoYXQgbWF0Y2ggdGhlIHRhc2sgYmxvY2sncyBRdWVyeVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYnkoZ3JvdXBpbmc6IEdyb3VwaW5nW10sIHRhc2tzOiBUYXNrW10pOiBUYXNrR3JvdXBzIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUYXNrR3JvdXBzKGdyb3VwaW5nLCB0YXNrcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBwcm9wZXJ0aWVzIG9mIGEgc2luZ2xlIHRhc2sgZm9yIHRoZSBwYXNzZWQgZ3JvdXBpbmcgcHJvcGVydHlcbiAgICAgKlxuICAgICAqIFRoZSByZXR1cm5lZCBzdHJpbmcgd2lsbCBiZSByZW5kZXJlZCwgc28gYW55IHNwZWNpYWwgTWFya2Rvd24gY2hhcmFjdGVycyB3aWxsIGJlIGVzY2FwZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB0YXNrXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXRHcm91cE5hbWVzRm9yVGFzayhwcm9wZXJ0eTogR3JvdXBpbmdQcm9wZXJ0eSwgdGFzazogVGFzayk6IHN0cmluZ1tdIHtcbiAgICAgICAgY29uc3QgZ3JvdXBlciA9IEdyb3VwLmdyb3VwZXJzW3Byb3BlcnR5XTtcbiAgICAgICAgcmV0dXJuIGdyb3VwZXIodGFzayk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ3JvdXBlcnM6IFJlY29yZDxHcm91cGluZ1Byb3BlcnR5LCBHcm91cGVyPiA9IHtcbiAgICAgICAgYmFja2xpbms6IEdyb3VwLmdyb3VwQnlCYWNrbGluayxcbiAgICAgICAgZG9uZTogR3JvdXAuZ3JvdXBCeURvbmVEYXRlLFxuICAgICAgICBkdWU6IEdyb3VwLmdyb3VwQnlEdWVEYXRlLFxuICAgICAgICBmaWxlbmFtZTogR3JvdXAuZ3JvdXBCeUZpbGVOYW1lLFxuICAgICAgICBmb2xkZXI6IEdyb3VwLmdyb3VwQnlGb2xkZXIsXG4gICAgICAgIGhhcHBlbnM6IEdyb3VwLmdyb3VwQnlIYXBwZW5zRGF0ZSxcbiAgICAgICAgaGVhZGluZzogR3JvdXAuZ3JvdXBCeUhlYWRpbmcsXG4gICAgICAgIHBhdGg6IEdyb3VwLmdyb3VwQnlQYXRoLFxuICAgICAgICBwcmlvcml0eTogR3JvdXAuZ3JvdXBCeVByaW9yaXR5LFxuICAgICAgICByZWN1cnJlbmNlOiBHcm91cC5ncm91cEJ5UmVjdXJyZW5jZSxcbiAgICAgICAgcmVjdXJyaW5nOiBHcm91cC5ncm91cEJ5UmVjdXJyaW5nLFxuICAgICAgICByb290OiBHcm91cC5ncm91cEJ5Um9vdCxcbiAgICAgICAgc2NoZWR1bGVkOiBHcm91cC5ncm91cEJ5U2NoZWR1bGVkRGF0ZSxcbiAgICAgICAgc3RhcnQ6IEdyb3VwLmdyb3VwQnlTdGFydERhdGUsXG4gICAgICAgIHN0YXR1czogR3JvdXAuZ3JvdXBCeVN0YXR1cyxcbiAgICAgICAgdGFnczogR3JvdXAuZ3JvdXBCeVRhZ3MsXG4gICAgfTtcblxuICAgIHByaXZhdGUgc3RhdGljIGVzY2FwZU1hcmtkb3duQ2hhcmFjdGVycyhmaWxlbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vd2lsc29ubWFyLmdpdGh1Yi5pby9tYXJrZG93bi10ZXh0LWZvci1naXRodWItZnJvbS1odG1sLyNzcGVjaWFsLWNoYXJhY3RlcnNcbiAgICAgICAgcmV0dXJuIGZpbGVuYW1lLnJlcGxhY2UoL1xcXFwvZywgJ1xcXFxcXFxcJykucmVwbGFjZSgvXy9nLCAnXFxcXF8nKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBncm91cEJ5UHJpb3JpdHkodGFzazogVGFzayk6IHN0cmluZ1tdIHtcbiAgICAgICAgbGV0IHByaW9yaXR5TmFtZSA9ICdFUlJPUic7XG4gICAgICAgIHN3aXRjaCAodGFzay5wcmlvcml0eSkge1xuICAgICAgICAgICAgY2FzZSBQcmlvcml0eS5IaWdoOlxuICAgICAgICAgICAgICAgIHByaW9yaXR5TmFtZSA9ICdIaWdoJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUHJpb3JpdHkuTWVkaXVtOlxuICAgICAgICAgICAgICAgIHByaW9yaXR5TmFtZSA9ICdNZWRpdW0nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQcmlvcml0eS5Ob25lOlxuICAgICAgICAgICAgICAgIHByaW9yaXR5TmFtZSA9ICdOb25lJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUHJpb3JpdHkuTG93OlxuICAgICAgICAgICAgICAgIHByaW9yaXR5TmFtZSA9ICdMb3cnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbYFByaW9yaXR5ICR7dGFzay5wcmlvcml0eX06ICR7cHJpb3JpdHlOYW1lfWBdO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdyb3VwQnlSZWN1cnJlbmNlKHRhc2s6IFRhc2spOiBzdHJpbmdbXSB7XG4gICAgICAgIGlmICh0YXNrLnJlY3VycmVuY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBbdGFzay5yZWN1cnJlbmNlIS50b1RleHQoKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gWydOb25lJ107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBncm91cEJ5UmVjdXJyaW5nKHRhc2s6IFRhc2spOiBzdHJpbmdbXSB7XG4gICAgICAgIGlmICh0YXNrLnJlY3VycmVuY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBbJ1JlY3VycmluZyddO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFsnTm90IFJlY3VycmluZyddO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ3JvdXBCeVN0YXJ0RGF0ZSh0YXNrOiBUYXNrKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gW0dyb3VwLnN0cmluZ0Zyb21EYXRlKHRhc2suc3RhcnREYXRlLCAnc3RhcnQnKV07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ3JvdXBCeVNjaGVkdWxlZERhdGUodGFzazogVGFzayk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIFtHcm91cC5zdHJpbmdGcm9tRGF0ZSh0YXNrLnNjaGVkdWxlZERhdGUsICdzY2hlZHVsZWQnKV07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ3JvdXBCeUR1ZURhdGUodGFzazogVGFzayk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIFtHcm91cC5zdHJpbmdGcm9tRGF0ZSh0YXNrLmR1ZURhdGUsICdkdWUnKV07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ3JvdXBCeURvbmVEYXRlKHRhc2s6IFRhc2spOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiBbR3JvdXAuc3RyaW5nRnJvbURhdGUodGFzay5kb25lRGF0ZSwgJ2RvbmUnKV07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ3JvdXBCeUhhcHBlbnNEYXRlKHRhc2s6IFRhc2spOiBzdHJpbmdbXSB7XG4gICAgICAgIGNvbnN0IGVhcmxpZXN0RGF0ZUlmQW55ID0gbmV3IEhhcHBlbnNEYXRlRmllbGQoKS5lYXJsaWVzdERhdGUodGFzayk7XG4gICAgICAgIHJldHVybiBbR3JvdXAuc3RyaW5nRnJvbURhdGUoZWFybGllc3REYXRlSWZBbnksICdoYXBwZW5zJyldO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHN0cmluZ0Zyb21EYXRlKGRhdGU6IG1vbWVudC5Nb21lbnQgfCBudWxsLCBmaWVsZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKGRhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAnTm8gJyArIGZpZWxkICsgJyBkYXRlJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0ZS5mb3JtYXQoR3JvdXAuZ3JvdXBEYXRlRm9ybWF0KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBncm91cEJ5UGF0aCh0YXNrOiBUYXNrKTogc3RyaW5nW10ge1xuICAgICAgICAvLyBEb2VzIHRoaXMgbmVlZCB0byBiZSBtYWRlIHN0cmljdGVyP1xuICAgICAgICAvLyBJcyB0aGVyZSBhIGJldHRlciB3YXkgb2YgZ2V0dGluZyB0aGUgZmlsZSBuYW1lP1xuICAgICAgICByZXR1cm4gW0dyb3VwLmVzY2FwZU1hcmtkb3duQ2hhcmFjdGVycyh0YXNrLnBhdGgucmVwbGFjZSgnLm1kJywgJycpKV07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ3JvdXBCeUZvbGRlcih0YXNrOiBUYXNrKTogc3RyaW5nW10ge1xuICAgICAgICBjb25zdCBwYXRoID0gdGFzay5wYXRoO1xuICAgICAgICBjb25zdCBmaWxlTmFtZVdpdGhFeHRlbnNpb24gPSB0YXNrLmZpbGVuYW1lICsgJy5tZCc7XG4gICAgICAgIGNvbnN0IGZvbGRlciA9IHBhdGguc3Vic3RyaW5nKDAsIHBhdGgubGFzdEluZGV4T2YoZmlsZU5hbWVXaXRoRXh0ZW5zaW9uKSk7XG4gICAgICAgIGlmIChmb2xkZXIgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gWycvJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtHcm91cC5lc2NhcGVNYXJrZG93bkNoYXJhY3RlcnMoZm9sZGVyKV07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ3JvdXBCeUZpbGVOYW1lKHRhc2s6IFRhc2spOiBzdHJpbmdbXSB7XG4gICAgICAgIC8vIE5vdGUgY3VycmVudCBsaW1pdGF0aW9uOiBUYXNrcyBmcm9tIGRpZmZlcmVudCBub3RlcyB3aXRoIHRoZVxuICAgICAgICAvLyBzYW1lIG5hbWUgd2lsbCBiZSBncm91cGVkIHRvZ2V0aGVyLCBldmVuIHRob3VnaCB0aGV5IGFyZSBpblxuICAgICAgICAvLyBkaWZmZXJlbnQgZmlsZXMgYW5kIHRoZWlyIGxpbmtzIHdpbGwgbG9vayBkaWZmZXJlbnQuXG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gdGFzay5maWxlbmFtZTtcbiAgICAgICAgaWYgKGZpbGVuYW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gWydVbmtub3duIExvY2F0aW9uJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtHcm91cC5lc2NhcGVNYXJrZG93bkNoYXJhY3RlcnMoZmlsZW5hbWUpXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBncm91cEJ5Um9vdCh0YXNrOiBUYXNrKTogc3RyaW5nW10ge1xuICAgICAgICBjb25zdCBwYXRoID0gdGFzay5wYXRoLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgICAgICAgY29uc3Qgc2VwYXJhdG9ySW5kZXggPSBwYXRoLmluZGV4T2YoJy8nKTtcbiAgICAgICAgaWYgKHNlcGFyYXRvckluZGV4ID09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gWycvJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtHcm91cC5lc2NhcGVNYXJrZG93bkNoYXJhY3RlcnMocGF0aC5zdWJzdHJpbmcoMCwgc2VwYXJhdG9ySW5kZXggKyAxKSldO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdyb3VwQnlCYWNrbGluayh0YXNrOiBUYXNrKTogc3RyaW5nW10ge1xuICAgICAgICBjb25zdCBsaW5rVGV4dCA9IHRhc2suZ2V0TGlua1RleHQoeyBpc0ZpbGVuYW1lVW5pcXVlOiB0cnVlIH0pO1xuICAgICAgICBpZiAobGlua1RleHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBbJ1Vua25vd24gTG9jYXRpb24nXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1hcmtkb3duIGNoYXJhY3RlcnMgaW4gdGhlIGZpbGUgbmFtZSBtdXN0IGJlIGVzY2FwZWQuXG4gICAgICAgIC8vIE1hcmtkb3duIGNoYXJhY3RlcnMgaW4gdGhlIGhlYWRpbmcgbXVzdCBOT1QgYmUgZXNjYXBlZC5cbiAgICAgICAgY29uc3QgZmlsZW5hbWVDb21wb25lbnQgPSBHcm91cC5ncm91cEJ5RmlsZU5hbWUodGFzaylbMF07XG4gICAgICAgIGlmICh0YXNrLnByZWNlZGluZ0hlYWRlciA9PT0gbnVsbCB8fCB0YXNrLnByZWNlZGluZ0hlYWRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbZmlsZW5hbWVDb21wb25lbnRdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhlYWRpbmdDb21wb25lbnQgPSBHcm91cC5ncm91cEJ5SGVhZGluZyh0YXNrKVswXTtcblxuICAgICAgICBpZiAoZmlsZW5hbWVDb21wb25lbnQgPT09IGhlYWRpbmdDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBbZmlsZW5hbWVDb21wb25lbnRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtgJHtmaWxlbmFtZUNvbXBvbmVudH0gPiAke2hlYWRpbmdDb21wb25lbnR9YF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBncm91cEJ5U3RhdHVzKHRhc2s6IFRhc2spOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiBbdGFzay5zdGF0dXNdO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdyb3VwQnlIZWFkaW5nKHRhc2s6IFRhc2spOiBzdHJpbmdbXSB7XG4gICAgICAgIGlmICh0YXNrLnByZWNlZGluZ0hlYWRlciA9PT0gbnVsbCB8fCB0YXNrLnByZWNlZGluZ0hlYWRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbJyhObyBoZWFkaW5nKSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdGFzay5wcmVjZWRpbmdIZWFkZXJdO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdyb3VwQnlUYWdzKHRhc2s6IFRhc2spOiBzdHJpbmdbXSB7XG4gICAgICAgIGlmICh0YXNrLnRhZ3MubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbJyhObyB0YWdzKSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXNrLnRhZ3M7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IExheW91dE9wdGlvbnMgfSBmcm9tICcuLi9MYXlvdXRPcHRpb25zJztcbmltcG9ydCB0eXBlIHsgVGFzayB9IGZyb20gJy4uL1Rhc2snO1xuaW1wb3J0IHR5cGUgeyBJUXVlcnkgfSBmcm9tICcuLi9JUXVlcnknO1xuaW1wb3J0IHsgZ2V0U2V0dGluZ3MgfSBmcm9tICcuLi9Db25maWcvU2V0dGluZ3MnO1xuaW1wb3J0IHsgU29ydCB9IGZyb20gJy4vU29ydCc7XG5pbXBvcnQgdHlwZSB7IFRhc2tHcm91cHMgfSBmcm9tICcuL1Rhc2tHcm91cHMnO1xuaW1wb3J0IHsgcGFyc2VGaWx0ZXIgfSBmcm9tICcuL0ZpbHRlclBhcnNlcic7XG5pbXBvcnQgeyBHcm91cCB9IGZyb20gJy4vR3JvdXAnO1xuaW1wb3J0IHR5cGUgeyBGaWx0ZXIgfSBmcm9tICcuL0ZpbHRlci9GaWx0ZXInO1xuXG5leHBvcnQgdHlwZSBTb3J0aW5nUHJvcGVydHkgPVxuICAgIHwgJ3VyZ2VuY3knXG4gICAgfCAnc3RhdHVzJ1xuICAgIHwgJ3ByaW9yaXR5J1xuICAgIHwgJ3N0YXJ0J1xuICAgIHwgJ3NjaGVkdWxlZCdcbiAgICB8ICdkdWUnXG4gICAgfCAnZG9uZSdcbiAgICB8ICdwYXRoJ1xuICAgIHwgJ2Rlc2NyaXB0aW9uJ1xuICAgIHwgJ3RhZyc7XG50eXBlIFNvcnRpbmcgPSB7XG4gICAgcHJvcGVydHk6IFNvcnRpbmdQcm9wZXJ0eTtcbiAgICByZXZlcnNlOiBib29sZWFuO1xuICAgIHByb3BlcnR5SW5zdGFuY2U6IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIEdyb3VwaW5nUHJvcGVydHkgPVxuICAgIHwgJ2JhY2tsaW5rJ1xuICAgIHwgJ2RvbmUnXG4gICAgfCAnZHVlJ1xuICAgIHwgJ2ZpbGVuYW1lJ1xuICAgIHwgJ2ZvbGRlcidcbiAgICB8ICdoYXBwZW5zJ1xuICAgIHwgJ2hlYWRpbmcnXG4gICAgfCAncGF0aCdcbiAgICB8ICdwcmlvcml0eSdcbiAgICB8ICdyZWN1cnJlbmNlJ1xuICAgIHwgJ3JlY3VycmluZydcbiAgICB8ICdyb290J1xuICAgIHwgJ3NjaGVkdWxlZCdcbiAgICB8ICdzdGFydCdcbiAgICB8ICdzdGF0dXMnXG4gICAgfCAndGFncyc7XG5leHBvcnQgdHlwZSBHcm91cGluZyA9IHsgcHJvcGVydHk6IEdyb3VwaW5nUHJvcGVydHkgfTtcblxuZXhwb3J0IGNsYXNzIFF1ZXJ5IGltcGxlbWVudHMgSVF1ZXJ5IHtcbiAgICBwdWJsaWMgc291cmNlOiBzdHJpbmc7XG5cbiAgICBwcml2YXRlIF9saW1pdDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgX2xheW91dE9wdGlvbnM6IExheW91dE9wdGlvbnMgPSBuZXcgTGF5b3V0T3B0aW9ucygpO1xuICAgIHByaXZhdGUgX2ZpbHRlcnM6IEZpbHRlcltdID0gW107XG4gICAgcHJpdmF0ZSBfZXJyb3I6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIF9zb3J0aW5nOiBTb3J0aW5nW10gPSBbXTtcbiAgICBwcml2YXRlIF9ncm91cGluZzogR3JvdXBpbmdbXSA9IFtdO1xuXG4gICAgLy8gSWYgYSB0YWcgaXMgc3BlY2lmaWVkIHRoZSB1c2VyIGNhbiBhbHNvIGFkZCBhIG51bWJlciB0byBzcGVjaWZ5XG4gICAgLy8gd2hpY2ggb25lIHRvIHNvcnQgYnkgaWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZS5cbiAgICBwcml2YXRlIHJlYWRvbmx5IHNvcnRCeVJlZ2V4cCA9XG4gICAgICAgIC9ec29ydCBieSAodXJnZW5jeXxzdGF0dXN8cHJpb3JpdHl8c3RhcnR8c2NoZWR1bGVkfGR1ZXxkb25lfHBhdGh8ZGVzY3JpcHRpb258dGFnKSggcmV2ZXJzZSk/W1xcc10qKFxcZCspPy87XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGdyb3VwQnlSZWdleHAgPVxuICAgICAgICAvXmdyb3VwIGJ5IChiYWNrbGlua3xkb25lfGR1ZXxmaWxlbmFtZXxmb2xkZXJ8aGFwcGVuc3xoZWFkaW5nfHBhdGh8cHJpb3JpdHl8cmVjdXJyZW5jZXxyZWN1cnJpbmd8cm9vdHxzY2hlZHVsZWR8c3RhcnR8c3RhdHVzfHRhZ3MpLztcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgaGlkZU9wdGlvbnNSZWdleHAgPVxuICAgICAgICAvXihoaWRlfHNob3cpICh0YXNrIGNvdW50fGJhY2tsaW5rfHByaW9yaXR5fHN0YXJ0IGRhdGV8c2NoZWR1bGVkIGRhdGV8ZG9uZSBkYXRlfGR1ZSBkYXRlfHJlY3VycmVuY2UgcnVsZXxlZGl0IGJ1dHRvbnx1cmdlbmN5KS87XG4gICAgcHJpdmF0ZSByZWFkb25seSBzaG9ydE1vZGVSZWdleHAgPSAvXnNob3J0LztcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV4cGxhaW5RdWVyeVJlZ2V4cCA9IC9eZXhwbGFpbi87XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGxpbWl0UmVnZXhwID0gL15saW1pdCAodG8gKT8oXFxkKykoIHRhc2tzPyk/LztcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29tbWVudFJlZ2V4cCA9IC9eIy4qLztcblxuICAgIGNvbnN0cnVjdG9yKHsgc291cmNlIH06IHsgc291cmNlOiBzdHJpbmcgfSkge1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlXG4gICAgICAgICAgICAuc3BsaXQoJ1xcbicpXG4gICAgICAgICAgICAubWFwKChsaW5lOiBzdHJpbmcpID0+IGxpbmUudHJpbSgpKVxuICAgICAgICAgICAgLmZvckVhY2goKGxpbmU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGxpbmUgPT09ICcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5zaG9ydE1vZGVSZWdleHAudGVzdChsaW5lKTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dE9wdGlvbnMuc2hvcnRNb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIHRoaXMuZXhwbGFpblF1ZXJ5UmVnZXhwLnRlc3QobGluZSk6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRPcHRpb25zLmV4cGxhaW5RdWVyeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSB0aGlzLmxpbWl0UmVnZXhwLnRlc3QobGluZSk6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlTGltaXQoeyBsaW5lIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5zb3J0QnlSZWdleHAudGVzdChsaW5lKTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VTb3J0QnkoeyBsaW5lIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5ncm91cEJ5UmVnZXhwLnRlc3QobGluZSk6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlR3JvdXBCeSh7IGxpbmUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSB0aGlzLmhpZGVPcHRpb25zUmVnZXhwLnRlc3QobGluZSk6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlSGlkZU9wdGlvbnMoeyBsaW5lIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5jb21tZW50UmVnZXhwLnRlc3QobGluZSk6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21tZW50IGxpbmVzIGFyZSBpZ25vcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSB0aGlzLnBhcnNlRmlsdGVyKGxpbmUpOlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9IGBkbyBub3QgdW5kZXJzdGFuZCBxdWVyeTogJHtsaW5lfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGV4cGxhaW5RdWVyeSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ0V4cGxhbmF0aW9uIG9mIHRoaXMgVGFza3MgY29kZSBibG9jayBxdWVyeTpcXG5cXG4nICsgdGhpcy5leHBsYWluUXVlcnlXaXRob3V0SW50cm9kdWN0aW9uKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGV4cGxhaW5RdWVyeVdpdGhvdXRJbnRyb2R1Y3Rpb24oKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9ICcnO1xuXG4gICAgICAgIGNvbnN0IHsgZ2xvYmFsRmlsdGVyIH0gPSBnZXRTZXR0aW5ncygpO1xuICAgICAgICBpZiAoZ2xvYmFsRmlsdGVyLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGBPbmx5IHRhc2tzIGNvbnRhaW5pbmcgdGhlIGdsb2JhbCBmaWx0ZXIgJyR7Z2xvYmFsRmlsdGVyfScuXFxuXFxuYDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG51bWJlck9mRmlsdGVycyA9IHRoaXMuZmlsdGVycy5sZW5ndGg7XG4gICAgICAgIGlmIChudW1iZXJPZkZpbHRlcnMgPT09IDApIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAnTm8gZmlsdGVycyBzdXBwbGllZC4gQWxsIHRhc2tzIHdpbGwgbWF0Y2ggdGhlIHF1ZXJ5Lic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mRmlsdGVyczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHRoaXMuZmlsdGVyc1tpXS5leHBsYWluRmlsdGVySW5kZW50ZWQoJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2xpbWl0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBgXFxuXFxuQXQgbW9zdCAke3RoaXMuX2xpbWl0fSB0YXNrYDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9saW1pdCAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAncyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgKz0gJy5cXG4nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGxpbWl0KCk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saW1pdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGxheW91dE9wdGlvbnMoKTogTGF5b3V0T3B0aW9ucyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sYXlvdXRPcHRpb25zO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZmlsdGVycygpOiBGaWx0ZXJbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgc29ydGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvcnRpbmc7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBncm91cGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwaW5nO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZXJyb3IoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xuICAgIH1cblxuICAgIHB1YmxpYyBhcHBseVF1ZXJ5VG9UYXNrcyh0YXNrczogVGFza1tdKTogVGFza0dyb3VwcyB7XG4gICAgICAgIHRoaXMuZmlsdGVycy5mb3JFYWNoKChmaWx0ZXIpID0+IHtcbiAgICAgICAgICAgIHRhc2tzID0gdGFza3MuZmlsdGVyKGZpbHRlci5maWx0ZXJGdW5jdGlvbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHRhc2tzU29ydGVkTGltaXRlZCA9IFNvcnQuYnkodGhpcywgdGFza3MpLnNsaWNlKDAsIHRoaXMubGltaXQpO1xuICAgICAgICByZXR1cm4gR3JvdXAuYnkodGhpcy5ncm91cGluZywgdGFza3NTb3J0ZWRMaW1pdGVkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBhcnNlSGlkZU9wdGlvbnMoeyBsaW5lIH06IHsgbGluZTogc3RyaW5nIH0pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaGlkZU9wdGlvbnNNYXRjaCA9IGxpbmUubWF0Y2godGhpcy5oaWRlT3B0aW9uc1JlZ2V4cCk7XG4gICAgICAgIGlmIChoaWRlT3B0aW9uc01hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBoaWRlID0gaGlkZU9wdGlvbnNNYXRjaFsxXSA9PT0gJ2hpZGUnO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gaGlkZU9wdGlvbnNNYXRjaFsyXTtcblxuICAgICAgICAgICAgc3dpdGNoIChvcHRpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlICd0YXNrIGNvdW50JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0T3B0aW9ucy5oaWRlVGFza0NvdW50ID0gaGlkZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYmFja2xpbmsnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRPcHRpb25zLmhpZGVCYWNrbGlua3MgPSBoaWRlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdwcmlvcml0eSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dE9wdGlvbnMuaGlkZVByaW9yaXR5ID0gaGlkZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RhcnQgZGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dE9wdGlvbnMuaGlkZVN0YXJ0RGF0ZSA9IGhpZGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NjaGVkdWxlZCBkYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0T3B0aW9ucy5oaWRlU2NoZWR1bGVkRGF0ZSA9IGhpZGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2R1ZSBkYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0T3B0aW9ucy5oaWRlRHVlRGF0ZSA9IGhpZGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RvbmUgZGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dE9wdGlvbnMuaGlkZURvbmVEYXRlID0gaGlkZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmVjdXJyZW5jZSBydWxlJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0T3B0aW9ucy5oaWRlUmVjdXJyZW5jZVJ1bGUgPSBoaWRlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdlZGl0IGJ1dHRvbic6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dE9wdGlvbnMuaGlkZUVkaXRCdXR0b24gPSBoaWRlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1cmdlbmN5JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0T3B0aW9ucy5oaWRlVXJnZW5jeSA9IGhpZGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ2RvIG5vdCB1bmRlcnN0YW5kIGhpZGUvc2hvdyBvcHRpb24nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXJzZUZpbHRlcihsaW5lOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyT3JFcnJvciA9IHBhcnNlRmlsdGVyKGxpbmUpO1xuICAgICAgICBpZiAoZmlsdGVyT3JFcnJvciAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoZmlsdGVyT3JFcnJvci5maWx0ZXIpIHRoaXMuX2ZpbHRlcnMucHVzaChmaWx0ZXJPckVycm9yLmZpbHRlcik7XG4gICAgICAgICAgICBlbHNlIHRoaXMuX2Vycm9yID0gZmlsdGVyT3JFcnJvci5lcnJvcjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBhcnNlTGltaXQoeyBsaW5lIH06IHsgbGluZTogc3RyaW5nIH0pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbGltaXRNYXRjaCA9IGxpbmUubWF0Y2godGhpcy5saW1pdFJlZ2V4cCk7XG4gICAgICAgIGlmIChsaW1pdE1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBsaW1pdE1hdGNoWzJdIGlzIHBlciByZWdleCBhbHdheXMgZGlnaXRzIGFuZCB0aGVyZWZvcmUgcGFyc2FibGUuXG4gICAgICAgICAgICB0aGlzLl9saW1pdCA9IE51bWJlci5wYXJzZUludChsaW1pdE1hdGNoWzJdLCAxMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9ICdkbyBub3QgdW5kZXJzdGFuZCBxdWVyeSBsaW1pdCc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHBhcnNlU29ydEJ5KHsgbGluZSB9OiB7IGxpbmU6IHN0cmluZyB9KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGZpZWxkTWF0Y2ggPSBsaW5lLm1hdGNoKHRoaXMuc29ydEJ5UmVnZXhwKTtcbiAgICAgICAgaWYgKGZpZWxkTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3NvcnRpbmcucHVzaCh7XG4gICAgICAgICAgICAgICAgcHJvcGVydHk6IGZpZWxkTWF0Y2hbMV0gYXMgU29ydGluZ1Byb3BlcnR5LFxuICAgICAgICAgICAgICAgIHJldmVyc2U6ICEhZmllbGRNYXRjaFsyXSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUluc3RhbmNlOiBpc05hTigrZmllbGRNYXRjaFszXSkgPyAxIDogK2ZpZWxkTWF0Y2hbM10sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ2RvIG5vdCB1bmRlcnN0YW5kIHF1ZXJ5IHNvcnRpbmcnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXJzZUdyb3VwQnkoeyBsaW5lIH06IHsgbGluZTogc3RyaW5nIH0pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZmllbGRNYXRjaCA9IGxpbmUubWF0Y2godGhpcy5ncm91cEJ5UmVnZXhwKTtcbiAgICAgICAgaWYgKGZpZWxkTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2dyb3VwaW5nLnB1c2goe1xuICAgICAgICAgICAgICAgIHByb3BlcnR5OiBmaWVsZE1hdGNoWzFdIGFzIEdyb3VwaW5nUHJvcGVydHksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ2RvIG5vdCB1bmRlcnN0YW5kIHF1ZXJ5IGdyb3VwaW5nJztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHR5cGUgVGFza3NQbHVnaW4gZnJvbSAnLi4vbWFpbic7XG5pbXBvcnQgeyBnZXRTZXR0aW5ncywgdXBkYXRlU2V0dGluZ3MgfSBmcm9tICcuL1NldHRpbmdzJztcblxuZXhwb3J0IGNsYXNzIFNldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwbHVnaW46IFRhc2tzUGx1Z2luO1xuXG4gICAgY29uc3RydWN0b3IoeyBwbHVnaW4gfTogeyBwbHVnaW46IFRhc2tzUGx1Z2luIH0pIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCwgcGx1Z2luKTtcblxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBjcmVhdGVGcmFnbWVudFdpdGhIVE1MID0gKGh0bWw6IHN0cmluZykgPT5cbiAgICAgICAgY3JlYXRlRnJhZ21lbnQoKGRvY3VtZW50RnJhZ21lbnQpID0+IChkb2N1bWVudEZyYWdtZW50LmNyZWF0ZURpdigpLmlubmVySFRNTCA9IGh0bWwpKTtcblxuICAgIHB1YmxpYyBkaXNwbGF5KCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuXG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cbiAgICAgICAgLy8gRm9yIHJlYXNvbnMgSSBkb24ndCB1bmRlcnN0YW5kLCAnaDInIGlzIHRpbnkgaW4gU2V0dGluZ3MsXG4gICAgICAgIC8vIHNvIEkgaGF2ZSB1c2VkICdoMycgYXMgdGhlIGxhcmdlc3QgaGVhZGluZy5cbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnVGFza3MgU2V0dGluZ3MnIH0pO1xuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgncCcsIHtcbiAgICAgICAgICAgIGNsczogJ3Rhc2tzLXNldHRpbmctaW1wb3J0YW50JyxcbiAgICAgICAgICAgIHRleHQ6ICdDaGFuZ2luZyBhbnkgc2V0dGluZ3MgcmVxdWlyZXMgYSByZXN0YXJ0IG9mIG9ic2lkaWFuLicsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdHbG9iYWwgZmlsdGVyIFNldHRpbmdzJyB9KTtcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnR2xvYmFsIHRhc2sgZmlsdGVyJylcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIFNldHRpbmdzVGFiLmNyZWF0ZUZyYWdtZW50V2l0aEhUTUwoXG4gICAgICAgICAgICAgICAgICAgICc8cD48Yj5SZWNvbW1lbmRlZDogTGVhdmUgZW1wdHkgaWYgeW91IHdhbnQgYWxsIGNoZWNrbGlzdCBpdGVtcyBpbiB5b3VyIHZhdWx0IHRvIGJlIHRhc2tzIG1hbmFnZWQgYnkgdGhpcyBwbHVnaW4uPC9iPjwvcD4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8cD5Vc2UgYSBnbG9iYWwgZmlsdGVyIGlmIHlvdSB3YW50IFRhc2tzIHRvIG9ubHkgYWN0IG9uIGEgc3Vic2V0IG9mIHlvdXIgXCI8Y29kZT4tIFsgXTwvY29kZT5cIiBjaGVja2xpc3QgaXRlbXMsIHNvIHRoYXQgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnYSBjaGVja2xpc3QgaXRlbSBtdXN0IGluY2x1ZGUgdGhlIHNwZWNpZmllZCBzdHJpbmcgaW4gaXRzIGRlc2NyaXB0aW9uIGluIG9yZGVyIHRvIGJlIGNvbnNpZGVyZWQgYSB0YXNrLjxwPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxwPkZvciBleGFtcGxlLCBpZiB5b3Ugc2V0IHRoZSBnbG9iYWwgZmlsdGVyIHRvIDxjb2RlPiN0YXNrPC9jb2RlPiwgdGhlIFRhc2tzIHBsdWdpbiB3aWxsIG9ubHkgaGFuZGxlIGNoZWNrbGlzdCBpdGVtcyB0YWdnZWQgd2l0aCA8Y29kZT4jdGFzazwvY29kZT4uPC9icj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdPdGhlciBjaGVja2xpc3QgaXRlbXMgd2lsbCByZW1haW4gbm9ybWFsIGNoZWNrbGlzdCBpdGVtcyBhbmQgbm90IGFwcGVhciBpbiBxdWVyaWVzIG9yIGdldCBhIGRvbmUgZGF0ZSBzZXQuPC9wPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxwPlNlZSB0aGUgPGEgaHJlZj1cImh0dHBzOi8vb2JzaWRpYW4tdGFza3MtZ3JvdXAuZ2l0aHViLmlvL29ic2lkaWFuLXRhc2tzL2dldHRpbmctc3RhcnRlZC9nbG9iYWwtZmlsdGVyL1wiPmRvY3VtZW50YXRpb248L2E+LjwvcD4nLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0U2V0dGluZ3MoKTtcblxuICAgICAgICAgICAgICAgIC8vIEkgd2FudGVkIHRvIG1ha2UgdGhpcyBzYXkgJ2ZvciBleGFtcGxlLCAjdGFzayBvciBUT0RPJ1xuICAgICAgICAgICAgICAgIC8vIGJ1dCB3YXNuJ3QgYWJsZSB0byBmaWd1cmUgb3V0IGhvdyB0byBtYWtlIHRoZSB0ZXh0IGJveFxuICAgICAgICAgICAgICAgIC8vIHdpZGUgZW5vdWdoIGZvciB0aGUgd2hvbGUgc3RyaW5nIHRvIGJlIHZpc2libGUuXG4gICAgICAgICAgICAgICAgdGV4dC5zZXRQbGFjZWhvbGRlcignZS5nLiAjdGFzayBvciBUT0RPJylcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHNldHRpbmdzLmdsb2JhbEZpbHRlcilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU2V0dGluZ3MoeyBnbG9iYWxGaWx0ZXI6IHZhbHVlIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdSZW1vdmUgZ2xvYmFsIGZpbHRlciBmcm9tIGRlc2NyaXB0aW9uJylcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgICdFbmFibGluZyB0aGlzIHJlbW92ZXMgdGhlIHN0cmluZyB0aGF0IHlvdSBzZXQgYXMgZ2xvYmFsIGZpbHRlciBmcm9tIHRoZSB0YXNrIGRlc2NyaXB0aW9uIHdoZW4gZGlzcGxheWluZyBhIHRhc2suJyxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0U2V0dGluZ3MoKTtcblxuICAgICAgICAgICAgICAgIHRvZ2dsZS5zZXRWYWx1ZShzZXR0aW5ncy5yZW1vdmVHbG9iYWxGaWx0ZXIpLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVTZXR0aW5ncyh7IHJlbW92ZUdsb2JhbEZpbHRlcjogdmFsdWUgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiAnRGF0ZSBTZXR0aW5ncycgfSk7XG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1NldCBkb25lIGRhdGUgb24gZXZlcnkgY29tcGxldGVkIHRhc2snKVxuICAgICAgICAgICAgLnNldERlc2MoJ0VuYWJsaW5nIHRoaXMgd2lsbCBhZGQgYSB0aW1lc3RhbXAgXHUyNzA1IFlZWVktTU0tREQgYXQgdGhlIGVuZCB3aGVuIGEgdGFzayBpcyB0b2dnbGVkIHRvIGRvbmUnKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBnZXRTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIHRvZ2dsZS5zZXRWYWx1ZShzZXR0aW5ncy5zZXREb25lRGF0ZSkub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNldHRpbmdzKHsgc2V0RG9uZURhdGU6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1VzZSBmaWxlbmFtZSBhcyBTY2hlZHVsZWQgZGF0ZSBmb3IgdW5kYXRlZCB0YXNrcycpXG4gICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICBTZXR0aW5nc1RhYi5jcmVhdGVGcmFnbWVudFdpdGhIVE1MKFxuICAgICAgICAgICAgICAgICAgICAnU2F2ZSB0aW1lIGVudGVyaW5nIFNjaGVkdWxlZCAoXHUyM0YzKSBkYXRlcy48L2JyPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0lmIHRoaXMgb3B0aW9uIGlzIGVuYWJsZWQsIGFueSB1bmRhdGVkIHRhc2tzIHdpbGwgYmUgZ2l2ZW4gYSBkZWZhdWx0IFNjaGVkdWxlZCBkYXRlIGV4dHJhY3RlZCBmcm9tIHRoZWlyIGZpbGUgbmFtZS48L2JyPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1RoZSBkYXRlIGluIHRoZSBmaWxlIG5hbWUgbXVzdCBiZSBpbiBvbmUgb2YgPGNvZGU+WVlZWS1NTS1ERDwvY29kZT4gb3IgPGNvZGU+WVlZWU1NREQ8L2NvZGU+IGZvcm1hdHMuPC9icj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdVbmRhdGVkIHRhc2tzIGhhdmUgbm9uZSBvZiBEdWUgKFx1RDgzRFx1RENDNSApLCBTY2hlZHVsZWQgKFx1MjNGMykgYW5kIFN0YXJ0IChcdUQ4M0RcdURFRUIpIGRhdGVzLjwvYnI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHA+U2VlIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9vYnNpZGlhbi10YXNrcy1ncm91cC5naXRodWIuaW8vb2JzaWRpYW4tdGFza3MvZ2V0dGluZy1zdGFydGVkL3VzZS1maWxlbmFtZS1hcy1kZWZhdWx0LWRhdGUvXCI+ZG9jdW1lbnRhdGlvbjwvYT4uPC9wPicsXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0U2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUoc2V0dGluZ3MudXNlRmlsZW5hbWVBc1NjaGVkdWxlZERhdGUpLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVTZXR0aW5ncyh7IHVzZUZpbGVuYW1lQXNTY2hlZHVsZWREYXRlOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdGb2xkZXJzIHdpdGggZGVmYXVsdCBTY2hlZHVsZWQgZGF0ZXMnKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgJ0xlYXZlIGVtcHR5IGlmIHlvdSB3YW50IHRvIHVzZSBkZWZhdWx0IFNjaGVkdWxlZCBkYXRlcyBldmVyeXdoZXJlLCBvciBlbnRlciBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZvbGRlcnMuJyxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRUZXh0KGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0U2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICBpbnB1dFxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUoU2V0dGluZ3NUYWIucmVuZGVyRm9sZGVyQXJyYXkoc2V0dGluZ3MuZmlsZW5hbWVBc0RhdGVGb2xkZXJzKSlcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9sZGVycyA9IFNldHRpbmdzVGFiLnBhcnNlQ29tbWFTZXBhcmF0ZWRGb2xkZXJzKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNldHRpbmdzKHsgZmlsZW5hbWVBc0RhdGVGb2xkZXJzOiBmb2xkZXJzIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ0F1dG8tc3VnZ2VzdCBTZXR0aW5ncycgfSk7XG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0F1dG8tc3VnZ2VzdCB0YXNrIGNvbnRlbnQnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0VuYWJsaW5nIHRoaXMgd2lsbCBvcGVuIGFuIGludGVsbGlnZW50IHN1Z2dlc3QgbWVudSB3aGlsZSB0eXBpbmcgaW5zaWRlIGEgcmVjb2duaXplZCB0YXNrIGxpbmUuJylcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0U2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUoc2V0dGluZ3MuYXV0b1N1Z2dlc3RJbkVkaXRvcikub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNldHRpbmdzKHsgYXV0b1N1Z2dlc3RJbkVkaXRvcjogdmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnTWluaW11bSBtYXRjaCBsZW5ndGggZm9yIGF1dG8tc3VnZ2VzdCcpXG4gICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICAnSWYgaGlnaGVyIHRoYW4gMCwgYXV0by1zdWdnZXN0IHdpbGwgYmUgdHJpZ2dlcmVkIG9ubHkgd2hlbiB0aGUgYmVnaW5uaW5nIG9mIGFueSBzdXBwb3J0ZWQga2V5d29yZHMgaXMgcmVjb2duaXplZC4nLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZFNsaWRlcigoc2xpZGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBnZXRTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIHNsaWRlclxuICAgICAgICAgICAgICAgICAgICAuc2V0TGltaXRzKDAsIDMsIDEpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShzZXR0aW5ncy5hdXRvU3VnZ2VzdE1pbk1hdGNoKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RHluYW1pY1Rvb2x0aXAoKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTZXR0aW5ncyh7IGF1dG9TdWdnZXN0TWluTWF0Y2g6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnTWF4aW11bSBudW1iZXIgb2YgYXV0by1zdWdnZXN0aW9ucyB0byBzaG93JylcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgICdIb3cgbWFueSBzdWdnZXN0aW9ucyBzaG91bGQgYmUgc2hvd24gd2hlbiBhbiBhdXRvLXN1Z2dlc3QgbWVudSBwb3BzIHVwIChpbmNsdWRpbmcgdGhlIFwiXHUyM0NFXCIgb3B0aW9uKS4nLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZFNsaWRlcigoc2xpZGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBnZXRTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIHNsaWRlclxuICAgICAgICAgICAgICAgICAgICAuc2V0TGltaXRzKDMsIDEyLCAxKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUoc2V0dGluZ3MuYXV0b1N1Z2dlc3RNYXhJdGVtcylcbiAgICAgICAgICAgICAgICAgICAgLnNldER5bmFtaWNUb29sdGlwKClcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU2V0dGluZ3MoeyBhdXRvU3VnZ2VzdE1heEl0ZW1zOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdEaWFsb2cgU2V0dGluZ3MnIH0pO1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdQcm92aWRlIGFjY2VzcyBrZXlzIGluIGRpYWxvZ3MnKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgJ0lmIHRoZSBhY2Nlc3Mga2V5cyAoa2V5Ym9hcmQgc2hvcnRjdXRzKSBmb3IgdmFyaW91cyBjb250cm9scycgK1xuICAgICAgICAgICAgICAgICAgICAnIGluIGRpYWxvZyBib3hlcyBjb25mbGljdCB3aXRoIHN5c3RlbSBrZXlib2FyZCBzaG9ydGN1dHMnICtcbiAgICAgICAgICAgICAgICAgICAgJyBvciBhc3Npc3RpdmUgdGVjaG5vbG9neSBmdW5jdGlvbmFsaXR5IHRoYXQgaXMgaW1wb3J0YW50IGZvciB5b3UsJyArXG4gICAgICAgICAgICAgICAgICAgICcgeW91IG1heSB3YW50IHRvIGRlYWN0aXZhdGUgdGhlbSBoZXJlLicsXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXR0aW5ncyA9IGdldFNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHNldHRpbmdzLnByb3ZpZGVBY2Nlc3NLZXlzKS5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlU2V0dGluZ3MoeyBwcm92aWRlQWNjZXNzS2V5czogdmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcGFyc2VDb21tYVNlcGFyYXRlZEZvbGRlcnMoaW5wdXQ6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlucHV0XG4gICAgICAgICAgICAgICAgLy8gYSBsaW1pdGF0aW9uIGlzIHRoYXQgZm9sZGVyIG5hbWVzIG1heSBub3QgY29udGFpbiBjb21tYXNcbiAgICAgICAgICAgICAgICAuc3BsaXQoJywnKVxuICAgICAgICAgICAgICAgIC5tYXAoKGZvbGRlcikgPT4gZm9sZGVyLnRyaW0oKSlcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlc1xuICAgICAgICAgICAgICAgIC5tYXAoKGZvbGRlcikgPT4gZm9sZGVyLnJlcGxhY2UoL15cXC98XFwvJC9nLCAnJykpXG4gICAgICAgICAgICAgICAgLmZpbHRlcigoZm9sZGVyKSA9PiBmb2xkZXIgIT09ICcnKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHJlbmRlckZvbGRlckFycmF5KGZvbGRlcnM6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGZvbGRlcnMuam9pbignLCcpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBBcHAsIEVkaXRvciwgRWRpdG9yU3VnZ2VzdCwgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgdHlwZSB7IEVkaXRvclBvc2l0aW9uLCBFZGl0b3JTdWdnZXN0Q29udGV4dCwgRWRpdG9yU3VnZ2VzdFRyaWdnZXJJbmZvIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5pbXBvcnQgdHlwZSB7IFNldHRpbmdzIH0gZnJvbSAnLi4vQ29uZmlnL1NldHRpbmdzJztcbmltcG9ydCAqIGFzIHRhc2sgZnJvbSAnLi4vVGFzayc7XG5pbXBvcnQgeyBidWlsZFN1Z2dlc3Rpb25zIH0gZnJvbSAnLi9TdWdnZXN0b3InO1xuaW1wb3J0IHR5cGUgeyBTdWdnZXN0SW5mbyB9IGZyb20gJy4vU3VnZ2VzdG9yJztcblxuZXhwb3J0IHR5cGUgU3VnZ2VzdEluZm9XaXRoQ29udGV4dCA9IFN1Z2dlc3RJbmZvICYge1xuICAgIGNvbnRleHQ6IEVkaXRvclN1Z2dlc3RDb250ZXh0O1xufTtcblxuZXhwb3J0IGNsYXNzIEVkaXRvclN1Z2dlc3RvciBleHRlbmRzIEVkaXRvclN1Z2dlc3Q8U3VnZ2VzdEluZm9XaXRoQ29udGV4dD4ge1xuICAgIHByaXZhdGUgc2V0dGluZ3M6IFNldHRpbmdzO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHNldHRpbmdzOiBTZXR0aW5ncykge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgfVxuXG4gICAgb25UcmlnZ2VyKGN1cnNvcjogRWRpdG9yUG9zaXRpb24sIGVkaXRvcjogRWRpdG9yLCBfZmlsZTogVEZpbGUpOiBFZGl0b3JTdWdnZXN0VHJpZ2dlckluZm8gfCBudWxsIHtcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmF1dG9TdWdnZXN0SW5FZGl0b3IpIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCBsaW5lID0gZWRpdG9yLmdldExpbmUoY3Vyc29yLmxpbmUpO1xuICAgICAgICBpZiAobGluZS5jb250YWlucyh0aGlzLnNldHRpbmdzLmdsb2JhbEZpbHRlcikgJiYgbGluZS5tYXRjaCh0YXNrLlRhc2tSZWd1bGFyRXhwcmVzc2lvbnMudGFza1JlZ2V4KSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdGFydDogeyBsaW5lOiBjdXJzb3IubGluZSwgY2g6IDAgfSxcbiAgICAgICAgICAgICAgICBlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZTogY3Vyc29yLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNoOiBsaW5lLmxlbmd0aCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHF1ZXJ5OiBsaW5lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBnZXRTdWdnZXN0aW9ucyhjb250ZXh0OiBFZGl0b3JTdWdnZXN0Q29udGV4dCk6IFN1Z2dlc3RJbmZvV2l0aENvbnRleHRbXSB7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBjb250ZXh0LnF1ZXJ5O1xuICAgICAgICBjb25zdCBjdXJyZW50Q3Vyc29yID0gY29udGV4dC5lZGl0b3IuZ2V0Q3Vyc29yKCk7XG5cbiAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbnM6IFN1Z2dlc3RJbmZvW10gPSBidWlsZFN1Z2dlc3Rpb25zKGxpbmUsIGN1cnJlbnRDdXJzb3IuY2gsIHRoaXMuc2V0dGluZ3MpO1xuXG4gICAgICAgIC8vIEFkZCB0aGUgZWRpdG9yIGNvbnRleHQgdG8gYWxsIHRoZSBzdWdnZXN0aW9uc1xuICAgICAgICBjb25zdCBzdWdnZXN0aW9uc1dpdGhDb250ZXh0OiBTdWdnZXN0SW5mb1dpdGhDb250ZXh0W10gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzdWdnZXN0aW9uIG9mIHN1Z2dlc3Rpb25zKSBzdWdnZXN0aW9uc1dpdGhDb250ZXh0LnB1c2goeyAuLi5zdWdnZXN0aW9uLCBjb250ZXh0OiBjb250ZXh0IH0pO1xuXG4gICAgICAgIHJldHVybiBzdWdnZXN0aW9uc1dpdGhDb250ZXh0O1xuICAgIH1cblxuICAgIHJlbmRlclN1Z2dlc3Rpb24odmFsdWU6IFN1Z2dlc3RJbmZvV2l0aENvbnRleHQsIGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBlbC5zZXRUZXh0KHZhbHVlLmRpc3BsYXlUZXh0KTtcbiAgICB9XG5cbiAgICBzZWxlY3RTdWdnZXN0aW9uKHZhbHVlOiBTdWdnZXN0SW5mb1dpdGhDb250ZXh0LCBfZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBjb25zdCBlZGl0b3IgPSB2YWx1ZS5jb250ZXh0LmVkaXRvcjtcbiAgICAgICAgaWYgKHZhbHVlLnN1Z2dlc3Rpb25UeXBlID09PSAnZW1wdHknKSB7XG4gICAgICAgICAgICAvLyBDbG9zZSB0aGUgc3VnZ2VzdGlvbiBkaWFsb2cgYW5kIHNpbXVsYXRlIGFuIEVudGVyIHByZXNzIHRvIHRoZSBlZGl0b3JcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50Q2xvbmUgPSBuZXcgS2V5Ym9hcmRFdmVudCgna2V5ZG93bicsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiAnRW50ZXInLFxuICAgICAgICAgICAgICAgIGtleTogJ0VudGVyJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKGVkaXRvciBhcyBhbnkpPy5jbT8uY29udGVudERPTT8uZGlzcGF0Y2hFdmVudChldmVudENsb25lKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyZW50Q3Vyc29yID0gdmFsdWUuY29udGV4dC5lZGl0b3IuZ2V0Q3Vyc29yKCk7XG4gICAgICAgIGNvbnN0IHJlcGxhY2VGcm9tID0ge1xuICAgICAgICAgICAgbGluZTogY3VycmVudEN1cnNvci5saW5lLFxuICAgICAgICAgICAgY2g6IHZhbHVlLmluc2VydEF0ID8/IGN1cnJlbnRDdXJzb3IuY2gsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcGxhY2VUbyA9IHZhbHVlLmluc2VydFNraXBcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgbGluZTogY3VycmVudEN1cnNvci5saW5lLFxuICAgICAgICAgICAgICAgICAgY2g6IHJlcGxhY2VGcm9tLmNoICsgdmFsdWUuaW5zZXJ0U2tpcCxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhbHVlLmNvbnRleHQuZWRpdG9yLnJlcGxhY2VSYW5nZSh2YWx1ZS5hcHBlbmRUZXh0LCByZXBsYWNlRnJvbSwgcmVwbGFjZVRvKTtcbiAgICAgICAgdmFsdWUuY29udGV4dC5lZGl0b3Iuc2V0Q3Vyc29yKHtcbiAgICAgICAgICAgIGxpbmU6IGN1cnJlbnRDdXJzb3IubGluZSxcbiAgICAgICAgICAgIGNoOiByZXBsYWNlRnJvbS5jaCArIHZhbHVlLmFwcGVuZFRleHQubGVuZ3RoLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBTZXR0aW5ncyB9IGZyb20gJy4uL0NvbmZpZy9TZXR0aW5ncyc7XG5pbXBvcnQgeyBEYXRlUGFyc2VyIH0gZnJvbSAnLi4vUXVlcnkvRGF0ZVBhcnNlcic7XG5pbXBvcnQgeyBkb0F1dG9jb21wbGV0ZSB9IGZyb20gJy4uL0RhdGVBYmJyZXZpYXRpb25zJztcbmltcG9ydCB7IFJlY3VycmVuY2UgfSBmcm9tICcuLi9SZWN1cnJlbmNlJztcblxuaW1wb3J0ICogYXMgdGFzayBmcm9tICcuLi9UYXNrJztcblxuY29uc3QgZGF0ZVByZWZpeENoYXJhY3RlcnMgPSBgJHt0YXNrLnN0YXJ0RGF0ZVN5bWJvbH0ke3Rhc2suc2NoZWR1bGVkRGF0ZVN5bWJvbH0ke3Rhc2suZHVlRGF0ZVN5bWJvbH1gO1xuXG4vKlxuICogQSBzdWdnZXN0aW9uIHByZXNlbnRlZCB0byB0aGUgdXNlciBhbmQgc29tZSBtZXRhZGF0YSBhYm91dCBpdC5cbiAqL1xuZXhwb3J0IHR5cGUgU3VnZ2VzdEluZm8gPSB7XG4gICAgc3VnZ2VzdGlvblR5cGU/OiAnbWF0Y2gnIHwgJ2RlZmF1bHQnIHwgJ2VtcHR5JztcbiAgICAvLyBXaGF0IHRvIGRpc3BsYXkgdG8gdGhlIHVzZXJcbiAgICBkaXNwbGF5VGV4dDogc3RyaW5nO1xuICAgIC8vIFdoYXQgdG8gYXBwZW5kIHRvIHRoZSBub3RlXG4gICAgYXBwZW5kVGV4dDogc3RyaW5nO1xuICAgIC8vIEF0IHdoYXQgaW5kZXggaW4gdGhlIGxpbmUgdG8gZG8gdGhlIGluc2VydGlvbiAoaWYgbm90IHNwZWNpZmllZCwgdGhlIGN1cnNvciBsb2NhdGlvbiBpcyB1c2VkKVxuICAgIGluc2VydEF0PzogbnVtYmVyO1xuICAgIC8vIEhvdyBtYW55IGNoYXJhY3RlcnMgdG8gc2tpcCBmcm9tIHRoZSBvcmlnaW5hbCBsaW5lIChlLmcuIGlmIHJlcGxhY2luZyBleGlzdGluZyB0ZXh0KVxuICAgIGluc2VydFNraXA/OiBudW1iZXI7XG59O1xuXG4vKlxuICogUmV0dXJuIGEgbGlzdCBvZiBzdWdnZXN0aW9ucywgZWl0aGVyIGdlbmVyaWMgb3IgbW9yZSBmaW5lLWdyYWluZWQgdG8gdGhlIHdvcmRzIGF0IHRoZSBjdXJzb3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFN1Z2dlc3Rpb25zKGxpbmU6IHN0cmluZywgY3Vyc29yUG9zOiBudW1iZXIsIHNldHRpbmdzOiBTZXR0aW5ncyk6IFN1Z2dlc3RJbmZvW10ge1xuICAgIGxldCBzdWdnZXN0aW9uczogU3VnZ2VzdEluZm9bXSA9IFtdO1xuXG4gICAgLy8gU3RlcCAxOiBhZGQgZGF0ZSBzdWdnZXN0aW9ucyBpZiByZWxldmFudFxuICAgIHN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbnMuY29uY2F0KGFkZERhdGVzU3VnZ2VzdGlvbnMobGluZSwgY3Vyc29yUG9zLCBzZXR0aW5ncykpO1xuXG4gICAgLy8gU3RlcCAyOiBhZGQgcmVjdXJyZW5jZSBzdWdnZXN0aW9ucyBpZiByZWxldmFudFxuICAgIHN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbnMuY29uY2F0KGFkZFJlY3VycmVuY2VTdWdnZXN0aW9ucyhsaW5lLCBjdXJzb3JQb3MsIHNldHRpbmdzKSk7XG5cbiAgICAvLyBTdGVwIDM6IGFkZCBtb3JlIGdlbmVyYWwgc3VnZ2VzdGlvbnMgKCdkdWUnLCAncmVjdXJyZW5jZScgZXRjKVxuICAgIGNvbnN0IG1vcmVQb3NzaWJsZVN1Z2dlc3Rpb25zID0gZ2V0UG9zc2libGVDb21wb25lbnRTdWdnZXN0aW9ucyhsaW5lLCBzZXR0aW5ncyk7XG4gICAgLy8gV2Ugbm93IGZpbHRlciB0aGUgZ2VuZXJhbCBzdWdnZXN0aW9ucyBhY2NvcmRpbmcgdG8gdGhlIHdvcmQgYXQgdGhlIGN1cnNvci4gSWYgdGhlcmUnc1xuICAgIC8vIHNvbWV0aGluZyB0byBtYXRjaCwgd2UgZmlsdGVyIHRoZSBzdWdnZXN0aW9ucyBhY2NvcmRpbmdseSwgc28gdGhlIHVzZXIgY2FuIGdldCBtb3JlIHNwZWNpZmljXG4gICAgLy8gcmVzdWx0cyBhY2NvcmRpbmcgdG8gd2hhdCBzaGUncyB0eXBpbmcuXG4gICAgLy8gSWYgdGhlcmUncyBubyBnb29kIG1hdGNoLCBwcmVzZW50IHRoZSBzdWdnZXN0aW9ucyBhcyB0aGV5IGFyZVxuICAgIGNvbnN0IHdvcmRNYXRjaCA9IG1hdGNoQnlQb3NpdGlvbihsaW5lLCAvKFthLXpBLVonXy1dKikvZywgY3Vyc29yUG9zKTtcbiAgICBsZXQgYWRkZWRTdWdnZXN0aW9ucyA9IGZhbHNlO1xuICAgIGlmICh3b3JkTWF0Y2ggJiYgd29yZE1hdGNoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3Qgd29yZFVuZGVyQ3Vyc29yID0gd29yZE1hdGNoWzBdO1xuICAgICAgICBpZiAod29yZFVuZGVyQ3Vyc29yLmxlbmd0aCA+PSBNYXRoLm1heCgxLCBzZXR0aW5ncy5hdXRvU3VnZ2VzdE1pbk1hdGNoKSkge1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRTdWdnZXN0aW9ucyA9IG1vcmVQb3NzaWJsZVN1Z2dlc3Rpb25zLmZpbHRlcigoc3VnZ2VzdEluZm8pID0+XG4gICAgICAgICAgICAgICAgc3VnZ2VzdEluZm8uZGlzcGxheVRleHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh3b3JkVW5kZXJDdXJzb3IudG9Mb3dlckNhc2UoKSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZm9yIChjb25zdCBmaWx0ZXJlZCBvZiBmaWx0ZXJlZFN1Z2dlc3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgc3VnZ2VzdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25UeXBlOiAnbWF0Y2gnLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5VGV4dDogZmlsdGVyZWQuZGlzcGxheVRleHQsXG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZFRleHQ6IGZpbHRlcmVkLmFwcGVuZFRleHQsXG4gICAgICAgICAgICAgICAgICAgIGluc2VydEF0OiB3b3JkTWF0Y2guaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGluc2VydFNraXA6IHdvcmRVbmRlckN1cnNvci5sZW5ndGgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYWRkZWRTdWdnZXN0aW9ucyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVGhhdCdzIHdoZXJlIHdlJ3JlIGFkZGluZyBhbGwgdGhlIHN1Z2dlc3Rpb25zIGluIGNhc2UgdGhlcmUncyBub3RoaW5nIHNwZWNpZmljIHRvIG1hdGNoXG4gICAgLy8gKGFuZCB3ZSdyZSBhbGxvd2VkIGJ5IHRoZSBzZXR0aW5ncyB0byBicmluZyBiYWNrIGEgemVyby1zaXplZCBtYXRjaClcbiAgICBpZiAoIWFkZGVkU3VnZ2VzdGlvbnMgJiYgc2V0dGluZ3MuYXV0b1N1Z2dlc3RNaW5NYXRjaCA9PT0gMClcbiAgICAgICAgc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9ucy5jb25jYXQobW9yZVBvc3NpYmxlU3VnZ2VzdGlvbnMpO1xuXG4gICAgLy8gVW5sZXNzIHdlIGhhdmUgYSBzdWdnZXN0aW9uIHRoYXQgaXMgYSBtYXRjaCBmb3Igc29tZXRoaW5nIHRoZSB1c2VyIGlzIGN1cnJlbnRseSB0eXBpbmcsIGFkZFxuICAgIC8vIGFuICdFbnRlcicgZW50cnkgaW4gdGhlIGJlZ2lubmluZyBvZiB0aGUgbWVudSwgc28gYW4gRW50ZXIgcHJlc3Mgd2lsbCBtb3ZlIHRvIHRoZSBuZXh0IGxpbmVcbiAgICAvLyByYXRoZXIgdGhhbiBpbnNlcnQgYSBzdWdnZXN0aW9uXG4gICAgaWYgKHN1Z2dlc3Rpb25zLmxlbmd0aCA+IDAgJiYgIXN1Z2dlc3Rpb25zLnNvbWUoKHZhbHVlKSA9PiB2YWx1ZS5zdWdnZXN0aW9uVHlwZSA9PT0gJ21hdGNoJykpIHtcbiAgICAgICAgLy8gTm8gYWN0dWFsIG1hdGNoLCBvbmx5IGRlZmF1bHQgb25lc1xuICAgICAgICBzdWdnZXN0aW9ucy51bnNoaWZ0KHtcbiAgICAgICAgICAgIHN1Z2dlc3Rpb25UeXBlOiAnZW1wdHknLFxuICAgICAgICAgICAgZGlzcGxheVRleHQ6ICdcdTIzQ0UnLFxuICAgICAgICAgICAgYXBwZW5kVGV4dDogJ1xcbicsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEVpdGhlciB3YXksIGFmdGVyIGFsbCB0aGUgYWdncmVnYXRpb25zIGFib3ZlLCBuZXZlciBzdWdnZXN0IG1vcmUgdGhhbiB0aGUgbWF4IGl0ZW1zXG4gICAgc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9ucy5zbGljZSgwLCBzZXR0aW5ncy5hdXRvU3VnZ2VzdE1heEl0ZW1zKTtcblxuICAgIHJldHVybiBzdWdnZXN0aW9ucztcbn1cblxuZnVuY3Rpb24gaGFzUHJpb3JpdHkobGluZTogc3RyaW5nKSB7XG4gICAgaWYgKE9iamVjdC52YWx1ZXModGFzay5wcmlvcml0eVN5bWJvbHMpLnNvbWUoKHZhbHVlKSA9PiB2YWx1ZS5sZW5ndGggPiAwICYmIGxpbmUuaW5jbHVkZXModmFsdWUpKSkgcmV0dXJuIHRydWU7XG59XG5cbi8qXG4gKiBHZXQgc3VnZ2VzdGlvbnMgZm9yIGdlbmVyaWMgdGFzayBjb21wb25lbnRzLCBlLmcuIGEgcHJpb3JpdHkgb3IgYSAnZHVlJyBzeW1ib2xcbiAqL1xuZnVuY3Rpb24gZ2V0UG9zc2libGVDb21wb25lbnRTdWdnZXN0aW9ucyhsaW5lOiBzdHJpbmcsIF9zZXR0aW5nczogU2V0dGluZ3MpOiBTdWdnZXN0SW5mb1tdIHtcbiAgICBjb25zdCBzdWdnZXN0aW9uczogU3VnZ2VzdEluZm9bXSA9IFtdO1xuXG4gICAgaWYgKCFsaW5lLmluY2x1ZGVzKHRhc2suZHVlRGF0ZVN5bWJvbCkpXG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgZGlzcGxheVRleHQ6IGAke3Rhc2suZHVlRGF0ZVN5bWJvbH0gZHVlIGRhdGVgLFxuICAgICAgICAgICAgYXBwZW5kVGV4dDogYCR7dGFzay5kdWVEYXRlU3ltYm9sfSBgLFxuICAgICAgICB9KTtcbiAgICBpZiAoIWxpbmUuaW5jbHVkZXModGFzay5zdGFydERhdGVTeW1ib2wpKVxuICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIGRpc3BsYXlUZXh0OiBgJHt0YXNrLnN0YXJ0RGF0ZVN5bWJvbH0gc3RhcnQgZGF0ZWAsXG4gICAgICAgICAgICBhcHBlbmRUZXh0OiBgJHt0YXNrLnN0YXJ0RGF0ZVN5bWJvbH0gYCxcbiAgICAgICAgfSk7XG4gICAgaWYgKCFsaW5lLmluY2x1ZGVzKHRhc2suc2NoZWR1bGVkRGF0ZVN5bWJvbCkpXG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgZGlzcGxheVRleHQ6IGAke3Rhc2suc2NoZWR1bGVkRGF0ZVN5bWJvbH0gc2NoZWR1bGVkIGRhdGVgLFxuICAgICAgICAgICAgYXBwZW5kVGV4dDogYCR7dGFzay5zY2hlZHVsZWREYXRlU3ltYm9sfSBgLFxuICAgICAgICB9KTtcbiAgICBpZiAoIWhhc1ByaW9yaXR5KGxpbmUpKSB7XG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgZGlzcGxheVRleHQ6IGAke3Rhc2sucHJpb3JpdHlTeW1ib2xzLkhpZ2h9IGhpZ2ggcHJpb3JpdHlgLFxuICAgICAgICAgICAgYXBwZW5kVGV4dDogYCR7dGFzay5wcmlvcml0eVN5bWJvbHMuSGlnaH0gYCxcbiAgICAgICAgfSk7XG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgZGlzcGxheVRleHQ6IGAke3Rhc2sucHJpb3JpdHlTeW1ib2xzLk1lZGl1bX0gbWVkaXVtIHByaW9yaXR5YCxcbiAgICAgICAgICAgIGFwcGVuZFRleHQ6IGAke3Rhc2sucHJpb3JpdHlTeW1ib2xzLk1lZGl1bX0gYCxcbiAgICAgICAgfSk7XG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgZGlzcGxheVRleHQ6IGAke3Rhc2sucHJpb3JpdHlTeW1ib2xzLkxvd30gbG93IHByaW9yaXR5YCxcbiAgICAgICAgICAgIGFwcGVuZFRleHQ6IGAke3Rhc2sucHJpb3JpdHlTeW1ib2xzLkxvd30gYCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmICghbGluZS5pbmNsdWRlcyh0YXNrLnJlY3VycmVuY2VTeW1ib2wpKVxuICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIGRpc3BsYXlUZXh0OiBgJHt0YXNrLnJlY3VycmVuY2VTeW1ib2x9IHJlY3VycmluZyAocmVwZWF0KWAsXG4gICAgICAgICAgICBhcHBlbmRUZXh0OiBgJHt0YXNrLnJlY3VycmVuY2VTeW1ib2x9IGAsXG4gICAgICAgIH0pO1xuXG4gICAgcmV0dXJuIHN1Z2dlc3Rpb25zO1xufVxuXG4vKlxuICogSWYgdGhlIGN1cnNvciBpcyBsb2NhdGVkIGluIGEgc2VjdGlvbiB0aGF0IHNob3VsZCBiZSBmb2xsb3dlZCBieSBhIGRhdGUgKGR1ZSwgc3RhcnQgZGF0ZSBvciBzY2hlZHVsZWQgZGF0ZSksXG4gKiBzdWdnZXN0IG9wdGlvbnMgZm9yIHdoYXQgdG8gZW50ZXIgYXMgYSBkYXRlLlxuICogVGhpcyBoYXMgdHdvIHBhcnRzOiBlaXRoZXIgZ2VuZXJpYyBwcmVkZWZpbmVkIHN1Z2dlc3Rpb25zLCBvciBhIHNpbmdsZSBzdWdnZXN0aW9uIHRoYXQgaXMgYSBwYXJzZWQgcmVzdWx0XG4gKiBvZiB3aGF0IHRoZSB1c2VyIGlzIHR5cGluZy5cbiAqIEdlbmVyaWMgcHJlZGVmaW5lZCBzdWdnZXN0aW9ucywgaW4gdHVybiwgYWxzbyBoYXZlIHR3byBvcHRpb25zOiBlaXRoZXIgZmlsdGVyZWQgKGlmIHRoZSB1c2VyIHN0YXJ0ZWQgdHlwaW5nXG4gKiBzb21ldGhpbmcgd2hlcmUgYSBkYXRlIGlzIGV4cGVjdGVkKSBvciB1bmZpbHRlcmVkXG4gKi9cbmZ1bmN0aW9uIGFkZERhdGVzU3VnZ2VzdGlvbnMobGluZTogc3RyaW5nLCBjdXJzb3JQb3M6IG51bWJlciwgc2V0dGluZ3M6IFNldHRpbmdzKTogU3VnZ2VzdEluZm9bXSB7XG4gICAgY29uc3QgZ2VuZXJpY1N1Z2dlc3Rpb25zID0gW1xuICAgICAgICAndG9kYXknLFxuICAgICAgICAndG9tb3Jyb3cnLFxuICAgICAgICAnU3VuZGF5JyxcbiAgICAgICAgJ01vbmRheScsXG4gICAgICAgICdUdWVzZGF5JyxcbiAgICAgICAgJ1dlZG5lc2RheScsXG4gICAgICAgICdUaHVyc2RheScsXG4gICAgICAgICdGcmlkYXknLFxuICAgICAgICAnU2F0dXJkYXknLFxuICAgICAgICAnbmV4dCB3ZWVrJyxcbiAgICAgICAgJ25leHQgbW9udGgnLFxuICAgICAgICAnbmV4dCB5ZWFyJyxcbiAgICBdO1xuXG4gICAgY29uc3QgcmVzdWx0czogU3VnZ2VzdEluZm9bXSA9IFtdO1xuICAgIGNvbnN0IGRhdGVSZWdleCA9IG5ldyBSZWdFeHAoYChbJHtkYXRlUHJlZml4Q2hhcmFjdGVyc31dKVxcXFxzKihbMC05YS16QS1aIF0qKWAsICd1ZycpO1xuICAgIGNvbnN0IGRhdGVNYXRjaCA9IG1hdGNoQnlQb3NpdGlvbihsaW5lLCBkYXRlUmVnZXgsIGN1cnNvclBvcyk7XG4gICAgaWYgKGRhdGVNYXRjaCAmJiBkYXRlTWF0Y2gubGVuZ3RoID49IDIpIHtcbiAgICAgICAgY29uc3QgZGF0ZVByZWZpeCA9IGRhdGVNYXRjaFsxXTtcbiAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IGRhdGVNYXRjaFsyXTtcbiAgICAgICAgaWYgKGRhdGVTdHJpbmcubGVuZ3RoIDwgc2V0dGluZ3MuYXV0b1N1Z2dlc3RNaW5NYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyeSB0byBwYXJzZSB0aGUgZW50ZXJlZCB0ZXh0IGFzIGEgdmFsaWQgZGF0ZS5cbiAgICAgICAgLy8gV2UgcGFzcyBmb3J3YXJkRGF0ZT10cnVlIHRvIHBhcnNlRGF0ZSBiZWNhdXNlIHdlIGV4cGVjdCBkdWUsIHN0YXJ0IGFuZCBzY2hlZHVsZWQgZGF0ZXMgdG9cbiAgICAgICAgLy8gYmUgaW4gdGhlIGZ1dHVyZSwgaS5lLiBpZiB0b2RheSBpcyBTdW5kYXkgYW5kIHRoZSB1c2VyIHR5cGVkIFwiZHVlIDxFbnRlcj4gU2F0dXJkYXlcIiwgc2hlXG4gICAgICAgIC8vIG1vc3QgbGlrZWx5IG1lYW5zIFNhdHVyZGF5ICppbiB0aGUgZnV0dXJlKiBhbmQgbm90IHllc3RlcmRheS5cbiAgICAgICAgY29uc3QgcG9zc2libGVEYXRlID1cbiAgICAgICAgICAgIGRhdGVTdHJpbmcgJiYgZGF0ZVN0cmluZy5sZW5ndGggPiAxID8gRGF0ZVBhcnNlci5wYXJzZURhdGUoZG9BdXRvY29tcGxldGUoZGF0ZVN0cmluZyksIHRydWUpIDogbnVsbDtcbiAgICAgICAgaWYgKHBvc3NpYmxlRGF0ZSAmJiBwb3NzaWJsZURhdGUuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBTZWVtcyBsaWtlIHRoZSB0ZXh0IHRoYXQgdGhlIHVzZXIgdHlwZWQgY2FuIGJlIHBhcnNlZCBhcyBhIHZhbGlkIGRhdGUuXG4gICAgICAgICAgICAvLyBQcmVzZW50IGl0cyBjb21wbGV0ZWQgZm9ybSBhcyBhIDFzdCBzdWdnZXN0aW9uXG4gICAgICAgICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICAgICAgICAgIGRpc3BsYXlUZXh0OiBgJHtwb3NzaWJsZURhdGUuZm9ybWF0KHRhc2suVGFza1JlZ3VsYXJFeHByZXNzaW9ucy5kYXRlRm9ybWF0KX1gLFxuICAgICAgICAgICAgICAgIGFwcGVuZFRleHQ6IGAke2RhdGVQcmVmaXh9ICR7cG9zc2libGVEYXRlLmZvcm1hdCh0YXNrLlRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuZGF0ZUZvcm1hdCl9IGAsXG4gICAgICAgICAgICAgICAgaW5zZXJ0QXQ6IGRhdGVNYXRjaC5pbmRleCxcbiAgICAgICAgICAgICAgICBpbnNlcnRTa2lwOiBkYXRlTWF0Y2hbMF0ubGVuZ3RoLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOb3cgdG8gZ2VuZXJpYyBwcmVkZWZpbmVkIHN1Z2dlc3Rpb25zLlxuICAgICAgICAvLyBJZiB3ZSBnZXQgYSBwYXJ0aWFsIG1hdGNoIHdpdGggc29tZSBvZiB0aGUgc3VnZ2VzdGlvbnMgKGUuZy4gdGhlIHVzZXIgc3RhcnRlZCB0eXBpbmcgXCJ0b1wiKSxcbiAgICAgICAgLy8gd2UgdXNlIHRoYXQgZm9yIG1hdGNoZXMgKFwidG9tb3Jyb3dcIiwgXCJ0b2RheVwiIGV0YykuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgd2UganVzdCBkaXNwbGF5IHRoZSBsaXN0IG9mIHN1Z2dlc3Rpb25zLCBhbmQgZWl0aGVyIHdheSwgdHJ1bmNhdGUgdGhlbSBldmVudHVhbGx5IHRvXG4gICAgICAgIC8vIGEgbWF4IG51bWJlci4gV2Ugd2FudCB0aGUgbWF4IG51bWJlciB0byBiZSBhcm91bmQgaGFsZiB0aGUgdG90YWwgYWxsb3dlZCBtYXRjaGVzLCB0byBhbHNvIGFsbG93XG4gICAgICAgIC8vIHNvbWUgZ2xvYmFsIGdlbmVyaWMgbWF0Y2hlcyAoZS5nLiB0YXNrIGNvbXBvbmVudHMpIHRvIGZpbmQgdGhlaXIgd2F5IHRvIHRoZSBtZW51XG4gICAgICAgIGNvbnN0IG1pbk1hdGNoID0gMTtcbiAgICAgICAgY29uc3QgbWF4R2VuZXJpY1N1Z2dlc3Rpb25zID0gNTtcbiAgICAgICAgbGV0IGdlbmVyaWNNYXRjaGVzID0gZ2VuZXJpY1N1Z2dlc3Rpb25zXG4gICAgICAgICAgICAuZmlsdGVyKFxuICAgICAgICAgICAgICAgICh2YWx1ZSkgPT5cbiAgICAgICAgICAgICAgICAgICAgZGF0ZVN0cmluZyAmJlxuICAgICAgICAgICAgICAgICAgICBkYXRlU3RyaW5nLmxlbmd0aCA+PSBtaW5NYXRjaCAmJlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGRhdGVTdHJpbmcudG9Mb3dlckNhc2UoKSksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc2xpY2UoMCwgbWF4R2VuZXJpY1N1Z2dlc3Rpb25zKTtcbiAgICAgICAgaWYgKGdlbmVyaWNNYXRjaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gRG8gY29tcGxldGVseSBnZW5lcmljIGRhdGUgc3VnZ2VzdGlvbnNcbiAgICAgICAgICAgIGdlbmVyaWNNYXRjaGVzID0gZ2VuZXJpY1N1Z2dlc3Rpb25zLnNsaWNlKDAsIG1heEdlbmVyaWNTdWdnZXN0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBtYXRjaCBvZiBnZW5lcmljTWF0Y2hlcykge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkRGF0ZSA9IERhdGVQYXJzZXIucGFyc2VEYXRlKG1hdGNoLCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZERhdGUgPSBgJHtwYXJzZWREYXRlLmZvcm1hdCh0YXNrLlRhc2tSZWd1bGFyRXhwcmVzc2lvbnMuZGF0ZUZvcm1hdCl9YDtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgc3VnZ2VzdGlvblR5cGU6ICdtYXRjaCcsXG4gICAgICAgICAgICAgICAgZGlzcGxheVRleHQ6IGAke21hdGNofSAoJHtmb3JtYXR0ZWREYXRlfSlgLFxuICAgICAgICAgICAgICAgIGFwcGVuZFRleHQ6IGAke2RhdGVQcmVmaXh9ICR7Zm9ybWF0dGVkRGF0ZX0gYCxcbiAgICAgICAgICAgICAgICBpbnNlcnRBdDogZGF0ZU1hdGNoLmluZGV4LFxuICAgICAgICAgICAgICAgIGluc2VydFNraXA6IGRhdGVNYXRjaFswXS5sZW5ndGgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbn1cblxuLypcbiAqIElmIHRoZSBjdXJzb3IgaXMgbG9jYXRlZCBpbiBhIHNlY3Rpb24gdGhhdCBzaG91bGQgYmUgZm9sbG93ZWQgYnkgYSByZWN1cnJlbmNlIGRlc2NyaXB0aW9uLCBzdWdnZXN0IG9wdGlvbnNcbiAqIGZvciB3aGF0IHRvIGVudGVyIGFzIGEgcmVjdXJyZW5jZS5cbiAqIFRoaXMgaGFzIHR3byBwYXJ0czogZWl0aGVyIGdlbmVyaWMgcHJlZGVmaW5lZCBzdWdnZXN0aW9ucywgb3IgYSBzaW5nbGUgc3VnZ2VzdGlvbiB0aGF0IGlzIGEgcGFyc2VkIHJlc3VsdFxuICogb2Ygd2hhdCB0aGUgdXNlciBpcyB0eXBpbmcuXG4gKiBHZW5lcmljIHByZWRlZmluZWQgc3VnZ2VzdGlvbnMsIGluIHR1cm4sIGFsc28gaGF2ZSB0d28gb3B0aW9uczogZWl0aGVyIGZpbHRlcmVkIChpZiB0aGUgdXNlciBzdGFydGVkIHR5cGluZ1xuICogc29tZXRoaW5nIHdoZXJlIGEgcmVjdXJyZW5jZSBpcyBleHBlY3RlZCkgb3IgdW5maWx0ZXJlZFxuICovXG5mdW5jdGlvbiBhZGRSZWN1cnJlbmNlU3VnZ2VzdGlvbnMobGluZTogc3RyaW5nLCBjdXJzb3JQb3M6IG51bWJlciwgc2V0dGluZ3M6IFNldHRpbmdzKSB7XG4gICAgY29uc3QgZ2VuZXJpY1N1Z2dlc3Rpb25zID0gW1xuICAgICAgICAnZXZlcnknLFxuICAgICAgICAnZXZlcnkgZGF5JyxcbiAgICAgICAgJ2V2ZXJ5IHdlZWsnLFxuICAgICAgICAnZXZlcnkgbW9udGgnLFxuICAgICAgICAnZXZlcnkgbW9udGggb24gdGhlJyxcbiAgICAgICAgJ2V2ZXJ5IHllYXInLFxuICAgICAgICAnZXZlcnkgd2VlayBvbiBTdW5kYXknLFxuICAgICAgICAnZXZlcnkgd2VlayBvbiBNb25kYXknLFxuICAgICAgICAnZXZlcnkgd2VlayBvbiBUdWVzZGF5JyxcbiAgICAgICAgJ2V2ZXJ5IHdlZWsgb24gV2VkbmVzZGF5JyxcbiAgICAgICAgJ2V2ZXJ5IHdlZWsgb24gVGh1cnNkYXknLFxuICAgICAgICAnZXZlcnkgd2VlayBvbiBGcmlkYXknLFxuICAgICAgICAnZXZlcnkgd2VlayBvbiBTYXR1cmRheScsXG4gICAgXTtcblxuICAgIGNvbnN0IHJlc3VsdHM6IFN1Z2dlc3RJbmZvW10gPSBbXTtcbiAgICBjb25zdCByZWN1cnJlbmNlUmVnZXggPSBuZXcgUmVnRXhwKGAoJHt0YXNrLnJlY3VycmVuY2VTeW1ib2x9KVxcXFxzKihbMC05YS16QS1aIF0qKWAsICd1ZycpO1xuICAgIGNvbnN0IHJlY3VycmVuY2VNYXRjaCA9IG1hdGNoQnlQb3NpdGlvbihsaW5lLCByZWN1cnJlbmNlUmVnZXgsIGN1cnNvclBvcyk7XG4gICAgaWYgKHJlY3VycmVuY2VNYXRjaCAmJiByZWN1cnJlbmNlTWF0Y2gubGVuZ3RoID49IDIpIHtcbiAgICAgICAgY29uc3QgcmVjdXJyZW5jZVByZWZpeCA9IHJlY3VycmVuY2VNYXRjaFsxXTtcbiAgICAgICAgY29uc3QgcmVjdXJyZW5jZVN0cmluZyA9IHJlY3VycmVuY2VNYXRjaFsyXTtcbiAgICAgICAgaWYgKHJlY3VycmVuY2VTdHJpbmcubGVuZ3RoIDwgc2V0dGluZ3MuYXV0b1N1Z2dlc3RNaW5NYXRjaCkgcmV0dXJuIFtdO1xuICAgICAgICBpZiAocmVjdXJyZW5jZVN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgdGV4dCBtYXRjaGVzIGEgdmFsaWQgcmVjdXJlbmNlIGRlc2NyaXB0aW9uLCBwcmVzZW50IGl0IGFzIGEgMXN0IHN1Z2dlc3Rpb24uXG4gICAgICAgICAgICAvLyBXZSBhbHNvIGFkZCBhIG5pY2UgY2hlY2ttYXJrIGluIHRoaXMgY2FzZSB0byBkZW5vdGUgaXQncyBhIGNvbXBsZXRlIHZhbGlkIHJlY3VycmVuY2UgZGVzY3JpcHRpb25cbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZFJlY3VycmVuY2UgPSBSZWN1cnJlbmNlLmZyb21UZXh0KHtcbiAgICAgICAgICAgICAgICByZWN1cnJlbmNlUnVsZVRleHQ6IHJlY3VycmVuY2VTdHJpbmcsXG4gICAgICAgICAgICAgICAgc3RhcnREYXRlOiBudWxsLFxuICAgICAgICAgICAgICAgIHNjaGVkdWxlZERhdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZHVlRGF0ZTogbnVsbCxcbiAgICAgICAgICAgIH0pPy50b1RleHQoKTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRSZWN1cnJlbmNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXBwZW5kZWRUZXh0ID0gYCR7cmVjdXJyZW5jZVByZWZpeH0gJHtwYXJzZWRSZWN1cnJlbmNlfSBgO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25UeXBlOiAnbWF0Y2gnLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5VGV4dDogYFx1MjcwNSAke3BhcnNlZFJlY3VycmVuY2V9YCxcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kVGV4dDogYXBwZW5kZWRUZXh0LFxuICAgICAgICAgICAgICAgICAgICBpbnNlcnRBdDogcmVjdXJyZW5jZU1hdGNoLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICBpbnNlcnRTa2lwOiByZWN1cnJlbmNlTWF0Y2hbMF0ubGVuZ3RoLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBmdWxsIG1hdGNoIGluY2x1ZGVzIGEgY29tcGxldGUgdmFsaWQgc3VnZ2VzdGlvbiAqZW5kaW5nIHdpdGggc3BhY2UqLFxuICAgICAgICAgICAgICAgIC8vIGRvbid0IHN1Z2dlc3QgYW55dGhpbmcuIFRoZSB1c2VyIGlzIHRyeWluZyB0byBjb250aW51ZSB0byB0eXBlIHNvbWV0aGluZyB0aGF0IGlzIGxpa2VseVxuICAgICAgICAgICAgICAgIC8vIG5vdCByZWxhdGVkIHRvIHJlY3VycmVuY2UuIFdoZW4gc2hlIHN0YXJ0cyBhIG5ldyB3b3JkLCBtYXliZSB0aGUgcmVjdXJyZW5jZSBtYXRjaGVzXG4gICAgICAgICAgICAgICAgLy8gd2lsbCBiZSByZWxldmFudCBhZ2FpblxuICAgICAgICAgICAgICAgIGlmIChyZWN1cnJlbmNlTWF0Y2hbMF0gPT0gYXBwZW5kZWRUZXh0KSByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOb3cgdG8gZ2VuZXJpYyBwcmVkZWZpbmVkIHN1Z2dlc3Rpb25zLlxuICAgICAgICAvLyBJZiB3ZSBnZXQgYSBwYXJ0aWFsIG1hdGNoIHdpdGggc29tZSBvZiB0aGUgc3VnZ2VzdGlvbnMgKGUuZy4gdGhlIHVzZXIgc3RhcnRlZCB0eXBpbmcgXCJldmVyeSBkXCIpLFxuICAgICAgICAvLyB3ZSB1c2UgdGhhdCBmb3IgbWF0Y2hlcyAoXCJldmVyeSBkYXlcIikuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgd2UganVzdCBkaXNwbGF5IHRoZSBsaXN0IG9mIHN1Z2dlc3Rpb25zLCBhbmQgZWl0aGVyIHdheSwgdHJ1bmNhdGUgdGhlbSBldmVudHVhbGx5IHRvXG4gICAgICAgIC8vIGEgbWF4IG51bWJlci5cbiAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgcmVjdXJyZW5jZSBydWxlcywgdGhlIG1heCBudW1iZXIgc2hvdWxkIGJlIHNtYWxsIGVub3VnaCB0byBhbGxvdyB1c2VycyB0byBcImVzY2FwZVwiXG4gICAgICAgIC8vIHRoZSBtb2RlIG9mIHdyaXRpbmcgYSByZWN1cnJlbmNlIHJ1bGUsIGkuZS4gd2Ugc2hvdWxkIGxlYXZlIGVub3VnaCBzcGFjZSBmb3IgY29tcG9uZW50IHN1Z2dlc3Rpb25zXG4gICAgICAgIGNvbnN0IG1pbk1hdGNoID0gMTtcbiAgICAgICAgY29uc3QgbWF4R2VuZXJpY0RhdGVTdWdnZXN0aW9ucyA9IHNldHRpbmdzLmF1dG9TdWdnZXN0TWF4SXRlbXMgLyAyO1xuICAgICAgICBsZXQgZ2VuZXJpY01hdGNoZXMgPSBnZW5lcmljU3VnZ2VzdGlvbnNcbiAgICAgICAgICAgIC5maWx0ZXIoXG4gICAgICAgICAgICAgICAgKHZhbHVlKSA9PlxuICAgICAgICAgICAgICAgICAgICByZWN1cnJlbmNlU3RyaW5nICYmXG4gICAgICAgICAgICAgICAgICAgIHJlY3VycmVuY2VTdHJpbmcubGVuZ3RoID49IG1pbk1hdGNoICYmXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocmVjdXJyZW5jZVN0cmluZy50b0xvd2VyQ2FzZSgpKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zbGljZSgwLCBtYXhHZW5lcmljRGF0ZVN1Z2dlc3Rpb25zKTtcbiAgICAgICAgaWYgKGdlbmVyaWNNYXRjaGVzLmxlbmd0aCA9PT0gMCAmJiByZWN1cnJlbmNlU3RyaW5nLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgbm8gYWN0dWFsIG1hdGNoIHNvIGRvIGNvbXBsZXRlbHkgZ2VuZXJpYyByZWN1cnJlbmNlIHN1Z2dlc3Rpb25zLCBidXQgbm90IGlmXG4gICAgICAgICAgICAvLyB0aGVyZSAqd2FzKiBhIHRleHQgdG8gbWF0Y2ggKGJlY2F1c2UgaXQgbWVhbnMgdGhlIHVzZXIgaXMgYWN0dWFsbHkgdHlwaW5nIHNvbWV0aGluZyBlbHNlKVxuICAgICAgICAgICAgZ2VuZXJpY01hdGNoZXMgPSBnZW5lcmljU3VnZ2VzdGlvbnMuc2xpY2UoMCwgbWF4R2VuZXJpY0RhdGVTdWdnZXN0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBtYXRjaCBvZiBnZW5lcmljTWF0Y2hlcykge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzdWdnZXN0aW9uVHlwZTogJ21hdGNoJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5VGV4dDogYCR7bWF0Y2h9YCxcbiAgICAgICAgICAgICAgICBhcHBlbmRUZXh0OiBgJHtyZWN1cnJlbmNlUHJlZml4fSAke21hdGNofSBgLFxuICAgICAgICAgICAgICAgIGluc2VydEF0OiByZWN1cnJlbmNlTWF0Y2guaW5kZXgsXG4gICAgICAgICAgICAgICAgaW5zZXJ0U2tpcDogcmVjdXJyZW5jZU1hdGNoWzBdLmxlbmd0aCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogTWF0Y2hlcyBhIHN0cmluZyB3aXRoIGEgcmVnZXggYWNjb3JkaW5nIHRvIGEgcG9zaXRpb24gKHR5cGljYWxseSBvZiBhIGN1cnNvcikuXG4gKiBXaWxsIHJldHVybiBhIHJlc3VsdCBvbmx5IGlmIGEgbWF0Y2ggZXhpc3RzIGFuZCB0aGUgZ2l2ZW4gcG9zaXRpb24gaXMgcGFydCBvZiBpdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoQnlQb3NpdGlvbihzOiBzdHJpbmcsIHI6IFJlZ0V4cCwgcG9zaXRpb246IG51bWJlcik6IFJlZ0V4cE1hdGNoQXJyYXkge1xuICAgIGNvbnN0IG1hdGNoZXMgPSBzLm1hdGNoQWxsKHIpO1xuICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgICAgICBpZiAobWF0Y2g/LmluZGV4ICYmIG1hdGNoLmluZGV4IDw9IHBvc2l0aW9uICYmIHBvc2l0aW9uIDw9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKSByZXR1cm4gbWF0Y2g7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBLHlDQUFBQSxTQUFBO0FBZUEsUUFBSUM7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S0FBSztNQUNMLEtBQUs7TUFDTCxNQUFNO01BQ04sTUFBTTtNQUNOLE9BQU87TUFDUCxNQUFNO01BQ04sTUFBTTtNQUNOLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLE1BQU07TUFDTixLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsTUFBTTtNQUNOLEtBQUs7TUFDTCxPQUFPO01BQ1AsT0FBTztNQUNQLEtBQUs7TUFDTCxNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxNQUFNO01BQ04sTUFBTTtNQUNOLE9BQU87TUFDUCxNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsTUFBTTtNQUNOLEtBQUs7TUFDTCxNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxJQUFJO01BQ0osTUFBTTtNQUNOLEtBQUs7TUFDTCxNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxNQUFNO01BQ04sTUFBTTtNQUNOLEtBQUs7TUFDTCxLQUFLO01BQ0wsTUFBTTtNQUNOLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsTUFBTTtNQUNOLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLE1BQU07TUFDTixLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLE1BQU07TUFDTixLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxNQUFNO01BQ04sT0FBTztNQUNQLE1BQU07TUFDTixNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsT0FBTztNQUNQLE1BQU07TUFDTixLQUFLO01BQ0wsTUFBTTtNQUNOLE1BQU07TUFDTixNQUFNO01BQ04sTUFBTTtNQUNOLE9BQU87TUFDUCxNQUFNO01BQ04sTUFBTTtNQUNOLE1BQU07TUFDTixLQUFLO01BQ0wsTUFBTTtNQUNOLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLE9BQU87TUFDUCxNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsTUFBTTtNQUNOLE1BQU07TUFDTixPQUFPO01BQ1AsTUFBTTtNQUNOLEtBQUs7TUFDTCxLQUFLO01BQ0wsT0FBTztNQUNQLE1BQU07TUFDTixLQUFLO01BQ0wsTUFBTTtNQUNOLEtBQUs7TUFDTCxLQUFLO01BQ0wsTUFBTTtNQUNOLE1BQU07TUFDTixNQUFNO01BQ04sS0FBSztNQUNMLElBQUk7TUFDSixLQUFLO01BQ0wsTUFBTTtNQUNOLEtBQUs7TUFDTCxLQUFLO01BQ0wsTUFBTTtNQUNOLE1BQU07TUFDTixLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLE1BQU07TUFDTixLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxNQUFNO01BQ04sS0FBSztNQUNMLE1BQU07TUFDTixLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxPQUFPO01BQ1AsTUFBTTtNQUNOLEtBQUs7TUFDTCxNQUFNO01BQ04sS0FBSztNQUNMLE1BQU07TUFDTixNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsTUFBTTtNQUNOLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLE1BQU07TUFDTixLQUFLO01BQ0wsSUFBSTtNQUNKLE9BQU87TUFDUCxNQUFNO01BQ04sTUFBTTtNQUNOLE9BQU87TUFDUCxNQUFNOztBQUdWLGFBQWdCLGlCQUFpQixlQUErQjs7QUFDNUQsVUFB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SztNQUNMLEtBQUs7TUFDTCxNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsTUFBTTtNQUNOLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsTUFBTTtNQUNOLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLE1BQU07TUFDTixPQUFPO01BQ1AsTUFBTTtNQUNOLE1BQU07TUFDTixLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxPQUFPO01BQ1AsTUFBTTtNQUNOLEtBQUs7TUFDTCxNQUFNO01BQ04sTUFBTTtNQUNOLE1BQU07TUFDTixNQUFNO01BQ04sT0FBTztNQUNQLE1BQU07TUFDTixNQUFNO01BQ04sTUFBTTtNQUNOLEtBQUs7TUFDTCxNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxLQUFLO01BQ0wsT0FBTztNQUNQLE1BQU07TUFDTixLQUFLO01BQ0wsS0FBSztNQUNMLEtBQUs7TUFDTCxNQUFNO01BQ04sTUFBTTtNQUNOLE9BQU87TUFDUCxNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxPQUFPO01BQ1AsTUFBTTtNQUNOLEtBQUs7TUFDTCxNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxNQUFNO01BQ04sTUFBTTtNQUNOLE1BQU07TUFDTixLQUFLO01BQ0wsSUFBSTtNQUNKLEtBQUs7TUFDTCxNQUFNO01BQ04sS0FBSztNQUNMLEtBQUs7TUFDTCxNQUFNO01BQ04sTUFBTTtNQUNOLEtBQUs7TUFDTCxLQUFLO01BQ0wsS0FB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LFlBQVEsSUFBSSwwQkFBMEI7QUFDdEMsZUFBSyxVQUFMLG1CQUFZO0FBQUEsRUFDaEI7QUFBQSxFQUVNLGVBQWU7QUFBQTtBQUNqQixZQUFNLGNBQWMsTUFBTSxLQUFLLFNBQVM7QUFDeEMscUJBQWUsV0FBVztBQUFBLElBQzlCO0FBQUE7QUFBQSxFQUVNLGVBQWU7QUFBQTtBQUNqQixZQUFNLEtBQUssU0FBUyxZQUFZLENBQUM7QUFBQSxJQUNyQztBQUFBO0FBQ0o7IiwKICAibmFtZXMiOiBbIm1vZHVsZSIsICJfX2V4dGVuZHMiLCAiX19hc3NpZ24iLCAiX19yZXN0IiwgIl9fZGVjb3JhdGUiLCAiX19wYXJhbSIsICJfX21ldGFkYXRhIiwgIl9fYXdhaXRlciIsICJfX2dlbmVyYXRvciIsICJfX2V4cG9ydFN0YXIiLCAiX192YWx1ZXMiLCAiX19yZWFkIiwgIl9fc3ByZWFkIiwgIl9fc3ByZWFkQXJyYXlzIiwgIl9fc3ByZWFkQXJyYXkiLCAiX19hd2FpdCIsICJfX2FzeW5jR2VuZXJhdG9yIiwgIl9fYXN5bmNEZWxlZ2F0b3IiLCAiX19hc3luY1ZhbHVlcyIsICJfX21ha2VUZW1wbGF0ZU9iamVjdCIsICJfX2ltcG9ydFN0YXIiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCAiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsICJfX2NsYXNzUHJpdmF0ZUZpZWxkSW4iLCAiX19jcmVhdGVCaW5kaW5nIiwgImV4cG9ydHMiLCAidiIsICJtb2R1bGUiLCAidCIsICJlIiwgIm4iLCAiciIsICJpIiwgInMiLCAidSIsICJNIiwgIm0iLCAiaCIsICIkIiwgImwiLCAieSIsICJnIiwgIkQiLCAidiIsICJvIiwgImQiLCAiYSIsICJmIiwgImMiLCAiX19pbXBvcnREZWZhdWx0IiwgIm1vZHVsZSIsICJ0IiwgImUiLCAiaSIsICJyIiwgInMiLCAiX19pbXBvcnREZWZhdWx0IiwgInRleHQiLCAidGV4dCIsICJGaWx0ZXIiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0RGVmYXVsdCIsICJfYSIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0RGVmYXVsdCIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnRTdGFyIiwgIl9faW1wb3J0RGVmYXVsdCIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgInRleHQiLCAidGV4dCIsICJfX2ltcG9ydERlZmF1bHQiLCAidGV4dCIsICJwYXJzZURhdGUiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0RGVmYXVsdCIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0U3RhciIsICJfX2ltcG9ydERlZmF1bHQiLCAidGV4dCIsICJwYXJzZURhdGUiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0U3RhciIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0RGVmYXVsdCIsICJ0ZXh0IiwgInBhcnNlRGF0ZSIsICJ0ZXh0IiwgIl9faW1wb3J0RGVmYXVsdCIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0U3RhciIsICJ0ZXh0IiwgIl9faW1wb3J0RGVmYXVsdCIsICJ0ZXh0IiwgInBhcnNlRGF0ZSIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0U3RhciIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgInRleHQiLCAicGFyc2VEYXRlIiwgIl9faW1wb3J0RGVmYXVsdCIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnRTdGFyIiwgIl9faW1wb3J0RGVmYXVsdCIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0RGVmYXVsdCIsICJ0ZXh0IiwgInBhcnNlRGF0ZSIsICJfX2ltcG9ydERlZmF1bHQiLCAidGV4dCIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0RGVmYXVsdCIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0RGVmYXVsdCIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgInRleHQiLCAicGFyc2VEYXRlIiwgIl9faW1wb3J0RGVmYXVsdCIsICJ0ZXh0IiwgIl9faW1wb3J0RGVmYXVsdCIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0RGVmYXVsdCIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0RGVmYXVsdCIsICJfX2ltcG9ydERlZmF1bHQiLCAidGV4dCIsICJwYXJzZURhdGUiLCAiX19leHBvcnRTdGFyIiwgIl9faW1wb3J0U3RhciIsICJfX2ltcG9ydERlZmF1bHQiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0U3RhciIsICJfX2ltcG9ydFN0YXIiLCAiX19pbXBvcnREZWZhdWx0IiwgIl9faW1wb3J0RGVmYXVsdCIsICJfX2ltcG9ydERlZmF1bHQiLCAidGV4dCIsICJwYXJzZURhdGUiLCAiX19pbXBvcnRTdGFyIiwgIk1lcmlkaWVtIiwgInRleHQiLCAicGFyc2VEYXRlIiwgIk9wZXJhdG9ycyIsICJTdHJ1Y3R1cmFsQ2hhcmFjdGVycyIsICJUb2tlbnMiLCAicmVxdWlyZV9jb25zdCIsICJfX2Fzc2lnbiIsICJyZXF1aXJlX3V0aWxzIiwgIl9fc3ByZWFkQXJyYXlzIiwgIl9fc3ByZWFkQXJyYXlzIiwgInJlcXVpcmVfdXRpbHMiLCAicmVxdWlyZV9jb25zdCIsICJfX3NwcmVhZEFycmF5cyIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJ2YXVsdCIsICJtZXRhZGF0YUNhY2hlIiwgIldlZWtkYXkiLCAiZGF0ZXV0aWwiLCAiSXRlclJlc3VsdCIsICJ0c2xpYiIsICJDYWxsYmFja0l0ZXJSZXN1bHQiLCAiVG9UZXh0IiwgIlBhcnNlciIsICJ0ZXh0IiwgIkZyZXF1ZW5jeSIsICJ0ZXh0IiwgIlRpbWUiLCAiRGF0ZVRpbWUiLCAiYXR0ciIsICJEYXRlV2l0aFpvbmUiLCAiZGVmYXVsdEtleXMiLCAia2V5IiwgInZhbHVlIiwgIkNhY2hlIiwgIml0ZW0iLCAiaSIsICJJdGVyaW5mbyIsICJSUnVsZSIsICJ0ZXh0IiwgInpvbmVkRGF0ZSIsICJERUZBVUxUX09QVElPTlMiLCAidmFsIiwgImluaXRpYWxpemVPcHRpb25zIiwgImRlZmF1bHRLZXlzIiwgIlJSdWxlU2V0IiwgInRleHQiLCAicEVsZW1lbnQiLCAiZWxlbWVudCIsICJDYWNoZSIsICJtZXRhZGF0YUNhY2hlIiwgInZhdWx0IiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiZWxlbWVudCIsICJ0ZXh0IiwgImVsZW1lbnQiLCAiaW5zdGFuY2UiLCAiY3JlYXRlX2ZyYWdtZW50IiwgImF0dHIiLCAiY3R4IiwgInBhcnNlRGF0ZSIsICJwYXJzZWRTdGFydERhdGUiLCAicGFyc2VkU2NoZWR1bGVkRGF0ZSIsICJwYXJzZWREdWVEYXRlIiwgInRhc2siLCAiaW1wb3J0X29ic2lkaWFuIiwgInRhc2siLCAiZWxlbWVudCIsICJfYSIsICJzZWN0aW9uSW5kZXgiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJjaGlsZHJlbiIsICJjaHJvbm8iLCAiYm9vblBhcnNlIiwgImVsZW1lbnQiLCAidGV4dCIsICJpbXBvcnRfb2JzaWRpYW4iLCAidGV4dCIsICJzZXR0aW5ncyIsICJpbXBvcnRfb2JzaWRpYW4iLCAic2V0dGluZ3MiLCAic2V0dGluZ3MiLCAiQ2FjaGUiXQp9Cg==
